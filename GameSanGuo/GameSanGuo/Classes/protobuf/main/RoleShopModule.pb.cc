// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleShopModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoleShopModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_RoleShopModule_2eproto() {
  delete ShopCargoListRequest::default_instance_;
  delete ShopCargoListResponse::default_instance_;
  delete CargoInfo::default_instance_;
  delete CargoBuyRequest::default_instance_;
  delete CargoBuyResponse::default_instance_;
  delete ShopCargoFreshRequest::default_instance_;
  delete ShopCargoFreshResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RoleShopModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RoleShopModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ShopCargoListRequest::default_instance_ = new ShopCargoListRequest();
  ShopCargoListResponse::default_instance_ = new ShopCargoListResponse();
  CargoInfo::default_instance_ = new CargoInfo();
  CargoBuyRequest::default_instance_ = new CargoBuyRequest();
  CargoBuyResponse::default_instance_ = new CargoBuyResponse();
  ShopCargoFreshRequest::default_instance_ = new ShopCargoFreshRequest();
  ShopCargoFreshResponse::default_instance_ = new ShopCargoFreshResponse();
  ShopCargoListRequest::default_instance_->InitAsDefaultInstance();
  ShopCargoListResponse::default_instance_->InitAsDefaultInstance();
  CargoInfo::default_instance_->InitAsDefaultInstance();
  CargoBuyRequest::default_instance_->InitAsDefaultInstance();
  CargoBuyResponse::default_instance_->InitAsDefaultInstance();
  ShopCargoFreshRequest::default_instance_->InitAsDefaultInstance();
  ShopCargoFreshResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoleShopModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RoleShopModule_2eproto_once_);
void protobuf_AddDesc_RoleShopModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RoleShopModule_2eproto_once_,
                 &protobuf_AddDesc_RoleShopModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoleShopModule_2eproto {
  StaticDescriptorInitializer_RoleShopModule_2eproto() {
    protobuf_AddDesc_RoleShopModule_2eproto();
  }
} static_descriptor_initializer_RoleShopModule_2eproto_;
#endif
bool ShopResonseState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCargoListRequest::kShopIdFieldNumber;
#endif  // !_MSC_VER

ShopCargoListRequest::ShopCargoListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopCargoListRequest)
}

void ShopCargoListRequest::InitAsDefaultInstance() {
}

ShopCargoListRequest::ShopCargoListRequest(const ShopCargoListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopCargoListRequest)
}

void ShopCargoListRequest::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCargoListRequest::~ShopCargoListRequest() {
  // @@protoc_insertion_point(destructor:main.ShopCargoListRequest)
  SharedDtor();
}

void ShopCargoListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopCargoListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopCargoListRequest& ShopCargoListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopCargoListRequest* ShopCargoListRequest::default_instance_ = NULL;

ShopCargoListRequest* ShopCargoListRequest::New() const {
  return new ShopCargoListRequest;
}

void ShopCargoListRequest::Clear() {
  shopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopCargoListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopCargoListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shopId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopCargoListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopCargoListRequest)
  return false;
#undef DO_
}

void ShopCargoListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopCargoListRequest)
  // optional int32 shopId = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopCargoListRequest)
}

int ShopCargoListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shopId = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCargoListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopCargoListRequest*>(&from));
}

void ShopCargoListRequest::MergeFrom(const ShopCargoListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopCargoListRequest::CopyFrom(const ShopCargoListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCargoListRequest::IsInitialized() const {

  return true;
}

void ShopCargoListRequest::Swap(ShopCargoListRequest* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopCargoListRequest::GetTypeName() const {
  return "main.ShopCargoListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCargoListResponse::kShopIdFieldNumber;
const int ShopCargoListResponse::kNextFreshTimeFieldNumber;
const int ShopCargoListResponse::kFreshNeedGoldFieldNumber;
const int ShopCargoListResponse::kCargoInfoFieldNumber;
const int ShopCargoListResponse::kShopNameFieldNumber;
const int ShopCargoListResponse::kFreshGoldTypeFieldNumber;
#endif  // !_MSC_VER

ShopCargoListResponse::ShopCargoListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopCargoListResponse)
}

void ShopCargoListResponse::InitAsDefaultInstance() {
}

ShopCargoListResponse::ShopCargoListResponse(const ShopCargoListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopCargoListResponse)
}

void ShopCargoListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shopid_ = 0;
  nextfreshtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freshneedgold_ = 0;
  shopname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freshgoldtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCargoListResponse::~ShopCargoListResponse() {
  // @@protoc_insertion_point(destructor:main.ShopCargoListResponse)
  SharedDtor();
}

void ShopCargoListResponse::SharedDtor() {
  if (nextfreshtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nextfreshtime_;
  }
  if (shopname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shopname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopCargoListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopCargoListResponse& ShopCargoListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopCargoListResponse* ShopCargoListResponse::default_instance_ = NULL;

ShopCargoListResponse* ShopCargoListResponse::New() const {
  return new ShopCargoListResponse;
}

void ShopCargoListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopCargoListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(shopid_, freshneedgold_);
    if (has_nextfreshtime()) {
      if (nextfreshtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nextfreshtime_->clear();
      }
    }
    if (has_shopname()) {
      if (shopname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shopname_->clear();
      }
    }
    freshgoldtype_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cargoinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopCargoListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopCargoListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shopId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nextFreshTime;
        break;
      }

      // optional string nextFreshTime = 2;
      case 2: {
        if (tag == 18) {
         parse_nextFreshTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextfreshtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_freshNeedGold;
        break;
      }

      // optional int32 freshNeedGold = 3;
      case 3: {
        if (tag == 24) {
         parse_freshNeedGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freshneedgold_)));
          set_has_freshneedgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cargoInfo;
        break;
      }

      // repeated .main.CargoInfo cargoInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_cargoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cargoinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cargoInfo;
        if (input->ExpectTag(42)) goto parse_shopName;
        break;
      }

      // optional string shopName = 5;
      case 5: {
        if (tag == 42) {
         parse_shopName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shopname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_freshGoldType;
        break;
      }

      // optional int32 freshGoldType = 6;
      case 6: {
        if (tag == 48) {
         parse_freshGoldType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freshgoldtype_)));
          set_has_freshgoldtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopCargoListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopCargoListResponse)
  return false;
#undef DO_
}

void ShopCargoListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopCargoListResponse)
  // optional int32 shopId = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopid(), output);
  }

  // optional string nextFreshTime = 2;
  if (has_nextfreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nextfreshtime(), output);
  }

  // optional int32 freshNeedGold = 3;
  if (has_freshneedgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freshneedgold(), output);
  }

  // repeated .main.CargoInfo cargoInfo = 4;
  for (int i = 0; i < this->cargoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->cargoinfo(i), output);
  }

  // optional string shopName = 5;
  if (has_shopname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->shopname(), output);
  }

  // optional int32 freshGoldType = 6;
  if (has_freshgoldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freshgoldtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopCargoListResponse)
}

int ShopCargoListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shopId = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // optional string nextFreshTime = 2;
    if (has_nextfreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextfreshtime());
    }

    // optional int32 freshNeedGold = 3;
    if (has_freshneedgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freshneedgold());
    }

    // optional string shopName = 5;
    if (has_shopname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shopname());
    }

    // optional int32 freshGoldType = 6;
    if (has_freshgoldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freshgoldtype());
    }

  }
  // repeated .main.CargoInfo cargoInfo = 4;
  total_size += 1 * this->cargoinfo_size();
  for (int i = 0; i < this->cargoinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cargoinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCargoListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopCargoListResponse*>(&from));
}

void ShopCargoListResponse::MergeFrom(const ShopCargoListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cargoinfo_.MergeFrom(from.cargoinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_nextfreshtime()) {
      set_nextfreshtime(from.nextfreshtime());
    }
    if (from.has_freshneedgold()) {
      set_freshneedgold(from.freshneedgold());
    }
    if (from.has_shopname()) {
      set_shopname(from.shopname());
    }
    if (from.has_freshgoldtype()) {
      set_freshgoldtype(from.freshgoldtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopCargoListResponse::CopyFrom(const ShopCargoListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCargoListResponse::IsInitialized() const {

  return true;
}

void ShopCargoListResponse::Swap(ShopCargoListResponse* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(nextfreshtime_, other->nextfreshtime_);
    std::swap(freshneedgold_, other->freshneedgold_);
    cargoinfo_.Swap(&other->cargoinfo_);
    std::swap(shopname_, other->shopname_);
    std::swap(freshgoldtype_, other->freshgoldtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopCargoListResponse::GetTypeName() const {
  return "main.ShopCargoListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CargoInfo::kCargoIdFieldNumber;
const int CargoInfo::kPriceTypeFieldNumber;
const int CargoInfo::kPriceFieldNumber;
const int CargoInfo::kCurPriceFieldNumber;
const int CargoInfo::kItemTypeFieldNumber;
const int CargoInfo::kItemIdFieldNumber;
const int CargoInfo::kItemCountFieldNumber;
const int CargoInfo::kCargoTagFieldNumber;
const int CargoInfo::kCargoStateFieldNumber;
#endif  // !_MSC_VER

CargoInfo::CargoInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CargoInfo)
}

void CargoInfo::InitAsDefaultInstance() {
}

CargoInfo::CargoInfo(const CargoInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CargoInfo)
}

void CargoInfo::SharedCtor() {
  _cached_size_ = 0;
  cargoid_ = 0;
  pricetype_ = 0;
  price_ = 0;
  curprice_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  itemcount_ = 0;
  cargotag_ = 0;
  cargostate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CargoInfo::~CargoInfo() {
  // @@protoc_insertion_point(destructor:main.CargoInfo)
  SharedDtor();
}

void CargoInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CargoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CargoInfo& CargoInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleShopModule_2eproto();
#endif
  return *default_instance_;
}

CargoInfo* CargoInfo::default_instance_ = NULL;

CargoInfo* CargoInfo::New() const {
  return new CargoInfo;
}

void CargoInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CargoInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cargoid_, cargotag_);
  }
  cargostate_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CargoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CargoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 cargoId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cargoid_)));
          set_has_cargoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_priceType;
        break;
      }

      // optional sint32 priceType = 2;
      case 2: {
        if (tag == 16) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional sint32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curPrice;
        break;
      }

      // optional sint32 curPrice = 4;
      case 4: {
        if (tag == 32) {
         parse_curPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curprice_)));
          set_has_curprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemType;
        break;
      }

      // optional sint32 itemType = 5;
      case 5: {
        if (tag == 40) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_itemId;
        break;
      }

      // optional sint32 itemId = 6;
      case 6: {
        if (tag == 48) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_itemCount;
        break;
      }

      // optional sint32 itemCount = 7;
      case 7: {
        if (tag == 56) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cargoTag;
        break;
      }

      // optional sint32 cargoTag = 8;
      case 8: {
        if (tag == 64) {
         parse_cargoTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cargotag_)));
          set_has_cargotag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cargoState;
        break;
      }

      // optional sint32 cargoState = 9;
      case 9: {
        if (tag == 72) {
         parse_cargoState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cargostate_)));
          set_has_cargostate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CargoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CargoInfo)
  return false;
#undef DO_
}

void CargoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CargoInfo)
  // optional sint32 cargoId = 1;
  if (has_cargoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->cargoid(), output);
  }

  // optional sint32 priceType = 2;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->pricetype(), output);
  }

  // optional sint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->price(), output);
  }

  // optional sint32 curPrice = 4;
  if (has_curprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->curprice(), output);
  }

  // optional sint32 itemType = 5;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->itemtype(), output);
  }

  // optional sint32 itemId = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->itemid(), output);
  }

  // optional sint32 itemCount = 7;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->itemcount(), output);
  }

  // optional sint32 cargoTag = 8;
  if (has_cargotag()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->cargotag(), output);
  }

  // optional sint32 cargoState = 9;
  if (has_cargostate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->cargostate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CargoInfo)
}

int CargoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 cargoId = 1;
    if (has_cargoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cargoid());
    }

    // optional sint32 priceType = 2;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->pricetype());
    }

    // optional sint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->price());
    }

    // optional sint32 curPrice = 4;
    if (has_curprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->curprice());
    }

    // optional sint32 itemType = 5;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemtype());
    }

    // optional sint32 itemId = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemid());
    }

    // optional sint32 itemCount = 7;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemcount());
    }

    // optional sint32 cargoTag = 8;
    if (has_cargotag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cargotag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 cargoState = 9;
    if (has_cargostate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cargostate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CargoInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CargoInfo*>(&from));
}

void CargoInfo::MergeFrom(const CargoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cargoid()) {
      set_cargoid(from.cargoid());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_curprice()) {
      set_curprice(from.curprice());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_cargotag()) {
      set_cargotag(from.cargotag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cargostate()) {
      set_cargostate(from.cargostate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CargoInfo::CopyFrom(const CargoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CargoInfo::IsInitialized() const {

  return true;
}

void CargoInfo::Swap(CargoInfo* other) {
  if (other != this) {
    std::swap(cargoid_, other->cargoid_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(curprice_, other->curprice_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(cargotag_, other->cargotag_);
    std::swap(cargostate_, other->cargostate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CargoInfo::GetTypeName() const {
  return "main.CargoInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CargoBuyRequest::kCargoIdFieldNumber;
const int CargoBuyRequest::kShopIdFieldNumber;
#endif  // !_MSC_VER

CargoBuyRequest::CargoBuyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CargoBuyRequest)
}

void CargoBuyRequest::InitAsDefaultInstance() {
}

CargoBuyRequest::CargoBuyRequest(const CargoBuyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CargoBuyRequest)
}

void CargoBuyRequest::SharedCtor() {
  _cached_size_ = 0;
  cargoid_ = 0;
  shopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CargoBuyRequest::~CargoBuyRequest() {
  // @@protoc_insertion_point(destructor:main.CargoBuyRequest)
  SharedDtor();
}

void CargoBuyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CargoBuyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CargoBuyRequest& CargoBuyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleShopModule_2eproto();
#endif
  return *default_instance_;
}

CargoBuyRequest* CargoBuyRequest::default_instance_ = NULL;

CargoBuyRequest* CargoBuyRequest::New() const {
  return new CargoBuyRequest;
}

void CargoBuyRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CargoBuyRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cargoid_, shopid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CargoBuyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CargoBuyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 cargoId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cargoid_)));
          set_has_cargoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopId;
        break;
      }

      // optional int32 shopId = 2;
      case 2: {
        if (tag == 16) {
         parse_shopId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CargoBuyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CargoBuyRequest)
  return false;
#undef DO_
}

void CargoBuyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CargoBuyRequest)
  // optional sint32 cargoId = 1;
  if (has_cargoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->cargoid(), output);
  }

  // optional int32 shopId = 2;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shopid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CargoBuyRequest)
}

int CargoBuyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 cargoId = 1;
    if (has_cargoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cargoid());
    }

    // optional int32 shopId = 2;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CargoBuyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CargoBuyRequest*>(&from));
}

void CargoBuyRequest::MergeFrom(const CargoBuyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cargoid()) {
      set_cargoid(from.cargoid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CargoBuyRequest::CopyFrom(const CargoBuyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CargoBuyRequest::IsInitialized() const {

  return true;
}

void CargoBuyRequest::Swap(CargoBuyRequest* other) {
  if (other != this) {
    std::swap(cargoid_, other->cargoid_);
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CargoBuyRequest::GetTypeName() const {
  return "main.CargoBuyRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CargoBuyResponse::kStateFieldNumber;
const int CargoBuyResponse::kShopIdFieldNumber;
const int CargoBuyResponse::kCargoIdFieldNumber;
#endif  // !_MSC_VER

CargoBuyResponse::CargoBuyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CargoBuyResponse)
}

void CargoBuyResponse::InitAsDefaultInstance() {
}

CargoBuyResponse::CargoBuyResponse(const CargoBuyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CargoBuyResponse)
}

void CargoBuyResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  shopid_ = 0;
  cargoid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CargoBuyResponse::~CargoBuyResponse() {
  // @@protoc_insertion_point(destructor:main.CargoBuyResponse)
  SharedDtor();
}

void CargoBuyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CargoBuyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CargoBuyResponse& CargoBuyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleShopModule_2eproto();
#endif
  return *default_instance_;
}

CargoBuyResponse* CargoBuyResponse::default_instance_ = NULL;

CargoBuyResponse* CargoBuyResponse::New() const {
  return new CargoBuyResponse;
}

void CargoBuyResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CargoBuyResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, cargoid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CargoBuyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CargoBuyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.ShopResonseState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::ShopResonseState_IsValid(value)) {
            set_state(static_cast< ::main::ShopResonseState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopId;
        break;
      }

      // optional int32 shopId = 2;
      case 2: {
        if (tag == 16) {
         parse_shopId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cargoId;
        break;
      }

      // optional sint32 cargoId = 3;
      case 3: {
        if (tag == 24) {
         parse_cargoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cargoid_)));
          set_has_cargoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CargoBuyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CargoBuyResponse)
  return false;
#undef DO_
}

void CargoBuyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CargoBuyResponse)
  // required .main.ShopResonseState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional int32 shopId = 2;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shopid(), output);
  }

  // optional sint32 cargoId = 3;
  if (has_cargoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->cargoid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CargoBuyResponse)
}

int CargoBuyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.ShopResonseState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 shopId = 2;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // optional sint32 cargoId = 3;
    if (has_cargoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cargoid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CargoBuyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CargoBuyResponse*>(&from));
}

void CargoBuyResponse::MergeFrom(const CargoBuyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_cargoid()) {
      set_cargoid(from.cargoid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CargoBuyResponse::CopyFrom(const CargoBuyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CargoBuyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CargoBuyResponse::Swap(CargoBuyResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(shopid_, other->shopid_);
    std::swap(cargoid_, other->cargoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CargoBuyResponse::GetTypeName() const {
  return "main.CargoBuyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCargoFreshRequest::kShopIdFieldNumber;
#endif  // !_MSC_VER

ShopCargoFreshRequest::ShopCargoFreshRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopCargoFreshRequest)
}

void ShopCargoFreshRequest::InitAsDefaultInstance() {
}

ShopCargoFreshRequest::ShopCargoFreshRequest(const ShopCargoFreshRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopCargoFreshRequest)
}

void ShopCargoFreshRequest::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCargoFreshRequest::~ShopCargoFreshRequest() {
  // @@protoc_insertion_point(destructor:main.ShopCargoFreshRequest)
  SharedDtor();
}

void ShopCargoFreshRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopCargoFreshRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopCargoFreshRequest& ShopCargoFreshRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopCargoFreshRequest* ShopCargoFreshRequest::default_instance_ = NULL;

ShopCargoFreshRequest* ShopCargoFreshRequest::New() const {
  return new ShopCargoFreshRequest;
}

void ShopCargoFreshRequest::Clear() {
  shopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopCargoFreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopCargoFreshRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shopId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopCargoFreshRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopCargoFreshRequest)
  return false;
#undef DO_
}

void ShopCargoFreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopCargoFreshRequest)
  // optional int32 shopId = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopCargoFreshRequest)
}

int ShopCargoFreshRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shopId = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCargoFreshRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopCargoFreshRequest*>(&from));
}

void ShopCargoFreshRequest::MergeFrom(const ShopCargoFreshRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopCargoFreshRequest::CopyFrom(const ShopCargoFreshRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCargoFreshRequest::IsInitialized() const {

  return true;
}

void ShopCargoFreshRequest::Swap(ShopCargoFreshRequest* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopCargoFreshRequest::GetTypeName() const {
  return "main.ShopCargoFreshRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCargoFreshResponse::kStateFieldNumber;
const int ShopCargoFreshResponse::kNewInfoFieldNumber;
#endif  // !_MSC_VER

ShopCargoFreshResponse::ShopCargoFreshResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopCargoFreshResponse)
}

void ShopCargoFreshResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  newinfo_ = const_cast< ::main::ShopCargoListResponse*>(
      ::main::ShopCargoListResponse::internal_default_instance());
#else
  newinfo_ = const_cast< ::main::ShopCargoListResponse*>(&::main::ShopCargoListResponse::default_instance());
#endif
}

ShopCargoFreshResponse::ShopCargoFreshResponse(const ShopCargoFreshResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopCargoFreshResponse)
}

void ShopCargoFreshResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  newinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCargoFreshResponse::~ShopCargoFreshResponse() {
  // @@protoc_insertion_point(destructor:main.ShopCargoFreshResponse)
  SharedDtor();
}

void ShopCargoFreshResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete newinfo_;
  }
}

void ShopCargoFreshResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopCargoFreshResponse& ShopCargoFreshResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopCargoFreshResponse* ShopCargoFreshResponse::default_instance_ = NULL;

ShopCargoFreshResponse* ShopCargoFreshResponse::New() const {
  return new ShopCargoFreshResponse;
}

void ShopCargoFreshResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_newinfo()) {
      if (newinfo_ != NULL) newinfo_->::main::ShopCargoListResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopCargoFreshResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopCargoFreshResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.ShopResonseState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::ShopResonseState_IsValid(value)) {
            set_state(static_cast< ::main::ShopResonseState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newInfo;
        break;
      }

      // optional .main.ShopCargoListResponse newInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_newInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopCargoFreshResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopCargoFreshResponse)
  return false;
#undef DO_
}

void ShopCargoFreshResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopCargoFreshResponse)
  // required .main.ShopResonseState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .main.ShopCargoListResponse newInfo = 2;
  if (has_newinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->newinfo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopCargoFreshResponse)
}

int ShopCargoFreshResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.ShopResonseState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .main.ShopCargoListResponse newInfo = 2;
    if (has_newinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newinfo());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCargoFreshResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopCargoFreshResponse*>(&from));
}

void ShopCargoFreshResponse::MergeFrom(const ShopCargoFreshResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_newinfo()) {
      mutable_newinfo()->::main::ShopCargoListResponse::MergeFrom(from.newinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopCargoFreshResponse::CopyFrom(const ShopCargoFreshResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCargoFreshResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShopCargoFreshResponse::Swap(ShopCargoFreshResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(newinfo_, other->newinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopCargoFreshResponse::GetTypeName() const {
  return "main.ShopCargoFreshResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
