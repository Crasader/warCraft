// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XiyuModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "XiyuModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_XiyuModule_2eproto() {
  delete XiyuInfoRequest::default_instance_;
  delete XiyuInfoResponse::default_instance_;
  delete XiyuBuyRequest::default_instance_;
  delete XiyuBuyResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_XiyuModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_XiyuModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  XiyuInfoRequest::default_instance_ = new XiyuInfoRequest();
  XiyuInfoResponse::default_instance_ = new XiyuInfoResponse();
  XiyuBuyRequest::default_instance_ = new XiyuBuyRequest();
  XiyuBuyResponse::default_instance_ = new XiyuBuyResponse();
  XiyuInfoRequest::default_instance_->InitAsDefaultInstance();
  XiyuInfoResponse::default_instance_->InitAsDefaultInstance();
  XiyuBuyRequest::default_instance_->InitAsDefaultInstance();
  XiyuBuyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_XiyuModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_XiyuModule_2eproto_once_);
void protobuf_AddDesc_XiyuModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_XiyuModule_2eproto_once_,
                 &protobuf_AddDesc_XiyuModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_XiyuModule_2eproto {
  StaticDescriptorInitializer_XiyuModule_2eproto() {
    protobuf_AddDesc_XiyuModule_2eproto();
  }
} static_descriptor_initializer_XiyuModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

XiyuInfoRequest::XiyuInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.XiyuInfoRequest)
}

void XiyuInfoRequest::InitAsDefaultInstance() {
}

XiyuInfoRequest::XiyuInfoRequest(const XiyuInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.XiyuInfoRequest)
}

void XiyuInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XiyuInfoRequest::~XiyuInfoRequest() {
  // @@protoc_insertion_point(destructor:main.XiyuInfoRequest)
  SharedDtor();
}

void XiyuInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XiyuInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XiyuInfoRequest& XiyuInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XiyuModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XiyuModule_2eproto();
#endif
  return *default_instance_;
}

XiyuInfoRequest* XiyuInfoRequest::default_instance_ = NULL;

XiyuInfoRequest* XiyuInfoRequest::New() const {
  return new XiyuInfoRequest;
}

void XiyuInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool XiyuInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.XiyuInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.XiyuInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.XiyuInfoRequest)
  return false;
#undef DO_
}

void XiyuInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.XiyuInfoRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.XiyuInfoRequest)
}

int XiyuInfoRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XiyuInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XiyuInfoRequest*>(&from));
}

void XiyuInfoRequest::MergeFrom(const XiyuInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void XiyuInfoRequest::CopyFrom(const XiyuInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XiyuInfoRequest::IsInitialized() const {

  return true;
}

void XiyuInfoRequest::Swap(XiyuInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XiyuInfoRequest::GetTypeName() const {
  return "main.XiyuInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int XiyuInfoResponse::kStateFieldNumber;
const int XiyuInfoResponse::kTimeFieldNumber;
const int XiyuInfoResponse::kGoodsFieldNumber;
#endif  // !_MSC_VER

XiyuInfoResponse::XiyuInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.XiyuInfoResponse)
}

void XiyuInfoResponse::InitAsDefaultInstance() {
}

XiyuInfoResponse::XiyuInfoResponse(const XiyuInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.XiyuInfoResponse)
}

void XiyuInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XiyuInfoResponse::~XiyuInfoResponse() {
  // @@protoc_insertion_point(destructor:main.XiyuInfoResponse)
  SharedDtor();
}

void XiyuInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XiyuInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XiyuInfoResponse& XiyuInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XiyuModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XiyuModule_2eproto();
#endif
  return *default_instance_;
}

XiyuInfoResponse* XiyuInfoResponse::default_instance_ = NULL;

XiyuInfoResponse* XiyuInfoResponse::New() const {
  return new XiyuInfoResponse;
}

void XiyuInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<XiyuInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool XiyuInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.XiyuInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        break;
      }

      // repeated .main.GoodsDataProto goods = 3;
      case 3: {
        if (tag == 26) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.XiyuInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.XiyuInfoResponse)
  return false;
#undef DO_
}

void XiyuInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.XiyuInfoResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // repeated .main.GoodsDataProto goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->goods(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.XiyuInfoResponse)
}

int XiyuInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated .main.GoodsDataProto goods = 3;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XiyuInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XiyuInfoResponse*>(&from));
}

void XiyuInfoResponse::MergeFrom(const XiyuInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void XiyuInfoResponse::CopyFrom(const XiyuInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XiyuInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->goods())) return false;
  return true;
}

void XiyuInfoResponse::Swap(XiyuInfoResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XiyuInfoResponse::GetTypeName() const {
  return "main.XiyuInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int XiyuBuyRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

XiyuBuyRequest::XiyuBuyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.XiyuBuyRequest)
}

void XiyuBuyRequest::InitAsDefaultInstance() {
}

XiyuBuyRequest::XiyuBuyRequest(const XiyuBuyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.XiyuBuyRequest)
}

void XiyuBuyRequest::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XiyuBuyRequest::~XiyuBuyRequest() {
  // @@protoc_insertion_point(destructor:main.XiyuBuyRequest)
  SharedDtor();
}

void XiyuBuyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XiyuBuyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XiyuBuyRequest& XiyuBuyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XiyuModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XiyuModule_2eproto();
#endif
  return *default_instance_;
}

XiyuBuyRequest* XiyuBuyRequest::default_instance_ = NULL;

XiyuBuyRequest* XiyuBuyRequest::New() const {
  return new XiyuBuyRequest;
}

void XiyuBuyRequest::Clear() {
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool XiyuBuyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.XiyuBuyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.XiyuBuyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.XiyuBuyRequest)
  return false;
#undef DO_
}

void XiyuBuyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.XiyuBuyRequest)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.XiyuBuyRequest)
}

int XiyuBuyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XiyuBuyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XiyuBuyRequest*>(&from));
}

void XiyuBuyRequest::MergeFrom(const XiyuBuyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void XiyuBuyRequest::CopyFrom(const XiyuBuyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XiyuBuyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void XiyuBuyRequest::Swap(XiyuBuyRequest* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XiyuBuyRequest::GetTypeName() const {
  return "main.XiyuBuyRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int XiyuBuyResponse::kStateFieldNumber;
const int XiyuBuyResponse::kHintFieldNumber;
#endif  // !_MSC_VER

XiyuBuyResponse::XiyuBuyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.XiyuBuyResponse)
}

void XiyuBuyResponse::InitAsDefaultInstance() {
}

XiyuBuyResponse::XiyuBuyResponse(const XiyuBuyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.XiyuBuyResponse)
}

void XiyuBuyResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XiyuBuyResponse::~XiyuBuyResponse() {
  // @@protoc_insertion_point(destructor:main.XiyuBuyResponse)
  SharedDtor();
}

void XiyuBuyResponse::SharedDtor() {
  if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hint_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XiyuBuyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XiyuBuyResponse& XiyuBuyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_XiyuModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_XiyuModule_2eproto();
#endif
  return *default_instance_;
}

XiyuBuyResponse* XiyuBuyResponse::default_instance_ = NULL;

XiyuBuyResponse* XiyuBuyResponse::New() const {
  return new XiyuBuyResponse;
}

void XiyuBuyResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_hint()) {
      if (hint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool XiyuBuyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.XiyuBuyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hint;
        break;
      }

      // optional string hint = 2;
      case 2: {
        if (tag == 18) {
         parse_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.XiyuBuyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.XiyuBuyResponse)
  return false;
#undef DO_
}

void XiyuBuyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.XiyuBuyResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string hint = 2;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hint(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.XiyuBuyResponse)
}

int XiyuBuyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string hint = 2;
    if (has_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hint());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XiyuBuyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XiyuBuyResponse*>(&from));
}

void XiyuBuyResponse::MergeFrom(const XiyuBuyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hint()) {
      set_hint(from.hint());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void XiyuBuyResponse::CopyFrom(const XiyuBuyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XiyuBuyResponse::IsInitialized() const {

  return true;
}

void XiyuBuyResponse::Swap(XiyuBuyResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(hint_, other->hint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XiyuBuyResponse::GetTypeName() const {
  return "main.XiyuBuyResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
