// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RankModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_RankModule_2eproto() {
  delete RankRequest::default_instance_;
  delete RankResponse::default_instance_;
  delete RankProto::default_instance_;
  delete PvpOldRankRequest::default_instance_;
  delete PvpOldRankResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RankModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RankModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RankRequest::default_instance_ = new RankRequest();
  RankResponse::default_instance_ = new RankResponse();
  RankProto::default_instance_ = new RankProto();
  PvpOldRankRequest::default_instance_ = new PvpOldRankRequest();
  PvpOldRankResponse::default_instance_ = new PvpOldRankResponse();
  RankRequest::default_instance_->InitAsDefaultInstance();
  RankResponse::default_instance_->InitAsDefaultInstance();
  RankProto::default_instance_->InitAsDefaultInstance();
  PvpOldRankRequest::default_instance_->InitAsDefaultInstance();
  PvpOldRankResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RankModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RankModule_2eproto_once_);
void protobuf_AddDesc_RankModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RankModule_2eproto_once_,
                 &protobuf_AddDesc_RankModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RankModule_2eproto {
  StaticDescriptorInitializer_RankModule_2eproto() {
    protobuf_AddDesc_RankModule_2eproto();
  }
} static_descriptor_initializer_RankModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RankRequest::kTypeFieldNumber;
const int RankRequest::kNationIdFieldNumber;
const int RankRequest::kPageFieldNumber;
#endif  // !_MSC_VER

RankRequest::RankRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RankRequest)
}

void RankRequest::InitAsDefaultInstance() {
}

RankRequest::RankRequest(const RankRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RankRequest)
}

void RankRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  nationid_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRequest::~RankRequest() {
  // @@protoc_insertion_point(destructor:main.RankRequest)
  SharedDtor();
}

void RankRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankRequest& RankRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RankModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RankModule_2eproto();
#endif
  return *default_instance_;
}

RankRequest* RankRequest::default_instance_ = NULL;

RankRequest* RankRequest::New() const {
  return new RankRequest;
}

void RankRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, page_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RankRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nationId;
        break;
      }

      // optional int32 nationId = 2;
      case 2: {
        if (tag == 16) {
         parse_nationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nationid_)));
          set_has_nationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }

      // optional int32 page = 3;
      case 3: {
        if (tag == 24) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RankRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RankRequest)
  return false;
#undef DO_
}

void RankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RankRequest)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 nationId = 2;
  if (has_nationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nationid(), output);
  }

  // optional int32 page = 3;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RankRequest)
}

int RankRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 nationId = 2;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nationid());
    }

    // optional int32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankRequest*>(&from));
}

void RankRequest::MergeFrom(const RankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nationid()) {
      set_nationid(from.nationid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RankRequest::CopyFrom(const RankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRequest::IsInitialized() const {

  return true;
}

void RankRequest::Swap(RankRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(nationid_, other->nationid_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankRequest::GetTypeName() const {
  return "main.RankRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RankResponse::kRankInfoFieldNumber;
const int RankResponse::kRankInfosFieldNumber;
#endif  // !_MSC_VER

RankResponse::RankResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RankResponse)
}

void RankResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankinfo_ = const_cast< ::main::RankProto*>(
      ::main::RankProto::internal_default_instance());
#else
  rankinfo_ = const_cast< ::main::RankProto*>(&::main::RankProto::default_instance());
#endif
}

RankResponse::RankResponse(const RankResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RankResponse)
}

void RankResponse::SharedCtor() {
  _cached_size_ = 0;
  rankinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankResponse::~RankResponse() {
  // @@protoc_insertion_point(destructor:main.RankResponse)
  SharedDtor();
}

void RankResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rankinfo_;
  }
}

void RankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankResponse& RankResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RankModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RankModule_2eproto();
#endif
  return *default_instance_;
}

RankResponse* RankResponse::default_instance_ = NULL;

RankResponse* RankResponse::New() const {
  return new RankResponse;
}

void RankResponse::Clear() {
  if (has_rankinfo()) {
    if (rankinfo_ != NULL) rankinfo_->::main::RankProto::Clear();
  }
  rankinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RankResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.RankProto RankInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankInfos;
        break;
      }

      // repeated .main.RankProto RankInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_RankInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RankResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RankResponse)
  return false;
#undef DO_
}

void RankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RankResponse)
  // optional .main.RankProto RankInfo = 1;
  if (has_rankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rankinfo(), output);
  }

  // repeated .main.RankProto RankInfos = 2;
  for (int i = 0; i < this->rankinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rankinfos(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RankResponse)
}

int RankResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.RankProto RankInfo = 1;
    if (has_rankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankinfo());
    }

  }
  // repeated .main.RankProto RankInfos = 2;
  total_size += 1 * this->rankinfos_size();
  for (int i = 0; i < this->rankinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfos(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankResponse*>(&from));
}

void RankResponse::MergeFrom(const RankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfos_.MergeFrom(from.rankinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankinfo()) {
      mutable_rankinfo()->::main::RankProto::MergeFrom(from.rankinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RankResponse::CopyFrom(const RankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankResponse::IsInitialized() const {

  return true;
}

void RankResponse::Swap(RankResponse* other) {
  if (other != this) {
    std::swap(rankinfo_, other->rankinfo_);
    rankinfos_.Swap(&other->rankinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankResponse::GetTypeName() const {
  return "main.RankResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RankProto::kRoleIdFieldNumber;
const int RankProto::kNicknameFieldNumber;
const int RankProto::kNationFieldNumber;
const int RankProto::kHeadIdFieldNumber;
const int RankProto::kValueFieldNumber;
const int RankProto::kAreaIdFieldNumber;
const int RankProto::kAreaNameFieldNumber;
const int RankProto::kRankingFieldNumber;
#endif  // !_MSC_VER

RankProto::RankProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RankProto)
}

void RankProto::InitAsDefaultInstance() {
}

RankProto::RankProto(const RankProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RankProto)
}

void RankProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nation_ = 0;
  headid_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  areaid_ = 0;
  areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankProto::~RankProto() {
  // @@protoc_insertion_point(destructor:main.RankProto)
  SharedDtor();
}

void RankProto::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete areaname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankProto& RankProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RankModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RankModule_2eproto();
#endif
  return *default_instance_;
}

RankProto* RankProto::default_instance_ = NULL;

RankProto* RankProto::New() const {
  return new RankProto;
}

void RankProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, areaid_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_areaname()) {
      if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        areaname_->clear();
      }
    }
    ranking_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RankProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nation;
        break;
      }

      // optional int32 nation = 3;
      case 3: {
        if (tag == 24) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_headId;
        break;
      }

      // optional int32 headId = 4;
      case 4: {
        if (tag == 32) {
         parse_headId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional int64 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_areaId;
        break;
      }

      // optional int32 areaId = 6;
      case 6: {
        if (tag == 48) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_areaName;
        break;
      }

      // optional string areaName = 7;
      case 7: {
        if (tag == 58) {
         parse_areaName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areaname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 8;
      case 8: {
        if (tag == 64) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RankProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RankProto)
  return false;
#undef DO_
}

void RankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RankProto)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 nation = 3;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nation(), output);
  }

  // optional int32 headId = 4;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headid(), output);
  }

  // optional int64 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->value(), output);
  }

  // optional int32 areaId = 6;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->areaid(), output);
  }

  // optional string areaName = 7;
  if (has_areaname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->areaname(), output);
  }

  // optional int32 ranking = 8;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ranking(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RankProto)
}

int RankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 nation = 3;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional int32 headId = 4;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional int64 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int32 areaId = 6;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional string areaName = 7;
    if (has_areaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areaname());
    }

    // optional int32 ranking = 8;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankProto*>(&from));
}

void RankProto::MergeFrom(const RankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_areaname()) {
      set_areaname(from.areaname());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RankProto::CopyFrom(const RankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankProto::IsInitialized() const {

  return true;
}

void RankProto::Swap(RankProto* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(nickname_, other->nickname_);
    std::swap(nation_, other->nation_);
    std::swap(headid_, other->headid_);
    std::swap(value_, other->value_);
    std::swap(areaid_, other->areaid_);
    std::swap(areaname_, other->areaname_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankProto::GetTypeName() const {
  return "main.RankProto";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpOldRankRequest::PvpOldRankRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpOldRankRequest)
}

void PvpOldRankRequest::InitAsDefaultInstance() {
}

PvpOldRankRequest::PvpOldRankRequest(const PvpOldRankRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpOldRankRequest)
}

void PvpOldRankRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpOldRankRequest::~PvpOldRankRequest() {
  // @@protoc_insertion_point(destructor:main.PvpOldRankRequest)
  SharedDtor();
}

void PvpOldRankRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpOldRankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpOldRankRequest& PvpOldRankRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RankModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RankModule_2eproto();
#endif
  return *default_instance_;
}

PvpOldRankRequest* PvpOldRankRequest::default_instance_ = NULL;

PvpOldRankRequest* PvpOldRankRequest::New() const {
  return new PvpOldRankRequest;
}

void PvpOldRankRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpOldRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpOldRankRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpOldRankRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpOldRankRequest)
  return false;
#undef DO_
}

void PvpOldRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpOldRankRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpOldRankRequest)
}

int PvpOldRankRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpOldRankRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpOldRankRequest*>(&from));
}

void PvpOldRankRequest::MergeFrom(const PvpOldRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpOldRankRequest::CopyFrom(const PvpOldRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpOldRankRequest::IsInitialized() const {

  return true;
}

void PvpOldRankRequest::Swap(PvpOldRankRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpOldRankRequest::GetTypeName() const {
  return "main.PvpOldRankRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpOldRankResponse::kSeasonCountFieldNumber;
const int PvpOldRankResponse::kRankInfosFieldNumber;
#endif  // !_MSC_VER

PvpOldRankResponse::PvpOldRankResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpOldRankResponse)
}

void PvpOldRankResponse::InitAsDefaultInstance() {
}

PvpOldRankResponse::PvpOldRankResponse(const PvpOldRankResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpOldRankResponse)
}

void PvpOldRankResponse::SharedCtor() {
  _cached_size_ = 0;
  seasoncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpOldRankResponse::~PvpOldRankResponse() {
  // @@protoc_insertion_point(destructor:main.PvpOldRankResponse)
  SharedDtor();
}

void PvpOldRankResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpOldRankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpOldRankResponse& PvpOldRankResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RankModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RankModule_2eproto();
#endif
  return *default_instance_;
}

PvpOldRankResponse* PvpOldRankResponse::default_instance_ = NULL;

PvpOldRankResponse* PvpOldRankResponse::New() const {
  return new PvpOldRankResponse;
}

void PvpOldRankResponse::Clear() {
  seasoncount_ = 0;
  rankinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpOldRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpOldRankResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seasonCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seasoncount_)));
          set_has_seasoncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankInfos;
        break;
      }

      // repeated .main.RankProto RankInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_RankInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpOldRankResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpOldRankResponse)
  return false;
#undef DO_
}

void PvpOldRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpOldRankResponse)
  // optional int32 seasonCount = 1;
  if (has_seasoncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seasoncount(), output);
  }

  // repeated .main.RankProto RankInfos = 2;
  for (int i = 0; i < this->rankinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rankinfos(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpOldRankResponse)
}

int PvpOldRankResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seasonCount = 1;
    if (has_seasoncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seasoncount());
    }

  }
  // repeated .main.RankProto RankInfos = 2;
  total_size += 1 * this->rankinfos_size();
  for (int i = 0; i < this->rankinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfos(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpOldRankResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpOldRankResponse*>(&from));
}

void PvpOldRankResponse::MergeFrom(const PvpOldRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfos_.MergeFrom(from.rankinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasoncount()) {
      set_seasoncount(from.seasoncount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpOldRankResponse::CopyFrom(const PvpOldRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpOldRankResponse::IsInitialized() const {

  return true;
}

void PvpOldRankResponse::Swap(PvpOldRankResponse* other) {
  if (other != this) {
    std::swap(seasoncount_, other->seasoncount_);
    rankinfos_.Swap(&other->rankinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpOldRankResponse::GetTypeName() const {
  return "main.PvpOldRankResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
