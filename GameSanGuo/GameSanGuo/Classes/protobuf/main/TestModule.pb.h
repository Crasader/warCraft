// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestModule.proto

#ifndef PROTOBUF_TestModule_2eproto__INCLUDED
#define PROTOBUF_TestModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TestModule_2eproto();
void protobuf_AssignDesc_TestModule_2eproto();
void protobuf_ShutdownFile_TestModule_2eproto();

class TestRequest;
class TestResponse;

// ===================================================================

class TestRequest : public ::google::protobuf::MessageLite {
 public:
  TestRequest();
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const TestRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TestRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TestRequest* other);

  // implements Message ----------------------------------------------

  TestRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1 [default = "zpcMan"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 4;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 4;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:main.TestRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::std::string* name_;
  ::std::string* password_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TestModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TestModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_TestModule_2eproto();
  friend void protobuf_ShutdownFile_TestModule_2eproto();

  void InitAsDefaultInstance();
  static TestRequest* default_instance_;
};
// -------------------------------------------------------------------

class TestResponse : public ::google::protobuf::MessageLite {
 public:
  TestResponse();
  virtual ~TestResponse();

  TestResponse(const TestResponse& from);

  inline TestResponse& operator=(const TestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const TestResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TestResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TestResponse* other);

  // implements Message ----------------------------------------------

  TestResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TestResponse& from);
  void MergeFrom(const TestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1 [default = 0];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional string failMsg = 2;
  inline bool has_failmsg() const;
  inline void clear_failmsg();
  static const int kFailMsgFieldNumber = 2;
  inline const ::std::string& failmsg() const;
  inline void set_failmsg(const ::std::string& value);
  inline void set_failmsg(const char* value);
  inline void set_failmsg(const char* value, size_t size);
  inline ::std::string* mutable_failmsg();
  inline ::std::string* release_failmsg();
  inline void set_allocated_failmsg(::std::string* failmsg);

  // @@protoc_insertion_point(class_scope:main.TestResponse)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_failmsg();
  inline void clear_has_failmsg();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* failmsg_;
  ::google::protobuf::int32 state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TestModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TestModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_TestModule_2eproto();
  friend void protobuf_ShutdownFile_TestModule_2eproto();

  void InitAsDefaultInstance();
  static TestResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// TestRequest

// required string name = 1 [default = "zpcMan"];
inline bool TestRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestRequest::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& TestRequest::name() const {
  // @@protoc_insertion_point(field_get:main.TestRequest.name)
  return *name_;
}
inline void TestRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:main.TestRequest.name)
}
inline void TestRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.TestRequest.name)
}
inline void TestRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.TestRequest.name)
}
inline ::std::string* TestRequest::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  // @@protoc_insertion_point(field_mutable:main.TestRequest.name)
  return name_;
}
inline ::std::string* TestRequest::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void TestRequest::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:main.TestRequest.name)
}

// required string password = 2;
inline bool TestRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& TestRequest::password() const {
  // @@protoc_insertion_point(field_get:main.TestRequest.password)
  return *password_;
}
inline void TestRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:main.TestRequest.password)
}
inline void TestRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.TestRequest.password)
}
inline void TestRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.TestRequest.password)
}
inline ::std::string* TestRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.TestRequest.password)
  return password_;
}
inline ::std::string* TestRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.TestRequest.password)
}

// required int32 id = 3;
inline bool TestRequest::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestRequest::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TestRequest::id() const {
  // @@protoc_insertion_point(field_get:main.TestRequest.id)
  return id_;
}
inline void TestRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:main.TestRequest.id)
}

// optional string email = 4;
inline bool TestRequest::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestRequest::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestRequest::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& TestRequest::email() const {
  // @@protoc_insertion_point(field_get:main.TestRequest.email)
  return *email_;
}
inline void TestRequest::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:main.TestRequest.email)
}
inline void TestRequest::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.TestRequest.email)
}
inline void TestRequest::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.TestRequest.email)
}
inline ::std::string* TestRequest::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.TestRequest.email)
  return email_;
}
inline ::std::string* TestRequest::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestRequest::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.TestRequest.email)
}

// -------------------------------------------------------------------

// TestResponse

// optional int32 state = 1 [default = 0];
inline bool TestResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 TestResponse::state() const {
  // @@protoc_insertion_point(field_get:main.TestResponse.state)
  return state_;
}
inline void TestResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:main.TestResponse.state)
}

// optional string failMsg = 2;
inline bool TestResponse::has_failmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestResponse::set_has_failmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestResponse::clear_has_failmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestResponse::clear_failmsg() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failmsg_->clear();
  }
  clear_has_failmsg();
}
inline const ::std::string& TestResponse::failmsg() const {
  // @@protoc_insertion_point(field_get:main.TestResponse.failMsg)
  return *failmsg_;
}
inline void TestResponse::set_failmsg(const ::std::string& value) {
  set_has_failmsg();
  if (failmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failmsg_ = new ::std::string;
  }
  failmsg_->assign(value);
  // @@protoc_insertion_point(field_set:main.TestResponse.failMsg)
}
inline void TestResponse::set_failmsg(const char* value) {
  set_has_failmsg();
  if (failmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failmsg_ = new ::std::string;
  }
  failmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.TestResponse.failMsg)
}
inline void TestResponse::set_failmsg(const char* value, size_t size) {
  set_has_failmsg();
  if (failmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failmsg_ = new ::std::string;
  }
  failmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.TestResponse.failMsg)
}
inline ::std::string* TestResponse::mutable_failmsg() {
  set_has_failmsg();
  if (failmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    failmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.TestResponse.failMsg)
  return failmsg_;
}
inline ::std::string* TestResponse::release_failmsg() {
  clear_has_failmsg();
  if (failmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = failmsg_;
    failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestResponse::set_allocated_failmsg(::std::string* failmsg) {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  if (failmsg) {
    set_has_failmsg();
    failmsg_ = failmsg;
  } else {
    clear_has_failmsg();
    failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.TestResponse.failMsg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestModule_2eproto__INCLUDED
