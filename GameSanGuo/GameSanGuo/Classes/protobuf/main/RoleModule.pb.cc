// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoleModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_RoleModule_2eproto() {
  delete CreateRoleRequest::default_instance_;
  delete CreateRoleResponse::default_instance_;
  delete RoleResponse::default_instance_;
  delete updateRoleResponse::default_instance_;
  delete TriggerInfo::default_instance_;
  delete updateRolePowerRequest::default_instance_;
  delete updateRolePowerResponse::default_instance_;
  delete BaseBagInfo::default_instance_;
  delete TeamInfo::default_instance_;
  delete TeamInfoItem::default_instance_;
  delete BeginnersGuideRequest::default_instance_;
  delete BeginnersGuideResponse::default_instance_;
  delete LoginAwardListRequest::default_instance_;
  delete LoginAwardListResponse::default_instance_;
  delete LoginAwardModel::default_instance_;
  delete LoginAwardItemModel::default_instance_;
  delete RewardLoginAwardRequest::default_instance_;
  delete RewardLoginAwardResponse::default_instance_;
  delete LoginAwardItemInfo::default_instance_;
  delete RewardLoginAwardGoldResponse::default_instance_;
  delete RewardLoginAwardGoldRequest::default_instance_;
  delete UpdateRoleQuest::default_instance_;
  delete RoleQuestProto::default_instance_;
  delete ReceiveQuestRewardRequest::default_instance_;
  delete ReceiveQuestRewardResponse::default_instance_;
  delete BossStartSateResponse::default_instance_;
  delete BossPlotCountProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RoleModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RoleModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  ::main::protobuf_AddDesc_FriendModule_2eproto();
  ::main::protobuf_AddDesc_MailModule_2eproto();
  ::main::protobuf_AddDesc_LotteryModule_2eproto();
  ::main::protobuf_AddDesc_GMQAModule_2eproto();
  ::main::protobuf_AddDesc_RewardModule_2eproto();
  CreateRoleRequest::default_instance_ = new CreateRoleRequest();
  CreateRoleResponse::default_instance_ = new CreateRoleResponse();
  RoleResponse::default_instance_ = new RoleResponse();
  updateRoleResponse::default_instance_ = new updateRoleResponse();
  TriggerInfo::default_instance_ = new TriggerInfo();
  updateRolePowerRequest::default_instance_ = new updateRolePowerRequest();
  updateRolePowerResponse::default_instance_ = new updateRolePowerResponse();
  BaseBagInfo::default_instance_ = new BaseBagInfo();
  TeamInfo::default_instance_ = new TeamInfo();
  TeamInfoItem::default_instance_ = new TeamInfoItem();
  BeginnersGuideRequest::default_instance_ = new BeginnersGuideRequest();
  BeginnersGuideResponse::default_instance_ = new BeginnersGuideResponse();
  LoginAwardListRequest::default_instance_ = new LoginAwardListRequest();
  LoginAwardListResponse::default_instance_ = new LoginAwardListResponse();
  LoginAwardModel::default_instance_ = new LoginAwardModel();
  LoginAwardItemModel::default_instance_ = new LoginAwardItemModel();
  RewardLoginAwardRequest::default_instance_ = new RewardLoginAwardRequest();
  RewardLoginAwardResponse::default_instance_ = new RewardLoginAwardResponse();
  LoginAwardItemInfo::default_instance_ = new LoginAwardItemInfo();
  RewardLoginAwardGoldResponse::default_instance_ = new RewardLoginAwardGoldResponse();
  RewardLoginAwardGoldRequest::default_instance_ = new RewardLoginAwardGoldRequest();
  UpdateRoleQuest::default_instance_ = new UpdateRoleQuest();
  RoleQuestProto::default_instance_ = new RoleQuestProto();
  ReceiveQuestRewardRequest::default_instance_ = new ReceiveQuestRewardRequest();
  ReceiveQuestRewardResponse::default_instance_ = new ReceiveQuestRewardResponse();
  BossStartSateResponse::default_instance_ = new BossStartSateResponse();
  BossPlotCountProto::default_instance_ = new BossPlotCountProto();
  CreateRoleRequest::default_instance_->InitAsDefaultInstance();
  CreateRoleResponse::default_instance_->InitAsDefaultInstance();
  RoleResponse::default_instance_->InitAsDefaultInstance();
  updateRoleResponse::default_instance_->InitAsDefaultInstance();
  TriggerInfo::default_instance_->InitAsDefaultInstance();
  updateRolePowerRequest::default_instance_->InitAsDefaultInstance();
  updateRolePowerResponse::default_instance_->InitAsDefaultInstance();
  BaseBagInfo::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  TeamInfoItem::default_instance_->InitAsDefaultInstance();
  BeginnersGuideRequest::default_instance_->InitAsDefaultInstance();
  BeginnersGuideResponse::default_instance_->InitAsDefaultInstance();
  LoginAwardListRequest::default_instance_->InitAsDefaultInstance();
  LoginAwardListResponse::default_instance_->InitAsDefaultInstance();
  LoginAwardModel::default_instance_->InitAsDefaultInstance();
  LoginAwardItemModel::default_instance_->InitAsDefaultInstance();
  RewardLoginAwardRequest::default_instance_->InitAsDefaultInstance();
  RewardLoginAwardResponse::default_instance_->InitAsDefaultInstance();
  LoginAwardItemInfo::default_instance_->InitAsDefaultInstance();
  RewardLoginAwardGoldResponse::default_instance_->InitAsDefaultInstance();
  RewardLoginAwardGoldRequest::default_instance_->InitAsDefaultInstance();
  UpdateRoleQuest::default_instance_->InitAsDefaultInstance();
  RoleQuestProto::default_instance_->InitAsDefaultInstance();
  ReceiveQuestRewardRequest::default_instance_->InitAsDefaultInstance();
  ReceiveQuestRewardResponse::default_instance_->InitAsDefaultInstance();
  BossStartSateResponse::default_instance_->InitAsDefaultInstance();
  BossPlotCountProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoleModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RoleModule_2eproto_once_);
void protobuf_AddDesc_RoleModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RoleModule_2eproto_once_,
                 &protobuf_AddDesc_RoleModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoleModule_2eproto {
  StaticDescriptorInitializer_RoleModule_2eproto() {
    protobuf_AddDesc_RoleModule_2eproto();
  }
} static_descriptor_initializer_RoleModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CreateRoleRequest::kNickNameFieldNumber;
const int CreateRoleRequest::kCountryFieldNumber;
#endif  // !_MSC_VER

CreateRoleRequest::CreateRoleRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CreateRoleRequest)
}

void CreateRoleRequest::InitAsDefaultInstance() {
}

CreateRoleRequest::CreateRoleRequest(const CreateRoleRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CreateRoleRequest)
}

void CreateRoleRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleRequest::~CreateRoleRequest() {
  // @@protoc_insertion_point(destructor:main.CreateRoleRequest)
  SharedDtor();
}

void CreateRoleRequest::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateRoleRequest& CreateRoleRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

CreateRoleRequest* CreateRoleRequest::default_instance_ = NULL;

CreateRoleRequest* CreateRoleRequest::New() const {
  return new CreateRoleRequest;
}

void CreateRoleRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    country_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CreateRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_country;
        break;
      }

      // required int32 country = 2;
      case 2: {
        if (tag == 16) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CreateRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CreateRoleRequest)
  return false;
#undef DO_
}

void CreateRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CreateRoleRequest)
  // required string nickName = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // required int32 country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->country(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CreateRoleRequest)
}

int CreateRoleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickName = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateRoleRequest*>(&from));
}

void CreateRoleRequest::MergeFrom(const CreateRoleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateRoleRequest::CopyFrom(const CreateRoleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateRoleRequest::Swap(CreateRoleRequest* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateRoleRequest::GetTypeName() const {
  return "main.CreateRoleRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoleResponse::kStateFieldNumber;
const int CreateRoleResponse::kErrorStrFieldNumber;
const int CreateRoleResponse::kRoleResponseFieldNumber;
#endif  // !_MSC_VER

CreateRoleResponse::CreateRoleResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CreateRoleResponse)
}

void CreateRoleResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roleresponse_ = const_cast< ::main::RoleResponse*>(
      ::main::RoleResponse::internal_default_instance());
#else
  roleresponse_ = const_cast< ::main::RoleResponse*>(&::main::RoleResponse::default_instance());
#endif
}

CreateRoleResponse::CreateRoleResponse(const CreateRoleResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CreateRoleResponse)
}

void CreateRoleResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  errorstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roleresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleResponse::~CreateRoleResponse() {
  // @@protoc_insertion_point(destructor:main.CreateRoleResponse)
  SharedDtor();
}

void CreateRoleResponse::SharedDtor() {
  if (errorstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errorstr_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete roleresponse_;
  }
}

void CreateRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateRoleResponse& CreateRoleResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

CreateRoleResponse* CreateRoleResponse::default_instance_ = NULL;

CreateRoleResponse* CreateRoleResponse::New() const {
  return new CreateRoleResponse;
}

void CreateRoleResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    state_ = 0;
    if (has_errorstr()) {
      if (errorstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errorstr_->clear();
      }
    }
    if (has_roleresponse()) {
      if (roleresponse_ != NULL) roleresponse_->::main::RoleResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CreateRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorStr;
        break;
      }

      // optional string errorStr = 2;
      case 2: {
        if (tag == 18) {
         parse_errorStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roleResponse;
        break;
      }

      // optional .main.RoleResponse roleResponse = 3;
      case 3: {
        if (tag == 26) {
         parse_roleResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CreateRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CreateRoleResponse)
  return false;
#undef DO_
}

void CreateRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CreateRoleResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string errorStr = 2;
  if (has_errorstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errorstr(), output);
  }

  // optional .main.RoleResponse roleResponse = 3;
  if (has_roleresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->roleresponse(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CreateRoleResponse)
}

int CreateRoleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string errorStr = 2;
    if (has_errorstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstr());
    }

    // optional .main.RoleResponse roleResponse = 3;
    if (has_roleresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleresponse());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateRoleResponse*>(&from));
}

void CreateRoleResponse::MergeFrom(const CreateRoleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_errorstr()) {
      set_errorstr(from.errorstr());
    }
    if (from.has_roleresponse()) {
      mutable_roleresponse()->::main::RoleResponse::MergeFrom(from.roleresponse());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateRoleResponse::CopyFrom(const CreateRoleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleResponse::IsInitialized() const {

  if (has_roleresponse()) {
    if (!this->roleresponse().IsInitialized()) return false;
  }
  return true;
}

void CreateRoleResponse::Swap(CreateRoleResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(errorstr_, other->errorstr_);
    std::swap(roleresponse_, other->roleresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateRoleResponse::GetTypeName() const {
  return "main.CreateRoleResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RoleResponse::kRoleIdFieldNumber;
const int RoleResponse::kNameFieldNumber;
const int RoleResponse::kNicknameFieldNumber;
const int RoleResponse::kSsidFieldNumber;
const int RoleResponse::kExpFieldNumber;
const int RoleResponse::kLevelFieldNumber;
const int RoleResponse::kCoinsFieldNumber;
const int RoleResponse::kGoldFieldNumber;
const int RoleResponse::kCountryFieldNumber;
const int RoleResponse::kImageFieldNumber;
const int RoleResponse::kPowerFieldNumber;
const int RoleResponse::kBagSizeFieldNumber;
const int RoleResponse::kModifyNickNameCountFieldNumber;
const int RoleResponse::kBaseBagInfoFieldNumber;
const int RoleResponse::kFriendListFieldNumber;
const int RoleResponse::kBlockListFieldNumber;
const int RoleResponse::kApplyListFieldNumber;
const int RoleResponse::kFriendSizeFieldNumber;
const int RoleResponse::kExpandCountFieldNumber;
const int RoleResponse::kMainMailsFieldNumber;
const int RoleResponse::kSystemMailsFieldNumber;
const int RoleResponse::kGmMailsFieldNumber;
const int RoleResponse::kPvpPowerFieldNumber;
const int RoleResponse::kPveLeftTimeFieldNumber;
const int RoleResponse::kPveCircleTimeFieldNumber;
const int RoleResponse::kPveRecoverLeftCounterFieldNumber;
const int RoleResponse::kPvpLeftTimeFieldNumber;
const int RoleResponse::kPvpCircleTimeFieldNumber;
const int RoleResponse::kPvpRecoverLeftCounterFieldNumber;
const int RoleResponse::kHasLottery9FieldNumber;
const int RoleResponse::kLotteryItemsFieldNumber;
const int RoleResponse::kLoginDayFieldNumber;
const int RoleResponse::kLottery9ChanceFieldNumber;
const int RoleResponse::kRewardNoticeFieldNumber;
const int RoleResponse::kBeginnersGuideIdFieldNumber;
const int RoleResponse::kHasFreeLotteryFieldNumber;
const int RoleResponse::kNewHandProssFieldNumber;
const int RoleResponse::kVipLevelFieldNumber;
const int RoleResponse::kPvpTopLevelFieldNumber;
const int RoleResponse::kPvpTopScoreFieldNumber;
const int RoleResponse::kHasPveFightFieldNumber;
const int RoleResponse::kHasPvpFightFieldNumber;
const int RoleResponse::kLastPvpIpFieldNumber;
const int RoleResponse::kLastPvpPortFieldNumber;
const int RoleResponse::kPvpRankFieldNumber;
const int RoleResponse::kRankNameFieldNumber;
const int RoleResponse::kPvpWinPvpFieldNumber;
const int RoleResponse::kCombatValueFieldNumber;
const int RoleResponse::kTeamInfoFieldNumber;
const int RoleResponse::kLoginAwardGoldFieldNumber;
const int RoleResponse::kCanRewardDayTaskFieldNumber;
const int RoleResponse::kInviteCodeFieldNumber;
const int RoleResponse::kSearchFriendCodeFieldNumber;
const int RoleResponse::kShowVipStateFieldNumber;
const int RoleResponse::kBranchTypeFieldNumber;
const int RoleResponse::kNeedVerifyFieldNumber;
const int RoleResponse::kFpIdFieldNumber;
const int RoleResponse::kAddGoverningFieldNumber;
const int RoleResponse::kLianDanGoldFieldNumber;
const int RoleResponse::kEnterNewPvpWinFieldNumber;
const int RoleResponse::kTriggerInfoFieldNumber;
const int RoleResponse::kQaListFieldNumber;
const int RoleResponse::kHaveChargedFieldNumber;
const int RoleResponse::kBestEquipFieldNumber;
const int RoleResponse::kPowerGiftFieldNumber;
const int RoleResponse::kPowerGiftTimesFieldNumber;
const int RoleResponse::kFuncNoticeListFieldNumber;
const int RoleResponse::kPlotHarryCountFieldNumber;
const int RoleResponse::kJunhunFieldNumber;
const int RoleResponse::kMaxPlotIdFieldNumber;
const int RoleResponse::kMaxBossPlotIdFieldNumber;
const int RoleResponse::kActivityNoticeFieldNumber;
const int RoleResponse::kBossPlotCountFieldNumber;
const int RoleResponse::kGouyuFieldNumber;
const int RoleResponse::kXiyuStateFieldNumber;
const int RoleResponse::kXiyuTimeFieldNumber;
const int RoleResponse::kArenaCoinFieldNumber;
#endif  // !_MSC_VER

RoleResponse::RoleResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RoleResponse)
}

void RoleResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basebaginfo_ = const_cast< ::main::BaseBagInfo*>(
      ::main::BaseBagInfo::internal_default_instance());
#else
  basebaginfo_ = const_cast< ::main::BaseBagInfo*>(&::main::BaseBagInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  teaminfo_ = const_cast< ::main::TeamInfo*>(
      ::main::TeamInfo::internal_default_instance());
#else
  teaminfo_ = const_cast< ::main::TeamInfo*>(&::main::TeamInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  powergift_ = const_cast< ::main::PowerGiftListResponse*>(
      ::main::PowerGiftListResponse::internal_default_instance());
#else
  powergift_ = const_cast< ::main::PowerGiftListResponse*>(&::main::PowerGiftListResponse::default_instance());
#endif
}

RoleResponse::RoleResponse(const RoleResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RoleResponse)
}

void RoleResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_ = 0;
  level_ = 0;
  coins_ = 0;
  gold_ = 0;
  country_ = 0;
  image_ = 0;
  power_ = 0;
  bagsize_ = 0;
  modifynicknamecount_ = 0;
  basebaginfo_ = NULL;
  friendsize_ = 0;
  expandcount_ = 0;
  pvppower_ = 0;
  pvelefttime_ = 0;
  pvecircletime_ = 0;
  pverecoverleftcounter_ = 0;
  pvplefttime_ = 0;
  pvpcircletime_ = 0;
  pvprecoverleftcounter_ = 0;
  haslottery9_ = 0;
  loginday_ = 0;
  lottery9chance_ = 0;
  beginnersguideid_ = 0;
  hasfreelottery_ = 0;
  newhandpross_ = 0;
  viplevel_ = 0;
  pvptoplevel_ = 0;
  pvptopscore_ = 0;
  haspvefight_ = false;
  haspvpfight_ = false;
  lastpvpip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastpvpport_ = 0;
  pvprank_ = 0;
  rankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pvpwinpvp_ = 0;
  combatvalue_ = 0;
  teaminfo_ = NULL;
  loginawardgold_ = false;
  canrewarddaytask_ = false;
  invitecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchfriendcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  showvipstate_ = 0;
  branchtype_ = 0;
  needverify_ = false;
  fpid_ = GOOGLE_LONGLONG(0);
  addgoverning_ = 0;
  liandangold_ = 0;
  enternewpvpwin_ = 0;
  havecharged_ = 0;
  bestequip_ = false;
  powergift_ = NULL;
  powergifttimes_ = 0;
  plotharrycount_ = 0;
  junhun_ = 0;
  maxplotid_ = 0;
  maxbossplotid_ = 0;
  activitynotice_ = false;
  gouyu_ = 0;
  xiyustate_ = false;
  xiyutime_ = 0;
  arenacoin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleResponse::~RoleResponse() {
  // @@protoc_insertion_point(destructor:main.RoleResponse)
  SharedDtor();
}

void RoleResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (ssid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ssid_;
  }
  if (lastpvpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastpvpip_;
  }
  if (rankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rankname_;
  }
  if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitecode_;
  }
  if (searchfriendcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchfriendcode_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basebaginfo_;
    delete teaminfo_;
    delete powergift_;
  }
}

void RoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoleResponse& RoleResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

RoleResponse* RoleResponse::default_instance_ = NULL;

RoleResponse* RoleResponse::New() const {
  return new RoleResponse;
}

void RoleResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, exp_);
    ZR_(level_, gold_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_ssid()) {
      if (ssid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ssid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(country_, modifynicknamecount_);
    if (has_basebaginfo()) {
      if (basebaginfo_ != NULL) basebaginfo_->::main::BaseBagInfo::Clear();
    }
  }
  ZR_(friendsize_, expandcount_);
  ZR_(pvppower_, pvelefttime_);
  if (_has_bits_[24 / 32] & 3204448256) {
    ZR_(pvecircletime_, haslottery9_);
    loginday_ = 0;
  }
  if (_has_bits_[32 / 32] & 253) {
    ZR_(beginnersguideid_, pvptopscore_);
    lottery9chance_ = 0;
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(lastpvpport_, pvprank_);
    ZR_(haspvefight_, haspvpfight_);
    if (has_lastpvpip()) {
      if (lastpvpip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastpvpip_->clear();
      }
    }
    if (has_rankname()) {
      if (rankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rankname_->clear();
      }
    }
    pvpwinpvp_ = 0;
    combatvalue_ = 0;
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(loginawardgold_, canrewarddaytask_);
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::main::TeamInfo::Clear();
    }
    if (has_invitecode()) {
      if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitecode_->clear();
      }
    }
    if (has_searchfriendcode()) {
      if (searchfriendcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        searchfriendcode_->clear();
      }
    }
    showvipstate_ = 0;
    branchtype_ = 0;
    needverify_ = false;
  }
  if (_has_bits_[56 / 32] & 3472883712) {
    ZR_(addgoverning_, enternewpvpwin_);
    havecharged_ = 0;
    bestequip_ = false;
  }
  if (_has_bits_[64 / 32] & 251) {
    ZR_(plotharrycount_, maxbossplotid_);
    if (has_powergift()) {
      if (powergift_ != NULL) powergift_->::main::PowerGiftListResponse::Clear();
    }
    powergifttimes_ = 0;
    activitynotice_ = false;
  }
  if (_has_bits_[72 / 32] & 7680) {
    ZR_(xiyutime_, arenacoin_);
    gouyu_ = 0;
    xiyustate_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  friendlist_.Clear();
  blocklist_.Clear();
  applylist_.Clear();
  mainmails_.Clear();
  systemmails_.Clear();
  gmmails_.Clear();
  lotteryitems_.Clear();
  rewardnotice_.Clear();
  triggerinfo_.Clear();
  qalist_.Clear();
  funcnoticelist_.Clear();
  bossplotcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ssid;
        break;
      }

      // optional string ssid = 4;
      case 4: {
        if (tag == 34) {
         parse_ssid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (tag == 40) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_coins;
        break;
      }

      // optional int32 coins = 7;
      case 7: {
        if (tag == 56) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // optional int32 gold = 8;
      case 8: {
        if (tag == 64) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_country;
        break;
      }

      // optional int32 country = 9;
      case 9: {
        if (tag == 72) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_image;
        break;
      }

      // optional int32 image = 10;
      case 10: {
        if (tag == 80) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_power;
        break;
      }

      // optional int32 power = 11;
      case 11: {
        if (tag == 88) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_bagSize;
        break;
      }

      // optional int32 bagSize = 12;
      case 12: {
        if (tag == 96) {
         parse_bagSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagsize_)));
          set_has_bagsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_modifyNickNameCount;
        break;
      }

      // optional int32 modifyNickNameCount = 13;
      case 13: {
        if (tag == 104) {
         parse_modifyNickNameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modifynicknamecount_)));
          set_has_modifynicknamecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_baseBagInfo;
        break;
      }

      // optional .main.BaseBagInfo baseBagInfo = 14;
      case 14: {
        if (tag == 114) {
         parse_baseBagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basebaginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_friendList;
        break;
      }

      // repeated .main.FriendProto friendList = 15;
      case 15: {
        if (tag == 122) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_friendList;
        if (input->ExpectTag(130)) goto parse_blockList;
        break;
      }

      // repeated .main.FriendProto blockList = 16;
      case 16: {
        if (tag == 130) {
         parse_blockList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_blockList;
        if (input->ExpectTag(138)) goto parse_applyList;
        break;
      }

      // repeated .main.FriendProto applyList = 17;
      case 17: {
        if (tag == 138) {
         parse_applyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_applyList;
        if (input->ExpectTag(144)) goto parse_friendSize;
        break;
      }

      // optional int32 friendSize = 18;
      case 18: {
        if (tag == 144) {
         parse_friendSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendsize_)));
          set_has_friendsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_expandCount;
        break;
      }

      // optional int32 expandCount = 19;
      case 19: {
        if (tag == 152) {
         parse_expandCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expandcount_)));
          set_has_expandcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_mainMails;
        break;
      }

      // repeated .main.MailProto mainMails = 20;
      case 20: {
        if (tag == 162) {
         parse_mainMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mainmails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_mainMails;
        if (input->ExpectTag(170)) goto parse_systemMails;
        break;
      }

      // repeated .main.SystemMailProto systemMails = 21;
      case 21: {
        if (tag == 170) {
         parse_systemMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_systemmails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_systemMails;
        if (input->ExpectTag(178)) goto parse_gmMails;
        break;
      }

      // repeated .main.MailProto gmMails = 22;
      case 22: {
        if (tag == 178) {
         parse_gmMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmmails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_gmMails;
        if (input->ExpectTag(184)) goto parse_pvpPower;
        break;
      }

      // optional int32 pvpPower = 23;
      case 23: {
        if (tag == 184) {
         parse_pvpPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvppower_)));
          set_has_pvppower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_pveLeftTime;
        break;
      }

      // optional int32 pveLeftTime = 24;
      case 24: {
        if (tag == 192) {
         parse_pveLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvelefttime_)));
          set_has_pvelefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_pveCircleTime;
        break;
      }

      // optional int32 pveCircleTime = 25;
      case 25: {
        if (tag == 200) {
         parse_pveCircleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvecircletime_)));
          set_has_pvecircletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_pveRecoverLeftCounter;
        break;
      }

      // optional int32 pveRecoverLeftCounter = 26;
      case 26: {
        if (tag == 208) {
         parse_pveRecoverLeftCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pverecoverleftcounter_)));
          set_has_pverecoverleftcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_pvpLeftTime;
        break;
      }

      // optional int32 pvpLeftTime = 27;
      case 27: {
        if (tag == 216) {
         parse_pvpLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvplefttime_)));
          set_has_pvplefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_pvpCircleTime;
        break;
      }

      // optional int32 pvpCircleTime = 28;
      case 28: {
        if (tag == 224) {
         parse_pvpCircleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpcircletime_)));
          set_has_pvpcircletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_pvpRecoverLeftCounter;
        break;
      }

      // optional int32 pvpRecoverLeftCounter = 29;
      case 29: {
        if (tag == 232) {
         parse_pvpRecoverLeftCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvprecoverleftcounter_)));
          set_has_pvprecoverleftcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_hasLottery9;
        break;
      }

      // optional int32 hasLottery9 = 30;
      case 30: {
        if (tag == 240) {
         parse_hasLottery9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haslottery9_)));
          set_has_haslottery9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_lotteryItems;
        break;
      }

      // repeated .main.Lottery9ViewItem lotteryItems = 31;
      case 31: {
        if (tag == 250) {
         parse_lotteryItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lotteryitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_lotteryItems;
        if (input->ExpectTag(256)) goto parse_loginDay;
        break;
      }

      // optional int32 loginDay = 32;
      case 32: {
        if (tag == 256) {
         parse_loginDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginday_)));
          set_has_loginday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_lottery9Chance;
        break;
      }

      // optional int32 lottery9Chance = 33;
      case 33: {
        if (tag == 264) {
         parse_lottery9Chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery9chance_)));
          set_has_lottery9chance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_rewardNotice;
        break;
      }

      // repeated .main.RewardTypeState rewardNotice = 34;
      case 34: {
        if (tag == 274) {
         parse_rewardNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardnotice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_rewardNotice;
        if (input->ExpectTag(280)) goto parse_beginnersGuideId;
        break;
      }

      // optional int32 beginnersGuideId = 35;
      case 35: {
        if (tag == 280) {
         parse_beginnersGuideId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginnersguideid_)));
          set_has_beginnersguideid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_hasFreeLottery;
        break;
      }

      // optional int32 hasFreeLottery = 36;
      case 36: {
        if (tag == 288) {
         parse_hasFreeLottery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasfreelottery_)));
          set_has_hasfreelottery();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_newHandPross;
        break;
      }

      // optional int32 newHandPross = 37;
      case 37: {
        if (tag == 296) {
         parse_newHandPross:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newhandpross_)));
          set_has_newhandpross();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 38;
      case 38: {
        if (tag == 304) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_pvpTopLevel;
        break;
      }

      // optional int32 pvpTopLevel = 39;
      case 39: {
        if (tag == 312) {
         parse_pvpTopLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptoplevel_)));
          set_has_pvptoplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_pvpTopScore;
        break;
      }

      // optional int32 pvpTopScore = 40;
      case 40: {
        if (tag == 320) {
         parse_pvpTopScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptopscore_)));
          set_has_pvptopscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_hasPveFight;
        break;
      }

      // optional bool hasPveFight = 41;
      case 41: {
        if (tag == 328) {
         parse_hasPveFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspvefight_)));
          set_has_haspvefight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_hasPvpFight;
        break;
      }

      // optional bool hasPvpFight = 42;
      case 42: {
        if (tag == 336) {
         parse_hasPvpFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspvpfight_)));
          set_has_haspvpfight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_lastPvpIp;
        break;
      }

      // optional string lastPvpIp = 43;
      case 43: {
        if (tag == 346) {
         parse_lastPvpIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpvpip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_lastPvpPort;
        break;
      }

      // optional int32 lastPvpPort = 44;
      case 44: {
        if (tag == 352) {
         parse_lastPvpPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastpvpport_)));
          set_has_lastpvpport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_pvpRank;
        break;
      }

      // optional int32 pvpRank = 45;
      case 45: {
        if (tag == 360) {
         parse_pvpRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvprank_)));
          set_has_pvprank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_rankName;
        break;
      }

      // optional string rankName = 46;
      case 46: {
        if (tag == 370) {
         parse_rankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rankname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_pvpWinPvp;
        break;
      }

      // optional int32 pvpWinPvp = 47;
      case 47: {
        if (tag == 376) {
         parse_pvpWinPvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpwinpvp_)));
          set_has_pvpwinpvp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_combatValue;
        break;
      }

      // optional int32 combatValue = 48;
      case 48: {
        if (tag == 384) {
         parse_combatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_teamInfo;
        break;
      }

      // optional .main.TeamInfo teamInfo = 49;
      case 49: {
        if (tag == 394) {
         parse_teamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_LoginAwardGold;
        break;
      }

      // optional bool LoginAwardGold = 50;
      case 50: {
        if (tag == 400) {
         parse_LoginAwardGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loginawardgold_)));
          set_has_loginawardgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_canRewardDayTask;
        break;
      }

      // optional bool canRewardDayTask = 51;
      case 51: {
        if (tag == 408) {
         parse_canRewardDayTask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canrewarddaytask_)));
          set_has_canrewarddaytask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_inviteCode;
        break;
      }

      // optional string inviteCode = 52;
      case 52: {
        if (tag == 418) {
         parse_inviteCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitecode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_searchFriendCode;
        break;
      }

      // optional string searchFriendCode = 53;
      case 53: {
        if (tag == 426) {
         parse_searchFriendCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchfriendcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_showVipState;
        break;
      }

      // optional int32 showVipState = 54;
      case 54: {
        if (tag == 432) {
         parse_showVipState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showvipstate_)));
          set_has_showvipstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_branchType;
        break;
      }

      // optional int32 branchType = 55 [default = 0];
      case 55: {
        if (tag == 440) {
         parse_branchType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branchtype_)));
          set_has_branchtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_needVerify;
        break;
      }

      // optional bool needVerify = 56;
      case 56: {
        if (tag == 448) {
         parse_needVerify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needverify_)));
          set_has_needverify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_fpId;
        break;
      }

      // optional int64 fpId = 57;
      case 57: {
        if (tag == 456) {
         parse_fpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fpid_)));
          set_has_fpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_addGoverning;
        break;
      }

      // optional int32 addGoverning = 58 [default = 0];
      case 58: {
        if (tag == 464) {
         parse_addGoverning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addgoverning_)));
          set_has_addgoverning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_lianDanGold;
        break;
      }

      // optional int32 lianDanGold = 59;
      case 59: {
        if (tag == 472) {
         parse_lianDanGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liandangold_)));
          set_has_liandangold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_enterNewPvpWin;
        break;
      }

      // optional int32 enterNewPvpWin = 60;
      case 60: {
        if (tag == 480) {
         parse_enterNewPvpWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enternewpvpwin_)));
          set_has_enternewpvpwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_triggerInfo;
        break;
      }

      // repeated .main.TriggerInfo triggerInfo = 61;
      case 61: {
        if (tag == 490) {
         parse_triggerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_triggerInfo;
        if (input->ExpectTag(498)) goto parse_qaList;
        break;
      }

      // repeated .main.QAProto qaList = 62;
      case 62: {
        if (tag == 498) {
         parse_qaList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_qaList;
        if (input->ExpectTag(504)) goto parse_haveCharged;
        break;
      }

      // optional int32 haveCharged = 63;
      case 63: {
        if (tag == 504) {
         parse_haveCharged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &havecharged_)));
          set_has_havecharged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_bestEquip;
        break;
      }

      // optional bool bestEquip = 64;
      case 64: {
        if (tag == 512) {
         parse_bestEquip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bestequip_)));
          set_has_bestequip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_powerGift;
        break;
      }

      // optional .main.PowerGiftListResponse powerGift = 65;
      case 65: {
        if (tag == 522) {
         parse_powerGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_powergift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_powerGiftTimes;
        break;
      }

      // optional int32 powerGiftTimes = 66;
      case 66: {
        if (tag == 528) {
         parse_powerGiftTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powergifttimes_)));
          set_has_powergifttimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_funcNoticeList;
        break;
      }

      // repeated int32 funcNoticeList = 67;
      case 67: {
        if (tag == 536) {
         parse_funcNoticeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 536, input, this->mutable_funcnoticelist())));
        } else if (tag == 538) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_funcnoticelist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_funcNoticeList;
        if (input->ExpectTag(544)) goto parse_plotHarryCount;
        break;
      }

      // optional int32 plotHarryCount = 68;
      case 68: {
        if (tag == 544) {
         parse_plotHarryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plotharrycount_)));
          set_has_plotharrycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_junhun;
        break;
      }

      // optional int32 junhun = 69;
      case 69: {
        if (tag == 552) {
         parse_junhun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &junhun_)));
          set_has_junhun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_maxPlotId;
        break;
      }

      // optional int32 maxPlotId = 70;
      case 70: {
        if (tag == 560) {
         parse_maxPlotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplotid_)));
          set_has_maxplotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_maxBossPlotId;
        break;
      }

      // optional int32 maxBossPlotId = 71;
      case 71: {
        if (tag == 568) {
         parse_maxBossPlotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbossplotid_)));
          set_has_maxbossplotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_activityNotice;
        break;
      }

      // optional bool activityNotice = 72;
      case 72: {
        if (tag == 576) {
         parse_activityNotice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activitynotice_)));
          set_has_activitynotice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_bossPlotCount;
        break;
      }

      // repeated .main.BossPlotCountProto bossPlotCount = 73;
      case 73: {
        if (tag == 586) {
         parse_bossPlotCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossplotcount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_bossPlotCount;
        if (input->ExpectTag(592)) goto parse_gouyu;
        break;
      }

      // optional int32 gouyu = 74;
      case 74: {
        if (tag == 592) {
         parse_gouyu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gouyu_)));
          set_has_gouyu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_xiyuState;
        break;
      }

      // optional bool xiyuState = 75;
      case 75: {
        if (tag == 600) {
         parse_xiyuState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xiyustate_)));
          set_has_xiyustate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_xiyuTime;
        break;
      }

      // optional int32 xiyuTime = 76;
      case 76: {
        if (tag == 608) {
         parse_xiyuTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xiyutime_)));
          set_has_xiyutime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_arenaCoin;
        break;
      }

      // optional int32 arenaCoin = 77;
      case 77: {
        if (tag == 616) {
         parse_arenaCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RoleResponse)
  return false;
#undef DO_
}

void RoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RoleResponse)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string ssid = 4;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ssid(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 coins = 7;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->coins(), output);
  }

  // optional int32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold(), output);
  }

  // optional int32 country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->country(), output);
  }

  // optional int32 image = 10;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->image(), output);
  }

  // optional int32 power = 11;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->power(), output);
  }

  // optional int32 bagSize = 12;
  if (has_bagsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bagsize(), output);
  }

  // optional int32 modifyNickNameCount = 13;
  if (has_modifynicknamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->modifynicknamecount(), output);
  }

  // optional .main.BaseBagInfo baseBagInfo = 14;
  if (has_basebaginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->basebaginfo(), output);
  }

  // repeated .main.FriendProto friendList = 15;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->friendlist(i), output);
  }

  // repeated .main.FriendProto blockList = 16;
  for (int i = 0; i < this->blocklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->blocklist(i), output);
  }

  // repeated .main.FriendProto applyList = 17;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->applylist(i), output);
  }

  // optional int32 friendSize = 18;
  if (has_friendsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->friendsize(), output);
  }

  // optional int32 expandCount = 19;
  if (has_expandcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->expandcount(), output);
  }

  // repeated .main.MailProto mainMails = 20;
  for (int i = 0; i < this->mainmails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->mainmails(i), output);
  }

  // repeated .main.SystemMailProto systemMails = 21;
  for (int i = 0; i < this->systemmails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->systemmails(i), output);
  }

  // repeated .main.MailProto gmMails = 22;
  for (int i = 0; i < this->gmmails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->gmmails(i), output);
  }

  // optional int32 pvpPower = 23;
  if (has_pvppower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->pvppower(), output);
  }

  // optional int32 pveLeftTime = 24;
  if (has_pvelefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->pvelefttime(), output);
  }

  // optional int32 pveCircleTime = 25;
  if (has_pvecircletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->pvecircletime(), output);
  }

  // optional int32 pveRecoverLeftCounter = 26;
  if (has_pverecoverleftcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->pverecoverleftcounter(), output);
  }

  // optional int32 pvpLeftTime = 27;
  if (has_pvplefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->pvplefttime(), output);
  }

  // optional int32 pvpCircleTime = 28;
  if (has_pvpcircletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->pvpcircletime(), output);
  }

  // optional int32 pvpRecoverLeftCounter = 29;
  if (has_pvprecoverleftcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->pvprecoverleftcounter(), output);
  }

  // optional int32 hasLottery9 = 30;
  if (has_haslottery9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->haslottery9(), output);
  }

  // repeated .main.Lottery9ViewItem lotteryItems = 31;
  for (int i = 0; i < this->lotteryitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->lotteryitems(i), output);
  }

  // optional int32 loginDay = 32;
  if (has_loginday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->loginday(), output);
  }

  // optional int32 lottery9Chance = 33;
  if (has_lottery9chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->lottery9chance(), output);
  }

  // repeated .main.RewardTypeState rewardNotice = 34;
  for (int i = 0; i < this->rewardnotice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->rewardnotice(i), output);
  }

  // optional int32 beginnersGuideId = 35;
  if (has_beginnersguideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->beginnersguideid(), output);
  }

  // optional int32 hasFreeLottery = 36;
  if (has_hasfreelottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->hasfreelottery(), output);
  }

  // optional int32 newHandPross = 37;
  if (has_newhandpross()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->newhandpross(), output);
  }

  // optional int32 vipLevel = 38;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->viplevel(), output);
  }

  // optional int32 pvpTopLevel = 39;
  if (has_pvptoplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->pvptoplevel(), output);
  }

  // optional int32 pvpTopScore = 40;
  if (has_pvptopscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->pvptopscore(), output);
  }

  // optional bool hasPveFight = 41;
  if (has_haspvefight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->haspvefight(), output);
  }

  // optional bool hasPvpFight = 42;
  if (has_haspvpfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->haspvpfight(), output);
  }

  // optional string lastPvpIp = 43;
  if (has_lastpvpip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->lastpvpip(), output);
  }

  // optional int32 lastPvpPort = 44;
  if (has_lastpvpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->lastpvpport(), output);
  }

  // optional int32 pvpRank = 45;
  if (has_pvprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->pvprank(), output);
  }

  // optional string rankName = 46;
  if (has_rankname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->rankname(), output);
  }

  // optional int32 pvpWinPvp = 47;
  if (has_pvpwinpvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->pvpwinpvp(), output);
  }

  // optional int32 combatValue = 48;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->combatvalue(), output);
  }

  // optional .main.TeamInfo teamInfo = 49;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->teaminfo(), output);
  }

  // optional bool LoginAwardGold = 50;
  if (has_loginawardgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->loginawardgold(), output);
  }

  // optional bool canRewardDayTask = 51;
  if (has_canrewarddaytask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->canrewarddaytask(), output);
  }

  // optional string inviteCode = 52;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->invitecode(), output);
  }

  // optional string searchFriendCode = 53;
  if (has_searchfriendcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      53, this->searchfriendcode(), output);
  }

  // optional int32 showVipState = 54;
  if (has_showvipstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->showvipstate(), output);
  }

  // optional int32 branchType = 55 [default = 0];
  if (has_branchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->branchtype(), output);
  }

  // optional bool needVerify = 56;
  if (has_needverify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->needverify(), output);
  }

  // optional int64 fpId = 57;
  if (has_fpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(57, this->fpid(), output);
  }

  // optional int32 addGoverning = 58 [default = 0];
  if (has_addgoverning()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->addgoverning(), output);
  }

  // optional int32 lianDanGold = 59;
  if (has_liandangold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->liandangold(), output);
  }

  // optional int32 enterNewPvpWin = 60;
  if (has_enternewpvpwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->enternewpvpwin(), output);
  }

  // repeated .main.TriggerInfo triggerInfo = 61;
  for (int i = 0; i < this->triggerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, this->triggerinfo(i), output);
  }

  // repeated .main.QAProto qaList = 62;
  for (int i = 0; i < this->qalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      62, this->qalist(i), output);
  }

  // optional int32 haveCharged = 63;
  if (has_havecharged()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->havecharged(), output);
  }

  // optional bool bestEquip = 64;
  if (has_bestequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->bestequip(), output);
  }

  // optional .main.PowerGiftListResponse powerGift = 65;
  if (has_powergift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, this->powergift(), output);
  }

  // optional int32 powerGiftTimes = 66;
  if (has_powergifttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->powergifttimes(), output);
  }

  // repeated int32 funcNoticeList = 67;
  for (int i = 0; i < this->funcnoticelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      67, this->funcnoticelist(i), output);
  }

  // optional int32 plotHarryCount = 68;
  if (has_plotharrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->plotharrycount(), output);
  }

  // optional int32 junhun = 69;
  if (has_junhun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->junhun(), output);
  }

  // optional int32 maxPlotId = 70;
  if (has_maxplotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->maxplotid(), output);
  }

  // optional int32 maxBossPlotId = 71;
  if (has_maxbossplotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->maxbossplotid(), output);
  }

  // optional bool activityNotice = 72;
  if (has_activitynotice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->activitynotice(), output);
  }

  // repeated .main.BossPlotCountProto bossPlotCount = 73;
  for (int i = 0; i < this->bossplotcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      73, this->bossplotcount(i), output);
  }

  // optional int32 gouyu = 74;
  if (has_gouyu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->gouyu(), output);
  }

  // optional bool xiyuState = 75;
  if (has_xiyustate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->xiyustate(), output);
  }

  // optional int32 xiyuTime = 76;
  if (has_xiyutime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->xiyutime(), output);
  }

  // optional int32 arenaCoin = 77;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->arenacoin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RoleResponse)
}

int RoleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string ssid = 4;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssid());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 coins = 7;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

    // optional int32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 country = 9;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 image = 10;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

    // optional int32 power = 11;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 bagSize = 12;
    if (has_bagsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagsize());
    }

    // optional int32 modifyNickNameCount = 13;
    if (has_modifynicknamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modifynicknamecount());
    }

    // optional .main.BaseBagInfo baseBagInfo = 14;
    if (has_basebaginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basebaginfo());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 friendSize = 18;
    if (has_friendsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendsize());
    }

    // optional int32 expandCount = 19;
    if (has_expandcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expandcount());
    }

    // optional int32 pvpPower = 23;
    if (has_pvppower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvppower());
    }

    // optional int32 pveLeftTime = 24;
    if (has_pvelefttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvelefttime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 pveCircleTime = 25;
    if (has_pvecircletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvecircletime());
    }

    // optional int32 pveRecoverLeftCounter = 26;
    if (has_pverecoverleftcounter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pverecoverleftcounter());
    }

    // optional int32 pvpLeftTime = 27;
    if (has_pvplefttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvplefttime());
    }

    // optional int32 pvpCircleTime = 28;
    if (has_pvpcircletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpcircletime());
    }

    // optional int32 pvpRecoverLeftCounter = 29;
    if (has_pvprecoverleftcounter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvprecoverleftcounter());
    }

    // optional int32 hasLottery9 = 30;
    if (has_haslottery9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haslottery9());
    }

    // optional int32 loginDay = 32;
    if (has_loginday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginday());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 lottery9Chance = 33;
    if (has_lottery9chance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery9chance());
    }

    // optional int32 beginnersGuideId = 35;
    if (has_beginnersguideid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginnersguideid());
    }

    // optional int32 hasFreeLottery = 36;
    if (has_hasfreelottery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasfreelottery());
    }

    // optional int32 newHandPross = 37;
    if (has_newhandpross()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newhandpross());
    }

    // optional int32 vipLevel = 38;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 pvpTopLevel = 39;
    if (has_pvptoplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptoplevel());
    }

    // optional int32 pvpTopScore = 40;
    if (has_pvptopscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptopscore());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool hasPveFight = 41;
    if (has_haspvefight()) {
      total_size += 2 + 1;
    }

    // optional bool hasPvpFight = 42;
    if (has_haspvpfight()) {
      total_size += 2 + 1;
    }

    // optional string lastPvpIp = 43;
    if (has_lastpvpip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpvpip());
    }

    // optional int32 lastPvpPort = 44;
    if (has_lastpvpport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastpvpport());
    }

    // optional int32 pvpRank = 45;
    if (has_pvprank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvprank());
    }

    // optional string rankName = 46;
    if (has_rankname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rankname());
    }

    // optional int32 pvpWinPvp = 47;
    if (has_pvpwinpvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpwinpvp());
    }

    // optional int32 combatValue = 48;
    if (has_combatvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .main.TeamInfo teamInfo = 49;
    if (has_teaminfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

    // optional bool LoginAwardGold = 50;
    if (has_loginawardgold()) {
      total_size += 2 + 1;
    }

    // optional bool canRewardDayTask = 51;
    if (has_canrewarddaytask()) {
      total_size += 2 + 1;
    }

    // optional string inviteCode = 52;
    if (has_invitecode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitecode());
    }

    // optional string searchFriendCode = 53;
    if (has_searchfriendcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchfriendcode());
    }

    // optional int32 showVipState = 54;
    if (has_showvipstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showvipstate());
    }

    // optional int32 branchType = 55 [default = 0];
    if (has_branchtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branchtype());
    }

    // optional bool needVerify = 56;
    if (has_needverify()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int64 fpId = 57;
    if (has_fpid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fpid());
    }

    // optional int32 addGoverning = 58 [default = 0];
    if (has_addgoverning()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addgoverning());
    }

    // optional int32 lianDanGold = 59;
    if (has_liandangold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liandangold());
    }

    // optional int32 enterNewPvpWin = 60;
    if (has_enternewpvpwin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enternewpvpwin());
    }

    // optional int32 haveCharged = 63;
    if (has_havecharged()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->havecharged());
    }

    // optional bool bestEquip = 64;
    if (has_bestequip()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .main.PowerGiftListResponse powerGift = 65;
    if (has_powergift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->powergift());
    }

    // optional int32 powerGiftTimes = 66;
    if (has_powergifttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powergifttimes());
    }

    // optional int32 plotHarryCount = 68;
    if (has_plotharrycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plotharrycount());
    }

    // optional int32 junhun = 69;
    if (has_junhun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->junhun());
    }

    // optional int32 maxPlotId = 70;
    if (has_maxplotid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplotid());
    }

    // optional int32 maxBossPlotId = 71;
    if (has_maxbossplotid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbossplotid());
    }

    // optional bool activityNotice = 72;
    if (has_activitynotice()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    // optional int32 gouyu = 74;
    if (has_gouyu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gouyu());
    }

    // optional bool xiyuState = 75;
    if (has_xiyustate()) {
      total_size += 2 + 1;
    }

    // optional int32 xiyuTime = 76;
    if (has_xiyutime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xiyutime());
    }

    // optional int32 arenaCoin = 77;
    if (has_arenacoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenacoin());
    }

  }
  // repeated .main.FriendProto friendList = 15;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  // repeated .main.FriendProto blockList = 16;
  total_size += 2 * this->blocklist_size();
  for (int i = 0; i < this->blocklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocklist(i));
  }

  // repeated .main.FriendProto applyList = 17;
  total_size += 2 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylist(i));
  }

  // repeated .main.MailProto mainMails = 20;
  total_size += 2 * this->mainmails_size();
  for (int i = 0; i < this->mainmails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mainmails(i));
  }

  // repeated .main.SystemMailProto systemMails = 21;
  total_size += 2 * this->systemmails_size();
  for (int i = 0; i < this->systemmails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->systemmails(i));
  }

  // repeated .main.MailProto gmMails = 22;
  total_size += 2 * this->gmmails_size();
  for (int i = 0; i < this->gmmails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmmails(i));
  }

  // repeated .main.Lottery9ViewItem lotteryItems = 31;
  total_size += 2 * this->lotteryitems_size();
  for (int i = 0; i < this->lotteryitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lotteryitems(i));
  }

  // repeated .main.RewardTypeState rewardNotice = 34;
  total_size += 2 * this->rewardnotice_size();
  for (int i = 0; i < this->rewardnotice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardnotice(i));
  }

  // repeated .main.TriggerInfo triggerInfo = 61;
  total_size += 2 * this->triggerinfo_size();
  for (int i = 0; i < this->triggerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggerinfo(i));
  }

  // repeated .main.QAProto qaList = 62;
  total_size += 2 * this->qalist_size();
  for (int i = 0; i < this->qalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qalist(i));
  }

  // repeated int32 funcNoticeList = 67;
  {
    int data_size = 0;
    for (int i = 0; i < this->funcnoticelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->funcnoticelist(i));
    }
    total_size += 2 * this->funcnoticelist_size() + data_size;
  }

  // repeated .main.BossPlotCountProto bossPlotCount = 73;
  total_size += 2 * this->bossplotcount_size();
  for (int i = 0; i < this->bossplotcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossplotcount(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoleResponse*>(&from));
}

void RoleResponse::MergeFrom(const RoleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  blocklist_.MergeFrom(from.blocklist_);
  applylist_.MergeFrom(from.applylist_);
  mainmails_.MergeFrom(from.mainmails_);
  systemmails_.MergeFrom(from.systemmails_);
  gmmails_.MergeFrom(from.gmmails_);
  lotteryitems_.MergeFrom(from.lotteryitems_);
  rewardnotice_.MergeFrom(from.rewardnotice_);
  triggerinfo_.MergeFrom(from.triggerinfo_);
  qalist_.MergeFrom(from.qalist_);
  funcnoticelist_.MergeFrom(from.funcnoticelist_);
  bossplotcount_.MergeFrom(from.bossplotcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_bagsize()) {
      set_bagsize(from.bagsize());
    }
    if (from.has_modifynicknamecount()) {
      set_modifynicknamecount(from.modifynicknamecount());
    }
    if (from.has_basebaginfo()) {
      mutable_basebaginfo()->::main::BaseBagInfo::MergeFrom(from.basebaginfo());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_friendsize()) {
      set_friendsize(from.friendsize());
    }
    if (from.has_expandcount()) {
      set_expandcount(from.expandcount());
    }
    if (from.has_pvppower()) {
      set_pvppower(from.pvppower());
    }
    if (from.has_pvelefttime()) {
      set_pvelefttime(from.pvelefttime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pvecircletime()) {
      set_pvecircletime(from.pvecircletime());
    }
    if (from.has_pverecoverleftcounter()) {
      set_pverecoverleftcounter(from.pverecoverleftcounter());
    }
    if (from.has_pvplefttime()) {
      set_pvplefttime(from.pvplefttime());
    }
    if (from.has_pvpcircletime()) {
      set_pvpcircletime(from.pvpcircletime());
    }
    if (from.has_pvprecoverleftcounter()) {
      set_pvprecoverleftcounter(from.pvprecoverleftcounter());
    }
    if (from.has_haslottery9()) {
      set_haslottery9(from.haslottery9());
    }
    if (from.has_loginday()) {
      set_loginday(from.loginday());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_lottery9chance()) {
      set_lottery9chance(from.lottery9chance());
    }
    if (from.has_beginnersguideid()) {
      set_beginnersguideid(from.beginnersguideid());
    }
    if (from.has_hasfreelottery()) {
      set_hasfreelottery(from.hasfreelottery());
    }
    if (from.has_newhandpross()) {
      set_newhandpross(from.newhandpross());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_pvptoplevel()) {
      set_pvptoplevel(from.pvptoplevel());
    }
    if (from.has_pvptopscore()) {
      set_pvptopscore(from.pvptopscore());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_haspvefight()) {
      set_haspvefight(from.haspvefight());
    }
    if (from.has_haspvpfight()) {
      set_haspvpfight(from.haspvpfight());
    }
    if (from.has_lastpvpip()) {
      set_lastpvpip(from.lastpvpip());
    }
    if (from.has_lastpvpport()) {
      set_lastpvpport(from.lastpvpport());
    }
    if (from.has_pvprank()) {
      set_pvprank(from.pvprank());
    }
    if (from.has_rankname()) {
      set_rankname(from.rankname());
    }
    if (from.has_pvpwinpvp()) {
      set_pvpwinpvp(from.pvpwinpvp());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::main::TeamInfo::MergeFrom(from.teaminfo());
    }
    if (from.has_loginawardgold()) {
      set_loginawardgold(from.loginawardgold());
    }
    if (from.has_canrewarddaytask()) {
      set_canrewarddaytask(from.canrewarddaytask());
    }
    if (from.has_invitecode()) {
      set_invitecode(from.invitecode());
    }
    if (from.has_searchfriendcode()) {
      set_searchfriendcode(from.searchfriendcode());
    }
    if (from.has_showvipstate()) {
      set_showvipstate(from.showvipstate());
    }
    if (from.has_branchtype()) {
      set_branchtype(from.branchtype());
    }
    if (from.has_needverify()) {
      set_needverify(from.needverify());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_fpid()) {
      set_fpid(from.fpid());
    }
    if (from.has_addgoverning()) {
      set_addgoverning(from.addgoverning());
    }
    if (from.has_liandangold()) {
      set_liandangold(from.liandangold());
    }
    if (from.has_enternewpvpwin()) {
      set_enternewpvpwin(from.enternewpvpwin());
    }
    if (from.has_havecharged()) {
      set_havecharged(from.havecharged());
    }
    if (from.has_bestequip()) {
      set_bestequip(from.bestequip());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_powergift()) {
      mutable_powergift()->::main::PowerGiftListResponse::MergeFrom(from.powergift());
    }
    if (from.has_powergifttimes()) {
      set_powergifttimes(from.powergifttimes());
    }
    if (from.has_plotharrycount()) {
      set_plotharrycount(from.plotharrycount());
    }
    if (from.has_junhun()) {
      set_junhun(from.junhun());
    }
    if (from.has_maxplotid()) {
      set_maxplotid(from.maxplotid());
    }
    if (from.has_maxbossplotid()) {
      set_maxbossplotid(from.maxbossplotid());
    }
    if (from.has_activitynotice()) {
      set_activitynotice(from.activitynotice());
    }
  }
  if (from._has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    if (from.has_gouyu()) {
      set_gouyu(from.gouyu());
    }
    if (from.has_xiyustate()) {
      set_xiyustate(from.xiyustate());
    }
    if (from.has_xiyutime()) {
      set_xiyutime(from.xiyutime());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoleResponse::CopyFrom(const RoleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rewardnotice())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bossplotcount())) return false;
  return true;
}

void RoleResponse::Swap(RoleResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(nickname_, other->nickname_);
    std::swap(ssid_, other->ssid_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(coins_, other->coins_);
    std::swap(gold_, other->gold_);
    std::swap(country_, other->country_);
    std::swap(image_, other->image_);
    std::swap(power_, other->power_);
    std::swap(bagsize_, other->bagsize_);
    std::swap(modifynicknamecount_, other->modifynicknamecount_);
    std::swap(basebaginfo_, other->basebaginfo_);
    friendlist_.Swap(&other->friendlist_);
    blocklist_.Swap(&other->blocklist_);
    applylist_.Swap(&other->applylist_);
    std::swap(friendsize_, other->friendsize_);
    std::swap(expandcount_, other->expandcount_);
    mainmails_.Swap(&other->mainmails_);
    systemmails_.Swap(&other->systemmails_);
    gmmails_.Swap(&other->gmmails_);
    std::swap(pvppower_, other->pvppower_);
    std::swap(pvelefttime_, other->pvelefttime_);
    std::swap(pvecircletime_, other->pvecircletime_);
    std::swap(pverecoverleftcounter_, other->pverecoverleftcounter_);
    std::swap(pvplefttime_, other->pvplefttime_);
    std::swap(pvpcircletime_, other->pvpcircletime_);
    std::swap(pvprecoverleftcounter_, other->pvprecoverleftcounter_);
    std::swap(haslottery9_, other->haslottery9_);
    lotteryitems_.Swap(&other->lotteryitems_);
    std::swap(loginday_, other->loginday_);
    std::swap(lottery9chance_, other->lottery9chance_);
    rewardnotice_.Swap(&other->rewardnotice_);
    std::swap(beginnersguideid_, other->beginnersguideid_);
    std::swap(hasfreelottery_, other->hasfreelottery_);
    std::swap(newhandpross_, other->newhandpross_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(pvptoplevel_, other->pvptoplevel_);
    std::swap(pvptopscore_, other->pvptopscore_);
    std::swap(haspvefight_, other->haspvefight_);
    std::swap(haspvpfight_, other->haspvpfight_);
    std::swap(lastpvpip_, other->lastpvpip_);
    std::swap(lastpvpport_, other->lastpvpport_);
    std::swap(pvprank_, other->pvprank_);
    std::swap(rankname_, other->rankname_);
    std::swap(pvpwinpvp_, other->pvpwinpvp_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(loginawardgold_, other->loginawardgold_);
    std::swap(canrewarddaytask_, other->canrewarddaytask_);
    std::swap(invitecode_, other->invitecode_);
    std::swap(searchfriendcode_, other->searchfriendcode_);
    std::swap(showvipstate_, other->showvipstate_);
    std::swap(branchtype_, other->branchtype_);
    std::swap(needverify_, other->needverify_);
    std::swap(fpid_, other->fpid_);
    std::swap(addgoverning_, other->addgoverning_);
    std::swap(liandangold_, other->liandangold_);
    std::swap(enternewpvpwin_, other->enternewpvpwin_);
    triggerinfo_.Swap(&other->triggerinfo_);
    qalist_.Swap(&other->qalist_);
    std::swap(havecharged_, other->havecharged_);
    std::swap(bestequip_, other->bestequip_);
    std::swap(powergift_, other->powergift_);
    std::swap(powergifttimes_, other->powergifttimes_);
    funcnoticelist_.Swap(&other->funcnoticelist_);
    std::swap(plotharrycount_, other->plotharrycount_);
    std::swap(junhun_, other->junhun_);
    std::swap(maxplotid_, other->maxplotid_);
    std::swap(maxbossplotid_, other->maxbossplotid_);
    std::swap(activitynotice_, other->activitynotice_);
    bossplotcount_.Swap(&other->bossplotcount_);
    std::swap(gouyu_, other->gouyu_);
    std::swap(xiyustate_, other->xiyustate_);
    std::swap(xiyutime_, other->xiyutime_);
    std::swap(arenacoin_, other->arenacoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoleResponse::GetTypeName() const {
  return "main.RoleResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int updateRoleResponse::kExpFieldNumber;
const int updateRoleResponse::kLevelFieldNumber;
const int updateRoleResponse::kCoinsFieldNumber;
const int updateRoleResponse::kGoldFieldNumber;
const int updateRoleResponse::kPowerFieldNumber;
const int updateRoleResponse::kPvpPowerFieldNumber;
const int updateRoleResponse::kPveLeftTimeFieldNumber;
const int updateRoleResponse::kPveCircleTimeFieldNumber;
const int updateRoleResponse::kPveRecoverLeftCounterFieldNumber;
const int updateRoleResponse::kPvpLeftTimeFieldNumber;
const int updateRoleResponse::kPvpCircleTimeFieldNumber;
const int updateRoleResponse::kPvpRecoverLeftCounterFieldNumber;
const int updateRoleResponse::kMeritoriousFieldNumber;
const int updateRoleResponse::kCombatValueFieldNumber;
const int updateRoleResponse::kCanRewardDayTaskFieldNumber;
const int updateRoleResponse::kBestEquipFieldNumber;
const int updateRoleResponse::kJunhunFieldNumber;
const int updateRoleResponse::kPvpTopScoreFieldNumber;
const int updateRoleResponse::kPlotHarryCountFieldNumber;
const int updateRoleResponse::kGouyuFieldNumber;
const int updateRoleResponse::kArenaCoinFieldNumber;
#endif  // !_MSC_VER

updateRoleResponse::updateRoleResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.updateRoleResponse)
}

void updateRoleResponse::InitAsDefaultInstance() {
}

updateRoleResponse::updateRoleResponse(const updateRoleResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.updateRoleResponse)
}

void updateRoleResponse::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  level_ = 0;
  coins_ = 0;
  gold_ = 0;
  power_ = 0;
  pvppower_ = 0;
  pvelefttime_ = 0;
  pvecircletime_ = 0;
  pverecoverleftcounter_ = 0;
  pvplefttime_ = 0;
  pvpcircletime_ = 0;
  pvprecoverleftcounter_ = 0;
  meritorious_ = 0;
  combatvalue_ = 0;
  canrewarddaytask_ = false;
  bestequip_ = false;
  junhun_ = 0;
  pvptopscore_ = 0;
  plotharrycount_ = 0;
  gouyu_ = 0;
  arenacoin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

updateRoleResponse::~updateRoleResponse() {
  // @@protoc_insertion_point(destructor:main.updateRoleResponse)
  SharedDtor();
}

void updateRoleResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void updateRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const updateRoleResponse& updateRoleResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

updateRoleResponse* updateRoleResponse::default_instance_ = NULL;

updateRoleResponse* updateRoleResponse::New() const {
  return new updateRoleResponse;
}

void updateRoleResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<updateRoleResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(exp_, pvecircletime_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(pverecoverleftcounter_, bestequip_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(junhun_, arenacoin_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool updateRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.updateRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coins;
        break;
      }

      // optional int32 coins = 3;
      case 3: {
        if (tag == 24) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional int32 power = 5;
      case 5: {
        if (tag == 40) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pvpPower;
        break;
      }

      // optional int32 pvpPower = 6;
      case 6: {
        if (tag == 48) {
         parse_pvpPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvppower_)));
          set_has_pvppower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pveLeftTime;
        break;
      }

      // optional int32 pveLeftTime = 7;
      case 7: {
        if (tag == 56) {
         parse_pveLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvelefttime_)));
          set_has_pvelefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pveCircleTime;
        break;
      }

      // optional int32 pveCircleTime = 8;
      case 8: {
        if (tag == 64) {
         parse_pveCircleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvecircletime_)));
          set_has_pvecircletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pveRecoverLeftCounter;
        break;
      }

      // optional int32 pveRecoverLeftCounter = 9;
      case 9: {
        if (tag == 72) {
         parse_pveRecoverLeftCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pverecoverleftcounter_)));
          set_has_pverecoverleftcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pvpLeftTime;
        break;
      }

      // optional int32 pvpLeftTime = 10;
      case 10: {
        if (tag == 80) {
         parse_pvpLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvplefttime_)));
          set_has_pvplefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pvpCircleTime;
        break;
      }

      // optional int32 pvpCircleTime = 11;
      case 11: {
        if (tag == 88) {
         parse_pvpCircleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpcircletime_)));
          set_has_pvpcircletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_pvpRecoverLeftCounter;
        break;
      }

      // optional int32 pvpRecoverLeftCounter = 12;
      case 12: {
        if (tag == 96) {
         parse_pvpRecoverLeftCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvprecoverleftcounter_)));
          set_has_pvprecoverleftcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_meritorious;
        break;
      }

      // optional int32 meritorious = 13;
      case 13: {
        if (tag == 104) {
         parse_meritorious:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meritorious_)));
          set_has_meritorious();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_combatValue;
        break;
      }

      // optional int32 combatValue = 14;
      case 14: {
        if (tag == 112) {
         parse_combatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_canRewardDayTask;
        break;
      }

      // optional bool canRewardDayTask = 15;
      case 15: {
        if (tag == 120) {
         parse_canRewardDayTask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canrewarddaytask_)));
          set_has_canrewarddaytask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_bestEquip;
        break;
      }

      // optional bool bestEquip = 16;
      case 16: {
        if (tag == 128) {
         parse_bestEquip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bestequip_)));
          set_has_bestequip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_junhun;
        break;
      }

      // optional int32 junhun = 17;
      case 17: {
        if (tag == 136) {
         parse_junhun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &junhun_)));
          set_has_junhun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_pvpTopScore;
        break;
      }

      // optional int32 pvpTopScore = 18;
      case 18: {
        if (tag == 144) {
         parse_pvpTopScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptopscore_)));
          set_has_pvptopscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_plotHarryCount;
        break;
      }

      // optional int32 plotHarryCount = 19;
      case 19: {
        if (tag == 152) {
         parse_plotHarryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plotharrycount_)));
          set_has_plotharrycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_gouyu;
        break;
      }

      // optional int32 gouyu = 20;
      case 20: {
        if (tag == 160) {
         parse_gouyu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gouyu_)));
          set_has_gouyu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_arenaCoin;
        break;
      }

      // optional int32 arenaCoin = 21;
      case 21: {
        if (tag == 168) {
         parse_arenaCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.updateRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.updateRoleResponse)
  return false;
#undef DO_
}

void updateRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.updateRoleResponse)
  // optional int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 coins = 3;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coins(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // optional int32 pvpPower = 6;
  if (has_pvppower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pvppower(), output);
  }

  // optional int32 pveLeftTime = 7;
  if (has_pvelefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pvelefttime(), output);
  }

  // optional int32 pveCircleTime = 8;
  if (has_pvecircletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pvecircletime(), output);
  }

  // optional int32 pveRecoverLeftCounter = 9;
  if (has_pverecoverleftcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pverecoverleftcounter(), output);
  }

  // optional int32 pvpLeftTime = 10;
  if (has_pvplefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pvplefttime(), output);
  }

  // optional int32 pvpCircleTime = 11;
  if (has_pvpcircletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pvpcircletime(), output);
  }

  // optional int32 pvpRecoverLeftCounter = 12;
  if (has_pvprecoverleftcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pvprecoverleftcounter(), output);
  }

  // optional int32 meritorious = 13;
  if (has_meritorious()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->meritorious(), output);
  }

  // optional int32 combatValue = 14;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->combatvalue(), output);
  }

  // optional bool canRewardDayTask = 15;
  if (has_canrewarddaytask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->canrewarddaytask(), output);
  }

  // optional bool bestEquip = 16;
  if (has_bestequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->bestequip(), output);
  }

  // optional int32 junhun = 17;
  if (has_junhun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->junhun(), output);
  }

  // optional int32 pvpTopScore = 18;
  if (has_pvptopscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->pvptopscore(), output);
  }

  // optional int32 plotHarryCount = 19;
  if (has_plotharrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->plotharrycount(), output);
  }

  // optional int32 gouyu = 20;
  if (has_gouyu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->gouyu(), output);
  }

  // optional int32 arenaCoin = 21;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->arenacoin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.updateRoleResponse)
}

int updateRoleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 coins = 3;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 pvpPower = 6;
    if (has_pvppower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvppower());
    }

    // optional int32 pveLeftTime = 7;
    if (has_pvelefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvelefttime());
    }

    // optional int32 pveCircleTime = 8;
    if (has_pvecircletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvecircletime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pveRecoverLeftCounter = 9;
    if (has_pverecoverleftcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pverecoverleftcounter());
    }

    // optional int32 pvpLeftTime = 10;
    if (has_pvplefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvplefttime());
    }

    // optional int32 pvpCircleTime = 11;
    if (has_pvpcircletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpcircletime());
    }

    // optional int32 pvpRecoverLeftCounter = 12;
    if (has_pvprecoverleftcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvprecoverleftcounter());
    }

    // optional int32 meritorious = 13;
    if (has_meritorious()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meritorious());
    }

    // optional int32 combatValue = 14;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

    // optional bool canRewardDayTask = 15;
    if (has_canrewarddaytask()) {
      total_size += 1 + 1;
    }

    // optional bool bestEquip = 16;
    if (has_bestequip()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 junhun = 17;
    if (has_junhun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->junhun());
    }

    // optional int32 pvpTopScore = 18;
    if (has_pvptopscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptopscore());
    }

    // optional int32 plotHarryCount = 19;
    if (has_plotharrycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plotharrycount());
    }

    // optional int32 gouyu = 20;
    if (has_gouyu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gouyu());
    }

    // optional int32 arenaCoin = 21;
    if (has_arenacoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenacoin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void updateRoleResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const updateRoleResponse*>(&from));
}

void updateRoleResponse::MergeFrom(const updateRoleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_pvppower()) {
      set_pvppower(from.pvppower());
    }
    if (from.has_pvelefttime()) {
      set_pvelefttime(from.pvelefttime());
    }
    if (from.has_pvecircletime()) {
      set_pvecircletime(from.pvecircletime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pverecoverleftcounter()) {
      set_pverecoverleftcounter(from.pverecoverleftcounter());
    }
    if (from.has_pvplefttime()) {
      set_pvplefttime(from.pvplefttime());
    }
    if (from.has_pvpcircletime()) {
      set_pvpcircletime(from.pvpcircletime());
    }
    if (from.has_pvprecoverleftcounter()) {
      set_pvprecoverleftcounter(from.pvprecoverleftcounter());
    }
    if (from.has_meritorious()) {
      set_meritorious(from.meritorious());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_canrewarddaytask()) {
      set_canrewarddaytask(from.canrewarddaytask());
    }
    if (from.has_bestequip()) {
      set_bestequip(from.bestequip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_junhun()) {
      set_junhun(from.junhun());
    }
    if (from.has_pvptopscore()) {
      set_pvptopscore(from.pvptopscore());
    }
    if (from.has_plotharrycount()) {
      set_plotharrycount(from.plotharrycount());
    }
    if (from.has_gouyu()) {
      set_gouyu(from.gouyu());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void updateRoleResponse::CopyFrom(const updateRoleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updateRoleResponse::IsInitialized() const {

  return true;
}

void updateRoleResponse::Swap(updateRoleResponse* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(coins_, other->coins_);
    std::swap(gold_, other->gold_);
    std::swap(power_, other->power_);
    std::swap(pvppower_, other->pvppower_);
    std::swap(pvelefttime_, other->pvelefttime_);
    std::swap(pvecircletime_, other->pvecircletime_);
    std::swap(pverecoverleftcounter_, other->pverecoverleftcounter_);
    std::swap(pvplefttime_, other->pvplefttime_);
    std::swap(pvpcircletime_, other->pvpcircletime_);
    std::swap(pvprecoverleftcounter_, other->pvprecoverleftcounter_);
    std::swap(meritorious_, other->meritorious_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(canrewarddaytask_, other->canrewarddaytask_);
    std::swap(bestequip_, other->bestequip_);
    std::swap(junhun_, other->junhun_);
    std::swap(pvptopscore_, other->pvptopscore_);
    std::swap(plotharrycount_, other->plotharrycount_);
    std::swap(gouyu_, other->gouyu_);
    std::swap(arenacoin_, other->arenacoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string updateRoleResponse::GetTypeName() const {
  return "main.updateRoleResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerInfo::kTriggerTypeFieldNumber;
const int TriggerInfo::kTriggerNameFieldNumber;
const int TriggerInfo::kTriggerValueFieldNumber;
const int TriggerInfo::kIdFieldNumber;
#endif  // !_MSC_VER

TriggerInfo::TriggerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TriggerInfo)
}

void TriggerInfo::InitAsDefaultInstance() {
}

TriggerInfo::TriggerInfo(const TriggerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TriggerInfo)
}

void TriggerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  triggertype_ = 0;
  triggername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  triggervalue_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerInfo::~TriggerInfo() {
  // @@protoc_insertion_point(destructor:main.TriggerInfo)
  SharedDtor();
}

void TriggerInfo::SharedDtor() {
  if (triggername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete triggername_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TriggerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TriggerInfo& TriggerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

TriggerInfo* TriggerInfo::default_instance_ = NULL;

TriggerInfo* TriggerInfo::New() const {
  return new TriggerInfo;
}

void TriggerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TriggerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(triggertype_, id_);
    if (has_triggername()) {
      if (triggername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        triggername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TriggerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TriggerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 triggerType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_triggerName;
        break;
      }

      // optional string triggerName = 2;
      case 2: {
        if (tag == 18) {
         parse_triggerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_triggername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_triggerValue;
        break;
      }

      // optional int32 triggerValue = 3;
      case 3: {
        if (tag == 24) {
         parse_triggerValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggervalue_)));
          set_has_triggervalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TriggerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TriggerInfo)
  return false;
#undef DO_
}

void TriggerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TriggerInfo)
  // optional int32 triggerType = 1;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->triggertype(), output);
  }

  // optional string triggerName = 2;
  if (has_triggername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->triggername(), output);
  }

  // optional int32 triggerValue = 3;
  if (has_triggervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->triggervalue(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TriggerInfo)
}

int TriggerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 triggerType = 1;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggertype());
    }

    // optional string triggerName = 2;
    if (has_triggername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->triggername());
    }

    // optional int32 triggerValue = 3;
    if (has_triggervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggervalue());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TriggerInfo*>(&from));
}

void TriggerInfo::MergeFrom(const TriggerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_triggername()) {
      set_triggername(from.triggername());
    }
    if (from.has_triggervalue()) {
      set_triggervalue(from.triggervalue());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TriggerInfo::CopyFrom(const TriggerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerInfo::IsInitialized() const {

  return true;
}

void TriggerInfo::Swap(TriggerInfo* other) {
  if (other != this) {
    std::swap(triggertype_, other->triggertype_);
    std::swap(triggername_, other->triggername_);
    std::swap(triggervalue_, other->triggervalue_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TriggerInfo::GetTypeName() const {
  return "main.TriggerInfo";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

updateRolePowerRequest::updateRolePowerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.updateRolePowerRequest)
}

void updateRolePowerRequest::InitAsDefaultInstance() {
}

updateRolePowerRequest::updateRolePowerRequest(const updateRolePowerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.updateRolePowerRequest)
}

void updateRolePowerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

updateRolePowerRequest::~updateRolePowerRequest() {
  // @@protoc_insertion_point(destructor:main.updateRolePowerRequest)
  SharedDtor();
}

void updateRolePowerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void updateRolePowerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const updateRolePowerRequest& updateRolePowerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

updateRolePowerRequest* updateRolePowerRequest::default_instance_ = NULL;

updateRolePowerRequest* updateRolePowerRequest::New() const {
  return new updateRolePowerRequest;
}

void updateRolePowerRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool updateRolePowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.updateRolePowerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.updateRolePowerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.updateRolePowerRequest)
  return false;
#undef DO_
}

void updateRolePowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.updateRolePowerRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.updateRolePowerRequest)
}

int updateRolePowerRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void updateRolePowerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const updateRolePowerRequest*>(&from));
}

void updateRolePowerRequest::MergeFrom(const updateRolePowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void updateRolePowerRequest::CopyFrom(const updateRolePowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updateRolePowerRequest::IsInitialized() const {

  return true;
}

void updateRolePowerRequest::Swap(updateRolePowerRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string updateRolePowerRequest::GetTypeName() const {
  return "main.updateRolePowerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int updateRolePowerResponse::kPowerFieldNumber;
const int updateRolePowerResponse::kPvpPowerFieldNumber;
const int updateRolePowerResponse::kPveCircleTimeFieldNumber;
const int updateRolePowerResponse::kPveLeftTimeFieldNumber;
const int updateRolePowerResponse::kPvpCircleTimeFieldNumber;
const int updateRolePowerResponse::kPvpLeftTimeFieldNumber;
#endif  // !_MSC_VER

updateRolePowerResponse::updateRolePowerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.updateRolePowerResponse)
}

void updateRolePowerResponse::InitAsDefaultInstance() {
}

updateRolePowerResponse::updateRolePowerResponse(const updateRolePowerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.updateRolePowerResponse)
}

void updateRolePowerResponse::SharedCtor() {
  _cached_size_ = 0;
  power_ = 0;
  pvppower_ = 0;
  pvecircletime_ = 0;
  pvelefttime_ = 0;
  pvpcircletime_ = 0;
  pvplefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

updateRolePowerResponse::~updateRolePowerResponse() {
  // @@protoc_insertion_point(destructor:main.updateRolePowerResponse)
  SharedDtor();
}

void updateRolePowerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void updateRolePowerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const updateRolePowerResponse& updateRolePowerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

updateRolePowerResponse* updateRolePowerResponse::default_instance_ = NULL;

updateRolePowerResponse* updateRolePowerResponse::New() const {
  return new updateRolePowerResponse;
}

void updateRolePowerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<updateRolePowerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(power_, pvplefttime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool updateRolePowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.updateRolePowerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 power = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pvpPower;
        break;
      }

      // optional int32 pvpPower = 2;
      case 2: {
        if (tag == 16) {
         parse_pvpPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvppower_)));
          set_has_pvppower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pveCircleTime;
        break;
      }

      // optional int32 pveCircleTime = 3;
      case 3: {
        if (tag == 24) {
         parse_pveCircleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvecircletime_)));
          set_has_pvecircletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pveLeftTime;
        break;
      }

      // optional int32 pveLeftTime = 4;
      case 4: {
        if (tag == 32) {
         parse_pveLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvelefttime_)));
          set_has_pvelefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pvpCircleTime;
        break;
      }

      // optional int32 pvpCircleTime = 5;
      case 5: {
        if (tag == 40) {
         parse_pvpCircleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpcircletime_)));
          set_has_pvpcircletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pvpLeftTime;
        break;
      }

      // optional int32 pvpLeftTime = 6;
      case 6: {
        if (tag == 48) {
         parse_pvpLeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvplefttime_)));
          set_has_pvplefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.updateRolePowerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.updateRolePowerResponse)
  return false;
#undef DO_
}

void updateRolePowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.updateRolePowerResponse)
  // optional int32 power = 1;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->power(), output);
  }

  // optional int32 pvpPower = 2;
  if (has_pvppower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pvppower(), output);
  }

  // optional int32 pveCircleTime = 3;
  if (has_pvecircletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pvecircletime(), output);
  }

  // optional int32 pveLeftTime = 4;
  if (has_pvelefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pvelefttime(), output);
  }

  // optional int32 pvpCircleTime = 5;
  if (has_pvpcircletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pvpcircletime(), output);
  }

  // optional int32 pvpLeftTime = 6;
  if (has_pvplefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pvplefttime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.updateRolePowerResponse)
}

int updateRolePowerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 power = 1;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 pvpPower = 2;
    if (has_pvppower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvppower());
    }

    // optional int32 pveCircleTime = 3;
    if (has_pvecircletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvecircletime());
    }

    // optional int32 pveLeftTime = 4;
    if (has_pvelefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvelefttime());
    }

    // optional int32 pvpCircleTime = 5;
    if (has_pvpcircletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpcircletime());
    }

    // optional int32 pvpLeftTime = 6;
    if (has_pvplefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvplefttime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void updateRolePowerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const updateRolePowerResponse*>(&from));
}

void updateRolePowerResponse::MergeFrom(const updateRolePowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_pvppower()) {
      set_pvppower(from.pvppower());
    }
    if (from.has_pvecircletime()) {
      set_pvecircletime(from.pvecircletime());
    }
    if (from.has_pvelefttime()) {
      set_pvelefttime(from.pvelefttime());
    }
    if (from.has_pvpcircletime()) {
      set_pvpcircletime(from.pvpcircletime());
    }
    if (from.has_pvplefttime()) {
      set_pvplefttime(from.pvplefttime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void updateRolePowerResponse::CopyFrom(const updateRolePowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updateRolePowerResponse::IsInitialized() const {

  return true;
}

void updateRolePowerResponse::Swap(updateRolePowerResponse* other) {
  if (other != this) {
    std::swap(power_, other->power_);
    std::swap(pvppower_, other->pvppower_);
    std::swap(pvecircletime_, other->pvecircletime_);
    std::swap(pvelefttime_, other->pvelefttime_);
    std::swap(pvpcircletime_, other->pvpcircletime_);
    std::swap(pvplefttime_, other->pvplefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string updateRolePowerResponse::GetTypeName() const {
  return "main.updateRolePowerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BaseBagInfo::kBaseOfficerCardInfoProtoFieldNumber;
const int BaseBagInfo::kBaseEquipmentCardItemProtoFieldNumber;
const int BaseBagInfo::kBaseSoldierCardItemProtoFieldNumber;
const int BaseBagInfo::kBasePropsCardItemProtoFieldNumber;
const int BaseBagInfo::kBaseOfficerFragmentCardItemProtoFieldNumber;
const int BaseBagInfo::kBaseConsumableCardItemProtoFieldNumber;
const int BaseBagInfo::kMaterialItemProtoFieldNumber;
#endif  // !_MSC_VER

BaseBagInfo::BaseBagInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BaseBagInfo)
}

void BaseBagInfo::InitAsDefaultInstance() {
}

BaseBagInfo::BaseBagInfo(const BaseBagInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BaseBagInfo)
}

void BaseBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseBagInfo::~BaseBagInfo() {
  // @@protoc_insertion_point(destructor:main.BaseBagInfo)
  SharedDtor();
}

void BaseBagInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BaseBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BaseBagInfo& BaseBagInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

BaseBagInfo* BaseBagInfo::default_instance_ = NULL;

BaseBagInfo* BaseBagInfo::New() const {
  return new BaseBagInfo;
}

void BaseBagInfo::Clear() {
  baseofficercardinfoproto_.Clear();
  baseequipmentcarditemproto_.Clear();
  basesoldiercarditemproto_.Clear();
  basepropscarditemproto_.Clear();
  baseofficerfragmentcarditemproto_.Clear();
  baseconsumablecarditemproto_.Clear();
  materialitemproto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BaseBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BaseBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.OfficerCardItemProto baseOfficerCardInfoProto = 1;
      case 1: {
        if (tag == 10) {
         parse_baseOfficerCardInfoProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseofficercardinfoproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_baseOfficerCardInfoProto;
        if (input->ExpectTag(18)) goto parse_baseEquipmentCardItemProto;
        break;
      }

      // repeated .main.EquipmentCardItemProto baseEquipmentCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_baseEquipmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseequipmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_baseEquipmentCardItemProto;
        if (input->ExpectTag(26)) goto parse_baseSoldierCardItemProto;
        break;
      }

      // repeated .main.SoldierCardItemProto baseSoldierCardItemProto = 3;
      case 3: {
        if (tag == 26) {
         parse_baseSoldierCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basesoldiercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseSoldierCardItemProto;
        if (input->ExpectTag(34)) goto parse_basePropsCardItemProto;
        break;
      }

      // repeated .main.PropsCardItemProto basePropsCardItemProto = 4;
      case 4: {
        if (tag == 34) {
         parse_basePropsCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basepropscarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_basePropsCardItemProto;
        if (input->ExpectTag(42)) goto parse_baseOfficerFragmentCardItemProto;
        break;
      }

      // repeated .main.OfficerFragmentCardItemProto baseOfficerFragmentCardItemProto = 5;
      case 5: {
        if (tag == 42) {
         parse_baseOfficerFragmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseofficerfragmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_baseOfficerFragmentCardItemProto;
        if (input->ExpectTag(50)) goto parse_baseConsumableCardItemProto;
        break;
      }

      // repeated .main.ConsumableCardItemProto baseConsumableCardItemProto = 6;
      case 6: {
        if (tag == 50) {
         parse_baseConsumableCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseconsumablecarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_baseConsumableCardItemProto;
        if (input->ExpectTag(58)) goto parse_materialItemProto;
        break;
      }

      // repeated .main.MaterialItemProto materialItemProto = 7;
      case 7: {
        if (tag == 58) {
         parse_materialItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialitemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_materialItemProto;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BaseBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BaseBagInfo)
  return false;
#undef DO_
}

void BaseBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BaseBagInfo)
  // repeated .main.OfficerCardItemProto baseOfficerCardInfoProto = 1;
  for (int i = 0; i < this->baseofficercardinfoproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baseofficercardinfoproto(i), output);
  }

  // repeated .main.EquipmentCardItemProto baseEquipmentCardItemProto = 2;
  for (int i = 0; i < this->baseequipmentcarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->baseequipmentcarditemproto(i), output);
  }

  // repeated .main.SoldierCardItemProto baseSoldierCardItemProto = 3;
  for (int i = 0; i < this->basesoldiercarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->basesoldiercarditemproto(i), output);
  }

  // repeated .main.PropsCardItemProto basePropsCardItemProto = 4;
  for (int i = 0; i < this->basepropscarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->basepropscarditemproto(i), output);
  }

  // repeated .main.OfficerFragmentCardItemProto baseOfficerFragmentCardItemProto = 5;
  for (int i = 0; i < this->baseofficerfragmentcarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->baseofficerfragmentcarditemproto(i), output);
  }

  // repeated .main.ConsumableCardItemProto baseConsumableCardItemProto = 6;
  for (int i = 0; i < this->baseconsumablecarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->baseconsumablecarditemproto(i), output);
  }

  // repeated .main.MaterialItemProto materialItemProto = 7;
  for (int i = 0; i < this->materialitemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->materialitemproto(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BaseBagInfo)
}

int BaseBagInfo::ByteSize() const {
  int total_size = 0;

  // repeated .main.OfficerCardItemProto baseOfficerCardInfoProto = 1;
  total_size += 1 * this->baseofficercardinfoproto_size();
  for (int i = 0; i < this->baseofficercardinfoproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseofficercardinfoproto(i));
  }

  // repeated .main.EquipmentCardItemProto baseEquipmentCardItemProto = 2;
  total_size += 1 * this->baseequipmentcarditemproto_size();
  for (int i = 0; i < this->baseequipmentcarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseequipmentcarditemproto(i));
  }

  // repeated .main.SoldierCardItemProto baseSoldierCardItemProto = 3;
  total_size += 1 * this->basesoldiercarditemproto_size();
  for (int i = 0; i < this->basesoldiercarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basesoldiercarditemproto(i));
  }

  // repeated .main.PropsCardItemProto basePropsCardItemProto = 4;
  total_size += 1 * this->basepropscarditemproto_size();
  for (int i = 0; i < this->basepropscarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basepropscarditemproto(i));
  }

  // repeated .main.OfficerFragmentCardItemProto baseOfficerFragmentCardItemProto = 5;
  total_size += 1 * this->baseofficerfragmentcarditemproto_size();
  for (int i = 0; i < this->baseofficerfragmentcarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseofficerfragmentcarditemproto(i));
  }

  // repeated .main.ConsumableCardItemProto baseConsumableCardItemProto = 6;
  total_size += 1 * this->baseconsumablecarditemproto_size();
  for (int i = 0; i < this->baseconsumablecarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseconsumablecarditemproto(i));
  }

  // repeated .main.MaterialItemProto materialItemProto = 7;
  total_size += 1 * this->materialitemproto_size();
  for (int i = 0; i < this->materialitemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialitemproto(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseBagInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BaseBagInfo*>(&from));
}

void BaseBagInfo::MergeFrom(const BaseBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  baseofficercardinfoproto_.MergeFrom(from.baseofficercardinfoproto_);
  baseequipmentcarditemproto_.MergeFrom(from.baseequipmentcarditemproto_);
  basesoldiercarditemproto_.MergeFrom(from.basesoldiercarditemproto_);
  basepropscarditemproto_.MergeFrom(from.basepropscarditemproto_);
  baseofficerfragmentcarditemproto_.MergeFrom(from.baseofficerfragmentcarditemproto_);
  baseconsumablecarditemproto_.MergeFrom(from.baseconsumablecarditemproto_);
  materialitemproto_.MergeFrom(from.materialitemproto_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BaseBagInfo::CopyFrom(const BaseBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseBagInfo::IsInitialized() const {

  return true;
}

void BaseBagInfo::Swap(BaseBagInfo* other) {
  if (other != this) {
    baseofficercardinfoproto_.Swap(&other->baseofficercardinfoproto_);
    baseequipmentcarditemproto_.Swap(&other->baseequipmentcarditemproto_);
    basesoldiercarditemproto_.Swap(&other->basesoldiercarditemproto_);
    basepropscarditemproto_.Swap(&other->basepropscarditemproto_);
    baseofficerfragmentcarditemproto_.Swap(&other->baseofficerfragmentcarditemproto_);
    baseconsumablecarditemproto_.Swap(&other->baseconsumablecarditemproto_);
    materialitemproto_.Swap(&other->materialitemproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BaseBagInfo::GetTypeName() const {
  return "main.BaseBagInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kTeamInfoItemFieldNumber;
const int TeamInfo::kOnTeamOfficerSsidsFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TeamInfo)
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TeamInfo)
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:main.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TeamInfo& TeamInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  teaminfoitem_.Clear();
  onteamofficerssids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.TeamInfoItem teamInfoItem = 1;
      case 1: {
        if (tag == 10) {
         parse_teamInfoItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfoitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_teamInfoItem;
        if (input->ExpectTag(16)) goto parse_onTeamOfficerSsids;
        break;
      }

      // repeated int32 onTeamOfficerSsids = 2;
      case 2: {
        if (tag == 16) {
         parse_onTeamOfficerSsids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_onteamofficerssids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onteamofficerssids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_onTeamOfficerSsids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TeamInfo)
  // repeated .main.TeamInfoItem teamInfoItem = 1;
  for (int i = 0; i < this->teaminfoitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->teaminfoitem(i), output);
  }

  // repeated int32 onTeamOfficerSsids = 2;
  for (int i = 0; i < this->onteamofficerssids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->onteamofficerssids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TeamInfo)
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  // repeated .main.TeamInfoItem teamInfoItem = 1;
  total_size += 1 * this->teaminfoitem_size();
  for (int i = 0; i < this->teaminfoitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfoitem(i));
  }

  // repeated int32 onTeamOfficerSsids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->onteamofficerssids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->onteamofficerssids(i));
    }
    total_size += 1 * this->onteamofficerssids_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TeamInfo*>(&from));
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfoitem_.MergeFrom(from.teaminfoitem_);
  onteamofficerssids_.MergeFrom(from.onteamofficerssids_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {

  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    teaminfoitem_.Swap(&other->teaminfoitem_);
    onteamofficerssids_.Swap(&other->onteamofficerssids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TeamInfo::GetTypeName() const {
  return "main.TeamInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfoItem::kTeamIdFieldNumber;
const int TeamInfoItem::kLordOfficerCardIdFieldNumber;
const int TeamInfoItem::kOfficerListFieldNumber;
const int TeamInfoItem::kRedSoldierFieldNumber;
const int TeamInfoItem::kBlueSoldierFieldNumber;
const int TeamInfoItem::kGreenSoldierFieldNumber;
const int TeamInfoItem::kCurrentFieldNumber;
#endif  // !_MSC_VER

TeamInfoItem::TeamInfoItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TeamInfoItem)
}

void TeamInfoItem::InitAsDefaultInstance() {
}

TeamInfoItem::TeamInfoItem(const TeamInfoItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TeamInfoItem)
}

void TeamInfoItem::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  lordofficercardid_ = 0;
  redsoldier_ = 0;
  bluesoldier_ = 0;
  greensoldier_ = 0;
  current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfoItem::~TeamInfoItem() {
  // @@protoc_insertion_point(destructor:main.TeamInfoItem)
  SharedDtor();
}

void TeamInfoItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TeamInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TeamInfoItem& TeamInfoItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

TeamInfoItem* TeamInfoItem::default_instance_ = NULL;

TeamInfoItem* TeamInfoItem::New() const {
  return new TeamInfoItem;
}

void TeamInfoItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamInfoItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(teamid_, lordofficercardid_);
    ZR_(redsoldier_, current_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  officerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TeamInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TeamInfoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 teamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lordOfficerCardId;
        break;
      }

      // optional int32 lordOfficerCardId = 2;
      case 2: {
        if (tag == 16) {
         parse_lordOfficerCardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordofficercardid_)));
          set_has_lordofficercardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_officerList;
        break;
      }

      // repeated int32 officerList = 3;
      case 3: {
        if (tag == 24) {
         parse_officerList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_officerlist())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_officerlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_officerList;
        if (input->ExpectTag(32)) goto parse_redSoldier;
        break;
      }

      // optional int32 redSoldier = 4;
      case 4: {
        if (tag == 32) {
         parse_redSoldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redsoldier_)));
          set_has_redsoldier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blueSoldier;
        break;
      }

      // optional int32 blueSoldier = 5;
      case 5: {
        if (tag == 40) {
         parse_blueSoldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluesoldier_)));
          set_has_bluesoldier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_greenSoldier;
        break;
      }

      // optional int32 greenSoldier = 6;
      case 6: {
        if (tag == 48) {
         parse_greenSoldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &greensoldier_)));
          set_has_greensoldier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_current;
        break;
      }

      // optional int32 current = 7;
      case 7: {
        if (tag == 56) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TeamInfoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TeamInfoItem)
  return false;
#undef DO_
}

void TeamInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TeamInfoItem)
  // optional int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  // optional int32 lordOfficerCardId = 2;
  if (has_lordofficercardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lordofficercardid(), output);
  }

  // repeated int32 officerList = 3;
  for (int i = 0; i < this->officerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->officerlist(i), output);
  }

  // optional int32 redSoldier = 4;
  if (has_redsoldier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->redsoldier(), output);
  }

  // optional int32 blueSoldier = 5;
  if (has_bluesoldier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bluesoldier(), output);
  }

  // optional int32 greenSoldier = 6;
  if (has_greensoldier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->greensoldier(), output);
  }

  // optional int32 current = 7;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TeamInfoItem)
}

int TeamInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional int32 lordOfficerCardId = 2;
    if (has_lordofficercardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordofficercardid());
    }

    // optional int32 redSoldier = 4;
    if (has_redsoldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redsoldier());
    }

    // optional int32 blueSoldier = 5;
    if (has_bluesoldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluesoldier());
    }

    // optional int32 greenSoldier = 6;
    if (has_greensoldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->greensoldier());
    }

    // optional int32 current = 7;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }

  }
  // repeated int32 officerList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->officerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->officerlist(i));
    }
    total_size += 1 * this->officerlist_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfoItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TeamInfoItem*>(&from));
}

void TeamInfoItem::MergeFrom(const TeamInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  officerlist_.MergeFrom(from.officerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_lordofficercardid()) {
      set_lordofficercardid(from.lordofficercardid());
    }
    if (from.has_redsoldier()) {
      set_redsoldier(from.redsoldier());
    }
    if (from.has_bluesoldier()) {
      set_bluesoldier(from.bluesoldier());
    }
    if (from.has_greensoldier()) {
      set_greensoldier(from.greensoldier());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TeamInfoItem::CopyFrom(const TeamInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfoItem::IsInitialized() const {

  return true;
}

void TeamInfoItem::Swap(TeamInfoItem* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(lordofficercardid_, other->lordofficercardid_);
    officerlist_.Swap(&other->officerlist_);
    std::swap(redsoldier_, other->redsoldier_);
    std::swap(bluesoldier_, other->bluesoldier_);
    std::swap(greensoldier_, other->greensoldier_);
    std::swap(current_, other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TeamInfoItem::GetTypeName() const {
  return "main.TeamInfoItem";
}


// ===================================================================

#ifndef _MSC_VER
const int BeginnersGuideRequest::kIdFieldNumber;
#endif  // !_MSC_VER

BeginnersGuideRequest::BeginnersGuideRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BeginnersGuideRequest)
}

void BeginnersGuideRequest::InitAsDefaultInstance() {
}

BeginnersGuideRequest::BeginnersGuideRequest(const BeginnersGuideRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BeginnersGuideRequest)
}

void BeginnersGuideRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginnersGuideRequest::~BeginnersGuideRequest() {
  // @@protoc_insertion_point(destructor:main.BeginnersGuideRequest)
  SharedDtor();
}

void BeginnersGuideRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BeginnersGuideRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeginnersGuideRequest& BeginnersGuideRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

BeginnersGuideRequest* BeginnersGuideRequest::default_instance_ = NULL;

BeginnersGuideRequest* BeginnersGuideRequest::New() const {
  return new BeginnersGuideRequest;
}

void BeginnersGuideRequest::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BeginnersGuideRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BeginnersGuideRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BeginnersGuideRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BeginnersGuideRequest)
  return false;
#undef DO_
}

void BeginnersGuideRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BeginnersGuideRequest)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BeginnersGuideRequest)
}

int BeginnersGuideRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginnersGuideRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginnersGuideRequest*>(&from));
}

void BeginnersGuideRequest::MergeFrom(const BeginnersGuideRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BeginnersGuideRequest::CopyFrom(const BeginnersGuideRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginnersGuideRequest::IsInitialized() const {

  return true;
}

void BeginnersGuideRequest::Swap(BeginnersGuideRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BeginnersGuideRequest::GetTypeName() const {
  return "main.BeginnersGuideRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BeginnersGuideResponse::kStateFieldNumber;
#endif  // !_MSC_VER

BeginnersGuideResponse::BeginnersGuideResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BeginnersGuideResponse)
}

void BeginnersGuideResponse::InitAsDefaultInstance() {
}

BeginnersGuideResponse::BeginnersGuideResponse(const BeginnersGuideResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BeginnersGuideResponse)
}

void BeginnersGuideResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginnersGuideResponse::~BeginnersGuideResponse() {
  // @@protoc_insertion_point(destructor:main.BeginnersGuideResponse)
  SharedDtor();
}

void BeginnersGuideResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BeginnersGuideResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BeginnersGuideResponse& BeginnersGuideResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

BeginnersGuideResponse* BeginnersGuideResponse::default_instance_ = NULL;

BeginnersGuideResponse* BeginnersGuideResponse::New() const {
  return new BeginnersGuideResponse;
}

void BeginnersGuideResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BeginnersGuideResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BeginnersGuideResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BeginnersGuideResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BeginnersGuideResponse)
  return false;
#undef DO_
}

void BeginnersGuideResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BeginnersGuideResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BeginnersGuideResponse)
}

int BeginnersGuideResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginnersGuideResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BeginnersGuideResponse*>(&from));
}

void BeginnersGuideResponse::MergeFrom(const BeginnersGuideResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BeginnersGuideResponse::CopyFrom(const BeginnersGuideResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginnersGuideResponse::IsInitialized() const {

  return true;
}

void BeginnersGuideResponse::Swap(BeginnersGuideResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BeginnersGuideResponse::GetTypeName() const {
  return "main.BeginnersGuideResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginAwardListRequest::LoginAwardListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LoginAwardListRequest)
}

void LoginAwardListRequest::InitAsDefaultInstance() {
}

LoginAwardListRequest::LoginAwardListRequest(const LoginAwardListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LoginAwardListRequest)
}

void LoginAwardListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAwardListRequest::~LoginAwardListRequest() {
  // @@protoc_insertion_point(destructor:main.LoginAwardListRequest)
  SharedDtor();
}

void LoginAwardListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginAwardListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginAwardListRequest& LoginAwardListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

LoginAwardListRequest* LoginAwardListRequest::default_instance_ = NULL;

LoginAwardListRequest* LoginAwardListRequest::New() const {
  return new LoginAwardListRequest;
}

void LoginAwardListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginAwardListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LoginAwardListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.LoginAwardListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LoginAwardListRequest)
  return false;
#undef DO_
}

void LoginAwardListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LoginAwardListRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LoginAwardListRequest)
}

int LoginAwardListRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAwardListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginAwardListRequest*>(&from));
}

void LoginAwardListRequest::MergeFrom(const LoginAwardListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginAwardListRequest::CopyFrom(const LoginAwardListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAwardListRequest::IsInitialized() const {

  return true;
}

void LoginAwardListRequest::Swap(LoginAwardListRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginAwardListRequest::GetTypeName() const {
  return "main.LoginAwardListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginAwardListResponse::kLonginDayFieldNumber;
const int LoginAwardListResponse::kModelFieldNumber;
#endif  // !_MSC_VER

LoginAwardListResponse::LoginAwardListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LoginAwardListResponse)
}

void LoginAwardListResponse::InitAsDefaultInstance() {
}

LoginAwardListResponse::LoginAwardListResponse(const LoginAwardListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LoginAwardListResponse)
}

void LoginAwardListResponse::SharedCtor() {
  _cached_size_ = 0;
  longinday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAwardListResponse::~LoginAwardListResponse() {
  // @@protoc_insertion_point(destructor:main.LoginAwardListResponse)
  SharedDtor();
}

void LoginAwardListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginAwardListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginAwardListResponse& LoginAwardListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

LoginAwardListResponse* LoginAwardListResponse::default_instance_ = NULL;

LoginAwardListResponse* LoginAwardListResponse::New() const {
  return new LoginAwardListResponse;
}

void LoginAwardListResponse::Clear() {
  longinday_ = 0;
  model_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginAwardListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LoginAwardListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 longinDay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longinday_)));
          set_has_longinday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // repeated .main.LoginAwardModel model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LoginAwardListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LoginAwardListResponse)
  return false;
#undef DO_
}

void LoginAwardListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LoginAwardListResponse)
  // optional int32 longinDay = 1;
  if (has_longinday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->longinday(), output);
  }

  // repeated .main.LoginAwardModel model = 2;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->model(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LoginAwardListResponse)
}

int LoginAwardListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 longinDay = 1;
    if (has_longinday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longinday());
    }

  }
  // repeated .main.LoginAwardModel model = 2;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAwardListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginAwardListResponse*>(&from));
}

void LoginAwardListResponse::MergeFrom(const LoginAwardListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longinday()) {
      set_longinday(from.longinday());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginAwardListResponse::CopyFrom(const LoginAwardListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAwardListResponse::IsInitialized() const {

  return true;
}

void LoginAwardListResponse::Swap(LoginAwardListResponse* other) {
  if (other != this) {
    std::swap(longinday_, other->longinday_);
    model_.Swap(&other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginAwardListResponse::GetTypeName() const {
  return "main.LoginAwardListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginAwardModel::kDayFieldNumber;
const int LoginAwardModel::kLoginAwardItemModelFieldNumber;
const int LoginAwardModel::kIsFinishFieldNumber;
#endif  // !_MSC_VER

LoginAwardModel::LoginAwardModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LoginAwardModel)
}

void LoginAwardModel::InitAsDefaultInstance() {
}

LoginAwardModel::LoginAwardModel(const LoginAwardModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LoginAwardModel)
}

void LoginAwardModel::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  isfinish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAwardModel::~LoginAwardModel() {
  // @@protoc_insertion_point(destructor:main.LoginAwardModel)
  SharedDtor();
}

void LoginAwardModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginAwardModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginAwardModel& LoginAwardModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

LoginAwardModel* LoginAwardModel::default_instance_ = NULL;

LoginAwardModel* LoginAwardModel::New() const {
  return new LoginAwardModel;
}

void LoginAwardModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginAwardModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(day_, isfinish_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  loginawarditemmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginAwardModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LoginAwardModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginAwardItemModel;
        break;
      }

      // repeated .main.LoginAwardItemModel loginAwardItemModel = 2;
      case 2: {
        if (tag == 18) {
         parse_loginAwardItemModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loginawarditemmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginAwardItemModel;
        if (input->ExpectTag(24)) goto parse_isFinish;
        break;
      }

      // optional int32 isFinish = 3;
      case 3: {
        if (tag == 24) {
         parse_isFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfinish_)));
          set_has_isfinish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LoginAwardModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LoginAwardModel)
  return false;
#undef DO_
}

void LoginAwardModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LoginAwardModel)
  // optional int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  // repeated .main.LoginAwardItemModel loginAwardItemModel = 2;
  for (int i = 0; i < this->loginawarditemmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->loginawarditemmodel(i), output);
  }

  // optional int32 isFinish = 3;
  if (has_isfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isfinish(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LoginAwardModel)
}

int LoginAwardModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 isFinish = 3;
    if (has_isfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfinish());
    }

  }
  // repeated .main.LoginAwardItemModel loginAwardItemModel = 2;
  total_size += 1 * this->loginawarditemmodel_size();
  for (int i = 0; i < this->loginawarditemmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loginawarditemmodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAwardModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginAwardModel*>(&from));
}

void LoginAwardModel::MergeFrom(const LoginAwardModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  loginawarditemmodel_.MergeFrom(from.loginawarditemmodel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_isfinish()) {
      set_isfinish(from.isfinish());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginAwardModel::CopyFrom(const LoginAwardModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAwardModel::IsInitialized() const {

  return true;
}

void LoginAwardModel::Swap(LoginAwardModel* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    loginawarditemmodel_.Swap(&other->loginawarditemmodel_);
    std::swap(isfinish_, other->isfinish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginAwardModel::GetTypeName() const {
  return "main.LoginAwardModel";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginAwardItemModel::kItemIdFieldNumber;
const int LoginAwardItemModel::kItemTypeFieldNumber;
const int LoginAwardItemModel::kCountFieldNumber;
#endif  // !_MSC_VER

LoginAwardItemModel::LoginAwardItemModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LoginAwardItemModel)
}

void LoginAwardItemModel::InitAsDefaultInstance() {
}

LoginAwardItemModel::LoginAwardItemModel(const LoginAwardItemModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LoginAwardItemModel)
}

void LoginAwardItemModel::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemtype_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAwardItemModel::~LoginAwardItemModel() {
  // @@protoc_insertion_point(destructor:main.LoginAwardItemModel)
  SharedDtor();
}

void LoginAwardItemModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginAwardItemModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginAwardItemModel& LoginAwardItemModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

LoginAwardItemModel* LoginAwardItemModel::default_instance_ = NULL;

LoginAwardItemModel* LoginAwardItemModel::New() const {
  return new LoginAwardItemModel;
}

void LoginAwardItemModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginAwardItemModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginAwardItemModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LoginAwardItemModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // optional int32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LoginAwardItemModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LoginAwardItemModel)
  return false;
#undef DO_
}

void LoginAwardItemModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LoginAwardItemModel)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LoginAwardItemModel)
}

int LoginAwardItemModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAwardItemModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginAwardItemModel*>(&from));
}

void LoginAwardItemModel::MergeFrom(const LoginAwardItemModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginAwardItemModel::CopyFrom(const LoginAwardItemModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAwardItemModel::IsInitialized() const {

  return true;
}

void LoginAwardItemModel::Swap(LoginAwardItemModel* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginAwardItemModel::GetTypeName() const {
  return "main.LoginAwardItemModel";
}


// ===================================================================

#ifndef _MSC_VER
const int RewardLoginAwardRequest::kDayFieldNumber;
#endif  // !_MSC_VER

RewardLoginAwardRequest::RewardLoginAwardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RewardLoginAwardRequest)
}

void RewardLoginAwardRequest::InitAsDefaultInstance() {
}

RewardLoginAwardRequest::RewardLoginAwardRequest(const RewardLoginAwardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RewardLoginAwardRequest)
}

void RewardLoginAwardRequest::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLoginAwardRequest::~RewardLoginAwardRequest() {
  // @@protoc_insertion_point(destructor:main.RewardLoginAwardRequest)
  SharedDtor();
}

void RewardLoginAwardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewardLoginAwardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewardLoginAwardRequest& RewardLoginAwardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

RewardLoginAwardRequest* RewardLoginAwardRequest::default_instance_ = NULL;

RewardLoginAwardRequest* RewardLoginAwardRequest::New() const {
  return new RewardLoginAwardRequest;
}

void RewardLoginAwardRequest::Clear() {
  day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RewardLoginAwardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RewardLoginAwardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RewardLoginAwardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RewardLoginAwardRequest)
  return false;
#undef DO_
}

void RewardLoginAwardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RewardLoginAwardRequest)
  // optional int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RewardLoginAwardRequest)
}

int RewardLoginAwardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLoginAwardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewardLoginAwardRequest*>(&from));
}

void RewardLoginAwardRequest::MergeFrom(const RewardLoginAwardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RewardLoginAwardRequest::CopyFrom(const RewardLoginAwardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLoginAwardRequest::IsInitialized() const {

  return true;
}

void RewardLoginAwardRequest::Swap(RewardLoginAwardRequest* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RewardLoginAwardRequest::GetTypeName() const {
  return "main.RewardLoginAwardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RewardLoginAwardResponse::kStateFieldNumber;
const int RewardLoginAwardResponse::kLoginAwardItemInfoFieldNumber;
#endif  // !_MSC_VER

RewardLoginAwardResponse::RewardLoginAwardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RewardLoginAwardResponse)
}

void RewardLoginAwardResponse::InitAsDefaultInstance() {
}

RewardLoginAwardResponse::RewardLoginAwardResponse(const RewardLoginAwardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RewardLoginAwardResponse)
}

void RewardLoginAwardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLoginAwardResponse::~RewardLoginAwardResponse() {
  // @@protoc_insertion_point(destructor:main.RewardLoginAwardResponse)
  SharedDtor();
}

void RewardLoginAwardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewardLoginAwardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewardLoginAwardResponse& RewardLoginAwardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

RewardLoginAwardResponse* RewardLoginAwardResponse::default_instance_ = NULL;

RewardLoginAwardResponse* RewardLoginAwardResponse::New() const {
  return new RewardLoginAwardResponse;
}

void RewardLoginAwardResponse::Clear() {
  state_ = false;
  loginawarditeminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RewardLoginAwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RewardLoginAwardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginAwardItemInfo;
        break;
      }

      // repeated .main.LoginAwardItemInfo loginAwardItemInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_loginAwardItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loginawarditeminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginAwardItemInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RewardLoginAwardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RewardLoginAwardResponse)
  return false;
#undef DO_
}

void RewardLoginAwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RewardLoginAwardResponse)
  // optional bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  // repeated .main.LoginAwardItemInfo loginAwardItemInfo = 2;
  for (int i = 0; i < this->loginawarditeminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->loginawarditeminfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RewardLoginAwardResponse)
}

int RewardLoginAwardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated .main.LoginAwardItemInfo loginAwardItemInfo = 2;
  total_size += 1 * this->loginawarditeminfo_size();
  for (int i = 0; i < this->loginawarditeminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loginawarditeminfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLoginAwardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewardLoginAwardResponse*>(&from));
}

void RewardLoginAwardResponse::MergeFrom(const RewardLoginAwardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  loginawarditeminfo_.MergeFrom(from.loginawarditeminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RewardLoginAwardResponse::CopyFrom(const RewardLoginAwardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLoginAwardResponse::IsInitialized() const {

  return true;
}

void RewardLoginAwardResponse::Swap(RewardLoginAwardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    loginawarditeminfo_.Swap(&other->loginawarditeminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RewardLoginAwardResponse::GetTypeName() const {
  return "main.RewardLoginAwardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginAwardItemInfo::kItemIdFieldNumber;
const int LoginAwardItemInfo::kItemTypeFieldNumber;
const int LoginAwardItemInfo::kCountFieldNumber;
const int LoginAwardItemInfo::kCoinsFieldNumber;
#endif  // !_MSC_VER

LoginAwardItemInfo::LoginAwardItemInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LoginAwardItemInfo)
}

void LoginAwardItemInfo::InitAsDefaultInstance() {
}

LoginAwardItemInfo::LoginAwardItemInfo(const LoginAwardItemInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LoginAwardItemInfo)
}

void LoginAwardItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemtype_ = 0;
  count_ = 0;
  coins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAwardItemInfo::~LoginAwardItemInfo() {
  // @@protoc_insertion_point(destructor:main.LoginAwardItemInfo)
  SharedDtor();
}

void LoginAwardItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginAwardItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginAwardItemInfo& LoginAwardItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

LoginAwardItemInfo* LoginAwardItemInfo::default_instance_ = NULL;

LoginAwardItemInfo* LoginAwardItemInfo::New() const {
  return new LoginAwardItemInfo;
}

void LoginAwardItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginAwardItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, coins_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginAwardItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LoginAwardItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // optional int32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coins;
        break;
      }

      // optional int32 coins = 4;
      case 4: {
        if (tag == 32) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LoginAwardItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LoginAwardItemInfo)
  return false;
#undef DO_
}

void LoginAwardItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LoginAwardItemInfo)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 coins = 4;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coins(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LoginAwardItemInfo)
}

int LoginAwardItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 coins = 4;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAwardItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginAwardItemInfo*>(&from));
}

void LoginAwardItemInfo::MergeFrom(const LoginAwardItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginAwardItemInfo::CopyFrom(const LoginAwardItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAwardItemInfo::IsInitialized() const {

  return true;
}

void LoginAwardItemInfo::Swap(LoginAwardItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(count_, other->count_);
    std::swap(coins_, other->coins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginAwardItemInfo::GetTypeName() const {
  return "main.LoginAwardItemInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RewardLoginAwardGoldResponse::kStateFieldNumber;
const int RewardLoginAwardGoldResponse::kCoinsFieldNumber;
#endif  // !_MSC_VER

RewardLoginAwardGoldResponse::RewardLoginAwardGoldResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RewardLoginAwardGoldResponse)
}

void RewardLoginAwardGoldResponse::InitAsDefaultInstance() {
}

RewardLoginAwardGoldResponse::RewardLoginAwardGoldResponse(const RewardLoginAwardGoldResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RewardLoginAwardGoldResponse)
}

void RewardLoginAwardGoldResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  coins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLoginAwardGoldResponse::~RewardLoginAwardGoldResponse() {
  // @@protoc_insertion_point(destructor:main.RewardLoginAwardGoldResponse)
  SharedDtor();
}

void RewardLoginAwardGoldResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewardLoginAwardGoldResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewardLoginAwardGoldResponse& RewardLoginAwardGoldResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

RewardLoginAwardGoldResponse* RewardLoginAwardGoldResponse::default_instance_ = NULL;

RewardLoginAwardGoldResponse* RewardLoginAwardGoldResponse::New() const {
  return new RewardLoginAwardGoldResponse;
}

void RewardLoginAwardGoldResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardLoginAwardGoldResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, coins_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RewardLoginAwardGoldResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RewardLoginAwardGoldResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coins;
        break;
      }

      // optional int32 coins = 2;
      case 2: {
        if (tag == 16) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RewardLoginAwardGoldResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RewardLoginAwardGoldResponse)
  return false;
#undef DO_
}

void RewardLoginAwardGoldResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RewardLoginAwardGoldResponse)
  // optional bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  // optional int32 coins = 2;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coins(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RewardLoginAwardGoldResponse)
}

int RewardLoginAwardGoldResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional int32 coins = 2;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLoginAwardGoldResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewardLoginAwardGoldResponse*>(&from));
}

void RewardLoginAwardGoldResponse::MergeFrom(const RewardLoginAwardGoldResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RewardLoginAwardGoldResponse::CopyFrom(const RewardLoginAwardGoldResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLoginAwardGoldResponse::IsInitialized() const {

  return true;
}

void RewardLoginAwardGoldResponse::Swap(RewardLoginAwardGoldResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(coins_, other->coins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RewardLoginAwardGoldResponse::GetTypeName() const {
  return "main.RewardLoginAwardGoldResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RewardLoginAwardGoldRequest::RewardLoginAwardGoldRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RewardLoginAwardGoldRequest)
}

void RewardLoginAwardGoldRequest::InitAsDefaultInstance() {
}

RewardLoginAwardGoldRequest::RewardLoginAwardGoldRequest(const RewardLoginAwardGoldRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RewardLoginAwardGoldRequest)
}

void RewardLoginAwardGoldRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLoginAwardGoldRequest::~RewardLoginAwardGoldRequest() {
  // @@protoc_insertion_point(destructor:main.RewardLoginAwardGoldRequest)
  SharedDtor();
}

void RewardLoginAwardGoldRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewardLoginAwardGoldRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewardLoginAwardGoldRequest& RewardLoginAwardGoldRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

RewardLoginAwardGoldRequest* RewardLoginAwardGoldRequest::default_instance_ = NULL;

RewardLoginAwardGoldRequest* RewardLoginAwardGoldRequest::New() const {
  return new RewardLoginAwardGoldRequest;
}

void RewardLoginAwardGoldRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RewardLoginAwardGoldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RewardLoginAwardGoldRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.RewardLoginAwardGoldRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RewardLoginAwardGoldRequest)
  return false;
#undef DO_
}

void RewardLoginAwardGoldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RewardLoginAwardGoldRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RewardLoginAwardGoldRequest)
}

int RewardLoginAwardGoldRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLoginAwardGoldRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewardLoginAwardGoldRequest*>(&from));
}

void RewardLoginAwardGoldRequest::MergeFrom(const RewardLoginAwardGoldRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RewardLoginAwardGoldRequest::CopyFrom(const RewardLoginAwardGoldRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLoginAwardGoldRequest::IsInitialized() const {

  return true;
}

void RewardLoginAwardGoldRequest::Swap(RewardLoginAwardGoldRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RewardLoginAwardGoldRequest::GetTypeName() const {
  return "main.RewardLoginAwardGoldRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRoleQuest::kUpdateRoleQuestProtoFieldNumber;
#endif  // !_MSC_VER

UpdateRoleQuest::UpdateRoleQuest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UpdateRoleQuest)
}

void UpdateRoleQuest::InitAsDefaultInstance() {
}

UpdateRoleQuest::UpdateRoleQuest(const UpdateRoleQuest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UpdateRoleQuest)
}

void UpdateRoleQuest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRoleQuest::~UpdateRoleQuest() {
  // @@protoc_insertion_point(destructor:main.UpdateRoleQuest)
  SharedDtor();
}

void UpdateRoleQuest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateRoleQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateRoleQuest& UpdateRoleQuest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

UpdateRoleQuest* UpdateRoleQuest::default_instance_ = NULL;

UpdateRoleQuest* UpdateRoleQuest::New() const {
  return new UpdateRoleQuest;
}

void UpdateRoleQuest::Clear() {
  updaterolequestproto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateRoleQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UpdateRoleQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.RoleQuestProto updateRoleQuestProto = 1;
      case 1: {
        if (tag == 10) {
         parse_updateRoleQuestProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updaterolequestproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_updateRoleQuestProto;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UpdateRoleQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UpdateRoleQuest)
  return false;
#undef DO_
}

void UpdateRoleQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UpdateRoleQuest)
  // repeated .main.RoleQuestProto updateRoleQuestProto = 1;
  for (int i = 0; i < this->updaterolequestproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->updaterolequestproto(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UpdateRoleQuest)
}

int UpdateRoleQuest::ByteSize() const {
  int total_size = 0;

  // repeated .main.RoleQuestProto updateRoleQuestProto = 1;
  total_size += 1 * this->updaterolequestproto_size();
  for (int i = 0; i < this->updaterolequestproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updaterolequestproto(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoleQuest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateRoleQuest*>(&from));
}

void UpdateRoleQuest::MergeFrom(const UpdateRoleQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  updaterolequestproto_.MergeFrom(from.updaterolequestproto_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateRoleQuest::CopyFrom(const UpdateRoleQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoleQuest::IsInitialized() const {

  return true;
}

void UpdateRoleQuest::Swap(UpdateRoleQuest* other) {
  if (other != this) {
    updaterolequestproto_.Swap(&other->updaterolequestproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateRoleQuest::GetTypeName() const {
  return "main.UpdateRoleQuest";
}


// ===================================================================

#ifndef _MSC_VER
const int RoleQuestProto::kRoleIdFieldNumber;
const int RoleQuestProto::kQuestIdFieldNumber;
const int RoleQuestProto::kQuestStateFieldNumber;
const int RoleQuestProto::kConditionTypeFieldNumber;
const int RoleQuestProto::kConditionNameFieldNumber;
const int RoleQuestProto::kConditionValueFieldNumber;
const int RoleQuestProto::kCurrContionValueFieldNumber;
const int RoleQuestProto::kActionTypeFieldNumber;
const int RoleQuestProto::kTabIdFieldNumber;
const int RoleQuestProto::kGroupIdFieldNumber;
const int RoleQuestProto::kArrivementFieldNumber;
const int RoleQuestProto::kQuestTypeFieldNumber;
#endif  // !_MSC_VER

RoleQuestProto::RoleQuestProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RoleQuestProto)
}

void RoleQuestProto::InitAsDefaultInstance() {
}

RoleQuestProto::RoleQuestProto(const RoleQuestProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RoleQuestProto)
}

void RoleQuestProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  questid_ = 0;
  queststate_ = 0;
  conditiontype_ = 0;
  conditionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditionvalue_ = 0;
  currcontionvalue_ = 0;
  actiontype_ = 0;
  tabid_ = 0;
  groupid_ = 0;
  arrivement_ = 0;
  questtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleQuestProto::~RoleQuestProto() {
  // @@protoc_insertion_point(destructor:main.RoleQuestProto)
  SharedDtor();
}

void RoleQuestProto::SharedDtor() {
  if (conditionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete conditionname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoleQuestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoleQuestProto& RoleQuestProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

RoleQuestProto* RoleQuestProto::default_instance_ = NULL;

RoleQuestProto* RoleQuestProto::New() const {
  return new RoleQuestProto;
}

void RoleQuestProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleQuestProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, conditiontype_);
    ZR_(conditionvalue_, actiontype_);
    if (has_conditionname()) {
      if (conditionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        conditionname_->clear();
      }
    }
  }
  ZR_(tabid_, questtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RoleQuestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RoleQuestProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questId;
        break;
      }

      // optional int32 questId = 2;
      case 2: {
        if (tag == 16) {
         parse_questId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questState;
        break;
      }

      // optional int32 questState = 3;
      case 3: {
        if (tag == 24) {
         parse_questState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queststate_)));
          set_has_queststate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_conditionType;
        break;
      }

      // optional int32 conditionType = 4;
      case 4: {
        if (tag == 32) {
         parse_conditionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditiontype_)));
          set_has_conditiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conditionName;
        break;
      }

      // optional string conditionName = 5;
      case 5: {
        if (tag == 42) {
         parse_conditionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conditionname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_conditionValue;
        break;
      }

      // optional int32 conditionValue = 6;
      case 6: {
        if (tag == 48) {
         parse_conditionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditionvalue_)));
          set_has_conditionvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_currContionValue;
        break;
      }

      // optional int32 currContionValue = 7;
      case 7: {
        if (tag == 56) {
         parse_currContionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currcontionvalue_)));
          set_has_currcontionvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_actionType;
        break;
      }

      // optional int32 actionType = 8;
      case 8: {
        if (tag == 64) {
         parse_actionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontype_)));
          set_has_actiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tabId;
        break;
      }

      // optional int32 tabId = 9;
      case 9: {
        if (tag == 72) {
         parse_tabId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabid_)));
          set_has_tabid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_groupId;
        break;
      }

      // optional int32 groupId = 10;
      case 10: {
        if (tag == 80) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_arrivement;
        break;
      }

      // optional int32 arrivement = 11;
      case 11: {
        if (tag == 88) {
         parse_arrivement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrivement_)));
          set_has_arrivement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_questType;
        break;
      }

      // optional int32 questType = 12;
      case 12: {
        if (tag == 96) {
         parse_questType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questtype_)));
          set_has_questtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RoleQuestProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RoleQuestProto)
  return false;
#undef DO_
}

void RoleQuestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RoleQuestProto)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 questId = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->questid(), output);
  }

  // optional int32 questState = 3;
  if (has_queststate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queststate(), output);
  }

  // optional int32 conditionType = 4;
  if (has_conditiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conditiontype(), output);
  }

  // optional string conditionName = 5;
  if (has_conditionname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->conditionname(), output);
  }

  // optional int32 conditionValue = 6;
  if (has_conditionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->conditionvalue(), output);
  }

  // optional int32 currContionValue = 7;
  if (has_currcontionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->currcontionvalue(), output);
  }

  // optional int32 actionType = 8;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->actiontype(), output);
  }

  // optional int32 tabId = 9;
  if (has_tabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tabid(), output);
  }

  // optional int32 groupId = 10;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->groupid(), output);
  }

  // optional int32 arrivement = 11;
  if (has_arrivement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->arrivement(), output);
  }

  // optional int32 questType = 12;
  if (has_questtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->questtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RoleQuestProto)
}

int RoleQuestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 questId = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // optional int32 questState = 3;
    if (has_queststate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queststate());
    }

    // optional int32 conditionType = 4;
    if (has_conditiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditiontype());
    }

    // optional string conditionName = 5;
    if (has_conditionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conditionname());
    }

    // optional int32 conditionValue = 6;
    if (has_conditionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditionvalue());
    }

    // optional int32 currContionValue = 7;
    if (has_currcontionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currcontionvalue());
    }

    // optional int32 actionType = 8;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tabId = 9;
    if (has_tabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabid());
    }

    // optional int32 groupId = 10;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 arrivement = 11;
    if (has_arrivement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrivement());
    }

    // optional int32 questType = 12;
    if (has_questtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questtype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleQuestProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoleQuestProto*>(&from));
}

void RoleQuestProto::MergeFrom(const RoleQuestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_queststate()) {
      set_queststate(from.queststate());
    }
    if (from.has_conditiontype()) {
      set_conditiontype(from.conditiontype());
    }
    if (from.has_conditionname()) {
      set_conditionname(from.conditionname());
    }
    if (from.has_conditionvalue()) {
      set_conditionvalue(from.conditionvalue());
    }
    if (from.has_currcontionvalue()) {
      set_currcontionvalue(from.currcontionvalue());
    }
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tabid()) {
      set_tabid(from.tabid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_arrivement()) {
      set_arrivement(from.arrivement());
    }
    if (from.has_questtype()) {
      set_questtype(from.questtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoleQuestProto::CopyFrom(const RoleQuestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleQuestProto::IsInitialized() const {

  return true;
}

void RoleQuestProto::Swap(RoleQuestProto* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(questid_, other->questid_);
    std::swap(queststate_, other->queststate_);
    std::swap(conditiontype_, other->conditiontype_);
    std::swap(conditionname_, other->conditionname_);
    std::swap(conditionvalue_, other->conditionvalue_);
    std::swap(currcontionvalue_, other->currcontionvalue_);
    std::swap(actiontype_, other->actiontype_);
    std::swap(tabid_, other->tabid_);
    std::swap(groupid_, other->groupid_);
    std::swap(arrivement_, other->arrivement_);
    std::swap(questtype_, other->questtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoleQuestProto::GetTypeName() const {
  return "main.RoleQuestProto";
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveQuestRewardRequest::kQuestIdFieldNumber;
#endif  // !_MSC_VER

ReceiveQuestRewardRequest::ReceiveQuestRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ReceiveQuestRewardRequest)
}

void ReceiveQuestRewardRequest::InitAsDefaultInstance() {
}

ReceiveQuestRewardRequest::ReceiveQuestRewardRequest(const ReceiveQuestRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ReceiveQuestRewardRequest)
}

void ReceiveQuestRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveQuestRewardRequest::~ReceiveQuestRewardRequest() {
  // @@protoc_insertion_point(destructor:main.ReceiveQuestRewardRequest)
  SharedDtor();
}

void ReceiveQuestRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReceiveQuestRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReceiveQuestRewardRequest& ReceiveQuestRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

ReceiveQuestRewardRequest* ReceiveQuestRewardRequest::default_instance_ = NULL;

ReceiveQuestRewardRequest* ReceiveQuestRewardRequest::New() const {
  return new ReceiveQuestRewardRequest;
}

void ReceiveQuestRewardRequest::Clear() {
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReceiveQuestRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ReceiveQuestRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 questId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ReceiveQuestRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ReceiveQuestRewardRequest)
  return false;
#undef DO_
}

void ReceiveQuestRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ReceiveQuestRewardRequest)
  // optional int32 questId = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ReceiveQuestRewardRequest)
}

int ReceiveQuestRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 questId = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveQuestRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReceiveQuestRewardRequest*>(&from));
}

void ReceiveQuestRewardRequest::MergeFrom(const ReceiveQuestRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReceiveQuestRewardRequest::CopyFrom(const ReceiveQuestRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveQuestRewardRequest::IsInitialized() const {

  return true;
}

void ReceiveQuestRewardRequest::Swap(ReceiveQuestRewardRequest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReceiveQuestRewardRequest::GetTypeName() const {
  return "main.ReceiveQuestRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveQuestRewardResponse::kStateFieldNumber;
#endif  // !_MSC_VER

ReceiveQuestRewardResponse::ReceiveQuestRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ReceiveQuestRewardResponse)
}

void ReceiveQuestRewardResponse::InitAsDefaultInstance() {
}

ReceiveQuestRewardResponse::ReceiveQuestRewardResponse(const ReceiveQuestRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ReceiveQuestRewardResponse)
}

void ReceiveQuestRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveQuestRewardResponse::~ReceiveQuestRewardResponse() {
  // @@protoc_insertion_point(destructor:main.ReceiveQuestRewardResponse)
  SharedDtor();
}

void ReceiveQuestRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReceiveQuestRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReceiveQuestRewardResponse& ReceiveQuestRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

ReceiveQuestRewardResponse* ReceiveQuestRewardResponse::default_instance_ = NULL;

ReceiveQuestRewardResponse* ReceiveQuestRewardResponse::New() const {
  return new ReceiveQuestRewardResponse;
}

void ReceiveQuestRewardResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReceiveQuestRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ReceiveQuestRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ReceiveQuestRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ReceiveQuestRewardResponse)
  return false;
#undef DO_
}

void ReceiveQuestRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ReceiveQuestRewardResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ReceiveQuestRewardResponse)
}

int ReceiveQuestRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveQuestRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReceiveQuestRewardResponse*>(&from));
}

void ReceiveQuestRewardResponse::MergeFrom(const ReceiveQuestRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReceiveQuestRewardResponse::CopyFrom(const ReceiveQuestRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveQuestRewardResponse::IsInitialized() const {

  return true;
}

void ReceiveQuestRewardResponse::Swap(ReceiveQuestRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReceiveQuestRewardResponse::GetTypeName() const {
  return "main.ReceiveQuestRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BossStartSateResponse::kStateFieldNumber;
#endif  // !_MSC_VER

BossStartSateResponse::BossStartSateResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossStartSateResponse)
}

void BossStartSateResponse::InitAsDefaultInstance() {
}

BossStartSateResponse::BossStartSateResponse(const BossStartSateResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossStartSateResponse)
}

void BossStartSateResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossStartSateResponse::~BossStartSateResponse() {
  // @@protoc_insertion_point(destructor:main.BossStartSateResponse)
  SharedDtor();
}

void BossStartSateResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossStartSateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossStartSateResponse& BossStartSateResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

BossStartSateResponse* BossStartSateResponse::default_instance_ = NULL;

BossStartSateResponse* BossStartSateResponse::New() const {
  return new BossStartSateResponse;
}

void BossStartSateResponse::Clear() {
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossStartSateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossStartSateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossStartSateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossStartSateResponse)
  return false;
#undef DO_
}

void BossStartSateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossStartSateResponse)
  // optional bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossStartSateResponse)
}

int BossStartSateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossStartSateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossStartSateResponse*>(&from));
}

void BossStartSateResponse::MergeFrom(const BossStartSateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossStartSateResponse::CopyFrom(const BossStartSateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossStartSateResponse::IsInitialized() const {

  return true;
}

void BossStartSateResponse::Swap(BossStartSateResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossStartSateResponse::GetTypeName() const {
  return "main.BossStartSateResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BossPlotCountProto::kBossPlotIdFieldNumber;
const int BossPlotCountProto::kCanJoinCountFieldNumber;
#endif  // !_MSC_VER

BossPlotCountProto::BossPlotCountProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossPlotCountProto)
}

void BossPlotCountProto::InitAsDefaultInstance() {
}

BossPlotCountProto::BossPlotCountProto(const BossPlotCountProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossPlotCountProto)
}

void BossPlotCountProto::SharedCtor() {
  _cached_size_ = 0;
  bossplotid_ = 0;
  canjoincount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossPlotCountProto::~BossPlotCountProto() {
  // @@protoc_insertion_point(destructor:main.BossPlotCountProto)
  SharedDtor();
}

void BossPlotCountProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossPlotCountProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossPlotCountProto& BossPlotCountProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RoleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RoleModule_2eproto();
#endif
  return *default_instance_;
}

BossPlotCountProto* BossPlotCountProto::default_instance_ = NULL;

BossPlotCountProto* BossPlotCountProto::New() const {
  return new BossPlotCountProto;
}

void BossPlotCountProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossPlotCountProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bossplotid_, canjoincount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossPlotCountProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossPlotCountProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bossPlotId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossplotid_)));
          set_has_bossplotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_canJoinCount;
        break;
      }

      // required int32 canJoinCount = 2;
      case 2: {
        if (tag == 16) {
         parse_canJoinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canjoincount_)));
          set_has_canjoincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossPlotCountProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossPlotCountProto)
  return false;
#undef DO_
}

void BossPlotCountProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossPlotCountProto)
  // required int32 bossPlotId = 1;
  if (has_bossplotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossplotid(), output);
  }

  // required int32 canJoinCount = 2;
  if (has_canjoincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->canjoincount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossPlotCountProto)
}

int BossPlotCountProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bossPlotId = 1;
    if (has_bossplotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossplotid());
    }

    // required int32 canJoinCount = 2;
    if (has_canjoincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canjoincount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossPlotCountProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossPlotCountProto*>(&from));
}

void BossPlotCountProto::MergeFrom(const BossPlotCountProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossplotid()) {
      set_bossplotid(from.bossplotid());
    }
    if (from.has_canjoincount()) {
      set_canjoincount(from.canjoincount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossPlotCountProto::CopyFrom(const BossPlotCountProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossPlotCountProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BossPlotCountProto::Swap(BossPlotCountProto* other) {
  if (other != this) {
    std::swap(bossplotid_, other->bossplotid_);
    std::swap(canjoincount_, other->canjoincount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossPlotCountProto::GetTypeName() const {
  return "main.BossPlotCountProto";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
