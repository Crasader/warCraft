// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankModule.proto

#ifndef PROTOBUF_RankModule_2eproto__INCLUDED
#define PROTOBUF_RankModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RankModule_2eproto();
void protobuf_AssignDesc_RankModule_2eproto();
void protobuf_ShutdownFile_RankModule_2eproto();

class RankRequest;
class RankResponse;
class RankProto;
class PvpOldRankRequest;
class PvpOldRankResponse;

// ===================================================================

class RankRequest : public ::google::protobuf::MessageLite {
 public:
  RankRequest();
  virtual ~RankRequest();

  RankRequest(const RankRequest& from);

  inline RankRequest& operator=(const RankRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RankRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RankRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RankRequest* other);

  // implements Message ----------------------------------------------

  RankRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RankRequest& from);
  void MergeFrom(const RankRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 nationId = 2;
  inline bool has_nationid() const;
  inline void clear_nationid();
  static const int kNationIdFieldNumber = 2;
  inline ::google::protobuf::int32 nationid() const;
  inline void set_nationid(::google::protobuf::int32 value);

  // optional int32 page = 3;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 3;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.RankRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nationid();
  inline void clear_has_nationid();
  inline void set_has_page();
  inline void clear_has_page();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 nationid_;
  ::google::protobuf::int32 page_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RankModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RankModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_RankModule_2eproto();
  friend void protobuf_ShutdownFile_RankModule_2eproto();

  void InitAsDefaultInstance();
  static RankRequest* default_instance_;
};
// -------------------------------------------------------------------

class RankResponse : public ::google::protobuf::MessageLite {
 public:
  RankResponse();
  virtual ~RankResponse();

  RankResponse(const RankResponse& from);

  inline RankResponse& operator=(const RankResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RankResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RankResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RankResponse* other);

  // implements Message ----------------------------------------------

  RankResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RankResponse& from);
  void MergeFrom(const RankResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .main.RankProto RankInfo = 1;
  inline bool has_rankinfo() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 1;
  inline const ::main::RankProto& rankinfo() const;
  inline ::main::RankProto* mutable_rankinfo();
  inline ::main::RankProto* release_rankinfo();
  inline void set_allocated_rankinfo(::main::RankProto* rankinfo);

  // repeated .main.RankProto RankInfos = 2;
  inline int rankinfos_size() const;
  inline void clear_rankinfos();
  static const int kRankInfosFieldNumber = 2;
  inline const ::main::RankProto& rankinfos(int index) const;
  inline ::main::RankProto* mutable_rankinfos(int index);
  inline ::main::RankProto* add_rankinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::main::RankProto >&
      rankinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::RankProto >*
      mutable_rankinfos();

  // @@protoc_insertion_point(class_scope:main.RankResponse)
 private:
  inline void set_has_rankinfo();
  inline void clear_has_rankinfo();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::main::RankProto* rankinfo_;
  ::google::protobuf::RepeatedPtrField< ::main::RankProto > rankinfos_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RankModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RankModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_RankModule_2eproto();
  friend void protobuf_ShutdownFile_RankModule_2eproto();

  void InitAsDefaultInstance();
  static RankResponse* default_instance_;
};
// -------------------------------------------------------------------

class RankProto : public ::google::protobuf::MessageLite {
 public:
  RankProto();
  virtual ~RankProto();

  RankProto(const RankProto& from);

  inline RankProto& operator=(const RankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RankProto& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RankProto* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RankProto* other);

  // implements Message ----------------------------------------------

  RankProto* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RankProto& from);
  void MergeFrom(const RankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 nation = 3;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 3;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // optional int32 headId = 4;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIdFieldNumber = 4;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // optional int64 value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional int32 areaId = 6;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 6;
  inline ::google::protobuf::int32 areaid() const;
  inline void set_areaid(::google::protobuf::int32 value);

  // optional string areaName = 7;
  inline bool has_areaname() const;
  inline void clear_areaname();
  static const int kAreaNameFieldNumber = 7;
  inline const ::std::string& areaname() const;
  inline void set_areaname(const ::std::string& value);
  inline void set_areaname(const char* value);
  inline void set_areaname(const char* value, size_t size);
  inline ::std::string* mutable_areaname();
  inline ::std::string* release_areaname();
  inline void set_allocated_areaname(::std::string* areaname);

  // optional int32 ranking = 8;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 8;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.RankProto)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_areaname();
  inline void clear_has_areaname();
  inline void set_has_ranking();
  inline void clear_has_ranking();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 nation_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int32 areaid_;
  ::std::string* areaname_;
  ::google::protobuf::int32 ranking_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RankModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RankModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_RankModule_2eproto();
  friend void protobuf_ShutdownFile_RankModule_2eproto();

  void InitAsDefaultInstance();
  static RankProto* default_instance_;
};
// -------------------------------------------------------------------

class PvpOldRankRequest : public ::google::protobuf::MessageLite {
 public:
  PvpOldRankRequest();
  virtual ~PvpOldRankRequest();

  PvpOldRankRequest(const PvpOldRankRequest& from);

  inline PvpOldRankRequest& operator=(const PvpOldRankRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpOldRankRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpOldRankRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpOldRankRequest* other);

  // implements Message ----------------------------------------------

  PvpOldRankRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpOldRankRequest& from);
  void MergeFrom(const PvpOldRankRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvpOldRankRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RankModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RankModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_RankModule_2eproto();
  friend void protobuf_ShutdownFile_RankModule_2eproto();

  void InitAsDefaultInstance();
  static PvpOldRankRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpOldRankResponse : public ::google::protobuf::MessageLite {
 public:
  PvpOldRankResponse();
  virtual ~PvpOldRankResponse();

  PvpOldRankResponse(const PvpOldRankResponse& from);

  inline PvpOldRankResponse& operator=(const PvpOldRankResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpOldRankResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpOldRankResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpOldRankResponse* other);

  // implements Message ----------------------------------------------

  PvpOldRankResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpOldRankResponse& from);
  void MergeFrom(const PvpOldRankResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seasonCount = 1;
  inline bool has_seasoncount() const;
  inline void clear_seasoncount();
  static const int kSeasonCountFieldNumber = 1;
  inline ::google::protobuf::int32 seasoncount() const;
  inline void set_seasoncount(::google::protobuf::int32 value);

  // repeated .main.RankProto RankInfos = 2;
  inline int rankinfos_size() const;
  inline void clear_rankinfos();
  static const int kRankInfosFieldNumber = 2;
  inline const ::main::RankProto& rankinfos(int index) const;
  inline ::main::RankProto* mutable_rankinfos(int index);
  inline ::main::RankProto* add_rankinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::main::RankProto >&
      rankinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::RankProto >*
      mutable_rankinfos();

  // @@protoc_insertion_point(class_scope:main.PvpOldRankResponse)
 private:
  inline void set_has_seasoncount();
  inline void clear_has_seasoncount();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::main::RankProto > rankinfos_;
  ::google::protobuf::int32 seasoncount_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RankModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RankModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_RankModule_2eproto();
  friend void protobuf_ShutdownFile_RankModule_2eproto();

  void InitAsDefaultInstance();
  static PvpOldRankResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RankRequest

// optional int32 type = 1;
inline bool RankRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RankRequest::type() const {
  // @@protoc_insertion_point(field_get:main.RankRequest.type)
  return type_;
}
inline void RankRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:main.RankRequest.type)
}

// optional int32 nationId = 2;
inline bool RankRequest::has_nationid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankRequest::set_has_nationid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankRequest::clear_has_nationid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankRequest::clear_nationid() {
  nationid_ = 0;
  clear_has_nationid();
}
inline ::google::protobuf::int32 RankRequest::nationid() const {
  // @@protoc_insertion_point(field_get:main.RankRequest.nationId)
  return nationid_;
}
inline void RankRequest::set_nationid(::google::protobuf::int32 value) {
  set_has_nationid();
  nationid_ = value;
  // @@protoc_insertion_point(field_set:main.RankRequest.nationId)
}

// optional int32 page = 3;
inline bool RankRequest::has_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankRequest::set_has_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankRequest::clear_has_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankRequest::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 RankRequest::page() const {
  // @@protoc_insertion_point(field_get:main.RankRequest.page)
  return page_;
}
inline void RankRequest::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:main.RankRequest.page)
}

// -------------------------------------------------------------------

// RankResponse

// optional .main.RankProto RankInfo = 1;
inline bool RankResponse::has_rankinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankResponse::set_has_rankinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankResponse::clear_has_rankinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankResponse::clear_rankinfo() {
  if (rankinfo_ != NULL) rankinfo_->::main::RankProto::Clear();
  clear_has_rankinfo();
}
inline const ::main::RankProto& RankResponse::rankinfo() const {
  // @@protoc_insertion_point(field_get:main.RankResponse.RankInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankinfo_ != NULL ? *rankinfo_ : *default_instance().rankinfo_;
#else
  return rankinfo_ != NULL ? *rankinfo_ : *default_instance_->rankinfo_;
#endif
}
inline ::main::RankProto* RankResponse::mutable_rankinfo() {
  set_has_rankinfo();
  if (rankinfo_ == NULL) rankinfo_ = new ::main::RankProto;
  // @@protoc_insertion_point(field_mutable:main.RankResponse.RankInfo)
  return rankinfo_;
}
inline ::main::RankProto* RankResponse::release_rankinfo() {
  clear_has_rankinfo();
  ::main::RankProto* temp = rankinfo_;
  rankinfo_ = NULL;
  return temp;
}
inline void RankResponse::set_allocated_rankinfo(::main::RankProto* rankinfo) {
  delete rankinfo_;
  rankinfo_ = rankinfo;
  if (rankinfo) {
    set_has_rankinfo();
  } else {
    clear_has_rankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:main.RankResponse.RankInfo)
}

// repeated .main.RankProto RankInfos = 2;
inline int RankResponse::rankinfos_size() const {
  return rankinfos_.size();
}
inline void RankResponse::clear_rankinfos() {
  rankinfos_.Clear();
}
inline const ::main::RankProto& RankResponse::rankinfos(int index) const {
  // @@protoc_insertion_point(field_get:main.RankResponse.RankInfos)
  return rankinfos_.Get(index);
}
inline ::main::RankProto* RankResponse::mutable_rankinfos(int index) {
  // @@protoc_insertion_point(field_mutable:main.RankResponse.RankInfos)
  return rankinfos_.Mutable(index);
}
inline ::main::RankProto* RankResponse::add_rankinfos() {
  // @@protoc_insertion_point(field_add:main.RankResponse.RankInfos)
  return rankinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::RankProto >&
RankResponse::rankinfos() const {
  // @@protoc_insertion_point(field_list:main.RankResponse.RankInfos)
  return rankinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::RankProto >*
RankResponse::mutable_rankinfos() {
  // @@protoc_insertion_point(field_mutable_list:main.RankResponse.RankInfos)
  return &rankinfos_;
}

// -------------------------------------------------------------------

// RankProto

// optional int32 roleId = 1;
inline bool RankProto::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankProto::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankProto::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankProto::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 RankProto::roleid() const {
  // @@protoc_insertion_point(field_get:main.RankProto.roleId)
  return roleid_;
}
inline void RankProto::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:main.RankProto.roleId)
}

// optional string nickname = 2;
inline bool RankProto::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankProto::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankProto::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankProto::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RankProto::nickname() const {
  // @@protoc_insertion_point(field_get:main.RankProto.nickname)
  return *nickname_;
}
inline void RankProto::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:main.RankProto.nickname)
}
inline void RankProto::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.RankProto.nickname)
}
inline void RankProto::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.RankProto.nickname)
}
inline ::std::string* RankProto::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.RankProto.nickname)
  return nickname_;
}
inline ::std::string* RankProto::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankProto::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.RankProto.nickname)
}

// optional int32 nation = 3;
inline bool RankProto::has_nation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankProto::set_has_nation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankProto::clear_has_nation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankProto::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 RankProto::nation() const {
  // @@protoc_insertion_point(field_get:main.RankProto.nation)
  return nation_;
}
inline void RankProto::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
  // @@protoc_insertion_point(field_set:main.RankProto.nation)
}

// optional int32 headId = 4;
inline bool RankProto::has_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankProto::set_has_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankProto::clear_has_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankProto::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 RankProto::headid() const {
  // @@protoc_insertion_point(field_get:main.RankProto.headId)
  return headid_;
}
inline void RankProto::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
  // @@protoc_insertion_point(field_set:main.RankProto.headId)
}

// optional int64 value = 5;
inline bool RankProto::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankProto::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankProto::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankProto::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 RankProto::value() const {
  // @@protoc_insertion_point(field_get:main.RankProto.value)
  return value_;
}
inline void RankProto::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:main.RankProto.value)
}

// optional int32 areaId = 6;
inline bool RankProto::has_areaid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankProto::set_has_areaid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankProto::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankProto::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 RankProto::areaid() const {
  // @@protoc_insertion_point(field_get:main.RankProto.areaId)
  return areaid_;
}
inline void RankProto::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:main.RankProto.areaId)
}

// optional string areaName = 7;
inline bool RankProto::has_areaname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankProto::set_has_areaname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankProto::clear_has_areaname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankProto::clear_areaname() {
  if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_->clear();
  }
  clear_has_areaname();
}
inline const ::std::string& RankProto::areaname() const {
  // @@protoc_insertion_point(field_get:main.RankProto.areaName)
  return *areaname_;
}
inline void RankProto::set_areaname(const ::std::string& value) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(value);
  // @@protoc_insertion_point(field_set:main.RankProto.areaName)
}
inline void RankProto::set_areaname(const char* value) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.RankProto.areaName)
}
inline void RankProto::set_areaname(const char* value, size_t size) {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  areaname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.RankProto.areaName)
}
inline ::std::string* RankProto::mutable_areaname() {
  set_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    areaname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.RankProto.areaName)
  return areaname_;
}
inline ::std::string* RankProto::release_areaname() {
  clear_has_areaname();
  if (areaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = areaname_;
    areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankProto::set_allocated_areaname(::std::string* areaname) {
  if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete areaname_;
  }
  if (areaname) {
    set_has_areaname();
    areaname_ = areaname;
  } else {
    clear_has_areaname();
    areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.RankProto.areaName)
}

// optional int32 ranking = 8;
inline bool RankProto::has_ranking() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankProto::set_has_ranking() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankProto::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankProto::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 RankProto::ranking() const {
  // @@protoc_insertion_point(field_get:main.RankProto.ranking)
  return ranking_;
}
inline void RankProto::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:main.RankProto.ranking)
}

// -------------------------------------------------------------------

// PvpOldRankRequest

// -------------------------------------------------------------------

// PvpOldRankResponse

// optional int32 seasonCount = 1;
inline bool PvpOldRankResponse::has_seasoncount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpOldRankResponse::set_has_seasoncount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpOldRankResponse::clear_has_seasoncount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpOldRankResponse::clear_seasoncount() {
  seasoncount_ = 0;
  clear_has_seasoncount();
}
inline ::google::protobuf::int32 PvpOldRankResponse::seasoncount() const {
  // @@protoc_insertion_point(field_get:main.PvpOldRankResponse.seasonCount)
  return seasoncount_;
}
inline void PvpOldRankResponse::set_seasoncount(::google::protobuf::int32 value) {
  set_has_seasoncount();
  seasoncount_ = value;
  // @@protoc_insertion_point(field_set:main.PvpOldRankResponse.seasonCount)
}

// repeated .main.RankProto RankInfos = 2;
inline int PvpOldRankResponse::rankinfos_size() const {
  return rankinfos_.size();
}
inline void PvpOldRankResponse::clear_rankinfos() {
  rankinfos_.Clear();
}
inline const ::main::RankProto& PvpOldRankResponse::rankinfos(int index) const {
  // @@protoc_insertion_point(field_get:main.PvpOldRankResponse.RankInfos)
  return rankinfos_.Get(index);
}
inline ::main::RankProto* PvpOldRankResponse::mutable_rankinfos(int index) {
  // @@protoc_insertion_point(field_mutable:main.PvpOldRankResponse.RankInfos)
  return rankinfos_.Mutable(index);
}
inline ::main::RankProto* PvpOldRankResponse::add_rankinfos() {
  // @@protoc_insertion_point(field_add:main.PvpOldRankResponse.RankInfos)
  return rankinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::RankProto >&
PvpOldRankResponse::rankinfos() const {
  // @@protoc_insertion_point(field_list:main.PvpOldRankResponse.RankInfos)
  return rankinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::RankProto >*
PvpOldRankResponse::mutable_rankinfos() {
  // @@protoc_insertion_point(field_mutable_list:main.PvpOldRankResponse.RankInfos)
  return &rankinfos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RankModule_2eproto__INCLUDED
