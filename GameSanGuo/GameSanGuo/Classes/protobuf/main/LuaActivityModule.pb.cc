// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LuaActivityModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LuaActivityModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_LuaActivityModule_2eproto() {
  delete LuaActivityDetailRequest::default_instance_;
  delete LuaActivityDetailResponse::default_instance_;
  delete ActivityBrief::default_instance_;
  delete ActivityDetailRequest::default_instance_;
  delete ActivityDetailResponse::default_instance_;
  delete ElementColor::default_instance_;
  delete LabelInfo::default_instance_;
  delete LabelStringInfo::default_instance_;
  delete BtnInfo::default_instance_;
  delete ImageInfo::default_instance_;
  delete ItemInfo::default_instance_;
  delete ActivityGetRewardRequest::default_instance_;
  delete ActivityGetRewardResponse::default_instance_;
  delete ActivityOpretionRequest::default_instance_;
  delete ActivityOpretionResponse::default_instance_;
  delete ActivityOpretion::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LuaActivityModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LuaActivityModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LuaActivityDetailRequest::default_instance_ = new LuaActivityDetailRequest();
  LuaActivityDetailResponse::default_instance_ = new LuaActivityDetailResponse();
  ActivityBrief::default_instance_ = new ActivityBrief();
  ActivityDetailRequest::default_instance_ = new ActivityDetailRequest();
  ActivityDetailResponse::default_instance_ = new ActivityDetailResponse();
  ElementColor::default_instance_ = new ElementColor();
  LabelInfo::default_instance_ = new LabelInfo();
  LabelStringInfo::default_instance_ = new LabelStringInfo();
  BtnInfo::default_instance_ = new BtnInfo();
  ImageInfo::default_instance_ = new ImageInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  ActivityGetRewardRequest::default_instance_ = new ActivityGetRewardRequest();
  ActivityGetRewardResponse::default_instance_ = new ActivityGetRewardResponse();
  ActivityOpretionRequest::default_instance_ = new ActivityOpretionRequest();
  ActivityOpretionResponse::default_instance_ = new ActivityOpretionResponse();
  ActivityOpretion::default_instance_ = new ActivityOpretion();
  LuaActivityDetailRequest::default_instance_->InitAsDefaultInstance();
  LuaActivityDetailResponse::default_instance_->InitAsDefaultInstance();
  ActivityBrief::default_instance_->InitAsDefaultInstance();
  ActivityDetailRequest::default_instance_->InitAsDefaultInstance();
  ActivityDetailResponse::default_instance_->InitAsDefaultInstance();
  ElementColor::default_instance_->InitAsDefaultInstance();
  LabelInfo::default_instance_->InitAsDefaultInstance();
  LabelStringInfo::default_instance_->InitAsDefaultInstance();
  BtnInfo::default_instance_->InitAsDefaultInstance();
  ImageInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  ActivityGetRewardRequest::default_instance_->InitAsDefaultInstance();
  ActivityGetRewardResponse::default_instance_->InitAsDefaultInstance();
  ActivityOpretionRequest::default_instance_->InitAsDefaultInstance();
  ActivityOpretionResponse::default_instance_->InitAsDefaultInstance();
  ActivityOpretion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LuaActivityModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LuaActivityModule_2eproto_once_);
void protobuf_AddDesc_LuaActivityModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LuaActivityModule_2eproto_once_,
                 &protobuf_AddDesc_LuaActivityModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LuaActivityModule_2eproto {
  StaticDescriptorInitializer_LuaActivityModule_2eproto() {
    protobuf_AddDesc_LuaActivityModule_2eproto();
  }
} static_descriptor_initializer_LuaActivityModule_2eproto_;
#endif
bool ElementType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool LuaStateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LuaActivityDetailRequest::LuaActivityDetailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LuaActivityDetailRequest)
}

void LuaActivityDetailRequest::InitAsDefaultInstance() {
}

LuaActivityDetailRequest::LuaActivityDetailRequest(const LuaActivityDetailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LuaActivityDetailRequest)
}

void LuaActivityDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuaActivityDetailRequest::~LuaActivityDetailRequest() {
  // @@protoc_insertion_point(destructor:main.LuaActivityDetailRequest)
  SharedDtor();
}

void LuaActivityDetailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LuaActivityDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LuaActivityDetailRequest& LuaActivityDetailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

LuaActivityDetailRequest* LuaActivityDetailRequest::default_instance_ = NULL;

LuaActivityDetailRequest* LuaActivityDetailRequest::New() const {
  return new LuaActivityDetailRequest;
}

void LuaActivityDetailRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LuaActivityDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LuaActivityDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.LuaActivityDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LuaActivityDetailRequest)
  return false;
#undef DO_
}

void LuaActivityDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LuaActivityDetailRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LuaActivityDetailRequest)
}

int LuaActivityDetailRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuaActivityDetailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LuaActivityDetailRequest*>(&from));
}

void LuaActivityDetailRequest::MergeFrom(const LuaActivityDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LuaActivityDetailRequest::CopyFrom(const LuaActivityDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuaActivityDetailRequest::IsInitialized() const {

  return true;
}

void LuaActivityDetailRequest::Swap(LuaActivityDetailRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LuaActivityDetailRequest::GetTypeName() const {
  return "main.LuaActivityDetailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LuaActivityDetailResponse::kActivityBriefFieldNumber;
const int LuaActivityDetailResponse::kActivityDetailFieldNumber;
#endif  // !_MSC_VER

LuaActivityDetailResponse::LuaActivityDetailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LuaActivityDetailResponse)
}

void LuaActivityDetailResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitydetail_ = const_cast< ::main::ActivityDetailResponse*>(
      ::main::ActivityDetailResponse::internal_default_instance());
#else
  activitydetail_ = const_cast< ::main::ActivityDetailResponse*>(&::main::ActivityDetailResponse::default_instance());
#endif
}

LuaActivityDetailResponse::LuaActivityDetailResponse(const LuaActivityDetailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LuaActivityDetailResponse)
}

void LuaActivityDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  activitydetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuaActivityDetailResponse::~LuaActivityDetailResponse() {
  // @@protoc_insertion_point(destructor:main.LuaActivityDetailResponse)
  SharedDtor();
}

void LuaActivityDetailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete activitydetail_;
  }
}

void LuaActivityDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LuaActivityDetailResponse& LuaActivityDetailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

LuaActivityDetailResponse* LuaActivityDetailResponse::default_instance_ = NULL;

LuaActivityDetailResponse* LuaActivityDetailResponse::New() const {
  return new LuaActivityDetailResponse;
}

void LuaActivityDetailResponse::Clear() {
  if (has_activitydetail()) {
    if (activitydetail_ != NULL) activitydetail_->::main::ActivityDetailResponse::Clear();
  }
  activitybrief_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LuaActivityDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LuaActivityDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.ActivityBrief activityBrief = 1;
      case 1: {
        if (tag == 10) {
         parse_activityBrief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitybrief()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_activityBrief;
        if (input->ExpectTag(18)) goto parse_activityDetail;
        break;
      }

      // required .main.ActivityDetailResponse activityDetail = 2;
      case 2: {
        if (tag == 18) {
         parse_activityDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitydetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LuaActivityDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LuaActivityDetailResponse)
  return false;
#undef DO_
}

void LuaActivityDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LuaActivityDetailResponse)
  // repeated .main.ActivityBrief activityBrief = 1;
  for (int i = 0; i < this->activitybrief_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->activitybrief(i), output);
  }

  // required .main.ActivityDetailResponse activityDetail = 2;
  if (has_activitydetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->activitydetail(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LuaActivityDetailResponse)
}

int LuaActivityDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .main.ActivityDetailResponse activityDetail = 2;
    if (has_activitydetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitydetail());
    }

  }
  // repeated .main.ActivityBrief activityBrief = 1;
  total_size += 1 * this->activitybrief_size();
  for (int i = 0; i < this->activitybrief_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitybrief(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuaActivityDetailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LuaActivityDetailResponse*>(&from));
}

void LuaActivityDetailResponse::MergeFrom(const LuaActivityDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitybrief_.MergeFrom(from.activitybrief_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_activitydetail()) {
      mutable_activitydetail()->::main::ActivityDetailResponse::MergeFrom(from.activitydetail());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LuaActivityDetailResponse::CopyFrom(const LuaActivityDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuaActivityDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->activitybrief())) return false;
  if (has_activitydetail()) {
    if (!this->activitydetail().IsInitialized()) return false;
  }
  return true;
}

void LuaActivityDetailResponse::Swap(LuaActivityDetailResponse* other) {
  if (other != this) {
    activitybrief_.Swap(&other->activitybrief_);
    std::swap(activitydetail_, other->activitydetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LuaActivityDetailResponse::GetTypeName() const {
  return "main.LuaActivityDetailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityBrief::kLuaIdFieldNumber;
const int ActivityBrief::kLuaStateFieldNumber;
const int ActivityBrief::kLuaNameFieldNumber;
const int ActivityBrief::kBtnNameFieldNumber;
const int ActivityBrief::kNoticeFieldNumber;
#endif  // !_MSC_VER

ActivityBrief::ActivityBrief()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityBrief)
}

void ActivityBrief::InitAsDefaultInstance() {
}

ActivityBrief::ActivityBrief(const ActivityBrief& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityBrief)
}

void ActivityBrief::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  luaid_ = 0;
  luastate_ = 0;
  luaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  btnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notice_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityBrief::~ActivityBrief() {
  // @@protoc_insertion_point(destructor:main.ActivityBrief)
  SharedDtor();
}

void ActivityBrief::SharedDtor() {
  if (luaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete luaname_;
  }
  if (btnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityBrief& ActivityBrief::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityBrief* ActivityBrief::default_instance_ = NULL;

ActivityBrief* ActivityBrief::New() const {
  return new ActivityBrief;
}

void ActivityBrief::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityBrief*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(luaid_, luastate_);
    if (has_luaname()) {
      if (luaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        luaname_->clear();
      }
    }
    if (has_btnname()) {
      if (btnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        btnname_->clear();
      }
    }
    notice_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityBrief)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 luaId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luaid_)));
          set_has_luaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_luaState;
        break;
      }

      // required int32 luaState = 2;
      case 2: {
        if (tag == 16) {
         parse_luaState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luastate_)));
          set_has_luastate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_luaName;
        break;
      }

      // required string luaName = 3;
      case 3: {
        if (tag == 26) {
         parse_luaName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luaname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_btnName;
        break;
      }

      // required string btnName = 4;
      case 4: {
        if (tag == 34) {
         parse_btnName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btnname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_notice;
        break;
      }

      // required bool notice = 5;
      case 5: {
        if (tag == 40) {
         parse_notice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notice_)));
          set_has_notice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityBrief)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityBrief)
  return false;
#undef DO_
}

void ActivityBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityBrief)
  // required int32 luaId = 1;
  if (has_luaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->luaid(), output);
  }

  // required int32 luaState = 2;
  if (has_luastate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->luastate(), output);
  }

  // required string luaName = 3;
  if (has_luaname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->luaname(), output);
  }

  // required string btnName = 4;
  if (has_btnname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->btnname(), output);
  }

  // required bool notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->notice(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityBrief)
}

int ActivityBrief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 luaId = 1;
    if (has_luaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luaid());
    }

    // required int32 luaState = 2;
    if (has_luastate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luastate());
    }

    // required string luaName = 3;
    if (has_luaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->luaname());
    }

    // required string btnName = 4;
    if (has_btnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->btnname());
    }

    // required bool notice = 5;
    if (has_notice()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityBrief::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityBrief*>(&from));
}

void ActivityBrief::MergeFrom(const ActivityBrief& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_luaid()) {
      set_luaid(from.luaid());
    }
    if (from.has_luastate()) {
      set_luastate(from.luastate());
    }
    if (from.has_luaname()) {
      set_luaname(from.luaname());
    }
    if (from.has_btnname()) {
      set_btnname(from.btnname());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityBrief::CopyFrom(const ActivityBrief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityBrief::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ActivityBrief::Swap(ActivityBrief* other) {
  if (other != this) {
    std::swap(luaid_, other->luaid_);
    std::swap(luastate_, other->luastate_);
    std::swap(luaname_, other->luaname_);
    std::swap(btnname_, other->btnname_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityBrief::GetTypeName() const {
  return "main.ActivityBrief";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityDetailRequest::kLuaIdFieldNumber;
#endif  // !_MSC_VER

ActivityDetailRequest::ActivityDetailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityDetailRequest)
}

void ActivityDetailRequest::InitAsDefaultInstance() {
}

ActivityDetailRequest::ActivityDetailRequest(const ActivityDetailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityDetailRequest)
}

void ActivityDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  luaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityDetailRequest::~ActivityDetailRequest() {
  // @@protoc_insertion_point(destructor:main.ActivityDetailRequest)
  SharedDtor();
}

void ActivityDetailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityDetailRequest& ActivityDetailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityDetailRequest* ActivityDetailRequest::default_instance_ = NULL;

ActivityDetailRequest* ActivityDetailRequest::New() const {
  return new ActivityDetailRequest;
}

void ActivityDetailRequest::Clear() {
  luaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 luaId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luaid_)));
          set_has_luaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityDetailRequest)
  return false;
#undef DO_
}

void ActivityDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityDetailRequest)
  // required int32 luaId = 1;
  if (has_luaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->luaid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityDetailRequest)
}

int ActivityDetailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 luaId = 1;
    if (has_luaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luaid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityDetailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityDetailRequest*>(&from));
}

void ActivityDetailRequest::MergeFrom(const ActivityDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_luaid()) {
      set_luaid(from.luaid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityDetailRequest::CopyFrom(const ActivityDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivityDetailRequest::Swap(ActivityDetailRequest* other) {
  if (other != this) {
    std::swap(luaid_, other->luaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityDetailRequest::GetTypeName() const {
  return "main.ActivityDetailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityDetailResponse::kActivityBriefFieldNumber;
const int ActivityDetailResponse::kLabelInfoFieldNumber;
const int ActivityDetailResponse::kLabelStringInfoFieldNumber;
const int ActivityDetailResponse::kBtnInfoFieldNumber;
const int ActivityDetailResponse::kItemInfoFieldNumber;
const int ActivityDetailResponse::kImageInfoFieldNumber;
#endif  // !_MSC_VER

ActivityDetailResponse::ActivityDetailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityDetailResponse)
}

void ActivityDetailResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  activitybrief_ = const_cast< ::main::ActivityBrief*>(
      ::main::ActivityBrief::internal_default_instance());
#else
  activitybrief_ = const_cast< ::main::ActivityBrief*>(&::main::ActivityBrief::default_instance());
#endif
}

ActivityDetailResponse::ActivityDetailResponse(const ActivityDetailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityDetailResponse)
}

void ActivityDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  activitybrief_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityDetailResponse::~ActivityDetailResponse() {
  // @@protoc_insertion_point(destructor:main.ActivityDetailResponse)
  SharedDtor();
}

void ActivityDetailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete activitybrief_;
  }
}

void ActivityDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityDetailResponse& ActivityDetailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityDetailResponse* ActivityDetailResponse::default_instance_ = NULL;

ActivityDetailResponse* ActivityDetailResponse::New() const {
  return new ActivityDetailResponse;
}

void ActivityDetailResponse::Clear() {
  if (has_activitybrief()) {
    if (activitybrief_ != NULL) activitybrief_->::main::ActivityBrief::Clear();
  }
  labelinfo_.Clear();
  labelstringinfo_.Clear();
  btninfo_.Clear();
  iteminfo_.Clear();
  imageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.ActivityBrief activityBrief = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitybrief()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_labelInfo;
        break;
      }

      // repeated .main.LabelInfo labelInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_labelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labelinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_labelInfo;
        if (input->ExpectTag(26)) goto parse_labelStringInfo;
        break;
      }

      // repeated .main.LabelStringInfo labelStringInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_labelStringInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labelstringinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labelStringInfo;
        if (input->ExpectTag(34)) goto parse_btnInfo;
        break;
      }

      // repeated .main.BtnInfo btnInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_btnInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_btninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_btnInfo;
        if (input->ExpectTag(42)) goto parse_itemInfo;
        break;
      }

      // repeated .main.ItemInfo itemInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        if (input->ExpectTag(50)) goto parse_imageInfo;
        break;
      }

      // repeated .main.ImageInfo imageInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_imageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityDetailResponse)
  return false;
#undef DO_
}

void ActivityDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityDetailResponse)
  // required .main.ActivityBrief activityBrief = 1;
  if (has_activitybrief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->activitybrief(), output);
  }

  // repeated .main.LabelInfo labelInfo = 2;
  for (int i = 0; i < this->labelinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->labelinfo(i), output);
  }

  // repeated .main.LabelStringInfo labelStringInfo = 3;
  for (int i = 0; i < this->labelstringinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->labelstringinfo(i), output);
  }

  // repeated .main.BtnInfo btnInfo = 4;
  for (int i = 0; i < this->btninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->btninfo(i), output);
  }

  // repeated .main.ItemInfo itemInfo = 5;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->iteminfo(i), output);
  }

  // repeated .main.ImageInfo imageInfo = 6;
  for (int i = 0; i < this->imageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->imageinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityDetailResponse)
}

int ActivityDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.ActivityBrief activityBrief = 1;
    if (has_activitybrief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitybrief());
    }

  }
  // repeated .main.LabelInfo labelInfo = 2;
  total_size += 1 * this->labelinfo_size();
  for (int i = 0; i < this->labelinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labelinfo(i));
  }

  // repeated .main.LabelStringInfo labelStringInfo = 3;
  total_size += 1 * this->labelstringinfo_size();
  for (int i = 0; i < this->labelstringinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labelstringinfo(i));
  }

  // repeated .main.BtnInfo btnInfo = 4;
  total_size += 1 * this->btninfo_size();
  for (int i = 0; i < this->btninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->btninfo(i));
  }

  // repeated .main.ItemInfo itemInfo = 5;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  // repeated .main.ImageInfo imageInfo = 6;
  total_size += 1 * this->imageinfo_size();
  for (int i = 0; i < this->imageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imageinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityDetailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityDetailResponse*>(&from));
}

void ActivityDetailResponse::MergeFrom(const ActivityDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  labelinfo_.MergeFrom(from.labelinfo_);
  labelstringinfo_.MergeFrom(from.labelstringinfo_);
  btninfo_.MergeFrom(from.btninfo_);
  iteminfo_.MergeFrom(from.iteminfo_);
  imageinfo_.MergeFrom(from.imageinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activitybrief()) {
      mutable_activitybrief()->::main::ActivityBrief::MergeFrom(from.activitybrief());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityDetailResponse::CopyFrom(const ActivityDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_activitybrief()) {
    if (!this->activitybrief().IsInitialized()) return false;
  }
  return true;
}

void ActivityDetailResponse::Swap(ActivityDetailResponse* other) {
  if (other != this) {
    std::swap(activitybrief_, other->activitybrief_);
    labelinfo_.Swap(&other->labelinfo_);
    labelstringinfo_.Swap(&other->labelstringinfo_);
    btninfo_.Swap(&other->btninfo_);
    iteminfo_.Swap(&other->iteminfo_);
    imageinfo_.Swap(&other->imageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityDetailResponse::GetTypeName() const {
  return "main.ActivityDetailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ElementColor::kRedFieldNumber;
const int ElementColor::kGreenFieldNumber;
const int ElementColor::kBlueFieldNumber;
const int ElementColor::kAlphaFieldNumber;
#endif  // !_MSC_VER

ElementColor::ElementColor()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ElementColor)
}

void ElementColor::InitAsDefaultInstance() {
}

ElementColor::ElementColor(const ElementColor& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ElementColor)
}

void ElementColor::SharedCtor() {
  _cached_size_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  alpha_ = 255;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementColor::~ElementColor() {
  // @@protoc_insertion_point(destructor:main.ElementColor)
  SharedDtor();
}

void ElementColor::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ElementColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ElementColor& ElementColor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ElementColor* ElementColor::default_instance_ = NULL;

ElementColor* ElementColor::New() const {
  return new ElementColor;
}

void ElementColor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ElementColor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(red_, blue_);
    alpha_ = 255;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ElementColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ElementColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 red = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_green;
        break;
      }

      // optional int32 green = 2;
      case 2: {
        if (tag == 16) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blue;
        break;
      }

      // optional int32 blue = 3;
      case 3: {
        if (tag == 24) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_alpha;
        break;
      }

      // optional int32 alpha = 4 [default = 255];
      case 4: {
        if (tag == 32) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ElementColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ElementColor)
  return false;
#undef DO_
}

void ElementColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ElementColor)
  // optional int32 red = 1;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->red(), output);
  }

  // optional int32 green = 2;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->green(), output);
  }

  // optional int32 blue = 3;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blue(), output);
  }

  // optional int32 alpha = 4 [default = 255];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->alpha(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ElementColor)
}

int ElementColor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 red = 1;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->red());
    }

    // optional int32 green = 2;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->green());
    }

    // optional int32 blue = 3;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue());
    }

    // optional int32 alpha = 4 [default = 255];
    if (has_alpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alpha());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementColor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ElementColor*>(&from));
}

void ElementColor::MergeFrom(const ElementColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ElementColor::CopyFrom(const ElementColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementColor::IsInitialized() const {

  return true;
}

void ElementColor::Swap(ElementColor* other) {
  if (other != this) {
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ElementColor::GetTypeName() const {
  return "main.ElementColor";
}


// ===================================================================

#ifndef _MSC_VER
const int LabelInfo::kLabelIdFieldNumber;
const int LabelInfo::kLabelValueFieldNumber;
const int LabelInfo::kFontColorFieldNumber;
#endif  // !_MSC_VER

LabelInfo::LabelInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LabelInfo)
}

void LabelInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontcolor_ = const_cast< ::main::ElementColor*>(
      ::main::ElementColor::internal_default_instance());
#else
  fontcolor_ = const_cast< ::main::ElementColor*>(&::main::ElementColor::default_instance());
#endif
}

LabelInfo::LabelInfo(const LabelInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LabelInfo)
}

void LabelInfo::SharedCtor() {
  _cached_size_ = 0;
  labelid_ = 0;
  labelvalue_ = 0;
  fontcolor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelInfo::~LabelInfo() {
  // @@protoc_insertion_point(destructor:main.LabelInfo)
  SharedDtor();
}

void LabelInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fontcolor_;
  }
}

void LabelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LabelInfo& LabelInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

LabelInfo* LabelInfo::default_instance_ = NULL;

LabelInfo* LabelInfo::New() const {
  return new LabelInfo;
}

void LabelInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LabelInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(labelid_, labelvalue_);
    if (has_fontcolor()) {
      if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LabelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LabelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 labelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &labelid_)));
          set_has_labelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_labelValue;
        break;
      }

      // optional int32 labelValue = 2;
      case 2: {
        if (tag == 16) {
         parse_labelValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &labelvalue_)));
          set_has_labelvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fontColor;
        break;
      }

      // optional .main.ElementColor fontColor = 3;
      case 3: {
        if (tag == 26) {
         parse_fontColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LabelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LabelInfo)
  return false;
#undef DO_
}

void LabelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LabelInfo)
  // optional int32 labelId = 1;
  if (has_labelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->labelid(), output);
  }

  // optional int32 labelValue = 2;
  if (has_labelvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->labelvalue(), output);
  }

  // optional .main.ElementColor fontColor = 3;
  if (has_fontcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fontcolor(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LabelInfo)
}

int LabelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 labelId = 1;
    if (has_labelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->labelid());
    }

    // optional int32 labelValue = 2;
    if (has_labelvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->labelvalue());
    }

    // optional .main.ElementColor fontColor = 3;
    if (has_fontcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontcolor());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LabelInfo*>(&from));
}

void LabelInfo::MergeFrom(const LabelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_labelid()) {
      set_labelid(from.labelid());
    }
    if (from.has_labelvalue()) {
      set_labelvalue(from.labelvalue());
    }
    if (from.has_fontcolor()) {
      mutable_fontcolor()->::main::ElementColor::MergeFrom(from.fontcolor());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LabelInfo::CopyFrom(const LabelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelInfo::IsInitialized() const {

  return true;
}

void LabelInfo::Swap(LabelInfo* other) {
  if (other != this) {
    std::swap(labelid_, other->labelid_);
    std::swap(labelvalue_, other->labelvalue_);
    std::swap(fontcolor_, other->fontcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LabelInfo::GetTypeName() const {
  return "main.LabelInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int LabelStringInfo::kLabelIdFieldNumber;
const int LabelStringInfo::kLabelValueFieldNumber;
const int LabelStringInfo::kFontColorFieldNumber;
#endif  // !_MSC_VER

LabelStringInfo::LabelStringInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LabelStringInfo)
}

void LabelStringInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontcolor_ = const_cast< ::main::ElementColor*>(
      ::main::ElementColor::internal_default_instance());
#else
  fontcolor_ = const_cast< ::main::ElementColor*>(&::main::ElementColor::default_instance());
#endif
}

LabelStringInfo::LabelStringInfo(const LabelStringInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LabelStringInfo)
}

void LabelStringInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  labelid_ = 0;
  labelvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontcolor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelStringInfo::~LabelStringInfo() {
  // @@protoc_insertion_point(destructor:main.LabelStringInfo)
  SharedDtor();
}

void LabelStringInfo::SharedDtor() {
  if (labelvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete labelvalue_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fontcolor_;
  }
}

void LabelStringInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LabelStringInfo& LabelStringInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

LabelStringInfo* LabelStringInfo::default_instance_ = NULL;

LabelStringInfo* LabelStringInfo::New() const {
  return new LabelStringInfo;
}

void LabelStringInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    labelid_ = 0;
    if (has_labelvalue()) {
      if (labelvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        labelvalue_->clear();
      }
    }
    if (has_fontcolor()) {
      if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LabelStringInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LabelStringInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 labelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &labelid_)));
          set_has_labelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_labelValue;
        break;
      }

      // optional string labelValue = 2;
      case 2: {
        if (tag == 18) {
         parse_labelValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_labelvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fontColor;
        break;
      }

      // optional .main.ElementColor fontColor = 3;
      case 3: {
        if (tag == 26) {
         parse_fontColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LabelStringInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LabelStringInfo)
  return false;
#undef DO_
}

void LabelStringInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LabelStringInfo)
  // optional int32 labelId = 1;
  if (has_labelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->labelid(), output);
  }

  // optional string labelValue = 2;
  if (has_labelvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->labelvalue(), output);
  }

  // optional .main.ElementColor fontColor = 3;
  if (has_fontcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fontcolor(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LabelStringInfo)
}

int LabelStringInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 labelId = 1;
    if (has_labelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->labelid());
    }

    // optional string labelValue = 2;
    if (has_labelvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->labelvalue());
    }

    // optional .main.ElementColor fontColor = 3;
    if (has_fontcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontcolor());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelStringInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LabelStringInfo*>(&from));
}

void LabelStringInfo::MergeFrom(const LabelStringInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_labelid()) {
      set_labelid(from.labelid());
    }
    if (from.has_labelvalue()) {
      set_labelvalue(from.labelvalue());
    }
    if (from.has_fontcolor()) {
      mutable_fontcolor()->::main::ElementColor::MergeFrom(from.fontcolor());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LabelStringInfo::CopyFrom(const LabelStringInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelStringInfo::IsInitialized() const {

  return true;
}

void LabelStringInfo::Swap(LabelStringInfo* other) {
  if (other != this) {
    std::swap(labelid_, other->labelid_);
    std::swap(labelvalue_, other->labelvalue_);
    std::swap(fontcolor_, other->fontcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LabelStringInfo::GetTypeName() const {
  return "main.LabelStringInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BtnInfo::kBtnIdFieldNumber;
const int BtnInfo::kFontStrFieldNumber;
const int BtnInfo::kFontColorFieldNumber;
const int BtnInfo::kBgStrFieldNumber;
const int BtnInfo::kFgStrFieldNumber;
const int BtnInfo::kImageColorFieldNumber;
const int BtnInfo::kBtnStateFieldNumber;
#endif  // !_MSC_VER

BtnInfo::BtnInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BtnInfo)
}

void BtnInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontcolor_ = const_cast< ::main::ElementColor*>(
      ::main::ElementColor::internal_default_instance());
#else
  fontcolor_ = const_cast< ::main::ElementColor*>(&::main::ElementColor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  imagecolor_ = const_cast< ::main::ElementColor*>(
      ::main::ElementColor::internal_default_instance());
#else
  imagecolor_ = const_cast< ::main::ElementColor*>(&::main::ElementColor::default_instance());
#endif
}

BtnInfo::BtnInfo(const BtnInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BtnInfo)
}

void BtnInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  btnid_ = 0;
  fontstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontcolor_ = NULL;
  bgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagecolor_ = NULL;
  btnstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BtnInfo::~BtnInfo() {
  // @@protoc_insertion_point(destructor:main.BtnInfo)
  SharedDtor();
}

void BtnInfo::SharedDtor() {
  if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fontstr_;
  }
  if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bgstr_;
  }
  if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fgstr_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fontcolor_;
    delete imagecolor_;
  }
}

void BtnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BtnInfo& BtnInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

BtnInfo* BtnInfo::default_instance_ = NULL;

BtnInfo* BtnInfo::New() const {
  return new BtnInfo;
}

void BtnInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BtnInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(btnid_, btnstate_);
    if (has_fontstr()) {
      if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fontstr_->clear();
      }
    }
    if (has_fontcolor()) {
      if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
    }
    if (has_bgstr()) {
      if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bgstr_->clear();
      }
    }
    if (has_fgstr()) {
      if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fgstr_->clear();
      }
    }
    if (has_imagecolor()) {
      if (imagecolor_ != NULL) imagecolor_->::main::ElementColor::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BtnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BtnInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 btnId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btnid_)));
          set_has_btnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fontStr;
        break;
      }

      // optional string fontStr = 2;
      case 2: {
        if (tag == 18) {
         parse_fontStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fontColor;
        break;
      }

      // optional .main.ElementColor fontColor = 3;
      case 3: {
        if (tag == 26) {
         parse_fontColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bgStr;
        break;
      }

      // optional string bgStr = 4;
      case 4: {
        if (tag == 34) {
         parse_bgStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fgStr;
        break;
      }

      // optional string fgStr = 5;
      case 5: {
        if (tag == 42) {
         parse_fgStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fgstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageColor;
        break;
      }

      // optional .main.ElementColor imageColor = 6;
      case 6: {
        if (tag == 50) {
         parse_imageColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_btnState;
        break;
      }

      // optional int32 btnState = 7;
      case 7: {
        if (tag == 56) {
         parse_btnState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btnstate_)));
          set_has_btnstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BtnInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BtnInfo)
  return false;
#undef DO_
}

void BtnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BtnInfo)
  // optional int32 btnId = 1;
  if (has_btnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->btnid(), output);
  }

  // optional string fontStr = 2;
  if (has_fontstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fontstr(), output);
  }

  // optional .main.ElementColor fontColor = 3;
  if (has_fontcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fontcolor(), output);
  }

  // optional string bgStr = 4;
  if (has_bgstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bgstr(), output);
  }

  // optional string fgStr = 5;
  if (has_fgstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fgstr(), output);
  }

  // optional .main.ElementColor imageColor = 6;
  if (has_imagecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->imagecolor(), output);
  }

  // optional int32 btnState = 7;
  if (has_btnstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->btnstate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BtnInfo)
}

int BtnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 btnId = 1;
    if (has_btnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btnid());
    }

    // optional string fontStr = 2;
    if (has_fontstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontstr());
    }

    // optional .main.ElementColor fontColor = 3;
    if (has_fontcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontcolor());
    }

    // optional string bgStr = 4;
    if (has_bgstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bgstr());
    }

    // optional string fgStr = 5;
    if (has_fgstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fgstr());
    }

    // optional .main.ElementColor imageColor = 6;
    if (has_imagecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagecolor());
    }

    // optional int32 btnState = 7;
    if (has_btnstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btnstate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BtnInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BtnInfo*>(&from));
}

void BtnInfo::MergeFrom(const BtnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btnid()) {
      set_btnid(from.btnid());
    }
    if (from.has_fontstr()) {
      set_fontstr(from.fontstr());
    }
    if (from.has_fontcolor()) {
      mutable_fontcolor()->::main::ElementColor::MergeFrom(from.fontcolor());
    }
    if (from.has_bgstr()) {
      set_bgstr(from.bgstr());
    }
    if (from.has_fgstr()) {
      set_fgstr(from.fgstr());
    }
    if (from.has_imagecolor()) {
      mutable_imagecolor()->::main::ElementColor::MergeFrom(from.imagecolor());
    }
    if (from.has_btnstate()) {
      set_btnstate(from.btnstate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BtnInfo::CopyFrom(const BtnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtnInfo::IsInitialized() const {

  return true;
}

void BtnInfo::Swap(BtnInfo* other) {
  if (other != this) {
    std::swap(btnid_, other->btnid_);
    std::swap(fontstr_, other->fontstr_);
    std::swap(fontcolor_, other->fontcolor_);
    std::swap(bgstr_, other->bgstr_);
    std::swap(fgstr_, other->fgstr_);
    std::swap(imagecolor_, other->imagecolor_);
    std::swap(btnstate_, other->btnstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BtnInfo::GetTypeName() const {
  return "main.BtnInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ImageInfo::kImageIdFieldNumber;
const int ImageInfo::kImagestrFieldNumber;
const int ImageInfo::kImageColorFieldNumber;
#endif  // !_MSC_VER

ImageInfo::ImageInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ImageInfo)
}

void ImageInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  imagecolor_ = const_cast< ::main::ElementColor*>(
      ::main::ElementColor::internal_default_instance());
#else
  imagecolor_ = const_cast< ::main::ElementColor*>(&::main::ElementColor::default_instance());
#endif
}

ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ImageInfo)
}

void ImageInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  imageid_ = 0;
  imagestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagecolor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:main.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  if (imagestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagestr_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete imagecolor_;
  }
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageInfo& ImageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ImageInfo* ImageInfo::default_instance_ = NULL;

ImageInfo* ImageInfo::New() const {
  return new ImageInfo;
}

void ImageInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    imageid_ = 0;
    if (has_imagestr()) {
      if (imagestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagestr_->clear();
      }
    }
    if (has_imagecolor()) {
      if (imagecolor_ != NULL) imagecolor_->::main::ElementColor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 imageId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageid_)));
          set_has_imageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imagestr;
        break;
      }

      // optional string imagestr = 2;
      case 2: {
        if (tag == 18) {
         parse_imagestr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagestr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imageColor;
        break;
      }

      // optional .main.ElementColor imageColor = 3;
      case 3: {
        if (tag == 26) {
         parse_imageColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ImageInfo)
  // optional int32 imageId = 1;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->imageid(), output);
  }

  // optional string imagestr = 2;
  if (has_imagestr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imagestr(), output);
  }

  // optional .main.ElementColor imageColor = 3;
  if (has_imagecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->imagecolor(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ImageInfo)
}

int ImageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 imageId = 1;
    if (has_imageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageid());
    }

    // optional string imagestr = 2;
    if (has_imagestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagestr());
    }

    // optional .main.ElementColor imageColor = 3;
    if (has_imagecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagecolor());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageInfo*>(&from));
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imageid()) {
      set_imageid(from.imageid());
    }
    if (from.has_imagestr()) {
      set_imagestr(from.imagestr());
    }
    if (from.has_imagecolor()) {
      mutable_imagecolor()->::main::ElementColor::MergeFrom(from.imagecolor());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {

  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other != this) {
    std::swap(imageid_, other->imageid_);
    std::swap(imagestr_, other->imagestr_);
    std::swap(imagecolor_, other->imagecolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageInfo::GetTypeName() const {
  return "main.ImageInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemTypeFieldNumber;
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kItemCountFieldNumber;
const int ItemInfo::kItemLevelFieldNumber;
const int ItemInfo::kItemBtnIdFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  itemcount_ = 0;
  itemlevel_ = 0;
  itembtnid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:main.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemInfo& ItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(itemtype_, itembtnid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 itemType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional sint32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemCount;
        break;
      }

      // optional sint32 itemCount = 3;
      case 3: {
        if (tag == 24) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemLevel;
        break;
      }

      // optional sint32 itemLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_itemLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemlevel_)));
          set_has_itemlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemBtnId;
        break;
      }

      // optional sint32 itemBtnId = 5;
      case 5: {
        if (tag == 40) {
         parse_itemBtnId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itembtnid_)));
          set_has_itembtnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ItemInfo)
  // optional sint32 itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->itemtype(), output);
  }

  // optional sint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->itemid(), output);
  }

  // optional sint32 itemCount = 3;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->itemcount(), output);
  }

  // optional sint32 itemLevel = 4;
  if (has_itemlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->itemlevel(), output);
  }

  // optional sint32 itemBtnId = 5;
  if (has_itembtnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->itembtnid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ItemInfo)
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemtype());
    }

    // optional sint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemid());
    }

    // optional sint32 itemCount = 3;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemcount());
    }

    // optional sint32 itemLevel = 4;
    if (has_itemlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemlevel());
    }

    // optional sint32 itemBtnId = 5;
    if (has_itembtnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itembtnid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemInfo*>(&from));
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_itemlevel()) {
      set_itemlevel(from.itemlevel());
    }
    if (from.has_itembtnid()) {
      set_itembtnid(from.itembtnid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(itemlevel_, other->itemlevel_);
    std::swap(itembtnid_, other->itembtnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemInfo::GetTypeName() const {
  return "main.ItemInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityGetRewardRequest::kChildTagFieldNumber;
const int ActivityGetRewardRequest::kBtnIdFieldNumber;
#endif  // !_MSC_VER

ActivityGetRewardRequest::ActivityGetRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityGetRewardRequest)
}

void ActivityGetRewardRequest::InitAsDefaultInstance() {
}

ActivityGetRewardRequest::ActivityGetRewardRequest(const ActivityGetRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityGetRewardRequest)
}

void ActivityGetRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  childtag_ = 0;
  btnid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityGetRewardRequest::~ActivityGetRewardRequest() {
  // @@protoc_insertion_point(destructor:main.ActivityGetRewardRequest)
  SharedDtor();
}

void ActivityGetRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityGetRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityGetRewardRequest& ActivityGetRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityGetRewardRequest* ActivityGetRewardRequest::default_instance_ = NULL;

ActivityGetRewardRequest* ActivityGetRewardRequest::New() const {
  return new ActivityGetRewardRequest;
}

void ActivityGetRewardRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityGetRewardRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(childtag_, btnid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityGetRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityGetRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 childTag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childtag_)));
          set_has_childtag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_btnId;
        break;
      }

      // optional int32 btnId = 2;
      case 2: {
        if (tag == 16) {
         parse_btnId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btnid_)));
          set_has_btnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityGetRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityGetRewardRequest)
  return false;
#undef DO_
}

void ActivityGetRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityGetRewardRequest)
  // optional int32 childTag = 1;
  if (has_childtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->childtag(), output);
  }

  // optional int32 btnId = 2;
  if (has_btnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->btnid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityGetRewardRequest)
}

int ActivityGetRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 childTag = 1;
    if (has_childtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childtag());
    }

    // optional int32 btnId = 2;
    if (has_btnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btnid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityGetRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityGetRewardRequest*>(&from));
}

void ActivityGetRewardRequest::MergeFrom(const ActivityGetRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_childtag()) {
      set_childtag(from.childtag());
    }
    if (from.has_btnid()) {
      set_btnid(from.btnid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityGetRewardRequest::CopyFrom(const ActivityGetRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityGetRewardRequest::IsInitialized() const {

  return true;
}

void ActivityGetRewardRequest::Swap(ActivityGetRewardRequest* other) {
  if (other != this) {
    std::swap(childtag_, other->childtag_);
    std::swap(btnid_, other->btnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityGetRewardRequest::GetTypeName() const {
  return "main.ActivityGetRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityGetRewardResponse::kStateFieldNumber;
const int ActivityGetRewardResponse::kChildTagFieldNumber;
const int ActivityGetRewardResponse::kBtnIdFieldNumber;
#endif  // !_MSC_VER

ActivityGetRewardResponse::ActivityGetRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityGetRewardResponse)
}

void ActivityGetRewardResponse::InitAsDefaultInstance() {
}

ActivityGetRewardResponse::ActivityGetRewardResponse(const ActivityGetRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityGetRewardResponse)
}

void ActivityGetRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  childtag_ = 0;
  btnid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityGetRewardResponse::~ActivityGetRewardResponse() {
  // @@protoc_insertion_point(destructor:main.ActivityGetRewardResponse)
  SharedDtor();
}

void ActivityGetRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityGetRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityGetRewardResponse& ActivityGetRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityGetRewardResponse* ActivityGetRewardResponse::default_instance_ = NULL;

ActivityGetRewardResponse* ActivityGetRewardResponse::New() const {
  return new ActivityGetRewardResponse;
}

void ActivityGetRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityGetRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, btnid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityGetRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityGetRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_childTag;
        break;
      }

      // optional int32 childTag = 2;
      case 2: {
        if (tag == 16) {
         parse_childTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childtag_)));
          set_has_childtag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_btnId;
        break;
      }

      // optional int32 btnId = 3;
      case 3: {
        if (tag == 24) {
         parse_btnId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btnid_)));
          set_has_btnid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityGetRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityGetRewardResponse)
  return false;
#undef DO_
}

void ActivityGetRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityGetRewardResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 childTag = 2;
  if (has_childtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->childtag(), output);
  }

  // optional int32 btnId = 3;
  if (has_btnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->btnid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityGetRewardResponse)
}

int ActivityGetRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 childTag = 2;
    if (has_childtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childtag());
    }

    // optional int32 btnId = 3;
    if (has_btnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btnid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityGetRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityGetRewardResponse*>(&from));
}

void ActivityGetRewardResponse::MergeFrom(const ActivityGetRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_childtag()) {
      set_childtag(from.childtag());
    }
    if (from.has_btnid()) {
      set_btnid(from.btnid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityGetRewardResponse::CopyFrom(const ActivityGetRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityGetRewardResponse::IsInitialized() const {

  return true;
}

void ActivityGetRewardResponse::Swap(ActivityGetRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(childtag_, other->childtag_);
    std::swap(btnid_, other->btnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityGetRewardResponse::GetTypeName() const {
  return "main.ActivityGetRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityOpretionRequest::kChildTagFieldNumber;
const int ActivityOpretionRequest::kObjectTypeFieldNumber;
const int ActivityOpretionRequest::kObjectIdFieldNumber;
const int ActivityOpretionRequest::kOpreationFieldNumber;
#endif  // !_MSC_VER

ActivityOpretionRequest::ActivityOpretionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityOpretionRequest)
}

void ActivityOpretionRequest::InitAsDefaultInstance() {
}

ActivityOpretionRequest::ActivityOpretionRequest(const ActivityOpretionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityOpretionRequest)
}

void ActivityOpretionRequest::SharedCtor() {
  _cached_size_ = 0;
  childtag_ = 0;
  objecttype_ = 0;
  objectid_ = 0;
  opreation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityOpretionRequest::~ActivityOpretionRequest() {
  // @@protoc_insertion_point(destructor:main.ActivityOpretionRequest)
  SharedDtor();
}

void ActivityOpretionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityOpretionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityOpretionRequest& ActivityOpretionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityOpretionRequest* ActivityOpretionRequest::default_instance_ = NULL;

ActivityOpretionRequest* ActivityOpretionRequest::New() const {
  return new ActivityOpretionRequest;
}

void ActivityOpretionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityOpretionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(childtag_, opreation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityOpretionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityOpretionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 childTag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childtag_)));
          set_has_childtag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objectType;
        break;
      }

      // optional .main.ElementType objectType = 2;
      case 2: {
        if (tag == 16) {
         parse_objectType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::ElementType_IsValid(value)) {
            set_objecttype(static_cast< ::main::ElementType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_objectId;
        break;
      }

      // optional int32 objectId = 3;
      case 3: {
        if (tag == 24) {
         parse_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_opreation;
        break;
      }

      // optional int32 opreation = 4;
      case 4: {
        if (tag == 32) {
         parse_opreation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opreation_)));
          set_has_opreation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityOpretionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityOpretionRequest)
  return false;
#undef DO_
}

void ActivityOpretionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityOpretionRequest)
  // optional int32 childTag = 1;
  if (has_childtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->childtag(), output);
  }

  // optional .main.ElementType objectType = 2;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->objecttype(), output);
  }

  // optional int32 objectId = 3;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectid(), output);
  }

  // optional int32 opreation = 4;
  if (has_opreation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opreation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityOpretionRequest)
}

int ActivityOpretionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 childTag = 1;
    if (has_childtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childtag());
    }

    // optional .main.ElementType objectType = 2;
    if (has_objecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objecttype());
    }

    // optional int32 objectId = 3;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 opreation = 4;
    if (has_opreation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opreation());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityOpretionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityOpretionRequest*>(&from));
}

void ActivityOpretionRequest::MergeFrom(const ActivityOpretionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_childtag()) {
      set_childtag(from.childtag());
    }
    if (from.has_objecttype()) {
      set_objecttype(from.objecttype());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_opreation()) {
      set_opreation(from.opreation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityOpretionRequest::CopyFrom(const ActivityOpretionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOpretionRequest::IsInitialized() const {

  return true;
}

void ActivityOpretionRequest::Swap(ActivityOpretionRequest* other) {
  if (other != this) {
    std::swap(childtag_, other->childtag_);
    std::swap(objecttype_, other->objecttype_);
    std::swap(objectid_, other->objectid_);
    std::swap(opreation_, other->opreation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityOpretionRequest::GetTypeName() const {
  return "main.ActivityOpretionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityOpretionResponse::kOpreationListFieldNumber;
#endif  // !_MSC_VER

ActivityOpretionResponse::ActivityOpretionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityOpretionResponse)
}

void ActivityOpretionResponse::InitAsDefaultInstance() {
}

ActivityOpretionResponse::ActivityOpretionResponse(const ActivityOpretionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityOpretionResponse)
}

void ActivityOpretionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityOpretionResponse::~ActivityOpretionResponse() {
  // @@protoc_insertion_point(destructor:main.ActivityOpretionResponse)
  SharedDtor();
}

void ActivityOpretionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityOpretionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityOpretionResponse& ActivityOpretionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityOpretionResponse* ActivityOpretionResponse::default_instance_ = NULL;

ActivityOpretionResponse* ActivityOpretionResponse::New() const {
  return new ActivityOpretionResponse;
}

void ActivityOpretionResponse::Clear() {
  opreationlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityOpretionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityOpretionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.ActivityOpretion opreationList = 1;
      case 1: {
        if (tag == 10) {
         parse_opreationList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opreationlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_opreationList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityOpretionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityOpretionResponse)
  return false;
#undef DO_
}

void ActivityOpretionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityOpretionResponse)
  // repeated .main.ActivityOpretion opreationList = 1;
  for (int i = 0; i < this->opreationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->opreationlist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityOpretionResponse)
}

int ActivityOpretionResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.ActivityOpretion opreationList = 1;
  total_size += 1 * this->opreationlist_size();
  for (int i = 0; i < this->opreationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opreationlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityOpretionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityOpretionResponse*>(&from));
}

void ActivityOpretionResponse::MergeFrom(const ActivityOpretionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  opreationlist_.MergeFrom(from.opreationlist_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityOpretionResponse::CopyFrom(const ActivityOpretionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOpretionResponse::IsInitialized() const {

  return true;
}

void ActivityOpretionResponse::Swap(ActivityOpretionResponse* other) {
  if (other != this) {
    opreationlist_.Swap(&other->opreationlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityOpretionResponse::GetTypeName() const {
  return "main.ActivityOpretionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityOpretion::kChildTagFieldNumber;
const int ActivityOpretion::kObjectTypeFieldNumber;
const int ActivityOpretion::kObjectIdFieldNumber;
const int ActivityOpretion::kOpreationFieldNumber;
const int ActivityOpretion::kFontStrFieldNumber;
const int ActivityOpretion::kFontColorFieldNumber;
const int ActivityOpretion::kBgStrFieldNumber;
const int ActivityOpretion::kFgStrFieldNumber;
const int ActivityOpretion::kImageColorFieldNumber;
const int ActivityOpretion::kItemInfoFieldNumber;
const int ActivityOpretion::kStateFieldNumber;
#endif  // !_MSC_VER

ActivityOpretion::ActivityOpretion()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityOpretion)
}

void ActivityOpretion::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontcolor_ = const_cast< ::main::ElementColor*>(
      ::main::ElementColor::internal_default_instance());
#else
  fontcolor_ = const_cast< ::main::ElementColor*>(&::main::ElementColor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  imagecolor_ = const_cast< ::main::ElementColor*>(
      ::main::ElementColor::internal_default_instance());
#else
  imagecolor_ = const_cast< ::main::ElementColor*>(&::main::ElementColor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  iteminfo_ = const_cast< ::main::ItemInfo*>(
      ::main::ItemInfo::internal_default_instance());
#else
  iteminfo_ = const_cast< ::main::ItemInfo*>(&::main::ItemInfo::default_instance());
#endif
}

ActivityOpretion::ActivityOpretion(const ActivityOpretion& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityOpretion)
}

void ActivityOpretion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  childtag_ = 0;
  objecttype_ = 0;
  objectid_ = 0;
  opreation_ = 0;
  fontstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontcolor_ = NULL;
  bgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagecolor_ = NULL;
  iteminfo_ = NULL;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityOpretion::~ActivityOpretion() {
  // @@protoc_insertion_point(destructor:main.ActivityOpretion)
  SharedDtor();
}

void ActivityOpretion::SharedDtor() {
  if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fontstr_;
  }
  if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bgstr_;
  }
  if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fgstr_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fontcolor_;
    delete imagecolor_;
    delete iteminfo_;
  }
}

void ActivityOpretion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityOpretion& ActivityOpretion::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LuaActivityModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LuaActivityModule_2eproto();
#endif
  return *default_instance_;
}

ActivityOpretion* ActivityOpretion::default_instance_ = NULL;

ActivityOpretion* ActivityOpretion::New() const {
  return new ActivityOpretion;
}

void ActivityOpretion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityOpretion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(childtag_, opreation_);
    if (has_fontstr()) {
      if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fontstr_->clear();
      }
    }
    if (has_fontcolor()) {
      if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
    }
    if (has_bgstr()) {
      if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bgstr_->clear();
      }
    }
    if (has_fgstr()) {
      if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fgstr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_imagecolor()) {
      if (imagecolor_ != NULL) imagecolor_->::main::ElementColor::Clear();
    }
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::main::ItemInfo::Clear();
    }
    state_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityOpretion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityOpretion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 childTag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childtag_)));
          set_has_childtag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objectType;
        break;
      }

      // optional .main.ElementType objectType = 2;
      case 2: {
        if (tag == 16) {
         parse_objectType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::ElementType_IsValid(value)) {
            set_objecttype(static_cast< ::main::ElementType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_objectId;
        break;
      }

      // optional int32 objectId = 3;
      case 3: {
        if (tag == 24) {
         parse_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_opreation;
        break;
      }

      // optional int32 opreation = 4;
      case 4: {
        if (tag == 32) {
         parse_opreation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opreation_)));
          set_has_opreation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fontStr;
        break;
      }

      // optional string fontStr = 5;
      case 5: {
        if (tag == 42) {
         parse_fontStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fontColor;
        break;
      }

      // optional .main.ElementColor fontColor = 6;
      case 6: {
        if (tag == 50) {
         parse_fontColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bgStr;
        break;
      }

      // optional string bgStr = 7;
      case 7: {
        if (tag == 58) {
         parse_bgStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fgStr;
        break;
      }

      // optional string fgStr = 8;
      case 8: {
        if (tag == 66) {
         parse_fgStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fgstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_imageColor;
        break;
      }

      // optional .main.ElementColor imageColor = 9;
      case 9: {
        if (tag == 74) {
         parse_imageColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_itemInfo;
        break;
      }

      // optional .main.ItemInfo itemInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_state;
        break;
      }

      // optional int32 state = 11;
      case 11: {
        if (tag == 88) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityOpretion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityOpretion)
  return false;
#undef DO_
}

void ActivityOpretion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityOpretion)
  // optional int32 childTag = 1;
  if (has_childtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->childtag(), output);
  }

  // optional .main.ElementType objectType = 2;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->objecttype(), output);
  }

  // optional int32 objectId = 3;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectid(), output);
  }

  // optional int32 opreation = 4;
  if (has_opreation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opreation(), output);
  }

  // optional string fontStr = 5;
  if (has_fontstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fontstr(), output);
  }

  // optional .main.ElementColor fontColor = 6;
  if (has_fontcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->fontcolor(), output);
  }

  // optional string bgStr = 7;
  if (has_bgstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bgstr(), output);
  }

  // optional string fgStr = 8;
  if (has_fgstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fgstr(), output);
  }

  // optional .main.ElementColor imageColor = 9;
  if (has_imagecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->imagecolor(), output);
  }

  // optional .main.ItemInfo itemInfo = 10;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->iteminfo(), output);
  }

  // optional int32 state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityOpretion)
}

int ActivityOpretion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 childTag = 1;
    if (has_childtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childtag());
    }

    // optional .main.ElementType objectType = 2;
    if (has_objecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objecttype());
    }

    // optional int32 objectId = 3;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectid());
    }

    // optional int32 opreation = 4;
    if (has_opreation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opreation());
    }

    // optional string fontStr = 5;
    if (has_fontstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontstr());
    }

    // optional .main.ElementColor fontColor = 6;
    if (has_fontcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontcolor());
    }

    // optional string bgStr = 7;
    if (has_bgstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bgstr());
    }

    // optional string fgStr = 8;
    if (has_fgstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fgstr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .main.ElementColor imageColor = 9;
    if (has_imagecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagecolor());
    }

    // optional .main.ItemInfo itemInfo = 10;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional int32 state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityOpretion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityOpretion*>(&from));
}

void ActivityOpretion::MergeFrom(const ActivityOpretion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_childtag()) {
      set_childtag(from.childtag());
    }
    if (from.has_objecttype()) {
      set_objecttype(from.objecttype());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_opreation()) {
      set_opreation(from.opreation());
    }
    if (from.has_fontstr()) {
      set_fontstr(from.fontstr());
    }
    if (from.has_fontcolor()) {
      mutable_fontcolor()->::main::ElementColor::MergeFrom(from.fontcolor());
    }
    if (from.has_bgstr()) {
      set_bgstr(from.bgstr());
    }
    if (from.has_fgstr()) {
      set_fgstr(from.fgstr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imagecolor()) {
      mutable_imagecolor()->::main::ElementColor::MergeFrom(from.imagecolor());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::main::ItemInfo::MergeFrom(from.iteminfo());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityOpretion::CopyFrom(const ActivityOpretion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOpretion::IsInitialized() const {

  return true;
}

void ActivityOpretion::Swap(ActivityOpretion* other) {
  if (other != this) {
    std::swap(childtag_, other->childtag_);
    std::swap(objecttype_, other->objecttype_);
    std::swap(objectid_, other->objectid_);
    std::swap(opreation_, other->opreation_);
    std::swap(fontstr_, other->fontstr_);
    std::swap(fontcolor_, other->fontcolor_);
    std::swap(bgstr_, other->bgstr_);
    std::swap(fgstr_, other->fgstr_);
    std::swap(imagecolor_, other->imagecolor_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityOpretion::GetTypeName() const {
  return "main.ActivityOpretion";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
