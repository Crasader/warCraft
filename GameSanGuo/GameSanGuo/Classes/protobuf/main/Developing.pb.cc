// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Developing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Developing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_Developing_2eproto() {
  delete DevelopOfficerDetailRequest::default_instance_;
  delete DevelopOfficerDetailResponse::default_instance_;
  delete DevPointDetail::default_instance_;
  delete DevOfficerDetail::default_instance_;
  delete NoSavedDetail::default_instance_;
  delete DevelopOfficerRequest::default_instance_;
  delete DevelopOfficerResponse::default_instance_;
  delete SaveOfficerRequest::default_instance_;
  delete SaveOfficerResponse::default_instance_;
  delete GiveUpOfficerRequest::default_instance_;
  delete UseDevelopItemRequest::default_instance_;
  delete UseDevelopItemResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Developing_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Developing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DevelopOfficerDetailRequest::default_instance_ = new DevelopOfficerDetailRequest();
  DevelopOfficerDetailResponse::default_instance_ = new DevelopOfficerDetailResponse();
  DevPointDetail::default_instance_ = new DevPointDetail();
  DevOfficerDetail::default_instance_ = new DevOfficerDetail();
  NoSavedDetail::default_instance_ = new NoSavedDetail();
  DevelopOfficerRequest::default_instance_ = new DevelopOfficerRequest();
  DevelopOfficerResponse::default_instance_ = new DevelopOfficerResponse();
  SaveOfficerRequest::default_instance_ = new SaveOfficerRequest();
  SaveOfficerResponse::default_instance_ = new SaveOfficerResponse();
  GiveUpOfficerRequest::default_instance_ = new GiveUpOfficerRequest();
  UseDevelopItemRequest::default_instance_ = new UseDevelopItemRequest();
  UseDevelopItemResponse::default_instance_ = new UseDevelopItemResponse();
  DevelopOfficerDetailRequest::default_instance_->InitAsDefaultInstance();
  DevelopOfficerDetailResponse::default_instance_->InitAsDefaultInstance();
  DevPointDetail::default_instance_->InitAsDefaultInstance();
  DevOfficerDetail::default_instance_->InitAsDefaultInstance();
  NoSavedDetail::default_instance_->InitAsDefaultInstance();
  DevelopOfficerRequest::default_instance_->InitAsDefaultInstance();
  DevelopOfficerResponse::default_instance_->InitAsDefaultInstance();
  SaveOfficerRequest::default_instance_->InitAsDefaultInstance();
  SaveOfficerResponse::default_instance_->InitAsDefaultInstance();
  GiveUpOfficerRequest::default_instance_->InitAsDefaultInstance();
  UseDevelopItemRequest::default_instance_->InitAsDefaultInstance();
  UseDevelopItemResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Developing_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Developing_2eproto_once_);
void protobuf_AddDesc_Developing_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Developing_2eproto_once_,
                 &protobuf_AddDesc_Developing_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Developing_2eproto {
  StaticDescriptorInitializer_Developing_2eproto() {
    protobuf_AddDesc_Developing_2eproto();
  }
} static_descriptor_initializer_Developing_2eproto_;
#endif
bool DevelopingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool DevelopingCount_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DevelopOfficerDetailRequest::kSsIdFieldNumber;
#endif  // !_MSC_VER

DevelopOfficerDetailRequest::DevelopOfficerDetailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DevelopOfficerDetailRequest)
}

void DevelopOfficerDetailRequest::InitAsDefaultInstance() {
}

DevelopOfficerDetailRequest::DevelopOfficerDetailRequest(const DevelopOfficerDetailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DevelopOfficerDetailRequest)
}

void DevelopOfficerDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevelopOfficerDetailRequest::~DevelopOfficerDetailRequest() {
  // @@protoc_insertion_point(destructor:main.DevelopOfficerDetailRequest)
  SharedDtor();
}

void DevelopOfficerDetailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DevelopOfficerDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevelopOfficerDetailRequest& DevelopOfficerDetailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

DevelopOfficerDetailRequest* DevelopOfficerDetailRequest::default_instance_ = NULL;

DevelopOfficerDetailRequest* DevelopOfficerDetailRequest::New() const {
  return new DevelopOfficerDetailRequest;
}

void DevelopOfficerDetailRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DevelopOfficerDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DevelopOfficerDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DevelopOfficerDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DevelopOfficerDetailRequest)
  return false;
#undef DO_
}

void DevelopOfficerDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DevelopOfficerDetailRequest)
  // required int32 ssId = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DevelopOfficerDetailRequest)
}

int DevelopOfficerDetailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssId = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevelopOfficerDetailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevelopOfficerDetailRequest*>(&from));
}

void DevelopOfficerDetailRequest::MergeFrom(const DevelopOfficerDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DevelopOfficerDetailRequest::CopyFrom(const DevelopOfficerDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevelopOfficerDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DevelopOfficerDetailRequest::Swap(DevelopOfficerDetailRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DevelopOfficerDetailRequest::GetTypeName() const {
  return "main.DevelopOfficerDetailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DevelopOfficerDetailResponse::kSsIdFieldNumber;
const int DevelopOfficerDetailResponse::kSavedFieldNumber;
const int DevelopOfficerDetailResponse::kPointDetailFieldNumber;
const int DevelopOfficerDetailResponse::kOfficerDetailFieldNumber;
const int DevelopOfficerDetailResponse::kNoSavedDetailFieldNumber;
const int DevelopOfficerDetailResponse::kNorCoinsFieldNumber;
const int DevelopOfficerDetailResponse::kNorItemNumFieldNumber;
const int DevelopOfficerDetailResponse::kSpeGoldFieldNumber;
const int DevelopOfficerDetailResponse::kSpeItemNumFieldNumber;
#endif  // !_MSC_VER

DevelopOfficerDetailResponse::DevelopOfficerDetailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DevelopOfficerDetailResponse)
}

void DevelopOfficerDetailResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pointdetail_ = const_cast< ::main::DevPointDetail*>(
      ::main::DevPointDetail::internal_default_instance());
#else
  pointdetail_ = const_cast< ::main::DevPointDetail*>(&::main::DevPointDetail::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officerdetail_ = const_cast< ::main::DevOfficerDetail*>(
      ::main::DevOfficerDetail::internal_default_instance());
#else
  officerdetail_ = const_cast< ::main::DevOfficerDetail*>(&::main::DevOfficerDetail::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nosaveddetail_ = const_cast< ::main::NoSavedDetail*>(
      ::main::NoSavedDetail::internal_default_instance());
#else
  nosaveddetail_ = const_cast< ::main::NoSavedDetail*>(&::main::NoSavedDetail::default_instance());
#endif
}

DevelopOfficerDetailResponse::DevelopOfficerDetailResponse(const DevelopOfficerDetailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DevelopOfficerDetailResponse)
}

void DevelopOfficerDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  saved_ = false;
  pointdetail_ = NULL;
  officerdetail_ = NULL;
  nosaveddetail_ = NULL;
  norcoins_ = 0;
  noritemnum_ = 0;
  spegold_ = 0;
  speitemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevelopOfficerDetailResponse::~DevelopOfficerDetailResponse() {
  // @@protoc_insertion_point(destructor:main.DevelopOfficerDetailResponse)
  SharedDtor();
}

void DevelopOfficerDetailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pointdetail_;
    delete officerdetail_;
    delete nosaveddetail_;
  }
}

void DevelopOfficerDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevelopOfficerDetailResponse& DevelopOfficerDetailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

DevelopOfficerDetailResponse* DevelopOfficerDetailResponse::default_instance_ = NULL;

DevelopOfficerDetailResponse* DevelopOfficerDetailResponse::New() const {
  return new DevelopOfficerDetailResponse;
}

void DevelopOfficerDetailResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DevelopOfficerDetailResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ssid_, saved_);
    ZR_(norcoins_, spegold_);
    if (has_pointdetail()) {
      if (pointdetail_ != NULL) pointdetail_->::main::DevPointDetail::Clear();
    }
    if (has_officerdetail()) {
      if (officerdetail_ != NULL) officerdetail_->::main::DevOfficerDetail::Clear();
    }
    if (has_nosaveddetail()) {
      if (nosaveddetail_ != NULL) nosaveddetail_->::main::NoSavedDetail::Clear();
    }
  }
  speitemnum_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DevelopOfficerDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DevelopOfficerDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_saved;
        break;
      }

      // required bool saved = 2;
      case 2: {
        if (tag == 16) {
         parse_saved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &saved_)));
          set_has_saved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pointDetail;
        break;
      }

      // required .main.DevPointDetail pointDetail = 3;
      case 3: {
        if (tag == 26) {
         parse_pointDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointdetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_officerDetail;
        break;
      }

      // optional .main.DevOfficerDetail officerDetail = 4;
      case 4: {
        if (tag == 34) {
         parse_officerDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officerdetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_noSavedDetail;
        break;
      }

      // optional .main.NoSavedDetail noSavedDetail = 5;
      case 5: {
        if (tag == 42) {
         parse_noSavedDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nosaveddetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_norCoins;
        break;
      }

      // required int32 norCoins = 6;
      case 6: {
        if (tag == 48) {
         parse_norCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &norcoins_)));
          set_has_norcoins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_norItemNum;
        break;
      }

      // required int32 norItemNum = 7;
      case 7: {
        if (tag == 56) {
         parse_norItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noritemnum_)));
          set_has_noritemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_speGold;
        break;
      }

      // required int32 speGold = 8;
      case 8: {
        if (tag == 64) {
         parse_speGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spegold_)));
          set_has_spegold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_speItemNum;
        break;
      }

      // required int32 speItemNum = 9;
      case 9: {
        if (tag == 72) {
         parse_speItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speitemnum_)));
          set_has_speitemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DevelopOfficerDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DevelopOfficerDetailResponse)
  return false;
#undef DO_
}

void DevelopOfficerDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DevelopOfficerDetailResponse)
  // required int32 ssId = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // required bool saved = 2;
  if (has_saved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->saved(), output);
  }

  // required .main.DevPointDetail pointDetail = 3;
  if (has_pointdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pointdetail(), output);
  }

  // optional .main.DevOfficerDetail officerDetail = 4;
  if (has_officerdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->officerdetail(), output);
  }

  // optional .main.NoSavedDetail noSavedDetail = 5;
  if (has_nosaveddetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->nosaveddetail(), output);
  }

  // required int32 norCoins = 6;
  if (has_norcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->norcoins(), output);
  }

  // required int32 norItemNum = 7;
  if (has_noritemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->noritemnum(), output);
  }

  // required int32 speGold = 8;
  if (has_spegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spegold(), output);
  }

  // required int32 speItemNum = 9;
  if (has_speitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->speitemnum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DevelopOfficerDetailResponse)
}

int DevelopOfficerDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssId = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // required bool saved = 2;
    if (has_saved()) {
      total_size += 1 + 1;
    }

    // required .main.DevPointDetail pointDetail = 3;
    if (has_pointdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointdetail());
    }

    // optional .main.DevOfficerDetail officerDetail = 4;
    if (has_officerdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officerdetail());
    }

    // optional .main.NoSavedDetail noSavedDetail = 5;
    if (has_nosaveddetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nosaveddetail());
    }

    // required int32 norCoins = 6;
    if (has_norcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->norcoins());
    }

    // required int32 norItemNum = 7;
    if (has_noritemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noritemnum());
    }

    // required int32 speGold = 8;
    if (has_spegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spegold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 speItemNum = 9;
    if (has_speitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speitemnum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevelopOfficerDetailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevelopOfficerDetailResponse*>(&from));
}

void DevelopOfficerDetailResponse::MergeFrom(const DevelopOfficerDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_saved()) {
      set_saved(from.saved());
    }
    if (from.has_pointdetail()) {
      mutable_pointdetail()->::main::DevPointDetail::MergeFrom(from.pointdetail());
    }
    if (from.has_officerdetail()) {
      mutable_officerdetail()->::main::DevOfficerDetail::MergeFrom(from.officerdetail());
    }
    if (from.has_nosaveddetail()) {
      mutable_nosaveddetail()->::main::NoSavedDetail::MergeFrom(from.nosaveddetail());
    }
    if (from.has_norcoins()) {
      set_norcoins(from.norcoins());
    }
    if (from.has_noritemnum()) {
      set_noritemnum(from.noritemnum());
    }
    if (from.has_spegold()) {
      set_spegold(from.spegold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speitemnum()) {
      set_speitemnum(from.speitemnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DevelopOfficerDetailResponse::CopyFrom(const DevelopOfficerDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevelopOfficerDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001e7) != 0x000001e7) return false;

  if (has_pointdetail()) {
    if (!this->pointdetail().IsInitialized()) return false;
  }
  if (has_nosaveddetail()) {
    if (!this->nosaveddetail().IsInitialized()) return false;
  }
  return true;
}

void DevelopOfficerDetailResponse::Swap(DevelopOfficerDetailResponse* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(saved_, other->saved_);
    std::swap(pointdetail_, other->pointdetail_);
    std::swap(officerdetail_, other->officerdetail_);
    std::swap(nosaveddetail_, other->nosaveddetail_);
    std::swap(norcoins_, other->norcoins_);
    std::swap(noritemnum_, other->noritemnum_);
    std::swap(spegold_, other->spegold_);
    std::swap(speitemnum_, other->speitemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DevelopOfficerDetailResponse::GetTypeName() const {
  return "main.DevelopOfficerDetailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DevPointDetail::kDevPointFieldNumber;
const int DevPointDetail::kAddDevPointFieldNumber;
const int DevPointDetail::kMaxDevPointFieldNumber;
#endif  // !_MSC_VER

DevPointDetail::DevPointDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DevPointDetail)
}

void DevPointDetail::InitAsDefaultInstance() {
}

DevPointDetail::DevPointDetail(const DevPointDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DevPointDetail)
}

void DevPointDetail::SharedCtor() {
  _cached_size_ = 0;
  devpoint_ = 0;
  adddevpoint_ = 0;
  maxdevpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevPointDetail::~DevPointDetail() {
  // @@protoc_insertion_point(destructor:main.DevPointDetail)
  SharedDtor();
}

void DevPointDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DevPointDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevPointDetail& DevPointDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

DevPointDetail* DevPointDetail::default_instance_ = NULL;

DevPointDetail* DevPointDetail::New() const {
  return new DevPointDetail;
}

void DevPointDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DevPointDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(devpoint_, maxdevpoint_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DevPointDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DevPointDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 devPoint = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devpoint_)));
          set_has_devpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addDevPoint;
        break;
      }

      // required int32 addDevPoint = 2;
      case 2: {
        if (tag == 16) {
         parse_addDevPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddevpoint_)));
          set_has_adddevpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxDevPoint;
        break;
      }

      // required int32 maxDevPoint = 3;
      case 3: {
        if (tag == 24) {
         parse_maxDevPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdevpoint_)));
          set_has_maxdevpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DevPointDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DevPointDetail)
  return false;
#undef DO_
}

void DevPointDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DevPointDetail)
  // required int32 devPoint = 1;
  if (has_devpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->devpoint(), output);
  }

  // required int32 addDevPoint = 2;
  if (has_adddevpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adddevpoint(), output);
  }

  // required int32 maxDevPoint = 3;
  if (has_maxdevpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxdevpoint(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DevPointDetail)
}

int DevPointDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 devPoint = 1;
    if (has_devpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devpoint());
    }

    // required int32 addDevPoint = 2;
    if (has_adddevpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddevpoint());
    }

    // required int32 maxDevPoint = 3;
    if (has_maxdevpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxdevpoint());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevPointDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevPointDetail*>(&from));
}

void DevPointDetail::MergeFrom(const DevPointDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devpoint()) {
      set_devpoint(from.devpoint());
    }
    if (from.has_adddevpoint()) {
      set_adddevpoint(from.adddevpoint());
    }
    if (from.has_maxdevpoint()) {
      set_maxdevpoint(from.maxdevpoint());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DevPointDetail::CopyFrom(const DevPointDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevPointDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DevPointDetail::Swap(DevPointDetail* other) {
  if (other != this) {
    std::swap(devpoint_, other->devpoint_);
    std::swap(adddevpoint_, other->adddevpoint_);
    std::swap(maxdevpoint_, other->maxdevpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DevPointDetail::GetTypeName() const {
  return "main.DevPointDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int DevOfficerDetail::kExtAtkFieldNumber;
const int DevOfficerDetail::kMaxAtkFieldNumber;
const int DevOfficerDetail::kExtDefFieldNumber;
const int DevOfficerDetail::kMaxDefFieldNumber;
const int DevOfficerDetail::kExtHpFieldNumber;
const int DevOfficerDetail::kMaxHpFieldNumber;
const int DevOfficerDetail::kExtSpFieldNumber;
const int DevOfficerDetail::kMaxSpFieldNumber;
#endif  // !_MSC_VER

DevOfficerDetail::DevOfficerDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DevOfficerDetail)
}

void DevOfficerDetail::InitAsDefaultInstance() {
}

DevOfficerDetail::DevOfficerDetail(const DevOfficerDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DevOfficerDetail)
}

void DevOfficerDetail::SharedCtor() {
  _cached_size_ = 0;
  extatk_ = 0;
  maxatk_ = 0;
  extdef_ = 0;
  maxdef_ = 0;
  exthp_ = 0;
  maxhp_ = 0;
  extsp_ = 0;
  maxsp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevOfficerDetail::~DevOfficerDetail() {
  // @@protoc_insertion_point(destructor:main.DevOfficerDetail)
  SharedDtor();
}

void DevOfficerDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DevOfficerDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevOfficerDetail& DevOfficerDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

DevOfficerDetail* DevOfficerDetail::default_instance_ = NULL;

DevOfficerDetail* DevOfficerDetail::New() const {
  return new DevOfficerDetail;
}

void DevOfficerDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DevOfficerDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(extatk_, maxsp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DevOfficerDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DevOfficerDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 extAtk = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extatk_)));
          set_has_extatk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxAtk;
        break;
      }

      // optional int32 maxAtk = 2;
      case 2: {
        if (tag == 16) {
         parse_maxAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxatk_)));
          set_has_maxatk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_extDef;
        break;
      }

      // optional int32 extDef = 3;
      case 3: {
        if (tag == 24) {
         parse_extDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extdef_)));
          set_has_extdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxDef;
        break;
      }

      // optional int32 maxDef = 4;
      case 4: {
        if (tag == 32) {
         parse_maxDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdef_)));
          set_has_maxdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_extHp;
        break;
      }

      // optional int32 extHp = 5;
      case 5: {
        if (tag == 40) {
         parse_extHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exthp_)));
          set_has_exthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxHp;
        break;
      }

      // optional int32 maxHp = 6;
      case 6: {
        if (tag == 48) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_extSp;
        break;
      }

      // optional int32 extSp = 7;
      case 7: {
        if (tag == 56) {
         parse_extSp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extsp_)));
          set_has_extsp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxSp;
        break;
      }

      // optional int32 maxSp = 8;
      case 8: {
        if (tag == 64) {
         parse_maxSp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsp_)));
          set_has_maxsp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DevOfficerDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DevOfficerDetail)
  return false;
#undef DO_
}

void DevOfficerDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DevOfficerDetail)
  // optional int32 extAtk = 1;
  if (has_extatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->extatk(), output);
  }

  // optional int32 maxAtk = 2;
  if (has_maxatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxatk(), output);
  }

  // optional int32 extDef = 3;
  if (has_extdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extdef(), output);
  }

  // optional int32 maxDef = 4;
  if (has_maxdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxdef(), output);
  }

  // optional int32 extHp = 5;
  if (has_exthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exthp(), output);
  }

  // optional int32 maxHp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxhp(), output);
  }

  // optional int32 extSp = 7;
  if (has_extsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->extsp(), output);
  }

  // optional int32 maxSp = 8;
  if (has_maxsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxsp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DevOfficerDetail)
}

int DevOfficerDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 extAtk = 1;
    if (has_extatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extatk());
    }

    // optional int32 maxAtk = 2;
    if (has_maxatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxatk());
    }

    // optional int32 extDef = 3;
    if (has_extdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extdef());
    }

    // optional int32 maxDef = 4;
    if (has_maxdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxdef());
    }

    // optional int32 extHp = 5;
    if (has_exthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exthp());
    }

    // optional int32 maxHp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 extSp = 7;
    if (has_extsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extsp());
    }

    // optional int32 maxSp = 8;
    if (has_maxsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevOfficerDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevOfficerDetail*>(&from));
}

void DevOfficerDetail::MergeFrom(const DevOfficerDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extatk()) {
      set_extatk(from.extatk());
    }
    if (from.has_maxatk()) {
      set_maxatk(from.maxatk());
    }
    if (from.has_extdef()) {
      set_extdef(from.extdef());
    }
    if (from.has_maxdef()) {
      set_maxdef(from.maxdef());
    }
    if (from.has_exthp()) {
      set_exthp(from.exthp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_extsp()) {
      set_extsp(from.extsp());
    }
    if (from.has_maxsp()) {
      set_maxsp(from.maxsp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DevOfficerDetail::CopyFrom(const DevOfficerDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevOfficerDetail::IsInitialized() const {

  return true;
}

void DevOfficerDetail::Swap(DevOfficerDetail* other) {
  if (other != this) {
    std::swap(extatk_, other->extatk_);
    std::swap(maxatk_, other->maxatk_);
    std::swap(extdef_, other->extdef_);
    std::swap(maxdef_, other->maxdef_);
    std::swap(exthp_, other->exthp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(extsp_, other->extsp_);
    std::swap(maxsp_, other->maxsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DevOfficerDetail::GetTypeName() const {
  return "main.DevOfficerDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int NoSavedDetail::kAtkFieldNumber;
const int NoSavedDetail::kDefFieldNumber;
const int NoSavedDetail::kHpFieldNumber;
const int NoSavedDetail::kSpFieldNumber;
#endif  // !_MSC_VER

NoSavedDetail::NoSavedDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.NoSavedDetail)
}

void NoSavedDetail::InitAsDefaultInstance() {
}

NoSavedDetail::NoSavedDetail(const NoSavedDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.NoSavedDetail)
}

void NoSavedDetail::SharedCtor() {
  _cached_size_ = 0;
  atk_ = 0;
  def_ = 0;
  hp_ = 0;
  sp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoSavedDetail::~NoSavedDetail() {
  // @@protoc_insertion_point(destructor:main.NoSavedDetail)
  SharedDtor();
}

void NoSavedDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NoSavedDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NoSavedDetail& NoSavedDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

NoSavedDetail* NoSavedDetail::default_instance_ = NULL;

NoSavedDetail* NoSavedDetail::New() const {
  return new NoSavedDetail;
}

void NoSavedDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NoSavedDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(atk_, sp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NoSavedDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.NoSavedDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 atk = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_def;
        break;
      }

      // required int32 def = 2;
      case 2: {
        if (tag == 16) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sp;
        break;
      }

      // required int32 sp = 4;
      case 4: {
        if (tag == 32) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.NoSavedDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.NoSavedDetail)
  return false;
#undef DO_
}

void NoSavedDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.NoSavedDetail)
  // required int32 atk = 1;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->atk(), output);
  }

  // required int32 def = 2;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->def(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // required int32 sp = 4;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.NoSavedDetail)
}

int NoSavedDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 atk = 1;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

    // required int32 def = 2;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 sp = 4;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoSavedDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NoSavedDetail*>(&from));
}

void NoSavedDetail::MergeFrom(const NoSavedDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NoSavedDetail::CopyFrom(const NoSavedDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoSavedDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NoSavedDetail::Swap(NoSavedDetail* other) {
  if (other != this) {
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(hp_, other->hp_);
    std::swap(sp_, other->sp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NoSavedDetail::GetTypeName() const {
  return "main.NoSavedDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int DevelopOfficerRequest::kSsIdFieldNumber;
const int DevelopOfficerRequest::kTypeFieldNumber;
const int DevelopOfficerRequest::kCountFieldNumber;
#endif  // !_MSC_VER

DevelopOfficerRequest::DevelopOfficerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DevelopOfficerRequest)
}

void DevelopOfficerRequest::InitAsDefaultInstance() {
}

DevelopOfficerRequest::DevelopOfficerRequest(const DevelopOfficerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DevelopOfficerRequest)
}

void DevelopOfficerRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  type_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevelopOfficerRequest::~DevelopOfficerRequest() {
  // @@protoc_insertion_point(destructor:main.DevelopOfficerRequest)
  SharedDtor();
}

void DevelopOfficerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DevelopOfficerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevelopOfficerRequest& DevelopOfficerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

DevelopOfficerRequest* DevelopOfficerRequest::default_instance_ = NULL;

DevelopOfficerRequest* DevelopOfficerRequest::New() const {
  return new DevelopOfficerRequest;
}

void DevelopOfficerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DevelopOfficerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DevelopOfficerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DevelopOfficerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .main.DevelopingType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::DevelopingType_IsValid(value)) {
            set_type(static_cast< ::main::DevelopingType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required .main.DevelopingCount count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::DevelopingCount_IsValid(value)) {
            set_count(static_cast< ::main::DevelopingCount >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DevelopOfficerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DevelopOfficerRequest)
  return false;
#undef DO_
}

void DevelopOfficerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DevelopOfficerRequest)
  // required int32 ssId = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // required .main.DevelopingType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .main.DevelopingCount count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DevelopOfficerRequest)
}

int DevelopOfficerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssId = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // required .main.DevelopingType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .main.DevelopingCount count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevelopOfficerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevelopOfficerRequest*>(&from));
}

void DevelopOfficerRequest::MergeFrom(const DevelopOfficerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DevelopOfficerRequest::CopyFrom(const DevelopOfficerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevelopOfficerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DevelopOfficerRequest::Swap(DevelopOfficerRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DevelopOfficerRequest::GetTypeName() const {
  return "main.DevelopOfficerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DevelopOfficerResponse::kStateFieldNumber;
const int DevelopOfficerResponse::kSsIdFieldNumber;
const int DevelopOfficerResponse::kNoSavedDetailFieldNumber;
#endif  // !_MSC_VER

DevelopOfficerResponse::DevelopOfficerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DevelopOfficerResponse)
}

void DevelopOfficerResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nosaveddetail_ = const_cast< ::main::NoSavedDetail*>(
      ::main::NoSavedDetail::internal_default_instance());
#else
  nosaveddetail_ = const_cast< ::main::NoSavedDetail*>(&::main::NoSavedDetail::default_instance());
#endif
}

DevelopOfficerResponse::DevelopOfficerResponse(const DevelopOfficerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DevelopOfficerResponse)
}

void DevelopOfficerResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  nosaveddetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevelopOfficerResponse::~DevelopOfficerResponse() {
  // @@protoc_insertion_point(destructor:main.DevelopOfficerResponse)
  SharedDtor();
}

void DevelopOfficerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete nosaveddetail_;
  }
}

void DevelopOfficerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevelopOfficerResponse& DevelopOfficerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

DevelopOfficerResponse* DevelopOfficerResponse::default_instance_ = NULL;

DevelopOfficerResponse* DevelopOfficerResponse::New() const {
  return new DevelopOfficerResponse;
}

void DevelopOfficerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DevelopOfficerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, ssid_);
    if (has_nosaveddetail()) {
      if (nosaveddetail_ != NULL) nosaveddetail_->::main::NoSavedDetail::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DevelopOfficerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DevelopOfficerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssId;
        break;
      }

      // required int32 ssId = 2;
      case 2: {
        if (tag == 16) {
         parse_ssId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_noSavedDetail;
        break;
      }

      // optional .main.NoSavedDetail noSavedDetail = 3;
      case 3: {
        if (tag == 26) {
         parse_noSavedDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nosaveddetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DevelopOfficerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DevelopOfficerResponse)
  return false;
#undef DO_
}

void DevelopOfficerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DevelopOfficerResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 ssId = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.NoSavedDetail noSavedDetail = 3;
  if (has_nosaveddetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->nosaveddetail(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DevelopOfficerResponse)
}

int DevelopOfficerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 ssId = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.NoSavedDetail noSavedDetail = 3;
    if (has_nosaveddetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nosaveddetail());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevelopOfficerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DevelopOfficerResponse*>(&from));
}

void DevelopOfficerResponse::MergeFrom(const DevelopOfficerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_nosaveddetail()) {
      mutable_nosaveddetail()->::main::NoSavedDetail::MergeFrom(from.nosaveddetail());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DevelopOfficerResponse::CopyFrom(const DevelopOfficerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevelopOfficerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_nosaveddetail()) {
    if (!this->nosaveddetail().IsInitialized()) return false;
  }
  return true;
}

void DevelopOfficerResponse::Swap(DevelopOfficerResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(nosaveddetail_, other->nosaveddetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DevelopOfficerResponse::GetTypeName() const {
  return "main.DevelopOfficerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SaveOfficerRequest::kSsIdFieldNumber;
#endif  // !_MSC_VER

SaveOfficerRequest::SaveOfficerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SaveOfficerRequest)
}

void SaveOfficerRequest::InitAsDefaultInstance() {
}

SaveOfficerRequest::SaveOfficerRequest(const SaveOfficerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SaveOfficerRequest)
}

void SaveOfficerRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveOfficerRequest::~SaveOfficerRequest() {
  // @@protoc_insertion_point(destructor:main.SaveOfficerRequest)
  SharedDtor();
}

void SaveOfficerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SaveOfficerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SaveOfficerRequest& SaveOfficerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

SaveOfficerRequest* SaveOfficerRequest::default_instance_ = NULL;

SaveOfficerRequest* SaveOfficerRequest::New() const {
  return new SaveOfficerRequest;
}

void SaveOfficerRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SaveOfficerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SaveOfficerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SaveOfficerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SaveOfficerRequest)
  return false;
#undef DO_
}

void SaveOfficerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SaveOfficerRequest)
  // required int32 ssId = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SaveOfficerRequest)
}

int SaveOfficerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssId = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveOfficerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SaveOfficerRequest*>(&from));
}

void SaveOfficerRequest::MergeFrom(const SaveOfficerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SaveOfficerRequest::CopyFrom(const SaveOfficerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOfficerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SaveOfficerRequest::Swap(SaveOfficerRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SaveOfficerRequest::GetTypeName() const {
  return "main.SaveOfficerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SaveOfficerResponse::kStateFieldNumber;
const int SaveOfficerResponse::kSsIdFieldNumber;
const int SaveOfficerResponse::kOfficerDetailFieldNumber;
const int SaveOfficerResponse::kPointDetailFieldNumber;
#endif  // !_MSC_VER

SaveOfficerResponse::SaveOfficerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SaveOfficerResponse)
}

void SaveOfficerResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officerdetail_ = const_cast< ::main::DevOfficerDetail*>(
      ::main::DevOfficerDetail::internal_default_instance());
#else
  officerdetail_ = const_cast< ::main::DevOfficerDetail*>(&::main::DevOfficerDetail::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pointdetail_ = const_cast< ::main::DevPointDetail*>(
      ::main::DevPointDetail::internal_default_instance());
#else
  pointdetail_ = const_cast< ::main::DevPointDetail*>(&::main::DevPointDetail::default_instance());
#endif
}

SaveOfficerResponse::SaveOfficerResponse(const SaveOfficerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SaveOfficerResponse)
}

void SaveOfficerResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  officerdetail_ = NULL;
  pointdetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveOfficerResponse::~SaveOfficerResponse() {
  // @@protoc_insertion_point(destructor:main.SaveOfficerResponse)
  SharedDtor();
}

void SaveOfficerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete officerdetail_;
    delete pointdetail_;
  }
}

void SaveOfficerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SaveOfficerResponse& SaveOfficerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

SaveOfficerResponse* SaveOfficerResponse::default_instance_ = NULL;

SaveOfficerResponse* SaveOfficerResponse::New() const {
  return new SaveOfficerResponse;
}

void SaveOfficerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SaveOfficerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, ssid_);
    if (has_officerdetail()) {
      if (officerdetail_ != NULL) officerdetail_->::main::DevOfficerDetail::Clear();
    }
    if (has_pointdetail()) {
      if (pointdetail_ != NULL) pointdetail_->::main::DevPointDetail::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SaveOfficerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SaveOfficerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssId;
        break;
      }

      // required int32 ssId = 2;
      case 2: {
        if (tag == 16) {
         parse_ssId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_officerDetail;
        break;
      }

      // optional .main.DevOfficerDetail officerDetail = 3;
      case 3: {
        if (tag == 26) {
         parse_officerDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officerdetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pointDetail;
        break;
      }

      // optional .main.DevPointDetail pointDetail = 4;
      case 4: {
        if (tag == 34) {
         parse_pointDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointdetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SaveOfficerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SaveOfficerResponse)
  return false;
#undef DO_
}

void SaveOfficerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SaveOfficerResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 ssId = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.DevOfficerDetail officerDetail = 3;
  if (has_officerdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->officerdetail(), output);
  }

  // optional .main.DevPointDetail pointDetail = 4;
  if (has_pointdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->pointdetail(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SaveOfficerResponse)
}

int SaveOfficerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 ssId = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.DevOfficerDetail officerDetail = 3;
    if (has_officerdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officerdetail());
    }

    // optional .main.DevPointDetail pointDetail = 4;
    if (has_pointdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointdetail());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveOfficerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SaveOfficerResponse*>(&from));
}

void SaveOfficerResponse::MergeFrom(const SaveOfficerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_officerdetail()) {
      mutable_officerdetail()->::main::DevOfficerDetail::MergeFrom(from.officerdetail());
    }
    if (from.has_pointdetail()) {
      mutable_pointdetail()->::main::DevPointDetail::MergeFrom(from.pointdetail());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SaveOfficerResponse::CopyFrom(const SaveOfficerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOfficerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pointdetail()) {
    if (!this->pointdetail().IsInitialized()) return false;
  }
  return true;
}

void SaveOfficerResponse::Swap(SaveOfficerResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(officerdetail_, other->officerdetail_);
    std::swap(pointdetail_, other->pointdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SaveOfficerResponse::GetTypeName() const {
  return "main.SaveOfficerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GiveUpOfficerRequest::kSsIdFieldNumber;
#endif  // !_MSC_VER

GiveUpOfficerRequest::GiveUpOfficerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GiveUpOfficerRequest)
}

void GiveUpOfficerRequest::InitAsDefaultInstance() {
}

GiveUpOfficerRequest::GiveUpOfficerRequest(const GiveUpOfficerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GiveUpOfficerRequest)
}

void GiveUpOfficerRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveUpOfficerRequest::~GiveUpOfficerRequest() {
  // @@protoc_insertion_point(destructor:main.GiveUpOfficerRequest)
  SharedDtor();
}

void GiveUpOfficerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiveUpOfficerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiveUpOfficerRequest& GiveUpOfficerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

GiveUpOfficerRequest* GiveUpOfficerRequest::default_instance_ = NULL;

GiveUpOfficerRequest* GiveUpOfficerRequest::New() const {
  return new GiveUpOfficerRequest;
}

void GiveUpOfficerRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GiveUpOfficerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GiveUpOfficerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GiveUpOfficerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GiveUpOfficerRequest)
  return false;
#undef DO_
}

void GiveUpOfficerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GiveUpOfficerRequest)
  // required int32 ssId = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GiveUpOfficerRequest)
}

int GiveUpOfficerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssId = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveUpOfficerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiveUpOfficerRequest*>(&from));
}

void GiveUpOfficerRequest::MergeFrom(const GiveUpOfficerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GiveUpOfficerRequest::CopyFrom(const GiveUpOfficerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveUpOfficerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GiveUpOfficerRequest::Swap(GiveUpOfficerRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiveUpOfficerRequest::GetTypeName() const {
  return "main.GiveUpOfficerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UseDevelopItemRequest::kSsIdFieldNumber;
const int UseDevelopItemRequest::kItemNumFieldNumber;
#endif  // !_MSC_VER

UseDevelopItemRequest::UseDevelopItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UseDevelopItemRequest)
}

void UseDevelopItemRequest::InitAsDefaultInstance() {
}

UseDevelopItemRequest::UseDevelopItemRequest(const UseDevelopItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UseDevelopItemRequest)
}

void UseDevelopItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseDevelopItemRequest::~UseDevelopItemRequest() {
  // @@protoc_insertion_point(destructor:main.UseDevelopItemRequest)
  SharedDtor();
}

void UseDevelopItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UseDevelopItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UseDevelopItemRequest& UseDevelopItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

UseDevelopItemRequest* UseDevelopItemRequest::default_instance_ = NULL;

UseDevelopItemRequest* UseDevelopItemRequest::New() const {
  return new UseDevelopItemRequest;
}

void UseDevelopItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseDevelopItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, itemnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UseDevelopItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UseDevelopItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // required int32 itemNum = 2;
      case 2: {
        if (tag == 16) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UseDevelopItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UseDevelopItemRequest)
  return false;
#undef DO_
}

void UseDevelopItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UseDevelopItemRequest)
  // required int32 ssId = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // required int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UseDevelopItemRequest)
}

int UseDevelopItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssId = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // required int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseDevelopItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UseDevelopItemRequest*>(&from));
}

void UseDevelopItemRequest::MergeFrom(const UseDevelopItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UseDevelopItemRequest::CopyFrom(const UseDevelopItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseDevelopItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UseDevelopItemRequest::Swap(UseDevelopItemRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UseDevelopItemRequest::GetTypeName() const {
  return "main.UseDevelopItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UseDevelopItemResponse::kStateFieldNumber;
const int UseDevelopItemResponse::kSsIdFieldNumber;
const int UseDevelopItemResponse::kPointDetailFieldNumber;
const int UseDevelopItemResponse::kOfficerDetailFieldNumber;
#endif  // !_MSC_VER

UseDevelopItemResponse::UseDevelopItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UseDevelopItemResponse)
}

void UseDevelopItemResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pointdetail_ = const_cast< ::main::DevPointDetail*>(
      ::main::DevPointDetail::internal_default_instance());
#else
  pointdetail_ = const_cast< ::main::DevPointDetail*>(&::main::DevPointDetail::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officerdetail_ = const_cast< ::main::DevOfficerDetail*>(
      ::main::DevOfficerDetail::internal_default_instance());
#else
  officerdetail_ = const_cast< ::main::DevOfficerDetail*>(&::main::DevOfficerDetail::default_instance());
#endif
}

UseDevelopItemResponse::UseDevelopItemResponse(const UseDevelopItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UseDevelopItemResponse)
}

void UseDevelopItemResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  pointdetail_ = NULL;
  officerdetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseDevelopItemResponse::~UseDevelopItemResponse() {
  // @@protoc_insertion_point(destructor:main.UseDevelopItemResponse)
  SharedDtor();
}

void UseDevelopItemResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pointdetail_;
    delete officerdetail_;
  }
}

void UseDevelopItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UseDevelopItemResponse& UseDevelopItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Developing_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Developing_2eproto();
#endif
  return *default_instance_;
}

UseDevelopItemResponse* UseDevelopItemResponse::default_instance_ = NULL;

UseDevelopItemResponse* UseDevelopItemResponse::New() const {
  return new UseDevelopItemResponse;
}

void UseDevelopItemResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseDevelopItemResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, ssid_);
    if (has_pointdetail()) {
      if (pointdetail_ != NULL) pointdetail_->::main::DevPointDetail::Clear();
    }
    if (has_officerdetail()) {
      if (officerdetail_ != NULL) officerdetail_->::main::DevOfficerDetail::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UseDevelopItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UseDevelopItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssId;
        break;
      }

      // required int32 ssId = 2;
      case 2: {
        if (tag == 16) {
         parse_ssId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pointDetail;
        break;
      }

      // optional .main.DevPointDetail pointDetail = 3;
      case 3: {
        if (tag == 26) {
         parse_pointDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointdetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_officerDetail;
        break;
      }

      // optional .main.DevOfficerDetail officerDetail = 4;
      case 4: {
        if (tag == 34) {
         parse_officerDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officerdetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UseDevelopItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UseDevelopItemResponse)
  return false;
#undef DO_
}

void UseDevelopItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UseDevelopItemResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 ssId = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.DevPointDetail pointDetail = 3;
  if (has_pointdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pointdetail(), output);
  }

  // optional .main.DevOfficerDetail officerDetail = 4;
  if (has_officerdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->officerdetail(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UseDevelopItemResponse)
}

int UseDevelopItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 ssId = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.DevPointDetail pointDetail = 3;
    if (has_pointdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointdetail());
    }

    // optional .main.DevOfficerDetail officerDetail = 4;
    if (has_officerdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officerdetail());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseDevelopItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UseDevelopItemResponse*>(&from));
}

void UseDevelopItemResponse::MergeFrom(const UseDevelopItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_pointdetail()) {
      mutable_pointdetail()->::main::DevPointDetail::MergeFrom(from.pointdetail());
    }
    if (from.has_officerdetail()) {
      mutable_officerdetail()->::main::DevOfficerDetail::MergeFrom(from.officerdetail());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UseDevelopItemResponse::CopyFrom(const UseDevelopItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseDevelopItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pointdetail()) {
    if (!this->pointdetail().IsInitialized()) return false;
  }
  return true;
}

void UseDevelopItemResponse::Swap(UseDevelopItemResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(pointdetail_, other->pointdetail_);
    std::swap(officerdetail_, other->officerdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UseDevelopItemResponse::GetTypeName() const {
  return "main.UseDevelopItemResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
