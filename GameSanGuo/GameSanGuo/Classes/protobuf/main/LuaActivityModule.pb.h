// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LuaActivityModule.proto

#ifndef PROTOBUF_LuaActivityModule_2eproto__INCLUDED
#define PROTOBUF_LuaActivityModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LuaActivityModule_2eproto();
void protobuf_AssignDesc_LuaActivityModule_2eproto();
void protobuf_ShutdownFile_LuaActivityModule_2eproto();

class LuaActivityDetailRequest;
class LuaActivityDetailResponse;
class ActivityBrief;
class ActivityDetailRequest;
class ActivityDetailResponse;
class ElementColor;
class LabelInfo;
class LabelStringInfo;
class BtnInfo;
class ImageInfo;
class ItemInfo;
class ActivityGetRewardRequest;
class ActivityGetRewardResponse;
class ActivityOpretionRequest;
class ActivityOpretionResponse;
class ActivityOpretion;

enum ElementType {
  ET_NUMERIC_LABEL = 0,
  ET_TEXT_LABEL = 1,
  ET_IMAGE = 2,
  ET_BUTTON = 3,
  ET_ITEM = 4
};
bool ElementType_IsValid(int value);
const ElementType ElementType_MIN = ET_NUMERIC_LABEL;
const ElementType ElementType_MAX = ET_ITEM;
const int ElementType_ARRAYSIZE = ElementType_MAX + 1;

enum LuaStateType {
  LST_NO = 0,
  LST_START = 1,
  LST_END = 2
};
bool LuaStateType_IsValid(int value);
const LuaStateType LuaStateType_MIN = LST_NO;
const LuaStateType LuaStateType_MAX = LST_END;
const int LuaStateType_ARRAYSIZE = LuaStateType_MAX + 1;

// ===================================================================

class LuaActivityDetailRequest : public ::google::protobuf::MessageLite {
 public:
  LuaActivityDetailRequest();
  virtual ~LuaActivityDetailRequest();

  LuaActivityDetailRequest(const LuaActivityDetailRequest& from);

  inline LuaActivityDetailRequest& operator=(const LuaActivityDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LuaActivityDetailRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LuaActivityDetailRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LuaActivityDetailRequest* other);

  // implements Message ----------------------------------------------

  LuaActivityDetailRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LuaActivityDetailRequest& from);
  void MergeFrom(const LuaActivityDetailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.LuaActivityDetailRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static LuaActivityDetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class LuaActivityDetailResponse : public ::google::protobuf::MessageLite {
 public:
  LuaActivityDetailResponse();
  virtual ~LuaActivityDetailResponse();

  LuaActivityDetailResponse(const LuaActivityDetailResponse& from);

  inline LuaActivityDetailResponse& operator=(const LuaActivityDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LuaActivityDetailResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LuaActivityDetailResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LuaActivityDetailResponse* other);

  // implements Message ----------------------------------------------

  LuaActivityDetailResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LuaActivityDetailResponse& from);
  void MergeFrom(const LuaActivityDetailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.ActivityBrief activityBrief = 1;
  inline int activitybrief_size() const;
  inline void clear_activitybrief();
  static const int kActivityBriefFieldNumber = 1;
  inline const ::main::ActivityBrief& activitybrief(int index) const;
  inline ::main::ActivityBrief* mutable_activitybrief(int index);
  inline ::main::ActivityBrief* add_activitybrief();
  inline const ::google::protobuf::RepeatedPtrField< ::main::ActivityBrief >&
      activitybrief() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::ActivityBrief >*
      mutable_activitybrief();

  // required .main.ActivityDetailResponse activityDetail = 2;
  inline bool has_activitydetail() const;
  inline void clear_activitydetail();
  static const int kActivityDetailFieldNumber = 2;
  inline const ::main::ActivityDetailResponse& activitydetail() const;
  inline ::main::ActivityDetailResponse* mutable_activitydetail();
  inline ::main::ActivityDetailResponse* release_activitydetail();
  inline void set_allocated_activitydetail(::main::ActivityDetailResponse* activitydetail);

  // @@protoc_insertion_point(class_scope:main.LuaActivityDetailResponse)
 private:
  inline void set_has_activitydetail();
  inline void clear_has_activitydetail();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::main::ActivityBrief > activitybrief_;
  ::main::ActivityDetailResponse* activitydetail_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static LuaActivityDetailResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActivityBrief : public ::google::protobuf::MessageLite {
 public:
  ActivityBrief();
  virtual ~ActivityBrief();

  ActivityBrief(const ActivityBrief& from);

  inline ActivityBrief& operator=(const ActivityBrief& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityBrief& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityBrief* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityBrief* other);

  // implements Message ----------------------------------------------

  ActivityBrief* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityBrief& from);
  void MergeFrom(const ActivityBrief& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 luaId = 1;
  inline bool has_luaid() const;
  inline void clear_luaid();
  static const int kLuaIdFieldNumber = 1;
  inline ::google::protobuf::int32 luaid() const;
  inline void set_luaid(::google::protobuf::int32 value);

  // required int32 luaState = 2;
  inline bool has_luastate() const;
  inline void clear_luastate();
  static const int kLuaStateFieldNumber = 2;
  inline ::google::protobuf::int32 luastate() const;
  inline void set_luastate(::google::protobuf::int32 value);

  // required string luaName = 3;
  inline bool has_luaname() const;
  inline void clear_luaname();
  static const int kLuaNameFieldNumber = 3;
  inline const ::std::string& luaname() const;
  inline void set_luaname(const ::std::string& value);
  inline void set_luaname(const char* value);
  inline void set_luaname(const char* value, size_t size);
  inline ::std::string* mutable_luaname();
  inline ::std::string* release_luaname();
  inline void set_allocated_luaname(::std::string* luaname);

  // required string btnName = 4;
  inline bool has_btnname() const;
  inline void clear_btnname();
  static const int kBtnNameFieldNumber = 4;
  inline const ::std::string& btnname() const;
  inline void set_btnname(const ::std::string& value);
  inline void set_btnname(const char* value);
  inline void set_btnname(const char* value, size_t size);
  inline ::std::string* mutable_btnname();
  inline ::std::string* release_btnname();
  inline void set_allocated_btnname(::std::string* btnname);

  // required bool notice = 5;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 5;
  inline bool notice() const;
  inline void set_notice(bool value);

  // @@protoc_insertion_point(class_scope:main.ActivityBrief)
 private:
  inline void set_has_luaid();
  inline void clear_has_luaid();
  inline void set_has_luastate();
  inline void clear_has_luastate();
  inline void set_has_luaname();
  inline void clear_has_luaname();
  inline void set_has_btnname();
  inline void clear_has_btnname();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 luaid_;
  ::google::protobuf::int32 luastate_;
  ::std::string* luaname_;
  ::std::string* btnname_;
  bool notice_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityBrief* default_instance_;
};
// -------------------------------------------------------------------

class ActivityDetailRequest : public ::google::protobuf::MessageLite {
 public:
  ActivityDetailRequest();
  virtual ~ActivityDetailRequest();

  ActivityDetailRequest(const ActivityDetailRequest& from);

  inline ActivityDetailRequest& operator=(const ActivityDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityDetailRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityDetailRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityDetailRequest* other);

  // implements Message ----------------------------------------------

  ActivityDetailRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityDetailRequest& from);
  void MergeFrom(const ActivityDetailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 luaId = 1;
  inline bool has_luaid() const;
  inline void clear_luaid();
  static const int kLuaIdFieldNumber = 1;
  inline ::google::protobuf::int32 luaid() const;
  inline void set_luaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.ActivityDetailRequest)
 private:
  inline void set_has_luaid();
  inline void clear_has_luaid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 luaid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityDetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActivityDetailResponse : public ::google::protobuf::MessageLite {
 public:
  ActivityDetailResponse();
  virtual ~ActivityDetailResponse();

  ActivityDetailResponse(const ActivityDetailResponse& from);

  inline ActivityDetailResponse& operator=(const ActivityDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityDetailResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityDetailResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityDetailResponse* other);

  // implements Message ----------------------------------------------

  ActivityDetailResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityDetailResponse& from);
  void MergeFrom(const ActivityDetailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .main.ActivityBrief activityBrief = 1;
  inline bool has_activitybrief() const;
  inline void clear_activitybrief();
  static const int kActivityBriefFieldNumber = 1;
  inline const ::main::ActivityBrief& activitybrief() const;
  inline ::main::ActivityBrief* mutable_activitybrief();
  inline ::main::ActivityBrief* release_activitybrief();
  inline void set_allocated_activitybrief(::main::ActivityBrief* activitybrief);

  // repeated .main.LabelInfo labelInfo = 2;
  inline int labelinfo_size() const;
  inline void clear_labelinfo();
  static const int kLabelInfoFieldNumber = 2;
  inline const ::main::LabelInfo& labelinfo(int index) const;
  inline ::main::LabelInfo* mutable_labelinfo(int index);
  inline ::main::LabelInfo* add_labelinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::main::LabelInfo >&
      labelinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::LabelInfo >*
      mutable_labelinfo();

  // repeated .main.LabelStringInfo labelStringInfo = 3;
  inline int labelstringinfo_size() const;
  inline void clear_labelstringinfo();
  static const int kLabelStringInfoFieldNumber = 3;
  inline const ::main::LabelStringInfo& labelstringinfo(int index) const;
  inline ::main::LabelStringInfo* mutable_labelstringinfo(int index);
  inline ::main::LabelStringInfo* add_labelstringinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::main::LabelStringInfo >&
      labelstringinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::LabelStringInfo >*
      mutable_labelstringinfo();

  // repeated .main.BtnInfo btnInfo = 4;
  inline int btninfo_size() const;
  inline void clear_btninfo();
  static const int kBtnInfoFieldNumber = 4;
  inline const ::main::BtnInfo& btninfo(int index) const;
  inline ::main::BtnInfo* mutable_btninfo(int index);
  inline ::main::BtnInfo* add_btninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::main::BtnInfo >&
      btninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::BtnInfo >*
      mutable_btninfo();

  // repeated .main.ItemInfo itemInfo = 5;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 5;
  inline const ::main::ItemInfo& iteminfo(int index) const;
  inline ::main::ItemInfo* mutable_iteminfo(int index);
  inline ::main::ItemInfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::main::ItemInfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::ItemInfo >*
      mutable_iteminfo();

  // repeated .main.ImageInfo imageInfo = 6;
  inline int imageinfo_size() const;
  inline void clear_imageinfo();
  static const int kImageInfoFieldNumber = 6;
  inline const ::main::ImageInfo& imageinfo(int index) const;
  inline ::main::ImageInfo* mutable_imageinfo(int index);
  inline ::main::ImageInfo* add_imageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::main::ImageInfo >&
      imageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::ImageInfo >*
      mutable_imageinfo();

  // @@protoc_insertion_point(class_scope:main.ActivityDetailResponse)
 private:
  inline void set_has_activitybrief();
  inline void clear_has_activitybrief();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::main::ActivityBrief* activitybrief_;
  ::google::protobuf::RepeatedPtrField< ::main::LabelInfo > labelinfo_;
  ::google::protobuf::RepeatedPtrField< ::main::LabelStringInfo > labelstringinfo_;
  ::google::protobuf::RepeatedPtrField< ::main::BtnInfo > btninfo_;
  ::google::protobuf::RepeatedPtrField< ::main::ItemInfo > iteminfo_;
  ::google::protobuf::RepeatedPtrField< ::main::ImageInfo > imageinfo_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityDetailResponse* default_instance_;
};
// -------------------------------------------------------------------

class ElementColor : public ::google::protobuf::MessageLite {
 public:
  ElementColor();
  virtual ~ElementColor();

  ElementColor(const ElementColor& from);

  inline ElementColor& operator=(const ElementColor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ElementColor& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ElementColor* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ElementColor* other);

  // implements Message ----------------------------------------------

  ElementColor* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ElementColor& from);
  void MergeFrom(const ElementColor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 red = 1;
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline ::google::protobuf::int32 red() const;
  inline void set_red(::google::protobuf::int32 value);

  // optional int32 green = 2;
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 2;
  inline ::google::protobuf::int32 green() const;
  inline void set_green(::google::protobuf::int32 value);

  // optional int32 blue = 3;
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 3;
  inline ::google::protobuf::int32 blue() const;
  inline void set_blue(::google::protobuf::int32 value);

  // optional int32 alpha = 4 [default = 255];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 4;
  inline ::google::protobuf::int32 alpha() const;
  inline void set_alpha(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.ElementColor)
 private:
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 red_;
  ::google::protobuf::int32 green_;
  ::google::protobuf::int32 blue_;
  ::google::protobuf::int32 alpha_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ElementColor* default_instance_;
};
// -------------------------------------------------------------------

class LabelInfo : public ::google::protobuf::MessageLite {
 public:
  LabelInfo();
  virtual ~LabelInfo();

  LabelInfo(const LabelInfo& from);

  inline LabelInfo& operator=(const LabelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LabelInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LabelInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LabelInfo* other);

  // implements Message ----------------------------------------------

  LabelInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LabelInfo& from);
  void MergeFrom(const LabelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 labelId = 1;
  inline bool has_labelid() const;
  inline void clear_labelid();
  static const int kLabelIdFieldNumber = 1;
  inline ::google::protobuf::int32 labelid() const;
  inline void set_labelid(::google::protobuf::int32 value);

  // optional int32 labelValue = 2;
  inline bool has_labelvalue() const;
  inline void clear_labelvalue();
  static const int kLabelValueFieldNumber = 2;
  inline ::google::protobuf::int32 labelvalue() const;
  inline void set_labelvalue(::google::protobuf::int32 value);

  // optional .main.ElementColor fontColor = 3;
  inline bool has_fontcolor() const;
  inline void clear_fontcolor();
  static const int kFontColorFieldNumber = 3;
  inline const ::main::ElementColor& fontcolor() const;
  inline ::main::ElementColor* mutable_fontcolor();
  inline ::main::ElementColor* release_fontcolor();
  inline void set_allocated_fontcolor(::main::ElementColor* fontcolor);

  // @@protoc_insertion_point(class_scope:main.LabelInfo)
 private:
  inline void set_has_labelid();
  inline void clear_has_labelid();
  inline void set_has_labelvalue();
  inline void clear_has_labelvalue();
  inline void set_has_fontcolor();
  inline void clear_has_fontcolor();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 labelid_;
  ::google::protobuf::int32 labelvalue_;
  ::main::ElementColor* fontcolor_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static LabelInfo* default_instance_;
};
// -------------------------------------------------------------------

class LabelStringInfo : public ::google::protobuf::MessageLite {
 public:
  LabelStringInfo();
  virtual ~LabelStringInfo();

  LabelStringInfo(const LabelStringInfo& from);

  inline LabelStringInfo& operator=(const LabelStringInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LabelStringInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LabelStringInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LabelStringInfo* other);

  // implements Message ----------------------------------------------

  LabelStringInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LabelStringInfo& from);
  void MergeFrom(const LabelStringInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 labelId = 1;
  inline bool has_labelid() const;
  inline void clear_labelid();
  static const int kLabelIdFieldNumber = 1;
  inline ::google::protobuf::int32 labelid() const;
  inline void set_labelid(::google::protobuf::int32 value);

  // optional string labelValue = 2;
  inline bool has_labelvalue() const;
  inline void clear_labelvalue();
  static const int kLabelValueFieldNumber = 2;
  inline const ::std::string& labelvalue() const;
  inline void set_labelvalue(const ::std::string& value);
  inline void set_labelvalue(const char* value);
  inline void set_labelvalue(const char* value, size_t size);
  inline ::std::string* mutable_labelvalue();
  inline ::std::string* release_labelvalue();
  inline void set_allocated_labelvalue(::std::string* labelvalue);

  // optional .main.ElementColor fontColor = 3;
  inline bool has_fontcolor() const;
  inline void clear_fontcolor();
  static const int kFontColorFieldNumber = 3;
  inline const ::main::ElementColor& fontcolor() const;
  inline ::main::ElementColor* mutable_fontcolor();
  inline ::main::ElementColor* release_fontcolor();
  inline void set_allocated_fontcolor(::main::ElementColor* fontcolor);

  // @@protoc_insertion_point(class_scope:main.LabelStringInfo)
 private:
  inline void set_has_labelid();
  inline void clear_has_labelid();
  inline void set_has_labelvalue();
  inline void clear_has_labelvalue();
  inline void set_has_fontcolor();
  inline void clear_has_fontcolor();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* labelvalue_;
  ::main::ElementColor* fontcolor_;
  ::google::protobuf::int32 labelid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static LabelStringInfo* default_instance_;
};
// -------------------------------------------------------------------

class BtnInfo : public ::google::protobuf::MessageLite {
 public:
  BtnInfo();
  virtual ~BtnInfo();

  BtnInfo(const BtnInfo& from);

  inline BtnInfo& operator=(const BtnInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BtnInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BtnInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BtnInfo* other);

  // implements Message ----------------------------------------------

  BtnInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BtnInfo& from);
  void MergeFrom(const BtnInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 btnId = 1;
  inline bool has_btnid() const;
  inline void clear_btnid();
  static const int kBtnIdFieldNumber = 1;
  inline ::google::protobuf::int32 btnid() const;
  inline void set_btnid(::google::protobuf::int32 value);

  // optional string fontStr = 2;
  inline bool has_fontstr() const;
  inline void clear_fontstr();
  static const int kFontStrFieldNumber = 2;
  inline const ::std::string& fontstr() const;
  inline void set_fontstr(const ::std::string& value);
  inline void set_fontstr(const char* value);
  inline void set_fontstr(const char* value, size_t size);
  inline ::std::string* mutable_fontstr();
  inline ::std::string* release_fontstr();
  inline void set_allocated_fontstr(::std::string* fontstr);

  // optional .main.ElementColor fontColor = 3;
  inline bool has_fontcolor() const;
  inline void clear_fontcolor();
  static const int kFontColorFieldNumber = 3;
  inline const ::main::ElementColor& fontcolor() const;
  inline ::main::ElementColor* mutable_fontcolor();
  inline ::main::ElementColor* release_fontcolor();
  inline void set_allocated_fontcolor(::main::ElementColor* fontcolor);

  // optional string bgStr = 4;
  inline bool has_bgstr() const;
  inline void clear_bgstr();
  static const int kBgStrFieldNumber = 4;
  inline const ::std::string& bgstr() const;
  inline void set_bgstr(const ::std::string& value);
  inline void set_bgstr(const char* value);
  inline void set_bgstr(const char* value, size_t size);
  inline ::std::string* mutable_bgstr();
  inline ::std::string* release_bgstr();
  inline void set_allocated_bgstr(::std::string* bgstr);

  // optional string fgStr = 5;
  inline bool has_fgstr() const;
  inline void clear_fgstr();
  static const int kFgStrFieldNumber = 5;
  inline const ::std::string& fgstr() const;
  inline void set_fgstr(const ::std::string& value);
  inline void set_fgstr(const char* value);
  inline void set_fgstr(const char* value, size_t size);
  inline ::std::string* mutable_fgstr();
  inline ::std::string* release_fgstr();
  inline void set_allocated_fgstr(::std::string* fgstr);

  // optional .main.ElementColor imageColor = 6;
  inline bool has_imagecolor() const;
  inline void clear_imagecolor();
  static const int kImageColorFieldNumber = 6;
  inline const ::main::ElementColor& imagecolor() const;
  inline ::main::ElementColor* mutable_imagecolor();
  inline ::main::ElementColor* release_imagecolor();
  inline void set_allocated_imagecolor(::main::ElementColor* imagecolor);

  // optional int32 btnState = 7;
  inline bool has_btnstate() const;
  inline void clear_btnstate();
  static const int kBtnStateFieldNumber = 7;
  inline ::google::protobuf::int32 btnstate() const;
  inline void set_btnstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.BtnInfo)
 private:
  inline void set_has_btnid();
  inline void clear_has_btnid();
  inline void set_has_fontstr();
  inline void clear_has_fontstr();
  inline void set_has_fontcolor();
  inline void clear_has_fontcolor();
  inline void set_has_bgstr();
  inline void clear_has_bgstr();
  inline void set_has_fgstr();
  inline void clear_has_fgstr();
  inline void set_has_imagecolor();
  inline void clear_has_imagecolor();
  inline void set_has_btnstate();
  inline void clear_has_btnstate();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fontstr_;
  ::main::ElementColor* fontcolor_;
  ::std::string* bgstr_;
  ::google::protobuf::int32 btnid_;
  ::google::protobuf::int32 btnstate_;
  ::std::string* fgstr_;
  ::main::ElementColor* imagecolor_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static BtnInfo* default_instance_;
};
// -------------------------------------------------------------------

class ImageInfo : public ::google::protobuf::MessageLite {
 public:
  ImageInfo();
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo& from);

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ImageInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ImageInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ImageInfo* other);

  // implements Message ----------------------------------------------

  ImageInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 imageId = 1;
  inline bool has_imageid() const;
  inline void clear_imageid();
  static const int kImageIdFieldNumber = 1;
  inline ::google::protobuf::int32 imageid() const;
  inline void set_imageid(::google::protobuf::int32 value);

  // optional string imagestr = 2;
  inline bool has_imagestr() const;
  inline void clear_imagestr();
  static const int kImagestrFieldNumber = 2;
  inline const ::std::string& imagestr() const;
  inline void set_imagestr(const ::std::string& value);
  inline void set_imagestr(const char* value);
  inline void set_imagestr(const char* value, size_t size);
  inline ::std::string* mutable_imagestr();
  inline ::std::string* release_imagestr();
  inline void set_allocated_imagestr(::std::string* imagestr);

  // optional .main.ElementColor imageColor = 3;
  inline bool has_imagecolor() const;
  inline void clear_imagecolor();
  static const int kImageColorFieldNumber = 3;
  inline const ::main::ElementColor& imagecolor() const;
  inline ::main::ElementColor* mutable_imagecolor();
  inline ::main::ElementColor* release_imagecolor();
  inline void set_allocated_imagecolor(::main::ElementColor* imagecolor);

  // @@protoc_insertion_point(class_scope:main.ImageInfo)
 private:
  inline void set_has_imageid();
  inline void clear_has_imageid();
  inline void set_has_imagestr();
  inline void clear_has_imagestr();
  inline void set_has_imagecolor();
  inline void clear_has_imagecolor();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* imagestr_;
  ::main::ElementColor* imagecolor_;
  ::google::protobuf::int32 imageid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ImageInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::MessageLite {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ItemInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ItemInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ItemInfo* other);

  // implements Message ----------------------------------------------

  ItemInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 itemType = 1;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 1;
  inline ::google::protobuf::int32 itemtype() const;
  inline void set_itemtype(::google::protobuf::int32 value);

  // optional sint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional sint32 itemCount = 3;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::int32 itemcount() const;
  inline void set_itemcount(::google::protobuf::int32 value);

  // optional sint32 itemLevel = 4;
  inline bool has_itemlevel() const;
  inline void clear_itemlevel();
  static const int kItemLevelFieldNumber = 4;
  inline ::google::protobuf::int32 itemlevel() const;
  inline void set_itemlevel(::google::protobuf::int32 value);

  // optional sint32 itemBtnId = 5;
  inline bool has_itembtnid() const;
  inline void clear_itembtnid();
  static const int kItemBtnIdFieldNumber = 5;
  inline ::google::protobuf::int32 itembtnid() const;
  inline void set_itembtnid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.ItemInfo)
 private:
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_itemlevel();
  inline void clear_has_itemlevel();
  inline void set_has_itembtnid();
  inline void clear_has_itembtnid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemtype_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemcount_;
  ::google::protobuf::int32 itemlevel_;
  ::google::protobuf::int32 itembtnid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class ActivityGetRewardRequest : public ::google::protobuf::MessageLite {
 public:
  ActivityGetRewardRequest();
  virtual ~ActivityGetRewardRequest();

  ActivityGetRewardRequest(const ActivityGetRewardRequest& from);

  inline ActivityGetRewardRequest& operator=(const ActivityGetRewardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityGetRewardRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityGetRewardRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityGetRewardRequest* other);

  // implements Message ----------------------------------------------

  ActivityGetRewardRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityGetRewardRequest& from);
  void MergeFrom(const ActivityGetRewardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 childTag = 1;
  inline bool has_childtag() const;
  inline void clear_childtag();
  static const int kChildTagFieldNumber = 1;
  inline ::google::protobuf::int32 childtag() const;
  inline void set_childtag(::google::protobuf::int32 value);

  // optional int32 btnId = 2;
  inline bool has_btnid() const;
  inline void clear_btnid();
  static const int kBtnIdFieldNumber = 2;
  inline ::google::protobuf::int32 btnid() const;
  inline void set_btnid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.ActivityGetRewardRequest)
 private:
  inline void set_has_childtag();
  inline void clear_has_childtag();
  inline void set_has_btnid();
  inline void clear_has_btnid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 childtag_;
  ::google::protobuf::int32 btnid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityGetRewardRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActivityGetRewardResponse : public ::google::protobuf::MessageLite {
 public:
  ActivityGetRewardResponse();
  virtual ~ActivityGetRewardResponse();

  ActivityGetRewardResponse(const ActivityGetRewardResponse& from);

  inline ActivityGetRewardResponse& operator=(const ActivityGetRewardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityGetRewardResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityGetRewardResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityGetRewardResponse* other);

  // implements Message ----------------------------------------------

  ActivityGetRewardResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityGetRewardResponse& from);
  void MergeFrom(const ActivityGetRewardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 childTag = 2;
  inline bool has_childtag() const;
  inline void clear_childtag();
  static const int kChildTagFieldNumber = 2;
  inline ::google::protobuf::int32 childtag() const;
  inline void set_childtag(::google::protobuf::int32 value);

  // optional int32 btnId = 3;
  inline bool has_btnid() const;
  inline void clear_btnid();
  static const int kBtnIdFieldNumber = 3;
  inline ::google::protobuf::int32 btnid() const;
  inline void set_btnid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.ActivityGetRewardResponse)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_childtag();
  inline void clear_has_childtag();
  inline void set_has_btnid();
  inline void clear_has_btnid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 childtag_;
  ::google::protobuf::int32 btnid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityGetRewardResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActivityOpretionRequest : public ::google::protobuf::MessageLite {
 public:
  ActivityOpretionRequest();
  virtual ~ActivityOpretionRequest();

  ActivityOpretionRequest(const ActivityOpretionRequest& from);

  inline ActivityOpretionRequest& operator=(const ActivityOpretionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityOpretionRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityOpretionRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityOpretionRequest* other);

  // implements Message ----------------------------------------------

  ActivityOpretionRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityOpretionRequest& from);
  void MergeFrom(const ActivityOpretionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 childTag = 1;
  inline bool has_childtag() const;
  inline void clear_childtag();
  static const int kChildTagFieldNumber = 1;
  inline ::google::protobuf::int32 childtag() const;
  inline void set_childtag(::google::protobuf::int32 value);

  // optional .main.ElementType objectType = 2;
  inline bool has_objecttype() const;
  inline void clear_objecttype();
  static const int kObjectTypeFieldNumber = 2;
  inline ::main::ElementType objecttype() const;
  inline void set_objecttype(::main::ElementType value);

  // optional int32 objectId = 3;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectIdFieldNumber = 3;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional int32 opreation = 4;
  inline bool has_opreation() const;
  inline void clear_opreation();
  static const int kOpreationFieldNumber = 4;
  inline ::google::protobuf::int32 opreation() const;
  inline void set_opreation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.ActivityOpretionRequest)
 private:
  inline void set_has_childtag();
  inline void clear_has_childtag();
  inline void set_has_objecttype();
  inline void clear_has_objecttype();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_opreation();
  inline void clear_has_opreation();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 childtag_;
  int objecttype_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 opreation_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityOpretionRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActivityOpretionResponse : public ::google::protobuf::MessageLite {
 public:
  ActivityOpretionResponse();
  virtual ~ActivityOpretionResponse();

  ActivityOpretionResponse(const ActivityOpretionResponse& from);

  inline ActivityOpretionResponse& operator=(const ActivityOpretionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityOpretionResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityOpretionResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityOpretionResponse* other);

  // implements Message ----------------------------------------------

  ActivityOpretionResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityOpretionResponse& from);
  void MergeFrom(const ActivityOpretionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.ActivityOpretion opreationList = 1;
  inline int opreationlist_size() const;
  inline void clear_opreationlist();
  static const int kOpreationListFieldNumber = 1;
  inline const ::main::ActivityOpretion& opreationlist(int index) const;
  inline ::main::ActivityOpretion* mutable_opreationlist(int index);
  inline ::main::ActivityOpretion* add_opreationlist();
  inline const ::google::protobuf::RepeatedPtrField< ::main::ActivityOpretion >&
      opreationlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::ActivityOpretion >*
      mutable_opreationlist();

  // @@protoc_insertion_point(class_scope:main.ActivityOpretionResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::main::ActivityOpretion > opreationlist_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityOpretionResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActivityOpretion : public ::google::protobuf::MessageLite {
 public:
  ActivityOpretion();
  virtual ~ActivityOpretion();

  ActivityOpretion(const ActivityOpretion& from);

  inline ActivityOpretion& operator=(const ActivityOpretion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ActivityOpretion& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ActivityOpretion* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ActivityOpretion* other);

  // implements Message ----------------------------------------------

  ActivityOpretion* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ActivityOpretion& from);
  void MergeFrom(const ActivityOpretion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 childTag = 1;
  inline bool has_childtag() const;
  inline void clear_childtag();
  static const int kChildTagFieldNumber = 1;
  inline ::google::protobuf::int32 childtag() const;
  inline void set_childtag(::google::protobuf::int32 value);

  // optional .main.ElementType objectType = 2;
  inline bool has_objecttype() const;
  inline void clear_objecttype();
  static const int kObjectTypeFieldNumber = 2;
  inline ::main::ElementType objecttype() const;
  inline void set_objecttype(::main::ElementType value);

  // optional int32 objectId = 3;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectIdFieldNumber = 3;
  inline ::google::protobuf::int32 objectid() const;
  inline void set_objectid(::google::protobuf::int32 value);

  // optional int32 opreation = 4;
  inline bool has_opreation() const;
  inline void clear_opreation();
  static const int kOpreationFieldNumber = 4;
  inline ::google::protobuf::int32 opreation() const;
  inline void set_opreation(::google::protobuf::int32 value);

  // optional string fontStr = 5;
  inline bool has_fontstr() const;
  inline void clear_fontstr();
  static const int kFontStrFieldNumber = 5;
  inline const ::std::string& fontstr() const;
  inline void set_fontstr(const ::std::string& value);
  inline void set_fontstr(const char* value);
  inline void set_fontstr(const char* value, size_t size);
  inline ::std::string* mutable_fontstr();
  inline ::std::string* release_fontstr();
  inline void set_allocated_fontstr(::std::string* fontstr);

  // optional .main.ElementColor fontColor = 6;
  inline bool has_fontcolor() const;
  inline void clear_fontcolor();
  static const int kFontColorFieldNumber = 6;
  inline const ::main::ElementColor& fontcolor() const;
  inline ::main::ElementColor* mutable_fontcolor();
  inline ::main::ElementColor* release_fontcolor();
  inline void set_allocated_fontcolor(::main::ElementColor* fontcolor);

  // optional string bgStr = 7;
  inline bool has_bgstr() const;
  inline void clear_bgstr();
  static const int kBgStrFieldNumber = 7;
  inline const ::std::string& bgstr() const;
  inline void set_bgstr(const ::std::string& value);
  inline void set_bgstr(const char* value);
  inline void set_bgstr(const char* value, size_t size);
  inline ::std::string* mutable_bgstr();
  inline ::std::string* release_bgstr();
  inline void set_allocated_bgstr(::std::string* bgstr);

  // optional string fgStr = 8;
  inline bool has_fgstr() const;
  inline void clear_fgstr();
  static const int kFgStrFieldNumber = 8;
  inline const ::std::string& fgstr() const;
  inline void set_fgstr(const ::std::string& value);
  inline void set_fgstr(const char* value);
  inline void set_fgstr(const char* value, size_t size);
  inline ::std::string* mutable_fgstr();
  inline ::std::string* release_fgstr();
  inline void set_allocated_fgstr(::std::string* fgstr);

  // optional .main.ElementColor imageColor = 9;
  inline bool has_imagecolor() const;
  inline void clear_imagecolor();
  static const int kImageColorFieldNumber = 9;
  inline const ::main::ElementColor& imagecolor() const;
  inline ::main::ElementColor* mutable_imagecolor();
  inline ::main::ElementColor* release_imagecolor();
  inline void set_allocated_imagecolor(::main::ElementColor* imagecolor);

  // optional .main.ItemInfo itemInfo = 10;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 10;
  inline const ::main::ItemInfo& iteminfo() const;
  inline ::main::ItemInfo* mutable_iteminfo();
  inline ::main::ItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::main::ItemInfo* iteminfo);

  // optional int32 state = 11;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 11;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.ActivityOpretion)
 private:
  inline void set_has_childtag();
  inline void clear_has_childtag();
  inline void set_has_objecttype();
  inline void clear_has_objecttype();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_opreation();
  inline void clear_has_opreation();
  inline void set_has_fontstr();
  inline void clear_has_fontstr();
  inline void set_has_fontcolor();
  inline void clear_has_fontcolor();
  inline void set_has_bgstr();
  inline void clear_has_bgstr();
  inline void set_has_fgstr();
  inline void clear_has_fgstr();
  inline void set_has_imagecolor();
  inline void clear_has_imagecolor();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();
  inline void set_has_state();
  inline void clear_has_state();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 childtag_;
  int objecttype_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 opreation_;
  ::std::string* fontstr_;
  ::main::ElementColor* fontcolor_;
  ::std::string* bgstr_;
  ::std::string* fgstr_;
  ::main::ElementColor* imagecolor_;
  ::main::ItemInfo* iteminfo_;
  ::google::protobuf::int32 state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaActivityModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaActivityModule_2eproto();
  friend void protobuf_ShutdownFile_LuaActivityModule_2eproto();

  void InitAsDefaultInstance();
  static ActivityOpretion* default_instance_;
};
// ===================================================================


// ===================================================================

// LuaActivityDetailRequest

// -------------------------------------------------------------------

// LuaActivityDetailResponse

// repeated .main.ActivityBrief activityBrief = 1;
inline int LuaActivityDetailResponse::activitybrief_size() const {
  return activitybrief_.size();
}
inline void LuaActivityDetailResponse::clear_activitybrief() {
  activitybrief_.Clear();
}
inline const ::main::ActivityBrief& LuaActivityDetailResponse::activitybrief(int index) const {
  // @@protoc_insertion_point(field_get:main.LuaActivityDetailResponse.activityBrief)
  return activitybrief_.Get(index);
}
inline ::main::ActivityBrief* LuaActivityDetailResponse::mutable_activitybrief(int index) {
  // @@protoc_insertion_point(field_mutable:main.LuaActivityDetailResponse.activityBrief)
  return activitybrief_.Mutable(index);
}
inline ::main::ActivityBrief* LuaActivityDetailResponse::add_activitybrief() {
  // @@protoc_insertion_point(field_add:main.LuaActivityDetailResponse.activityBrief)
  return activitybrief_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::ActivityBrief >&
LuaActivityDetailResponse::activitybrief() const {
  // @@protoc_insertion_point(field_list:main.LuaActivityDetailResponse.activityBrief)
  return activitybrief_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::ActivityBrief >*
LuaActivityDetailResponse::mutable_activitybrief() {
  // @@protoc_insertion_point(field_mutable_list:main.LuaActivityDetailResponse.activityBrief)
  return &activitybrief_;
}

// required .main.ActivityDetailResponse activityDetail = 2;
inline bool LuaActivityDetailResponse::has_activitydetail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuaActivityDetailResponse::set_has_activitydetail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuaActivityDetailResponse::clear_has_activitydetail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuaActivityDetailResponse::clear_activitydetail() {
  if (activitydetail_ != NULL) activitydetail_->::main::ActivityDetailResponse::Clear();
  clear_has_activitydetail();
}
inline const ::main::ActivityDetailResponse& LuaActivityDetailResponse::activitydetail() const {
  // @@protoc_insertion_point(field_get:main.LuaActivityDetailResponse.activityDetail)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitydetail_ != NULL ? *activitydetail_ : *default_instance().activitydetail_;
#else
  return activitydetail_ != NULL ? *activitydetail_ : *default_instance_->activitydetail_;
#endif
}
inline ::main::ActivityDetailResponse* LuaActivityDetailResponse::mutable_activitydetail() {
  set_has_activitydetail();
  if (activitydetail_ == NULL) activitydetail_ = new ::main::ActivityDetailResponse;
  // @@protoc_insertion_point(field_mutable:main.LuaActivityDetailResponse.activityDetail)
  return activitydetail_;
}
inline ::main::ActivityDetailResponse* LuaActivityDetailResponse::release_activitydetail() {
  clear_has_activitydetail();
  ::main::ActivityDetailResponse* temp = activitydetail_;
  activitydetail_ = NULL;
  return temp;
}
inline void LuaActivityDetailResponse::set_allocated_activitydetail(::main::ActivityDetailResponse* activitydetail) {
  delete activitydetail_;
  activitydetail_ = activitydetail;
  if (activitydetail) {
    set_has_activitydetail();
  } else {
    clear_has_activitydetail();
  }
  // @@protoc_insertion_point(field_set_allocated:main.LuaActivityDetailResponse.activityDetail)
}

// -------------------------------------------------------------------

// ActivityBrief

// required int32 luaId = 1;
inline bool ActivityBrief::has_luaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityBrief::set_has_luaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityBrief::clear_has_luaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityBrief::clear_luaid() {
  luaid_ = 0;
  clear_has_luaid();
}
inline ::google::protobuf::int32 ActivityBrief::luaid() const {
  // @@protoc_insertion_point(field_get:main.ActivityBrief.luaId)
  return luaid_;
}
inline void ActivityBrief::set_luaid(::google::protobuf::int32 value) {
  set_has_luaid();
  luaid_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityBrief.luaId)
}

// required int32 luaState = 2;
inline bool ActivityBrief::has_luastate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityBrief::set_has_luastate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityBrief::clear_has_luastate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityBrief::clear_luastate() {
  luastate_ = 0;
  clear_has_luastate();
}
inline ::google::protobuf::int32 ActivityBrief::luastate() const {
  // @@protoc_insertion_point(field_get:main.ActivityBrief.luaState)
  return luastate_;
}
inline void ActivityBrief::set_luastate(::google::protobuf::int32 value) {
  set_has_luastate();
  luastate_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityBrief.luaState)
}

// required string luaName = 3;
inline bool ActivityBrief::has_luaname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityBrief::set_has_luaname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityBrief::clear_has_luaname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityBrief::clear_luaname() {
  if (luaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    luaname_->clear();
  }
  clear_has_luaname();
}
inline const ::std::string& ActivityBrief::luaname() const {
  // @@protoc_insertion_point(field_get:main.ActivityBrief.luaName)
  return *luaname_;
}
inline void ActivityBrief::set_luaname(const ::std::string& value) {
  set_has_luaname();
  if (luaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    luaname_ = new ::std::string;
  }
  luaname_->assign(value);
  // @@protoc_insertion_point(field_set:main.ActivityBrief.luaName)
}
inline void ActivityBrief::set_luaname(const char* value) {
  set_has_luaname();
  if (luaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    luaname_ = new ::std::string;
  }
  luaname_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.ActivityBrief.luaName)
}
inline void ActivityBrief::set_luaname(const char* value, size_t size) {
  set_has_luaname();
  if (luaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    luaname_ = new ::std::string;
  }
  luaname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.ActivityBrief.luaName)
}
inline ::std::string* ActivityBrief::mutable_luaname() {
  set_has_luaname();
  if (luaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    luaname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.ActivityBrief.luaName)
  return luaname_;
}
inline ::std::string* ActivityBrief::release_luaname() {
  clear_has_luaname();
  if (luaname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = luaname_;
    luaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityBrief::set_allocated_luaname(::std::string* luaname) {
  if (luaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete luaname_;
  }
  if (luaname) {
    set_has_luaname();
    luaname_ = luaname;
  } else {
    clear_has_luaname();
    luaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityBrief.luaName)
}

// required string btnName = 4;
inline bool ActivityBrief::has_btnname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityBrief::set_has_btnname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityBrief::clear_has_btnname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityBrief::clear_btnname() {
  if (btnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnname_->clear();
  }
  clear_has_btnname();
}
inline const ::std::string& ActivityBrief::btnname() const {
  // @@protoc_insertion_point(field_get:main.ActivityBrief.btnName)
  return *btnname_;
}
inline void ActivityBrief::set_btnname(const ::std::string& value) {
  set_has_btnname();
  if (btnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnname_ = new ::std::string;
  }
  btnname_->assign(value);
  // @@protoc_insertion_point(field_set:main.ActivityBrief.btnName)
}
inline void ActivityBrief::set_btnname(const char* value) {
  set_has_btnname();
  if (btnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnname_ = new ::std::string;
  }
  btnname_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.ActivityBrief.btnName)
}
inline void ActivityBrief::set_btnname(const char* value, size_t size) {
  set_has_btnname();
  if (btnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnname_ = new ::std::string;
  }
  btnname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.ActivityBrief.btnName)
}
inline ::std::string* ActivityBrief::mutable_btnname() {
  set_has_btnname();
  if (btnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.ActivityBrief.btnName)
  return btnname_;
}
inline ::std::string* ActivityBrief::release_btnname() {
  clear_has_btnname();
  if (btnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = btnname_;
    btnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityBrief::set_allocated_btnname(::std::string* btnname) {
  if (btnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnname_;
  }
  if (btnname) {
    set_has_btnname();
    btnname_ = btnname;
  } else {
    clear_has_btnname();
    btnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityBrief.btnName)
}

// required bool notice = 5;
inline bool ActivityBrief::has_notice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityBrief::set_has_notice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivityBrief::clear_has_notice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivityBrief::clear_notice() {
  notice_ = false;
  clear_has_notice();
}
inline bool ActivityBrief::notice() const {
  // @@protoc_insertion_point(field_get:main.ActivityBrief.notice)
  return notice_;
}
inline void ActivityBrief::set_notice(bool value) {
  set_has_notice();
  notice_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityBrief.notice)
}

// -------------------------------------------------------------------

// ActivityDetailRequest

// required int32 luaId = 1;
inline bool ActivityDetailRequest::has_luaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityDetailRequest::set_has_luaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityDetailRequest::clear_has_luaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityDetailRequest::clear_luaid() {
  luaid_ = 0;
  clear_has_luaid();
}
inline ::google::protobuf::int32 ActivityDetailRequest::luaid() const {
  // @@protoc_insertion_point(field_get:main.ActivityDetailRequest.luaId)
  return luaid_;
}
inline void ActivityDetailRequest::set_luaid(::google::protobuf::int32 value) {
  set_has_luaid();
  luaid_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityDetailRequest.luaId)
}

// -------------------------------------------------------------------

// ActivityDetailResponse

// required .main.ActivityBrief activityBrief = 1;
inline bool ActivityDetailResponse::has_activitybrief() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityDetailResponse::set_has_activitybrief() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityDetailResponse::clear_has_activitybrief() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityDetailResponse::clear_activitybrief() {
  if (activitybrief_ != NULL) activitybrief_->::main::ActivityBrief::Clear();
  clear_has_activitybrief();
}
inline const ::main::ActivityBrief& ActivityDetailResponse::activitybrief() const {
  // @@protoc_insertion_point(field_get:main.ActivityDetailResponse.activityBrief)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return activitybrief_ != NULL ? *activitybrief_ : *default_instance().activitybrief_;
#else
  return activitybrief_ != NULL ? *activitybrief_ : *default_instance_->activitybrief_;
#endif
}
inline ::main::ActivityBrief* ActivityDetailResponse::mutable_activitybrief() {
  set_has_activitybrief();
  if (activitybrief_ == NULL) activitybrief_ = new ::main::ActivityBrief;
  // @@protoc_insertion_point(field_mutable:main.ActivityDetailResponse.activityBrief)
  return activitybrief_;
}
inline ::main::ActivityBrief* ActivityDetailResponse::release_activitybrief() {
  clear_has_activitybrief();
  ::main::ActivityBrief* temp = activitybrief_;
  activitybrief_ = NULL;
  return temp;
}
inline void ActivityDetailResponse::set_allocated_activitybrief(::main::ActivityBrief* activitybrief) {
  delete activitybrief_;
  activitybrief_ = activitybrief;
  if (activitybrief) {
    set_has_activitybrief();
  } else {
    clear_has_activitybrief();
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityDetailResponse.activityBrief)
}

// repeated .main.LabelInfo labelInfo = 2;
inline int ActivityDetailResponse::labelinfo_size() const {
  return labelinfo_.size();
}
inline void ActivityDetailResponse::clear_labelinfo() {
  labelinfo_.Clear();
}
inline const ::main::LabelInfo& ActivityDetailResponse::labelinfo(int index) const {
  // @@protoc_insertion_point(field_get:main.ActivityDetailResponse.labelInfo)
  return labelinfo_.Get(index);
}
inline ::main::LabelInfo* ActivityDetailResponse::mutable_labelinfo(int index) {
  // @@protoc_insertion_point(field_mutable:main.ActivityDetailResponse.labelInfo)
  return labelinfo_.Mutable(index);
}
inline ::main::LabelInfo* ActivityDetailResponse::add_labelinfo() {
  // @@protoc_insertion_point(field_add:main.ActivityDetailResponse.labelInfo)
  return labelinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::LabelInfo >&
ActivityDetailResponse::labelinfo() const {
  // @@protoc_insertion_point(field_list:main.ActivityDetailResponse.labelInfo)
  return labelinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::LabelInfo >*
ActivityDetailResponse::mutable_labelinfo() {
  // @@protoc_insertion_point(field_mutable_list:main.ActivityDetailResponse.labelInfo)
  return &labelinfo_;
}

// repeated .main.LabelStringInfo labelStringInfo = 3;
inline int ActivityDetailResponse::labelstringinfo_size() const {
  return labelstringinfo_.size();
}
inline void ActivityDetailResponse::clear_labelstringinfo() {
  labelstringinfo_.Clear();
}
inline const ::main::LabelStringInfo& ActivityDetailResponse::labelstringinfo(int index) const {
  // @@protoc_insertion_point(field_get:main.ActivityDetailResponse.labelStringInfo)
  return labelstringinfo_.Get(index);
}
inline ::main::LabelStringInfo* ActivityDetailResponse::mutable_labelstringinfo(int index) {
  // @@protoc_insertion_point(field_mutable:main.ActivityDetailResponse.labelStringInfo)
  return labelstringinfo_.Mutable(index);
}
inline ::main::LabelStringInfo* ActivityDetailResponse::add_labelstringinfo() {
  // @@protoc_insertion_point(field_add:main.ActivityDetailResponse.labelStringInfo)
  return labelstringinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::LabelStringInfo >&
ActivityDetailResponse::labelstringinfo() const {
  // @@protoc_insertion_point(field_list:main.ActivityDetailResponse.labelStringInfo)
  return labelstringinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::LabelStringInfo >*
ActivityDetailResponse::mutable_labelstringinfo() {
  // @@protoc_insertion_point(field_mutable_list:main.ActivityDetailResponse.labelStringInfo)
  return &labelstringinfo_;
}

// repeated .main.BtnInfo btnInfo = 4;
inline int ActivityDetailResponse::btninfo_size() const {
  return btninfo_.size();
}
inline void ActivityDetailResponse::clear_btninfo() {
  btninfo_.Clear();
}
inline const ::main::BtnInfo& ActivityDetailResponse::btninfo(int index) const {
  // @@protoc_insertion_point(field_get:main.ActivityDetailResponse.btnInfo)
  return btninfo_.Get(index);
}
inline ::main::BtnInfo* ActivityDetailResponse::mutable_btninfo(int index) {
  // @@protoc_insertion_point(field_mutable:main.ActivityDetailResponse.btnInfo)
  return btninfo_.Mutable(index);
}
inline ::main::BtnInfo* ActivityDetailResponse::add_btninfo() {
  // @@protoc_insertion_point(field_add:main.ActivityDetailResponse.btnInfo)
  return btninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::BtnInfo >&
ActivityDetailResponse::btninfo() const {
  // @@protoc_insertion_point(field_list:main.ActivityDetailResponse.btnInfo)
  return btninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::BtnInfo >*
ActivityDetailResponse::mutable_btninfo() {
  // @@protoc_insertion_point(field_mutable_list:main.ActivityDetailResponse.btnInfo)
  return &btninfo_;
}

// repeated .main.ItemInfo itemInfo = 5;
inline int ActivityDetailResponse::iteminfo_size() const {
  return iteminfo_.size();
}
inline void ActivityDetailResponse::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::main::ItemInfo& ActivityDetailResponse::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:main.ActivityDetailResponse.itemInfo)
  return iteminfo_.Get(index);
}
inline ::main::ItemInfo* ActivityDetailResponse::mutable_iteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:main.ActivityDetailResponse.itemInfo)
  return iteminfo_.Mutable(index);
}
inline ::main::ItemInfo* ActivityDetailResponse::add_iteminfo() {
  // @@protoc_insertion_point(field_add:main.ActivityDetailResponse.itemInfo)
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::ItemInfo >&
ActivityDetailResponse::iteminfo() const {
  // @@protoc_insertion_point(field_list:main.ActivityDetailResponse.itemInfo)
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::ItemInfo >*
ActivityDetailResponse::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:main.ActivityDetailResponse.itemInfo)
  return &iteminfo_;
}

// repeated .main.ImageInfo imageInfo = 6;
inline int ActivityDetailResponse::imageinfo_size() const {
  return imageinfo_.size();
}
inline void ActivityDetailResponse::clear_imageinfo() {
  imageinfo_.Clear();
}
inline const ::main::ImageInfo& ActivityDetailResponse::imageinfo(int index) const {
  // @@protoc_insertion_point(field_get:main.ActivityDetailResponse.imageInfo)
  return imageinfo_.Get(index);
}
inline ::main::ImageInfo* ActivityDetailResponse::mutable_imageinfo(int index) {
  // @@protoc_insertion_point(field_mutable:main.ActivityDetailResponse.imageInfo)
  return imageinfo_.Mutable(index);
}
inline ::main::ImageInfo* ActivityDetailResponse::add_imageinfo() {
  // @@protoc_insertion_point(field_add:main.ActivityDetailResponse.imageInfo)
  return imageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::ImageInfo >&
ActivityDetailResponse::imageinfo() const {
  // @@protoc_insertion_point(field_list:main.ActivityDetailResponse.imageInfo)
  return imageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::ImageInfo >*
ActivityDetailResponse::mutable_imageinfo() {
  // @@protoc_insertion_point(field_mutable_list:main.ActivityDetailResponse.imageInfo)
  return &imageinfo_;
}

// -------------------------------------------------------------------

// ElementColor

// optional int32 red = 1;
inline bool ElementColor::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElementColor::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElementColor::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElementColor::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline ::google::protobuf::int32 ElementColor::red() const {
  // @@protoc_insertion_point(field_get:main.ElementColor.red)
  return red_;
}
inline void ElementColor::set_red(::google::protobuf::int32 value) {
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:main.ElementColor.red)
}

// optional int32 green = 2;
inline bool ElementColor::has_green() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElementColor::set_has_green() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElementColor::clear_has_green() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElementColor::clear_green() {
  green_ = 0;
  clear_has_green();
}
inline ::google::protobuf::int32 ElementColor::green() const {
  // @@protoc_insertion_point(field_get:main.ElementColor.green)
  return green_;
}
inline void ElementColor::set_green(::google::protobuf::int32 value) {
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:main.ElementColor.green)
}

// optional int32 blue = 3;
inline bool ElementColor::has_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ElementColor::set_has_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ElementColor::clear_has_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ElementColor::clear_blue() {
  blue_ = 0;
  clear_has_blue();
}
inline ::google::protobuf::int32 ElementColor::blue() const {
  // @@protoc_insertion_point(field_get:main.ElementColor.blue)
  return blue_;
}
inline void ElementColor::set_blue(::google::protobuf::int32 value) {
  set_has_blue();
  blue_ = value;
  // @@protoc_insertion_point(field_set:main.ElementColor.blue)
}

// optional int32 alpha = 4 [default = 255];
inline bool ElementColor::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ElementColor::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ElementColor::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ElementColor::clear_alpha() {
  alpha_ = 255;
  clear_has_alpha();
}
inline ::google::protobuf::int32 ElementColor::alpha() const {
  // @@protoc_insertion_point(field_get:main.ElementColor.alpha)
  return alpha_;
}
inline void ElementColor::set_alpha(::google::protobuf::int32 value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:main.ElementColor.alpha)
}

// -------------------------------------------------------------------

// LabelInfo

// optional int32 labelId = 1;
inline bool LabelInfo::has_labelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelInfo::set_has_labelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelInfo::clear_has_labelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelInfo::clear_labelid() {
  labelid_ = 0;
  clear_has_labelid();
}
inline ::google::protobuf::int32 LabelInfo::labelid() const {
  // @@protoc_insertion_point(field_get:main.LabelInfo.labelId)
  return labelid_;
}
inline void LabelInfo::set_labelid(::google::protobuf::int32 value) {
  set_has_labelid();
  labelid_ = value;
  // @@protoc_insertion_point(field_set:main.LabelInfo.labelId)
}

// optional int32 labelValue = 2;
inline bool LabelInfo::has_labelvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelInfo::set_has_labelvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelInfo::clear_has_labelvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelInfo::clear_labelvalue() {
  labelvalue_ = 0;
  clear_has_labelvalue();
}
inline ::google::protobuf::int32 LabelInfo::labelvalue() const {
  // @@protoc_insertion_point(field_get:main.LabelInfo.labelValue)
  return labelvalue_;
}
inline void LabelInfo::set_labelvalue(::google::protobuf::int32 value) {
  set_has_labelvalue();
  labelvalue_ = value;
  // @@protoc_insertion_point(field_set:main.LabelInfo.labelValue)
}

// optional .main.ElementColor fontColor = 3;
inline bool LabelInfo::has_fontcolor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelInfo::set_has_fontcolor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelInfo::clear_has_fontcolor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelInfo::clear_fontcolor() {
  if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
  clear_has_fontcolor();
}
inline const ::main::ElementColor& LabelInfo::fontcolor() const {
  // @@protoc_insertion_point(field_get:main.LabelInfo.fontColor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance().fontcolor_;
#else
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance_->fontcolor_;
#endif
}
inline ::main::ElementColor* LabelInfo::mutable_fontcolor() {
  set_has_fontcolor();
  if (fontcolor_ == NULL) fontcolor_ = new ::main::ElementColor;
  // @@protoc_insertion_point(field_mutable:main.LabelInfo.fontColor)
  return fontcolor_;
}
inline ::main::ElementColor* LabelInfo::release_fontcolor() {
  clear_has_fontcolor();
  ::main::ElementColor* temp = fontcolor_;
  fontcolor_ = NULL;
  return temp;
}
inline void LabelInfo::set_allocated_fontcolor(::main::ElementColor* fontcolor) {
  delete fontcolor_;
  fontcolor_ = fontcolor;
  if (fontcolor) {
    set_has_fontcolor();
  } else {
    clear_has_fontcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:main.LabelInfo.fontColor)
}

// -------------------------------------------------------------------

// LabelStringInfo

// optional int32 labelId = 1;
inline bool LabelStringInfo::has_labelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelStringInfo::set_has_labelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelStringInfo::clear_has_labelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelStringInfo::clear_labelid() {
  labelid_ = 0;
  clear_has_labelid();
}
inline ::google::protobuf::int32 LabelStringInfo::labelid() const {
  // @@protoc_insertion_point(field_get:main.LabelStringInfo.labelId)
  return labelid_;
}
inline void LabelStringInfo::set_labelid(::google::protobuf::int32 value) {
  set_has_labelid();
  labelid_ = value;
  // @@protoc_insertion_point(field_set:main.LabelStringInfo.labelId)
}

// optional string labelValue = 2;
inline bool LabelStringInfo::has_labelvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelStringInfo::set_has_labelvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelStringInfo::clear_has_labelvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelStringInfo::clear_labelvalue() {
  if (labelvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    labelvalue_->clear();
  }
  clear_has_labelvalue();
}
inline const ::std::string& LabelStringInfo::labelvalue() const {
  // @@protoc_insertion_point(field_get:main.LabelStringInfo.labelValue)
  return *labelvalue_;
}
inline void LabelStringInfo::set_labelvalue(const ::std::string& value) {
  set_has_labelvalue();
  if (labelvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    labelvalue_ = new ::std::string;
  }
  labelvalue_->assign(value);
  // @@protoc_insertion_point(field_set:main.LabelStringInfo.labelValue)
}
inline void LabelStringInfo::set_labelvalue(const char* value) {
  set_has_labelvalue();
  if (labelvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    labelvalue_ = new ::std::string;
  }
  labelvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.LabelStringInfo.labelValue)
}
inline void LabelStringInfo::set_labelvalue(const char* value, size_t size) {
  set_has_labelvalue();
  if (labelvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    labelvalue_ = new ::std::string;
  }
  labelvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.LabelStringInfo.labelValue)
}
inline ::std::string* LabelStringInfo::mutable_labelvalue() {
  set_has_labelvalue();
  if (labelvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    labelvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.LabelStringInfo.labelValue)
  return labelvalue_;
}
inline ::std::string* LabelStringInfo::release_labelvalue() {
  clear_has_labelvalue();
  if (labelvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = labelvalue_;
    labelvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabelStringInfo::set_allocated_labelvalue(::std::string* labelvalue) {
  if (labelvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete labelvalue_;
  }
  if (labelvalue) {
    set_has_labelvalue();
    labelvalue_ = labelvalue;
  } else {
    clear_has_labelvalue();
    labelvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.LabelStringInfo.labelValue)
}

// optional .main.ElementColor fontColor = 3;
inline bool LabelStringInfo::has_fontcolor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelStringInfo::set_has_fontcolor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelStringInfo::clear_has_fontcolor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelStringInfo::clear_fontcolor() {
  if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
  clear_has_fontcolor();
}
inline const ::main::ElementColor& LabelStringInfo::fontcolor() const {
  // @@protoc_insertion_point(field_get:main.LabelStringInfo.fontColor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance().fontcolor_;
#else
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance_->fontcolor_;
#endif
}
inline ::main::ElementColor* LabelStringInfo::mutable_fontcolor() {
  set_has_fontcolor();
  if (fontcolor_ == NULL) fontcolor_ = new ::main::ElementColor;
  // @@protoc_insertion_point(field_mutable:main.LabelStringInfo.fontColor)
  return fontcolor_;
}
inline ::main::ElementColor* LabelStringInfo::release_fontcolor() {
  clear_has_fontcolor();
  ::main::ElementColor* temp = fontcolor_;
  fontcolor_ = NULL;
  return temp;
}
inline void LabelStringInfo::set_allocated_fontcolor(::main::ElementColor* fontcolor) {
  delete fontcolor_;
  fontcolor_ = fontcolor;
  if (fontcolor) {
    set_has_fontcolor();
  } else {
    clear_has_fontcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:main.LabelStringInfo.fontColor)
}

// -------------------------------------------------------------------

// BtnInfo

// optional int32 btnId = 1;
inline bool BtnInfo::has_btnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BtnInfo::set_has_btnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BtnInfo::clear_has_btnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BtnInfo::clear_btnid() {
  btnid_ = 0;
  clear_has_btnid();
}
inline ::google::protobuf::int32 BtnInfo::btnid() const {
  // @@protoc_insertion_point(field_get:main.BtnInfo.btnId)
  return btnid_;
}
inline void BtnInfo::set_btnid(::google::protobuf::int32 value) {
  set_has_btnid();
  btnid_ = value;
  // @@protoc_insertion_point(field_set:main.BtnInfo.btnId)
}

// optional string fontStr = 2;
inline bool BtnInfo::has_fontstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BtnInfo::set_has_fontstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BtnInfo::clear_has_fontstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BtnInfo::clear_fontstr() {
  if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_->clear();
  }
  clear_has_fontstr();
}
inline const ::std::string& BtnInfo::fontstr() const {
  // @@protoc_insertion_point(field_get:main.BtnInfo.fontStr)
  return *fontstr_;
}
inline void BtnInfo::set_fontstr(const ::std::string& value) {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  fontstr_->assign(value);
  // @@protoc_insertion_point(field_set:main.BtnInfo.fontStr)
}
inline void BtnInfo::set_fontstr(const char* value) {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  fontstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.BtnInfo.fontStr)
}
inline void BtnInfo::set_fontstr(const char* value, size_t size) {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  fontstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.BtnInfo.fontStr)
}
inline ::std::string* BtnInfo::mutable_fontstr() {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.BtnInfo.fontStr)
  return fontstr_;
}
inline ::std::string* BtnInfo::release_fontstr() {
  clear_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fontstr_;
    fontstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BtnInfo::set_allocated_fontstr(::std::string* fontstr) {
  if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fontstr_;
  }
  if (fontstr) {
    set_has_fontstr();
    fontstr_ = fontstr;
  } else {
    clear_has_fontstr();
    fontstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.BtnInfo.fontStr)
}

// optional .main.ElementColor fontColor = 3;
inline bool BtnInfo::has_fontcolor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BtnInfo::set_has_fontcolor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BtnInfo::clear_has_fontcolor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BtnInfo::clear_fontcolor() {
  if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
  clear_has_fontcolor();
}
inline const ::main::ElementColor& BtnInfo::fontcolor() const {
  // @@protoc_insertion_point(field_get:main.BtnInfo.fontColor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance().fontcolor_;
#else
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance_->fontcolor_;
#endif
}
inline ::main::ElementColor* BtnInfo::mutable_fontcolor() {
  set_has_fontcolor();
  if (fontcolor_ == NULL) fontcolor_ = new ::main::ElementColor;
  // @@protoc_insertion_point(field_mutable:main.BtnInfo.fontColor)
  return fontcolor_;
}
inline ::main::ElementColor* BtnInfo::release_fontcolor() {
  clear_has_fontcolor();
  ::main::ElementColor* temp = fontcolor_;
  fontcolor_ = NULL;
  return temp;
}
inline void BtnInfo::set_allocated_fontcolor(::main::ElementColor* fontcolor) {
  delete fontcolor_;
  fontcolor_ = fontcolor;
  if (fontcolor) {
    set_has_fontcolor();
  } else {
    clear_has_fontcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:main.BtnInfo.fontColor)
}

// optional string bgStr = 4;
inline bool BtnInfo::has_bgstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BtnInfo::set_has_bgstr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BtnInfo::clear_has_bgstr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BtnInfo::clear_bgstr() {
  if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_->clear();
  }
  clear_has_bgstr();
}
inline const ::std::string& BtnInfo::bgstr() const {
  // @@protoc_insertion_point(field_get:main.BtnInfo.bgStr)
  return *bgstr_;
}
inline void BtnInfo::set_bgstr(const ::std::string& value) {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  bgstr_->assign(value);
  // @@protoc_insertion_point(field_set:main.BtnInfo.bgStr)
}
inline void BtnInfo::set_bgstr(const char* value) {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  bgstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.BtnInfo.bgStr)
}
inline void BtnInfo::set_bgstr(const char* value, size_t size) {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  bgstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.BtnInfo.bgStr)
}
inline ::std::string* BtnInfo::mutable_bgstr() {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.BtnInfo.bgStr)
  return bgstr_;
}
inline ::std::string* BtnInfo::release_bgstr() {
  clear_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bgstr_;
    bgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BtnInfo::set_allocated_bgstr(::std::string* bgstr) {
  if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bgstr_;
  }
  if (bgstr) {
    set_has_bgstr();
    bgstr_ = bgstr;
  } else {
    clear_has_bgstr();
    bgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.BtnInfo.bgStr)
}

// optional string fgStr = 5;
inline bool BtnInfo::has_fgstr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BtnInfo::set_has_fgstr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BtnInfo::clear_has_fgstr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BtnInfo::clear_fgstr() {
  if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_->clear();
  }
  clear_has_fgstr();
}
inline const ::std::string& BtnInfo::fgstr() const {
  // @@protoc_insertion_point(field_get:main.BtnInfo.fgStr)
  return *fgstr_;
}
inline void BtnInfo::set_fgstr(const ::std::string& value) {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  fgstr_->assign(value);
  // @@protoc_insertion_point(field_set:main.BtnInfo.fgStr)
}
inline void BtnInfo::set_fgstr(const char* value) {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  fgstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.BtnInfo.fgStr)
}
inline void BtnInfo::set_fgstr(const char* value, size_t size) {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  fgstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.BtnInfo.fgStr)
}
inline ::std::string* BtnInfo::mutable_fgstr() {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.BtnInfo.fgStr)
  return fgstr_;
}
inline ::std::string* BtnInfo::release_fgstr() {
  clear_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fgstr_;
    fgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BtnInfo::set_allocated_fgstr(::std::string* fgstr) {
  if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fgstr_;
  }
  if (fgstr) {
    set_has_fgstr();
    fgstr_ = fgstr;
  } else {
    clear_has_fgstr();
    fgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.BtnInfo.fgStr)
}

// optional .main.ElementColor imageColor = 6;
inline bool BtnInfo::has_imagecolor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BtnInfo::set_has_imagecolor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BtnInfo::clear_has_imagecolor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BtnInfo::clear_imagecolor() {
  if (imagecolor_ != NULL) imagecolor_->::main::ElementColor::Clear();
  clear_has_imagecolor();
}
inline const ::main::ElementColor& BtnInfo::imagecolor() const {
  // @@protoc_insertion_point(field_get:main.BtnInfo.imageColor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return imagecolor_ != NULL ? *imagecolor_ : *default_instance().imagecolor_;
#else
  return imagecolor_ != NULL ? *imagecolor_ : *default_instance_->imagecolor_;
#endif
}
inline ::main::ElementColor* BtnInfo::mutable_imagecolor() {
  set_has_imagecolor();
  if (imagecolor_ == NULL) imagecolor_ = new ::main::ElementColor;
  // @@protoc_insertion_point(field_mutable:main.BtnInfo.imageColor)
  return imagecolor_;
}
inline ::main::ElementColor* BtnInfo::release_imagecolor() {
  clear_has_imagecolor();
  ::main::ElementColor* temp = imagecolor_;
  imagecolor_ = NULL;
  return temp;
}
inline void BtnInfo::set_allocated_imagecolor(::main::ElementColor* imagecolor) {
  delete imagecolor_;
  imagecolor_ = imagecolor;
  if (imagecolor) {
    set_has_imagecolor();
  } else {
    clear_has_imagecolor();
  }
  // @@protoc_insertion_point(field_set_allocated:main.BtnInfo.imageColor)
}

// optional int32 btnState = 7;
inline bool BtnInfo::has_btnstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BtnInfo::set_has_btnstate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BtnInfo::clear_has_btnstate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BtnInfo::clear_btnstate() {
  btnstate_ = 0;
  clear_has_btnstate();
}
inline ::google::protobuf::int32 BtnInfo::btnstate() const {
  // @@protoc_insertion_point(field_get:main.BtnInfo.btnState)
  return btnstate_;
}
inline void BtnInfo::set_btnstate(::google::protobuf::int32 value) {
  set_has_btnstate();
  btnstate_ = value;
  // @@protoc_insertion_point(field_set:main.BtnInfo.btnState)
}

// -------------------------------------------------------------------

// ImageInfo

// optional int32 imageId = 1;
inline bool ImageInfo::has_imageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageInfo::set_has_imageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageInfo::clear_has_imageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageInfo::clear_imageid() {
  imageid_ = 0;
  clear_has_imageid();
}
inline ::google::protobuf::int32 ImageInfo::imageid() const {
  // @@protoc_insertion_point(field_get:main.ImageInfo.imageId)
  return imageid_;
}
inline void ImageInfo::set_imageid(::google::protobuf::int32 value) {
  set_has_imageid();
  imageid_ = value;
  // @@protoc_insertion_point(field_set:main.ImageInfo.imageId)
}

// optional string imagestr = 2;
inline bool ImageInfo::has_imagestr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageInfo::set_has_imagestr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageInfo::clear_has_imagestr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageInfo::clear_imagestr() {
  if (imagestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagestr_->clear();
  }
  clear_has_imagestr();
}
inline const ::std::string& ImageInfo::imagestr() const {
  // @@protoc_insertion_point(field_get:main.ImageInfo.imagestr)
  return *imagestr_;
}
inline void ImageInfo::set_imagestr(const ::std::string& value) {
  set_has_imagestr();
  if (imagestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagestr_ = new ::std::string;
  }
  imagestr_->assign(value);
  // @@protoc_insertion_point(field_set:main.ImageInfo.imagestr)
}
inline void ImageInfo::set_imagestr(const char* value) {
  set_has_imagestr();
  if (imagestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagestr_ = new ::std::string;
  }
  imagestr_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.ImageInfo.imagestr)
}
inline void ImageInfo::set_imagestr(const char* value, size_t size) {
  set_has_imagestr();
  if (imagestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagestr_ = new ::std::string;
  }
  imagestr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.ImageInfo.imagestr)
}
inline ::std::string* ImageInfo::mutable_imagestr() {
  set_has_imagestr();
  if (imagestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagestr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.ImageInfo.imagestr)
  return imagestr_;
}
inline ::std::string* ImageInfo::release_imagestr() {
  clear_has_imagestr();
  if (imagestr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagestr_;
    imagestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageInfo::set_allocated_imagestr(::std::string* imagestr) {
  if (imagestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagestr_;
  }
  if (imagestr) {
    set_has_imagestr();
    imagestr_ = imagestr;
  } else {
    clear_has_imagestr();
    imagestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.ImageInfo.imagestr)
}

// optional .main.ElementColor imageColor = 3;
inline bool ImageInfo::has_imagecolor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageInfo::set_has_imagecolor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageInfo::clear_has_imagecolor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageInfo::clear_imagecolor() {
  if (imagecolor_ != NULL) imagecolor_->::main::ElementColor::Clear();
  clear_has_imagecolor();
}
inline const ::main::ElementColor& ImageInfo::imagecolor() const {
  // @@protoc_insertion_point(field_get:main.ImageInfo.imageColor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return imagecolor_ != NULL ? *imagecolor_ : *default_instance().imagecolor_;
#else
  return imagecolor_ != NULL ? *imagecolor_ : *default_instance_->imagecolor_;
#endif
}
inline ::main::ElementColor* ImageInfo::mutable_imagecolor() {
  set_has_imagecolor();
  if (imagecolor_ == NULL) imagecolor_ = new ::main::ElementColor;
  // @@protoc_insertion_point(field_mutable:main.ImageInfo.imageColor)
  return imagecolor_;
}
inline ::main::ElementColor* ImageInfo::release_imagecolor() {
  clear_has_imagecolor();
  ::main::ElementColor* temp = imagecolor_;
  imagecolor_ = NULL;
  return temp;
}
inline void ImageInfo::set_allocated_imagecolor(::main::ElementColor* imagecolor) {
  delete imagecolor_;
  imagecolor_ = imagecolor;
  if (imagecolor) {
    set_has_imagecolor();
  } else {
    clear_has_imagecolor();
  }
  // @@protoc_insertion_point(field_set_allocated:main.ImageInfo.imageColor)
}

// -------------------------------------------------------------------

// ItemInfo

// optional sint32 itemType = 1;
inline bool ItemInfo::has_itemtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemInfo::set_has_itemtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemInfo::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemInfo::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::google::protobuf::int32 ItemInfo::itemtype() const {
  // @@protoc_insertion_point(field_get:main.ItemInfo.itemType)
  return itemtype_;
}
inline void ItemInfo::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:main.ItemInfo.itemType)
}

// optional sint32 itemId = 2;
inline bool ItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 ItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:main.ItemInfo.itemId)
  return itemid_;
}
inline void ItemInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:main.ItemInfo.itemId)
}

// optional sint32 itemCount = 3;
inline bool ItemInfo::has_itemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemInfo::set_has_itemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemInfo::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemInfo::clear_itemcount() {
  itemcount_ = 0;
  clear_has_itemcount();
}
inline ::google::protobuf::int32 ItemInfo::itemcount() const {
  // @@protoc_insertion_point(field_get:main.ItemInfo.itemCount)
  return itemcount_;
}
inline void ItemInfo::set_itemcount(::google::protobuf::int32 value) {
  set_has_itemcount();
  itemcount_ = value;
  // @@protoc_insertion_point(field_set:main.ItemInfo.itemCount)
}

// optional sint32 itemLevel = 4;
inline bool ItemInfo::has_itemlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemInfo::set_has_itemlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemInfo::clear_has_itemlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemInfo::clear_itemlevel() {
  itemlevel_ = 0;
  clear_has_itemlevel();
}
inline ::google::protobuf::int32 ItemInfo::itemlevel() const {
  // @@protoc_insertion_point(field_get:main.ItemInfo.itemLevel)
  return itemlevel_;
}
inline void ItemInfo::set_itemlevel(::google::protobuf::int32 value) {
  set_has_itemlevel();
  itemlevel_ = value;
  // @@protoc_insertion_point(field_set:main.ItemInfo.itemLevel)
}

// optional sint32 itemBtnId = 5;
inline bool ItemInfo::has_itembtnid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemInfo::set_has_itembtnid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemInfo::clear_has_itembtnid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemInfo::clear_itembtnid() {
  itembtnid_ = 0;
  clear_has_itembtnid();
}
inline ::google::protobuf::int32 ItemInfo::itembtnid() const {
  // @@protoc_insertion_point(field_get:main.ItemInfo.itemBtnId)
  return itembtnid_;
}
inline void ItemInfo::set_itembtnid(::google::protobuf::int32 value) {
  set_has_itembtnid();
  itembtnid_ = value;
  // @@protoc_insertion_point(field_set:main.ItemInfo.itemBtnId)
}

// -------------------------------------------------------------------

// ActivityGetRewardRequest

// optional int32 childTag = 1;
inline bool ActivityGetRewardRequest::has_childtag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityGetRewardRequest::set_has_childtag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityGetRewardRequest::clear_has_childtag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityGetRewardRequest::clear_childtag() {
  childtag_ = 0;
  clear_has_childtag();
}
inline ::google::protobuf::int32 ActivityGetRewardRequest::childtag() const {
  // @@protoc_insertion_point(field_get:main.ActivityGetRewardRequest.childTag)
  return childtag_;
}
inline void ActivityGetRewardRequest::set_childtag(::google::protobuf::int32 value) {
  set_has_childtag();
  childtag_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityGetRewardRequest.childTag)
}

// optional int32 btnId = 2;
inline bool ActivityGetRewardRequest::has_btnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityGetRewardRequest::set_has_btnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityGetRewardRequest::clear_has_btnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityGetRewardRequest::clear_btnid() {
  btnid_ = 0;
  clear_has_btnid();
}
inline ::google::protobuf::int32 ActivityGetRewardRequest::btnid() const {
  // @@protoc_insertion_point(field_get:main.ActivityGetRewardRequest.btnId)
  return btnid_;
}
inline void ActivityGetRewardRequest::set_btnid(::google::protobuf::int32 value) {
  set_has_btnid();
  btnid_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityGetRewardRequest.btnId)
}

// -------------------------------------------------------------------

// ActivityGetRewardResponse

// optional int32 state = 1;
inline bool ActivityGetRewardResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityGetRewardResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityGetRewardResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityGetRewardResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ActivityGetRewardResponse::state() const {
  // @@protoc_insertion_point(field_get:main.ActivityGetRewardResponse.state)
  return state_;
}
inline void ActivityGetRewardResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityGetRewardResponse.state)
}

// optional int32 childTag = 2;
inline bool ActivityGetRewardResponse::has_childtag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityGetRewardResponse::set_has_childtag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityGetRewardResponse::clear_has_childtag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityGetRewardResponse::clear_childtag() {
  childtag_ = 0;
  clear_has_childtag();
}
inline ::google::protobuf::int32 ActivityGetRewardResponse::childtag() const {
  // @@protoc_insertion_point(field_get:main.ActivityGetRewardResponse.childTag)
  return childtag_;
}
inline void ActivityGetRewardResponse::set_childtag(::google::protobuf::int32 value) {
  set_has_childtag();
  childtag_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityGetRewardResponse.childTag)
}

// optional int32 btnId = 3;
inline bool ActivityGetRewardResponse::has_btnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityGetRewardResponse::set_has_btnid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityGetRewardResponse::clear_has_btnid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityGetRewardResponse::clear_btnid() {
  btnid_ = 0;
  clear_has_btnid();
}
inline ::google::protobuf::int32 ActivityGetRewardResponse::btnid() const {
  // @@protoc_insertion_point(field_get:main.ActivityGetRewardResponse.btnId)
  return btnid_;
}
inline void ActivityGetRewardResponse::set_btnid(::google::protobuf::int32 value) {
  set_has_btnid();
  btnid_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityGetRewardResponse.btnId)
}

// -------------------------------------------------------------------

// ActivityOpretionRequest

// optional int32 childTag = 1;
inline bool ActivityOpretionRequest::has_childtag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityOpretionRequest::set_has_childtag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityOpretionRequest::clear_has_childtag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityOpretionRequest::clear_childtag() {
  childtag_ = 0;
  clear_has_childtag();
}
inline ::google::protobuf::int32 ActivityOpretionRequest::childtag() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretionRequest.childTag)
  return childtag_;
}
inline void ActivityOpretionRequest::set_childtag(::google::protobuf::int32 value) {
  set_has_childtag();
  childtag_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretionRequest.childTag)
}

// optional .main.ElementType objectType = 2;
inline bool ActivityOpretionRequest::has_objecttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityOpretionRequest::set_has_objecttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityOpretionRequest::clear_has_objecttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityOpretionRequest::clear_objecttype() {
  objecttype_ = 0;
  clear_has_objecttype();
}
inline ::main::ElementType ActivityOpretionRequest::objecttype() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretionRequest.objectType)
  return static_cast< ::main::ElementType >(objecttype_);
}
inline void ActivityOpretionRequest::set_objecttype(::main::ElementType value) {
  assert(::main::ElementType_IsValid(value));
  set_has_objecttype();
  objecttype_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretionRequest.objectType)
}

// optional int32 objectId = 3;
inline bool ActivityOpretionRequest::has_objectid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityOpretionRequest::set_has_objectid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityOpretionRequest::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityOpretionRequest::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 ActivityOpretionRequest::objectid() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretionRequest.objectId)
  return objectid_;
}
inline void ActivityOpretionRequest::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretionRequest.objectId)
}

// optional int32 opreation = 4;
inline bool ActivityOpretionRequest::has_opreation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityOpretionRequest::set_has_opreation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityOpretionRequest::clear_has_opreation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityOpretionRequest::clear_opreation() {
  opreation_ = 0;
  clear_has_opreation();
}
inline ::google::protobuf::int32 ActivityOpretionRequest::opreation() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretionRequest.opreation)
  return opreation_;
}
inline void ActivityOpretionRequest::set_opreation(::google::protobuf::int32 value) {
  set_has_opreation();
  opreation_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretionRequest.opreation)
}

// -------------------------------------------------------------------

// ActivityOpretionResponse

// repeated .main.ActivityOpretion opreationList = 1;
inline int ActivityOpretionResponse::opreationlist_size() const {
  return opreationlist_.size();
}
inline void ActivityOpretionResponse::clear_opreationlist() {
  opreationlist_.Clear();
}
inline const ::main::ActivityOpretion& ActivityOpretionResponse::opreationlist(int index) const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretionResponse.opreationList)
  return opreationlist_.Get(index);
}
inline ::main::ActivityOpretion* ActivityOpretionResponse::mutable_opreationlist(int index) {
  // @@protoc_insertion_point(field_mutable:main.ActivityOpretionResponse.opreationList)
  return opreationlist_.Mutable(index);
}
inline ::main::ActivityOpretion* ActivityOpretionResponse::add_opreationlist() {
  // @@protoc_insertion_point(field_add:main.ActivityOpretionResponse.opreationList)
  return opreationlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::ActivityOpretion >&
ActivityOpretionResponse::opreationlist() const {
  // @@protoc_insertion_point(field_list:main.ActivityOpretionResponse.opreationList)
  return opreationlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::ActivityOpretion >*
ActivityOpretionResponse::mutable_opreationlist() {
  // @@protoc_insertion_point(field_mutable_list:main.ActivityOpretionResponse.opreationList)
  return &opreationlist_;
}

// -------------------------------------------------------------------

// ActivityOpretion

// optional int32 childTag = 1;
inline bool ActivityOpretion::has_childtag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityOpretion::set_has_childtag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityOpretion::clear_has_childtag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityOpretion::clear_childtag() {
  childtag_ = 0;
  clear_has_childtag();
}
inline ::google::protobuf::int32 ActivityOpretion::childtag() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.childTag)
  return childtag_;
}
inline void ActivityOpretion::set_childtag(::google::protobuf::int32 value) {
  set_has_childtag();
  childtag_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.childTag)
}

// optional .main.ElementType objectType = 2;
inline bool ActivityOpretion::has_objecttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityOpretion::set_has_objecttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityOpretion::clear_has_objecttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityOpretion::clear_objecttype() {
  objecttype_ = 0;
  clear_has_objecttype();
}
inline ::main::ElementType ActivityOpretion::objecttype() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.objectType)
  return static_cast< ::main::ElementType >(objecttype_);
}
inline void ActivityOpretion::set_objecttype(::main::ElementType value) {
  assert(::main::ElementType_IsValid(value));
  set_has_objecttype();
  objecttype_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.objectType)
}

// optional int32 objectId = 3;
inline bool ActivityOpretion::has_objectid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityOpretion::set_has_objectid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityOpretion::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityOpretion::clear_objectid() {
  objectid_ = 0;
  clear_has_objectid();
}
inline ::google::protobuf::int32 ActivityOpretion::objectid() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.objectId)
  return objectid_;
}
inline void ActivityOpretion::set_objectid(::google::protobuf::int32 value) {
  set_has_objectid();
  objectid_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.objectId)
}

// optional int32 opreation = 4;
inline bool ActivityOpretion::has_opreation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityOpretion::set_has_opreation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityOpretion::clear_has_opreation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityOpretion::clear_opreation() {
  opreation_ = 0;
  clear_has_opreation();
}
inline ::google::protobuf::int32 ActivityOpretion::opreation() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.opreation)
  return opreation_;
}
inline void ActivityOpretion::set_opreation(::google::protobuf::int32 value) {
  set_has_opreation();
  opreation_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.opreation)
}

// optional string fontStr = 5;
inline bool ActivityOpretion::has_fontstr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityOpretion::set_has_fontstr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivityOpretion::clear_has_fontstr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivityOpretion::clear_fontstr() {
  if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_->clear();
  }
  clear_has_fontstr();
}
inline const ::std::string& ActivityOpretion::fontstr() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.fontStr)
  return *fontstr_;
}
inline void ActivityOpretion::set_fontstr(const ::std::string& value) {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  fontstr_->assign(value);
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.fontStr)
}
inline void ActivityOpretion::set_fontstr(const char* value) {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  fontstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.ActivityOpretion.fontStr)
}
inline void ActivityOpretion::set_fontstr(const char* value, size_t size) {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  fontstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.ActivityOpretion.fontStr)
}
inline ::std::string* ActivityOpretion::mutable_fontstr() {
  set_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fontstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.ActivityOpretion.fontStr)
  return fontstr_;
}
inline ::std::string* ActivityOpretion::release_fontstr() {
  clear_has_fontstr();
  if (fontstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fontstr_;
    fontstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityOpretion::set_allocated_fontstr(::std::string* fontstr) {
  if (fontstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fontstr_;
  }
  if (fontstr) {
    set_has_fontstr();
    fontstr_ = fontstr;
  } else {
    clear_has_fontstr();
    fontstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityOpretion.fontStr)
}

// optional .main.ElementColor fontColor = 6;
inline bool ActivityOpretion::has_fontcolor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivityOpretion::set_has_fontcolor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActivityOpretion::clear_has_fontcolor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActivityOpretion::clear_fontcolor() {
  if (fontcolor_ != NULL) fontcolor_->::main::ElementColor::Clear();
  clear_has_fontcolor();
}
inline const ::main::ElementColor& ActivityOpretion::fontcolor() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.fontColor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance().fontcolor_;
#else
  return fontcolor_ != NULL ? *fontcolor_ : *default_instance_->fontcolor_;
#endif
}
inline ::main::ElementColor* ActivityOpretion::mutable_fontcolor() {
  set_has_fontcolor();
  if (fontcolor_ == NULL) fontcolor_ = new ::main::ElementColor;
  // @@protoc_insertion_point(field_mutable:main.ActivityOpretion.fontColor)
  return fontcolor_;
}
inline ::main::ElementColor* ActivityOpretion::release_fontcolor() {
  clear_has_fontcolor();
  ::main::ElementColor* temp = fontcolor_;
  fontcolor_ = NULL;
  return temp;
}
inline void ActivityOpretion::set_allocated_fontcolor(::main::ElementColor* fontcolor) {
  delete fontcolor_;
  fontcolor_ = fontcolor;
  if (fontcolor) {
    set_has_fontcolor();
  } else {
    clear_has_fontcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityOpretion.fontColor)
}

// optional string bgStr = 7;
inline bool ActivityOpretion::has_bgstr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActivityOpretion::set_has_bgstr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ActivityOpretion::clear_has_bgstr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ActivityOpretion::clear_bgstr() {
  if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_->clear();
  }
  clear_has_bgstr();
}
inline const ::std::string& ActivityOpretion::bgstr() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.bgStr)
  return *bgstr_;
}
inline void ActivityOpretion::set_bgstr(const ::std::string& value) {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  bgstr_->assign(value);
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.bgStr)
}
inline void ActivityOpretion::set_bgstr(const char* value) {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  bgstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.ActivityOpretion.bgStr)
}
inline void ActivityOpretion::set_bgstr(const char* value, size_t size) {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  bgstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.ActivityOpretion.bgStr)
}
inline ::std::string* ActivityOpretion::mutable_bgstr() {
  set_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.ActivityOpretion.bgStr)
  return bgstr_;
}
inline ::std::string* ActivityOpretion::release_bgstr() {
  clear_has_bgstr();
  if (bgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bgstr_;
    bgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityOpretion::set_allocated_bgstr(::std::string* bgstr) {
  if (bgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bgstr_;
  }
  if (bgstr) {
    set_has_bgstr();
    bgstr_ = bgstr;
  } else {
    clear_has_bgstr();
    bgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityOpretion.bgStr)
}

// optional string fgStr = 8;
inline bool ActivityOpretion::has_fgstr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActivityOpretion::set_has_fgstr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ActivityOpretion::clear_has_fgstr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ActivityOpretion::clear_fgstr() {
  if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_->clear();
  }
  clear_has_fgstr();
}
inline const ::std::string& ActivityOpretion::fgstr() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.fgStr)
  return *fgstr_;
}
inline void ActivityOpretion::set_fgstr(const ::std::string& value) {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  fgstr_->assign(value);
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.fgStr)
}
inline void ActivityOpretion::set_fgstr(const char* value) {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  fgstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.ActivityOpretion.fgStr)
}
inline void ActivityOpretion::set_fgstr(const char* value, size_t size) {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  fgstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.ActivityOpretion.fgStr)
}
inline ::std::string* ActivityOpretion::mutable_fgstr() {
  set_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fgstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.ActivityOpretion.fgStr)
  return fgstr_;
}
inline ::std::string* ActivityOpretion::release_fgstr() {
  clear_has_fgstr();
  if (fgstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fgstr_;
    fgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityOpretion::set_allocated_fgstr(::std::string* fgstr) {
  if (fgstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fgstr_;
  }
  if (fgstr) {
    set_has_fgstr();
    fgstr_ = fgstr;
  } else {
    clear_has_fgstr();
    fgstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityOpretion.fgStr)
}

// optional .main.ElementColor imageColor = 9;
inline bool ActivityOpretion::has_imagecolor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ActivityOpretion::set_has_imagecolor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ActivityOpretion::clear_has_imagecolor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ActivityOpretion::clear_imagecolor() {
  if (imagecolor_ != NULL) imagecolor_->::main::ElementColor::Clear();
  clear_has_imagecolor();
}
inline const ::main::ElementColor& ActivityOpretion::imagecolor() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.imageColor)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return imagecolor_ != NULL ? *imagecolor_ : *default_instance().imagecolor_;
#else
  return imagecolor_ != NULL ? *imagecolor_ : *default_instance_->imagecolor_;
#endif
}
inline ::main::ElementColor* ActivityOpretion::mutable_imagecolor() {
  set_has_imagecolor();
  if (imagecolor_ == NULL) imagecolor_ = new ::main::ElementColor;
  // @@protoc_insertion_point(field_mutable:main.ActivityOpretion.imageColor)
  return imagecolor_;
}
inline ::main::ElementColor* ActivityOpretion::release_imagecolor() {
  clear_has_imagecolor();
  ::main::ElementColor* temp = imagecolor_;
  imagecolor_ = NULL;
  return temp;
}
inline void ActivityOpretion::set_allocated_imagecolor(::main::ElementColor* imagecolor) {
  delete imagecolor_;
  imagecolor_ = imagecolor;
  if (imagecolor) {
    set_has_imagecolor();
  } else {
    clear_has_imagecolor();
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityOpretion.imageColor)
}

// optional .main.ItemInfo itemInfo = 10;
inline bool ActivityOpretion::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ActivityOpretion::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ActivityOpretion::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ActivityOpretion::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::main::ItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::main::ItemInfo& ActivityOpretion::iteminfo() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.itemInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance().iteminfo_;
#else
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
#endif
}
inline ::main::ItemInfo* ActivityOpretion::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::main::ItemInfo;
  // @@protoc_insertion_point(field_mutable:main.ActivityOpretion.itemInfo)
  return iteminfo_;
}
inline ::main::ItemInfo* ActivityOpretion::release_iteminfo() {
  clear_has_iteminfo();
  ::main::ItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void ActivityOpretion::set_allocated_iteminfo(::main::ItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:main.ActivityOpretion.itemInfo)
}

// optional int32 state = 11;
inline bool ActivityOpretion::has_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ActivityOpretion::set_has_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ActivityOpretion::clear_has_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ActivityOpretion::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ActivityOpretion::state() const {
  // @@protoc_insertion_point(field_get:main.ActivityOpretion.state)
  return state_;
}
inline void ActivityOpretion::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:main.ActivityOpretion.state)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LuaActivityModule_2eproto__INCLUDED
