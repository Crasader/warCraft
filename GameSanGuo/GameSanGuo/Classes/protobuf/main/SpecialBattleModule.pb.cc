// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpecialBattleModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpecialBattleModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_SpecialBattleModule_2eproto() {
  delete SpecialBattleStoryListResponse::default_instance_;
  delete SpecialBattleStoryModel::default_instance_;
  delete SpecialBattleStoryListRequest::default_instance_;
  delete SpecialBattlePlotListRequest::default_instance_;
  delete SpecialBattlePlotListResponse::default_instance_;
  delete SpecialBattlePlotModel::default_instance_;
  delete SpecialBattleItemModel::default_instance_;
  delete SpecialBattleCheckFightRequest::default_instance_;
  delete SpecialBattleCheckFightResponse::default_instance_;
  delete SpecialBattleBuyCountRequest::default_instance_;
  delete SpecialBattleBuyCountResponse::default_instance_;
  delete SpecialBattleBuyCountEntryRequest::default_instance_;
  delete SpecialBattleBuyCountEntryResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SpecialBattleModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SpecialBattleModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SpecialBattleStoryListResponse::default_instance_ = new SpecialBattleStoryListResponse();
  SpecialBattleStoryModel::default_instance_ = new SpecialBattleStoryModel();
  SpecialBattleStoryListRequest::default_instance_ = new SpecialBattleStoryListRequest();
  SpecialBattlePlotListRequest::default_instance_ = new SpecialBattlePlotListRequest();
  SpecialBattlePlotListResponse::default_instance_ = new SpecialBattlePlotListResponse();
  SpecialBattlePlotModel::default_instance_ = new SpecialBattlePlotModel();
  SpecialBattleItemModel::default_instance_ = new SpecialBattleItemModel();
  SpecialBattleCheckFightRequest::default_instance_ = new SpecialBattleCheckFightRequest();
  SpecialBattleCheckFightResponse::default_instance_ = new SpecialBattleCheckFightResponse();
  SpecialBattleBuyCountRequest::default_instance_ = new SpecialBattleBuyCountRequest();
  SpecialBattleBuyCountResponse::default_instance_ = new SpecialBattleBuyCountResponse();
  SpecialBattleBuyCountEntryRequest::default_instance_ = new SpecialBattleBuyCountEntryRequest();
  SpecialBattleBuyCountEntryResponse::default_instance_ = new SpecialBattleBuyCountEntryResponse();
  SpecialBattleStoryListResponse::default_instance_->InitAsDefaultInstance();
  SpecialBattleStoryModel::default_instance_->InitAsDefaultInstance();
  SpecialBattleStoryListRequest::default_instance_->InitAsDefaultInstance();
  SpecialBattlePlotListRequest::default_instance_->InitAsDefaultInstance();
  SpecialBattlePlotListResponse::default_instance_->InitAsDefaultInstance();
  SpecialBattlePlotModel::default_instance_->InitAsDefaultInstance();
  SpecialBattleItemModel::default_instance_->InitAsDefaultInstance();
  SpecialBattleCheckFightRequest::default_instance_->InitAsDefaultInstance();
  SpecialBattleCheckFightResponse::default_instance_->InitAsDefaultInstance();
  SpecialBattleBuyCountRequest::default_instance_->InitAsDefaultInstance();
  SpecialBattleBuyCountResponse::default_instance_->InitAsDefaultInstance();
  SpecialBattleBuyCountEntryRequest::default_instance_->InitAsDefaultInstance();
  SpecialBattleBuyCountEntryResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SpecialBattleModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SpecialBattleModule_2eproto_once_);
void protobuf_AddDesc_SpecialBattleModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SpecialBattleModule_2eproto_once_,
                 &protobuf_AddDesc_SpecialBattleModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SpecialBattleModule_2eproto {
  StaticDescriptorInitializer_SpecialBattleModule_2eproto() {
    protobuf_AddDesc_SpecialBattleModule_2eproto();
  }
} static_descriptor_initializer_SpecialBattleModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleStoryListResponse::kStoryModelFieldNumber;
#endif  // !_MSC_VER

SpecialBattleStoryListResponse::SpecialBattleStoryListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleStoryListResponse)
}

void SpecialBattleStoryListResponse::InitAsDefaultInstance() {
}

SpecialBattleStoryListResponse::SpecialBattleStoryListResponse(const SpecialBattleStoryListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleStoryListResponse)
}

void SpecialBattleStoryListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleStoryListResponse::~SpecialBattleStoryListResponse() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleStoryListResponse)
  SharedDtor();
}

void SpecialBattleStoryListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleStoryListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleStoryListResponse& SpecialBattleStoryListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleStoryListResponse* SpecialBattleStoryListResponse::default_instance_ = NULL;

SpecialBattleStoryListResponse* SpecialBattleStoryListResponse::New() const {
  return new SpecialBattleStoryListResponse;
}

void SpecialBattleStoryListResponse::Clear() {
  storymodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleStoryListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleStoryListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.SpecialBattleStoryModel storyModel = 1;
      case 1: {
        if (tag == 10) {
         parse_storyModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storymodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_storyModel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleStoryListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleStoryListResponse)
  return false;
#undef DO_
}

void SpecialBattleStoryListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleStoryListResponse)
  // repeated .main.SpecialBattleStoryModel storyModel = 1;
  for (int i = 0; i < this->storymodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->storymodel(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleStoryListResponse)
}

int SpecialBattleStoryListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.SpecialBattleStoryModel storyModel = 1;
  total_size += 1 * this->storymodel_size();
  for (int i = 0; i < this->storymodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storymodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleStoryListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleStoryListResponse*>(&from));
}

void SpecialBattleStoryListResponse::MergeFrom(const SpecialBattleStoryListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  storymodel_.MergeFrom(from.storymodel_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleStoryListResponse::CopyFrom(const SpecialBattleStoryListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleStoryListResponse::IsInitialized() const {

  return true;
}

void SpecialBattleStoryListResponse::Swap(SpecialBattleStoryListResponse* other) {
  if (other != this) {
    storymodel_.Swap(&other->storymodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleStoryListResponse::GetTypeName() const {
  return "main.SpecialBattleStoryListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleStoryModel::kPositionFieldNumber;
const int SpecialBattleStoryModel::kStoryIdFieldNumber;
const int SpecialBattleStoryModel::kStateFieldNumber;
const int SpecialBattleStoryModel::kCanJoinCountFieldNumber;
const int SpecialBattleStoryModel::kMaxCountFieldNumber;
const int SpecialBattleStoryModel::kNameFieldNumber;
const int SpecialBattleStoryModel::kDescriptionFieldNumber;
const int SpecialBattleStoryModel::kOpendescFieldNumber;
const int SpecialBattleStoryModel::kClosedescFieldNumber;
const int SpecialBattleStoryModel::kIconTypeFieldNumber;
const int SpecialBattleStoryModel::kIconIdFieldNumber;
const int SpecialBattleStoryModel::kBanaerIdFieldNumber;
#endif  // !_MSC_VER

SpecialBattleStoryModel::SpecialBattleStoryModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleStoryModel)
}

void SpecialBattleStoryModel::InitAsDefaultInstance() {
}

SpecialBattleStoryModel::SpecialBattleStoryModel(const SpecialBattleStoryModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleStoryModel)
}

void SpecialBattleStoryModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = 0;
  storyid_ = 0;
  state_ = 0;
  canjoincount_ = 0;
  maxcount_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  closedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icontype_ = 0;
  iconid_ = 0;
  banaerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleStoryModel::~SpecialBattleStoryModel() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleStoryModel)
  SharedDtor();
}

void SpecialBattleStoryModel::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (opendesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opendesc_;
  }
  if (closedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete closedesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleStoryModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleStoryModel& SpecialBattleStoryModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleStoryModel* SpecialBattleStoryModel::default_instance_ = NULL;

SpecialBattleStoryModel* SpecialBattleStoryModel::New() const {
  return new SpecialBattleStoryModel;
}

void SpecialBattleStoryModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialBattleStoryModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(position_, canjoincount_);
    maxcount_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_opendesc()) {
      if (opendesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opendesc_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(iconid_, banaerid_);
    if (has_closedesc()) {
      if (closedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        closedesc_->clear();
      }
    }
    icontype_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleStoryModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleStoryModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_storyId;
        break;
      }

      // optional int32 storyId = 2;
      case 2: {
        if (tag == 16) {
         parse_storyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storyid_)));
          set_has_storyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_canJoinCount;
        break;
      }

      // optional int32 canJoinCount = 4;
      case 4: {
        if (tag == 32) {
         parse_canJoinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canjoincount_)));
          set_has_canjoincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxCount;
        break;
      }

      // optional int32 maxCount = 5;
      case 5: {
        if (tag == 40) {
         parse_maxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_opendesc;
        break;
      }

      // optional string opendesc = 8;
      case 8: {
        if (tag == 66) {
         parse_opendesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendesc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_closedesc;
        break;
      }

      // optional string closedesc = 9;
      case 9: {
        if (tag == 74) {
         parse_closedesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closedesc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_iconType;
        break;
      }

      // optional int32 iconType = 10;
      case 10: {
        if (tag == 80) {
         parse_iconType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icontype_)));
          set_has_icontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_iconId;
        break;
      }

      // optional int32 iconId = 11;
      case 11: {
        if (tag == 88) {
         parse_iconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_banaerId;
        break;
      }

      // optional int32 banaerId = 12;
      case 12: {
        if (tag == 96) {
         parse_banaerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banaerid_)));
          set_has_banaerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleStoryModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleStoryModel)
  return false;
#undef DO_
}

void SpecialBattleStoryModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleStoryModel)
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional int32 storyId = 2;
  if (has_storyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->storyid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 canJoinCount = 4;
  if (has_canjoincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->canjoincount(), output);
  }

  // optional int32 maxCount = 5;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxcount(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // optional string opendesc = 8;
  if (has_opendesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->opendesc(), output);
  }

  // optional string closedesc = 9;
  if (has_closedesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->closedesc(), output);
  }

  // optional int32 iconType = 10;
  if (has_icontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->icontype(), output);
  }

  // optional int32 iconId = 11;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->iconid(), output);
  }

  // optional int32 banaerId = 12;
  if (has_banaerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->banaerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleStoryModel)
}

int SpecialBattleStoryModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 storyId = 2;
    if (has_storyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storyid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 canJoinCount = 4;
    if (has_canjoincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canjoincount());
    }

    // optional int32 maxCount = 5;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 7;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string opendesc = 8;
    if (has_opendesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendesc());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string closedesc = 9;
    if (has_closedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closedesc());
    }

    // optional int32 iconType = 10;
    if (has_icontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icontype());
    }

    // optional int32 iconId = 11;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

    // optional int32 banaerId = 12;
    if (has_banaerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banaerid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleStoryModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleStoryModel*>(&from));
}

void SpecialBattleStoryModel::MergeFrom(const SpecialBattleStoryModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_storyid()) {
      set_storyid(from.storyid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_canjoincount()) {
      set_canjoincount(from.canjoincount());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_opendesc()) {
      set_opendesc(from.opendesc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_closedesc()) {
      set_closedesc(from.closedesc());
    }
    if (from.has_icontype()) {
      set_icontype(from.icontype());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_banaerid()) {
      set_banaerid(from.banaerid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleStoryModel::CopyFrom(const SpecialBattleStoryModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleStoryModel::IsInitialized() const {

  return true;
}

void SpecialBattleStoryModel::Swap(SpecialBattleStoryModel* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(storyid_, other->storyid_);
    std::swap(state_, other->state_);
    std::swap(canjoincount_, other->canjoincount_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(opendesc_, other->opendesc_);
    std::swap(closedesc_, other->closedesc_);
    std::swap(icontype_, other->icontype_);
    std::swap(iconid_, other->iconid_);
    std::swap(banaerid_, other->banaerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleStoryModel::GetTypeName() const {
  return "main.SpecialBattleStoryModel";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SpecialBattleStoryListRequest::SpecialBattleStoryListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleStoryListRequest)
}

void SpecialBattleStoryListRequest::InitAsDefaultInstance() {
}

SpecialBattleStoryListRequest::SpecialBattleStoryListRequest(const SpecialBattleStoryListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleStoryListRequest)
}

void SpecialBattleStoryListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleStoryListRequest::~SpecialBattleStoryListRequest() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleStoryListRequest)
  SharedDtor();
}

void SpecialBattleStoryListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleStoryListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleStoryListRequest& SpecialBattleStoryListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleStoryListRequest* SpecialBattleStoryListRequest::default_instance_ = NULL;

SpecialBattleStoryListRequest* SpecialBattleStoryListRequest::New() const {
  return new SpecialBattleStoryListRequest;
}

void SpecialBattleStoryListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleStoryListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleStoryListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleStoryListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleStoryListRequest)
  return false;
#undef DO_
}

void SpecialBattleStoryListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleStoryListRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleStoryListRequest)
}

int SpecialBattleStoryListRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleStoryListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleStoryListRequest*>(&from));
}

void SpecialBattleStoryListRequest::MergeFrom(const SpecialBattleStoryListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleStoryListRequest::CopyFrom(const SpecialBattleStoryListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleStoryListRequest::IsInitialized() const {

  return true;
}

void SpecialBattleStoryListRequest::Swap(SpecialBattleStoryListRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleStoryListRequest::GetTypeName() const {
  return "main.SpecialBattleStoryListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattlePlotListRequest::kStoryIdFieldNumber;
#endif  // !_MSC_VER

SpecialBattlePlotListRequest::SpecialBattlePlotListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattlePlotListRequest)
}

void SpecialBattlePlotListRequest::InitAsDefaultInstance() {
}

SpecialBattlePlotListRequest::SpecialBattlePlotListRequest(const SpecialBattlePlotListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattlePlotListRequest)
}

void SpecialBattlePlotListRequest::SharedCtor() {
  _cached_size_ = 0;
  storyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattlePlotListRequest::~SpecialBattlePlotListRequest() {
  // @@protoc_insertion_point(destructor:main.SpecialBattlePlotListRequest)
  SharedDtor();
}

void SpecialBattlePlotListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattlePlotListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattlePlotListRequest& SpecialBattlePlotListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattlePlotListRequest* SpecialBattlePlotListRequest::default_instance_ = NULL;

SpecialBattlePlotListRequest* SpecialBattlePlotListRequest::New() const {
  return new SpecialBattlePlotListRequest;
}

void SpecialBattlePlotListRequest::Clear() {
  storyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattlePlotListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattlePlotListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 storyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storyid_)));
          set_has_storyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattlePlotListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattlePlotListRequest)
  return false;
#undef DO_
}

void SpecialBattlePlotListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattlePlotListRequest)
  // optional int32 storyId = 1;
  if (has_storyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storyid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattlePlotListRequest)
}

int SpecialBattlePlotListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 storyId = 1;
    if (has_storyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storyid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattlePlotListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattlePlotListRequest*>(&from));
}

void SpecialBattlePlotListRequest::MergeFrom(const SpecialBattlePlotListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storyid()) {
      set_storyid(from.storyid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattlePlotListRequest::CopyFrom(const SpecialBattlePlotListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattlePlotListRequest::IsInitialized() const {

  return true;
}

void SpecialBattlePlotListRequest::Swap(SpecialBattlePlotListRequest* other) {
  if (other != this) {
    std::swap(storyid_, other->storyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattlePlotListRequest::GetTypeName() const {
  return "main.SpecialBattlePlotListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattlePlotListResponse::kPlotModelFieldNumber;
const int SpecialBattlePlotListResponse::kStoryModelFieldNumber;
#endif  // !_MSC_VER

SpecialBattlePlotListResponse::SpecialBattlePlotListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattlePlotListResponse)
}

void SpecialBattlePlotListResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  storymodel_ = const_cast< ::main::SpecialBattleStoryModel*>(
      ::main::SpecialBattleStoryModel::internal_default_instance());
#else
  storymodel_ = const_cast< ::main::SpecialBattleStoryModel*>(&::main::SpecialBattleStoryModel::default_instance());
#endif
}

SpecialBattlePlotListResponse::SpecialBattlePlotListResponse(const SpecialBattlePlotListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattlePlotListResponse)
}

void SpecialBattlePlotListResponse::SharedCtor() {
  _cached_size_ = 0;
  storymodel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattlePlotListResponse::~SpecialBattlePlotListResponse() {
  // @@protoc_insertion_point(destructor:main.SpecialBattlePlotListResponse)
  SharedDtor();
}

void SpecialBattlePlotListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete storymodel_;
  }
}

void SpecialBattlePlotListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattlePlotListResponse& SpecialBattlePlotListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattlePlotListResponse* SpecialBattlePlotListResponse::default_instance_ = NULL;

SpecialBattlePlotListResponse* SpecialBattlePlotListResponse::New() const {
  return new SpecialBattlePlotListResponse;
}

void SpecialBattlePlotListResponse::Clear() {
  if (has_storymodel()) {
    if (storymodel_ != NULL) storymodel_->::main::SpecialBattleStoryModel::Clear();
  }
  plotmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattlePlotListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattlePlotListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.SpecialBattlePlotModel plotModel = 1;
      case 1: {
        if (tag == 10) {
         parse_plotModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plotmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_plotModel;
        if (input->ExpectTag(58)) goto parse_storyModel;
        break;
      }

      // optional .main.SpecialBattleStoryModel storyModel = 7;
      case 7: {
        if (tag == 58) {
         parse_storyModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storymodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattlePlotListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattlePlotListResponse)
  return false;
#undef DO_
}

void SpecialBattlePlotListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattlePlotListResponse)
  // repeated .main.SpecialBattlePlotModel plotModel = 1;
  for (int i = 0; i < this->plotmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->plotmodel(i), output);
  }

  // optional .main.SpecialBattleStoryModel storyModel = 7;
  if (has_storymodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->storymodel(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattlePlotListResponse)
}

int SpecialBattlePlotListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .main.SpecialBattleStoryModel storyModel = 7;
    if (has_storymodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storymodel());
    }

  }
  // repeated .main.SpecialBattlePlotModel plotModel = 1;
  total_size += 1 * this->plotmodel_size();
  for (int i = 0; i < this->plotmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plotmodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattlePlotListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattlePlotListResponse*>(&from));
}

void SpecialBattlePlotListResponse::MergeFrom(const SpecialBattlePlotListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  plotmodel_.MergeFrom(from.plotmodel_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_storymodel()) {
      mutable_storymodel()->::main::SpecialBattleStoryModel::MergeFrom(from.storymodel());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattlePlotListResponse::CopyFrom(const SpecialBattlePlotListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattlePlotListResponse::IsInitialized() const {

  return true;
}

void SpecialBattlePlotListResponse::Swap(SpecialBattlePlotListResponse* other) {
  if (other != this) {
    plotmodel_.Swap(&other->plotmodel_);
    std::swap(storymodel_, other->storymodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattlePlotListResponse::GetTypeName() const {
  return "main.SpecialBattlePlotListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattlePlotModel::kPlotIdFieldNumber;
const int SpecialBattlePlotModel::kNameFieldNumber;
const int SpecialBattlePlotModel::kStateFieldNumber;
const int SpecialBattlePlotModel::kClosedescFieldNumber;
const int SpecialBattlePlotModel::kIconFieldNumber;
const int SpecialBattlePlotModel::kItemsFieldNumber;
const int SpecialBattlePlotModel::kCombatValueFieldNumber;
#endif  // !_MSC_VER

SpecialBattlePlotModel::SpecialBattlePlotModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattlePlotModel)
}

void SpecialBattlePlotModel::InitAsDefaultInstance() {
}

SpecialBattlePlotModel::SpecialBattlePlotModel(const SpecialBattlePlotModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattlePlotModel)
}

void SpecialBattlePlotModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  plotid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  closedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = 0;
  combatvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattlePlotModel::~SpecialBattlePlotModel() {
  // @@protoc_insertion_point(destructor:main.SpecialBattlePlotModel)
  SharedDtor();
}

void SpecialBattlePlotModel::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (closedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete closedesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattlePlotModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattlePlotModel& SpecialBattlePlotModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattlePlotModel* SpecialBattlePlotModel::default_instance_ = NULL;

SpecialBattlePlotModel* SpecialBattlePlotModel::New() const {
  return new SpecialBattlePlotModel;
}

void SpecialBattlePlotModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialBattlePlotModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(plotid_, state_);
    ZR_(icon_, combatvalue_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_closedesc()) {
      if (closedesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        closedesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattlePlotModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattlePlotModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 plotId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plotid_)));
          set_has_plotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_closedesc;
        break;
      }

      // optional string closedesc = 4;
      case 4: {
        if (tag == 34) {
         parse_closedesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closedesc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_icon;
        break;
      }

      // optional int32 icon = 5;
      case 5: {
        if (tag == 40) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .main.SpecialBattleItemModel items = 6;
      case 6: {
        if (tag == 50) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectTag(56)) goto parse_combatValue;
        break;
      }

      // optional int32 combatValue = 7;
      case 7: {
        if (tag == 56) {
         parse_combatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattlePlotModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattlePlotModel)
  return false;
#undef DO_
}

void SpecialBattlePlotModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattlePlotModel)
  // optional int32 plotId = 1;
  if (has_plotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plotid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional string closedesc = 4;
  if (has_closedesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->closedesc(), output);
  }

  // optional int32 icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->icon(), output);
  }

  // repeated .main.SpecialBattleItemModel items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->items(i), output);
  }

  // optional int32 combatValue = 7;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->combatvalue(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattlePlotModel)
}

int SpecialBattlePlotModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 plotId = 1;
    if (has_plotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plotid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string closedesc = 4;
    if (has_closedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closedesc());
    }

    // optional int32 icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional int32 combatValue = 7;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

  }
  // repeated .main.SpecialBattleItemModel items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattlePlotModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattlePlotModel*>(&from));
}

void SpecialBattlePlotModel::MergeFrom(const SpecialBattlePlotModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plotid()) {
      set_plotid(from.plotid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_closedesc()) {
      set_closedesc(from.closedesc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattlePlotModel::CopyFrom(const SpecialBattlePlotModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattlePlotModel::IsInitialized() const {

  return true;
}

void SpecialBattlePlotModel::Swap(SpecialBattlePlotModel* other) {
  if (other != this) {
    std::swap(plotid_, other->plotid_);
    std::swap(name_, other->name_);
    std::swap(state_, other->state_);
    std::swap(closedesc_, other->closedesc_);
    std::swap(icon_, other->icon_);
    items_.Swap(&other->items_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattlePlotModel::GetTypeName() const {
  return "main.SpecialBattlePlotModel";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleItemModel::kItemIdFieldNumber;
const int SpecialBattleItemModel::kItemTypeFieldNumber;
#endif  // !_MSC_VER

SpecialBattleItemModel::SpecialBattleItemModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleItemModel)
}

void SpecialBattleItemModel::InitAsDefaultInstance() {
}

SpecialBattleItemModel::SpecialBattleItemModel(const SpecialBattleItemModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleItemModel)
}

void SpecialBattleItemModel::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleItemModel::~SpecialBattleItemModel() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleItemModel)
  SharedDtor();
}

void SpecialBattleItemModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleItemModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleItemModel& SpecialBattleItemModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleItemModel* SpecialBattleItemModel::default_instance_ = NULL;

SpecialBattleItemModel* SpecialBattleItemModel::New() const {
  return new SpecialBattleItemModel;
}

void SpecialBattleItemModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialBattleItemModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, itemtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleItemModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleItemModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // optional int32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleItemModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleItemModel)
  return false;
#undef DO_
}

void SpecialBattleItemModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleItemModel)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleItemModel)
}

int SpecialBattleItemModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleItemModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleItemModel*>(&from));
}

void SpecialBattleItemModel::MergeFrom(const SpecialBattleItemModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleItemModel::CopyFrom(const SpecialBattleItemModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleItemModel::IsInitialized() const {

  return true;
}

void SpecialBattleItemModel::Swap(SpecialBattleItemModel* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleItemModel::GetTypeName() const {
  return "main.SpecialBattleItemModel";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleCheckFightRequest::kPlotIdFieldNumber;
#endif  // !_MSC_VER

SpecialBattleCheckFightRequest::SpecialBattleCheckFightRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleCheckFightRequest)
}

void SpecialBattleCheckFightRequest::InitAsDefaultInstance() {
}

SpecialBattleCheckFightRequest::SpecialBattleCheckFightRequest(const SpecialBattleCheckFightRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleCheckFightRequest)
}

void SpecialBattleCheckFightRequest::SharedCtor() {
  _cached_size_ = 0;
  plotid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleCheckFightRequest::~SpecialBattleCheckFightRequest() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleCheckFightRequest)
  SharedDtor();
}

void SpecialBattleCheckFightRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleCheckFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleCheckFightRequest& SpecialBattleCheckFightRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleCheckFightRequest* SpecialBattleCheckFightRequest::default_instance_ = NULL;

SpecialBattleCheckFightRequest* SpecialBattleCheckFightRequest::New() const {
  return new SpecialBattleCheckFightRequest;
}

void SpecialBattleCheckFightRequest::Clear() {
  plotid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleCheckFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleCheckFightRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 plotId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plotid_)));
          set_has_plotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleCheckFightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleCheckFightRequest)
  return false;
#undef DO_
}

void SpecialBattleCheckFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleCheckFightRequest)
  // optional int32 plotId = 1;
  if (has_plotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plotid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleCheckFightRequest)
}

int SpecialBattleCheckFightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 plotId = 1;
    if (has_plotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plotid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleCheckFightRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleCheckFightRequest*>(&from));
}

void SpecialBattleCheckFightRequest::MergeFrom(const SpecialBattleCheckFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plotid()) {
      set_plotid(from.plotid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleCheckFightRequest::CopyFrom(const SpecialBattleCheckFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleCheckFightRequest::IsInitialized() const {

  return true;
}

void SpecialBattleCheckFightRequest::Swap(SpecialBattleCheckFightRequest* other) {
  if (other != this) {
    std::swap(plotid_, other->plotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleCheckFightRequest::GetTypeName() const {
  return "main.SpecialBattleCheckFightRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleCheckFightResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SpecialBattleCheckFightResponse::SpecialBattleCheckFightResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleCheckFightResponse)
}

void SpecialBattleCheckFightResponse::InitAsDefaultInstance() {
}

SpecialBattleCheckFightResponse::SpecialBattleCheckFightResponse(const SpecialBattleCheckFightResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleCheckFightResponse)
}

void SpecialBattleCheckFightResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleCheckFightResponse::~SpecialBattleCheckFightResponse() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleCheckFightResponse)
  SharedDtor();
}

void SpecialBattleCheckFightResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleCheckFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleCheckFightResponse& SpecialBattleCheckFightResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleCheckFightResponse* SpecialBattleCheckFightResponse::default_instance_ = NULL;

SpecialBattleCheckFightResponse* SpecialBattleCheckFightResponse::New() const {
  return new SpecialBattleCheckFightResponse;
}

void SpecialBattleCheckFightResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleCheckFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleCheckFightResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleCheckFightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleCheckFightResponse)
  return false;
#undef DO_
}

void SpecialBattleCheckFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleCheckFightResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleCheckFightResponse)
}

int SpecialBattleCheckFightResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleCheckFightResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleCheckFightResponse*>(&from));
}

void SpecialBattleCheckFightResponse::MergeFrom(const SpecialBattleCheckFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleCheckFightResponse::CopyFrom(const SpecialBattleCheckFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleCheckFightResponse::IsInitialized() const {

  return true;
}

void SpecialBattleCheckFightResponse::Swap(SpecialBattleCheckFightResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleCheckFightResponse::GetTypeName() const {
  return "main.SpecialBattleCheckFightResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleBuyCountRequest::kStoryIdFieldNumber;
#endif  // !_MSC_VER

SpecialBattleBuyCountRequest::SpecialBattleBuyCountRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleBuyCountRequest)
}

void SpecialBattleBuyCountRequest::InitAsDefaultInstance() {
}

SpecialBattleBuyCountRequest::SpecialBattleBuyCountRequest(const SpecialBattleBuyCountRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleBuyCountRequest)
}

void SpecialBattleBuyCountRequest::SharedCtor() {
  _cached_size_ = 0;
  storyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleBuyCountRequest::~SpecialBattleBuyCountRequest() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleBuyCountRequest)
  SharedDtor();
}

void SpecialBattleBuyCountRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleBuyCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleBuyCountRequest& SpecialBattleBuyCountRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleBuyCountRequest* SpecialBattleBuyCountRequest::default_instance_ = NULL;

SpecialBattleBuyCountRequest* SpecialBattleBuyCountRequest::New() const {
  return new SpecialBattleBuyCountRequest;
}

void SpecialBattleBuyCountRequest::Clear() {
  storyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleBuyCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleBuyCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 storyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storyid_)));
          set_has_storyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleBuyCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleBuyCountRequest)
  return false;
#undef DO_
}

void SpecialBattleBuyCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleBuyCountRequest)
  // optional int32 storyId = 1;
  if (has_storyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storyid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleBuyCountRequest)
}

int SpecialBattleBuyCountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 storyId = 1;
    if (has_storyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storyid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleBuyCountRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleBuyCountRequest*>(&from));
}

void SpecialBattleBuyCountRequest::MergeFrom(const SpecialBattleBuyCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storyid()) {
      set_storyid(from.storyid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleBuyCountRequest::CopyFrom(const SpecialBattleBuyCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleBuyCountRequest::IsInitialized() const {

  return true;
}

void SpecialBattleBuyCountRequest::Swap(SpecialBattleBuyCountRequest* other) {
  if (other != this) {
    std::swap(storyid_, other->storyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleBuyCountRequest::GetTypeName() const {
  return "main.SpecialBattleBuyCountRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleBuyCountResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SpecialBattleBuyCountResponse::SpecialBattleBuyCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleBuyCountResponse)
}

void SpecialBattleBuyCountResponse::InitAsDefaultInstance() {
}

SpecialBattleBuyCountResponse::SpecialBattleBuyCountResponse(const SpecialBattleBuyCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleBuyCountResponse)
}

void SpecialBattleBuyCountResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleBuyCountResponse::~SpecialBattleBuyCountResponse() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleBuyCountResponse)
  SharedDtor();
}

void SpecialBattleBuyCountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleBuyCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleBuyCountResponse& SpecialBattleBuyCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleBuyCountResponse* SpecialBattleBuyCountResponse::default_instance_ = NULL;

SpecialBattleBuyCountResponse* SpecialBattleBuyCountResponse::New() const {
  return new SpecialBattleBuyCountResponse;
}

void SpecialBattleBuyCountResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleBuyCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleBuyCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleBuyCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleBuyCountResponse)
  return false;
#undef DO_
}

void SpecialBattleBuyCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleBuyCountResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleBuyCountResponse)
}

int SpecialBattleBuyCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleBuyCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleBuyCountResponse*>(&from));
}

void SpecialBattleBuyCountResponse::MergeFrom(const SpecialBattleBuyCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleBuyCountResponse::CopyFrom(const SpecialBattleBuyCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleBuyCountResponse::IsInitialized() const {

  return true;
}

void SpecialBattleBuyCountResponse::Swap(SpecialBattleBuyCountResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleBuyCountResponse::GetTypeName() const {
  return "main.SpecialBattleBuyCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleBuyCountEntryRequest::kStoryIdFieldNumber;
#endif  // !_MSC_VER

SpecialBattleBuyCountEntryRequest::SpecialBattleBuyCountEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleBuyCountEntryRequest)
}

void SpecialBattleBuyCountEntryRequest::InitAsDefaultInstance() {
}

SpecialBattleBuyCountEntryRequest::SpecialBattleBuyCountEntryRequest(const SpecialBattleBuyCountEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleBuyCountEntryRequest)
}

void SpecialBattleBuyCountEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  storyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleBuyCountEntryRequest::~SpecialBattleBuyCountEntryRequest() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleBuyCountEntryRequest)
  SharedDtor();
}

void SpecialBattleBuyCountEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleBuyCountEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleBuyCountEntryRequest& SpecialBattleBuyCountEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleBuyCountEntryRequest* SpecialBattleBuyCountEntryRequest::default_instance_ = NULL;

SpecialBattleBuyCountEntryRequest* SpecialBattleBuyCountEntryRequest::New() const {
  return new SpecialBattleBuyCountEntryRequest;
}

void SpecialBattleBuyCountEntryRequest::Clear() {
  storyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleBuyCountEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleBuyCountEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 storyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storyid_)));
          set_has_storyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleBuyCountEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleBuyCountEntryRequest)
  return false;
#undef DO_
}

void SpecialBattleBuyCountEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleBuyCountEntryRequest)
  // optional int32 storyId = 1;
  if (has_storyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storyid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleBuyCountEntryRequest)
}

int SpecialBattleBuyCountEntryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 storyId = 1;
    if (has_storyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storyid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleBuyCountEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleBuyCountEntryRequest*>(&from));
}

void SpecialBattleBuyCountEntryRequest::MergeFrom(const SpecialBattleBuyCountEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storyid()) {
      set_storyid(from.storyid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleBuyCountEntryRequest::CopyFrom(const SpecialBattleBuyCountEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleBuyCountEntryRequest::IsInitialized() const {

  return true;
}

void SpecialBattleBuyCountEntryRequest::Swap(SpecialBattleBuyCountEntryRequest* other) {
  if (other != this) {
    std::swap(storyid_, other->storyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleBuyCountEntryRequest::GetTypeName() const {
  return "main.SpecialBattleBuyCountEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBattleBuyCountEntryResponse::kCanBuyCountFieldNumber;
const int SpecialBattleBuyCountEntryResponse::kMaxBuyCountFieldNumber;
const int SpecialBattleBuyCountEntryResponse::kCostFieldNumber;
#endif  // !_MSC_VER

SpecialBattleBuyCountEntryResponse::SpecialBattleBuyCountEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SpecialBattleBuyCountEntryResponse)
}

void SpecialBattleBuyCountEntryResponse::InitAsDefaultInstance() {
}

SpecialBattleBuyCountEntryResponse::SpecialBattleBuyCountEntryResponse(const SpecialBattleBuyCountEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SpecialBattleBuyCountEntryResponse)
}

void SpecialBattleBuyCountEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  canbuycount_ = 0;
  maxbuycount_ = 0;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBattleBuyCountEntryResponse::~SpecialBattleBuyCountEntryResponse() {
  // @@protoc_insertion_point(destructor:main.SpecialBattleBuyCountEntryResponse)
  SharedDtor();
}

void SpecialBattleBuyCountEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpecialBattleBuyCountEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpecialBattleBuyCountEntryResponse& SpecialBattleBuyCountEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpecialBattleModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpecialBattleModule_2eproto();
#endif
  return *default_instance_;
}

SpecialBattleBuyCountEntryResponse* SpecialBattleBuyCountEntryResponse::default_instance_ = NULL;

SpecialBattleBuyCountEntryResponse* SpecialBattleBuyCountEntryResponse::New() const {
  return new SpecialBattleBuyCountEntryResponse;
}

void SpecialBattleBuyCountEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialBattleBuyCountEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(canbuycount_, cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SpecialBattleBuyCountEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SpecialBattleBuyCountEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 canBuyCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canbuycount_)));
          set_has_canbuycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxBuyCount;
        break;
      }

      // optional int32 maxBuyCount = 2;
      case 2: {
        if (tag == 16) {
         parse_maxBuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbuycount_)));
          set_has_maxbuycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional int32 cost = 3;
      case 3: {
        if (tag == 24) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SpecialBattleBuyCountEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SpecialBattleBuyCountEntryResponse)
  return false;
#undef DO_
}

void SpecialBattleBuyCountEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SpecialBattleBuyCountEntryResponse)
  // optional int32 canBuyCount = 1;
  if (has_canbuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canbuycount(), output);
  }

  // optional int32 maxBuyCount = 2;
  if (has_maxbuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxbuycount(), output);
  }

  // optional int32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SpecialBattleBuyCountEntryResponse)
}

int SpecialBattleBuyCountEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 canBuyCount = 1;
    if (has_canbuycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canbuycount());
    }

    // optional int32 maxBuyCount = 2;
    if (has_maxbuycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbuycount());
    }

    // optional int32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBattleBuyCountEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpecialBattleBuyCountEntryResponse*>(&from));
}

void SpecialBattleBuyCountEntryResponse::MergeFrom(const SpecialBattleBuyCountEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canbuycount()) {
      set_canbuycount(from.canbuycount());
    }
    if (from.has_maxbuycount()) {
      set_maxbuycount(from.maxbuycount());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SpecialBattleBuyCountEntryResponse::CopyFrom(const SpecialBattleBuyCountEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBattleBuyCountEntryResponse::IsInitialized() const {

  return true;
}

void SpecialBattleBuyCountEntryResponse::Swap(SpecialBattleBuyCountEntryResponse* other) {
  if (other != this) {
    std::swap(canbuycount_, other->canbuycount_);
    std::swap(maxbuycount_, other->maxbuycount_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpecialBattleBuyCountEntryResponse::GetTypeName() const {
  return "main.SpecialBattleBuyCountEntryResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
