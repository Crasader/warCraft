// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LotteryModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LotteryModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_LotteryModule_2eproto() {
  delete LotteryEntryRequest::default_instance_;
  delete LotteryEntryResponse::default_instance_;
  delete ScoutActivityInfoModel::default_instance_;
  delete LotteryPurchRequest::default_instance_;
  delete LotteryPurchResponse::default_instance_;
  delete Lottery9ViewItem::default_instance_;
  delete Lottery9PurchRequest::default_instance_;
  delete Lottery9PurchResponse::default_instance_;
  delete ActivityLotteryRequest::default_instance_;
  delete ActivityLotteryResponse::default_instance_;
  delete ActivityLotteryItem::default_instance_;
  delete ActivityLotteryEntryRequest::default_instance_;
  delete ActivityLotteryEntryResponse::default_instance_;
  delete TongQueLotteryDropRequest::default_instance_;
  delete TongQueLotteryDropResponse::default_instance_;
  delete LotteryRequest::default_instance_;
  delete LotteryResponse::default_instance_;
  delete TongQueRefreshRequest::default_instance_;
  delete TongQueRefreshResponse::default_instance_;
  delete TongQueYangXinRequest::default_instance_;
  delete TongQueYangXinResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LotteryModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LotteryModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_LuaActivityModule_2eproto();
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  LotteryEntryRequest::default_instance_ = new LotteryEntryRequest();
  LotteryEntryResponse::default_instance_ = new LotteryEntryResponse();
  ScoutActivityInfoModel::default_instance_ = new ScoutActivityInfoModel();
  LotteryPurchRequest::default_instance_ = new LotteryPurchRequest();
  LotteryPurchResponse::default_instance_ = new LotteryPurchResponse();
  Lottery9ViewItem::default_instance_ = new Lottery9ViewItem();
  Lottery9PurchRequest::default_instance_ = new Lottery9PurchRequest();
  Lottery9PurchResponse::default_instance_ = new Lottery9PurchResponse();
  ActivityLotteryRequest::default_instance_ = new ActivityLotteryRequest();
  ActivityLotteryResponse::default_instance_ = new ActivityLotteryResponse();
  ActivityLotteryItem::default_instance_ = new ActivityLotteryItem();
  ActivityLotteryEntryRequest::default_instance_ = new ActivityLotteryEntryRequest();
  ActivityLotteryEntryResponse::default_instance_ = new ActivityLotteryEntryResponse();
  TongQueLotteryDropRequest::default_instance_ = new TongQueLotteryDropRequest();
  TongQueLotteryDropResponse::default_instance_ = new TongQueLotteryDropResponse();
  LotteryRequest::default_instance_ = new LotteryRequest();
  LotteryResponse::default_instance_ = new LotteryResponse();
  TongQueRefreshRequest::default_instance_ = new TongQueRefreshRequest();
  TongQueRefreshResponse::default_instance_ = new TongQueRefreshResponse();
  TongQueYangXinRequest::default_instance_ = new TongQueYangXinRequest();
  TongQueYangXinResponse::default_instance_ = new TongQueYangXinResponse();
  LotteryEntryRequest::default_instance_->InitAsDefaultInstance();
  LotteryEntryResponse::default_instance_->InitAsDefaultInstance();
  ScoutActivityInfoModel::default_instance_->InitAsDefaultInstance();
  LotteryPurchRequest::default_instance_->InitAsDefaultInstance();
  LotteryPurchResponse::default_instance_->InitAsDefaultInstance();
  Lottery9ViewItem::default_instance_->InitAsDefaultInstance();
  Lottery9PurchRequest::default_instance_->InitAsDefaultInstance();
  Lottery9PurchResponse::default_instance_->InitAsDefaultInstance();
  ActivityLotteryRequest::default_instance_->InitAsDefaultInstance();
  ActivityLotteryResponse::default_instance_->InitAsDefaultInstance();
  ActivityLotteryItem::default_instance_->InitAsDefaultInstance();
  ActivityLotteryEntryRequest::default_instance_->InitAsDefaultInstance();
  ActivityLotteryEntryResponse::default_instance_->InitAsDefaultInstance();
  TongQueLotteryDropRequest::default_instance_->InitAsDefaultInstance();
  TongQueLotteryDropResponse::default_instance_->InitAsDefaultInstance();
  LotteryRequest::default_instance_->InitAsDefaultInstance();
  LotteryResponse::default_instance_->InitAsDefaultInstance();
  TongQueRefreshRequest::default_instance_->InitAsDefaultInstance();
  TongQueRefreshResponse::default_instance_->InitAsDefaultInstance();
  TongQueYangXinRequest::default_instance_->InitAsDefaultInstance();
  TongQueYangXinResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LotteryModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LotteryModule_2eproto_once_);
void protobuf_AddDesc_LotteryModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LotteryModule_2eproto_once_,
                 &protobuf_AddDesc_LotteryModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LotteryModule_2eproto {
  StaticDescriptorInitializer_LotteryModule_2eproto() {
    protobuf_AddDesc_LotteryModule_2eproto();
  }
} static_descriptor_initializer_LotteryModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LotteryEntryRequest::LotteryEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LotteryEntryRequest)
}

void LotteryEntryRequest::InitAsDefaultInstance() {
}

LotteryEntryRequest::LotteryEntryRequest(const LotteryEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LotteryEntryRequest)
}

void LotteryEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryEntryRequest::~LotteryEntryRequest() {
  // @@protoc_insertion_point(destructor:main.LotteryEntryRequest)
  SharedDtor();
}

void LotteryEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LotteryEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LotteryEntryRequest& LotteryEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

LotteryEntryRequest* LotteryEntryRequest::default_instance_ = NULL;

LotteryEntryRequest* LotteryEntryRequest::New() const {
  return new LotteryEntryRequest;
}

void LotteryEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LotteryEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LotteryEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.LotteryEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LotteryEntryRequest)
  return false;
#undef DO_
}

void LotteryEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LotteryEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LotteryEntryRequest)
}

int LotteryEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LotteryEntryRequest*>(&from));
}

void LotteryEntryRequest::MergeFrom(const LotteryEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LotteryEntryRequest::CopyFrom(const LotteryEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryEntryRequest::IsInitialized() const {

  return true;
}

void LotteryEntryRequest::Swap(LotteryEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LotteryEntryRequest::GetTypeName() const {
  return "main.LotteryEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryEntryResponse::kLegendOfficerTimeFieldNumber;
const int LotteryEntryResponse::kLegendEquipTimeFieldNumber;
const int LotteryEntryResponse::kAdvanceOfficerTimeFieldNumber;
const int LotteryEntryResponse::kAdvanceEquipTimeFieldNumber;
const int LotteryEntryResponse::kStartTimeFieldNumber;
const int LotteryEntryResponse::kEndTimeFieldNumber;
const int LotteryEntryResponse::kScoutActivityInfoModelFieldNumber;
const int LotteryEntryResponse::kLotteryNameFieldNumber;
const int LotteryEntryResponse::kActivityLotteryNameFieldNumber;
const int LotteryEntryResponse::kActivityLotteryVipLvFieldNumber;
const int LotteryEntryResponse::kIsActivityOpenFieldNumber;
#endif  // !_MSC_VER

LotteryEntryResponse::LotteryEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LotteryEntryResponse)
}

void LotteryEntryResponse::InitAsDefaultInstance() {
}

LotteryEntryResponse::LotteryEntryResponse(const LotteryEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LotteryEntryResponse)
}

void LotteryEntryResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  legendofficertime_ = 0;
  legendequiptime_ = 0;
  advanceofficertime_ = 0;
  advanceequiptime_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  lotteryname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activitylotteryname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activitylotteryviplv_ = 0;
  isactivityopen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryEntryResponse::~LotteryEntryResponse() {
  // @@protoc_insertion_point(destructor:main.LotteryEntryResponse)
  SharedDtor();
}

void LotteryEntryResponse::SharedDtor() {
  if (lotteryname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lotteryname_;
  }
  if (activitylotteryname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activitylotteryname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LotteryEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LotteryEntryResponse& LotteryEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

LotteryEntryResponse* LotteryEntryResponse::default_instance_ = NULL;

LotteryEntryResponse* LotteryEntryResponse::New() const {
  return new LotteryEntryResponse;
}

void LotteryEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(legendofficertime_, endtime_);
    if (has_lotteryname()) {
      if (lotteryname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lotteryname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(activitylotteryviplv_, isactivityopen_);
    if (has_activitylotteryname()) {
      if (activitylotteryname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activitylotteryname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  scoutactivityinfomodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LotteryEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LotteryEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 legendOfficerTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legendofficertime_)));
          set_has_legendofficertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_legendEquipTime;
        break;
      }

      // optional int32 legendEquipTime = 2;
      case 2: {
        if (tag == 16) {
         parse_legendEquipTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legendequiptime_)));
          set_has_legendequiptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_advanceOfficerTime;
        break;
      }

      // optional int32 advanceOfficerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_advanceOfficerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advanceofficertime_)));
          set_has_advanceofficertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_advanceEquipTime;
        break;
      }

      // optional int32 advanceEquipTime = 4;
      case 4: {
        if (tag == 32) {
         parse_advanceEquipTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advanceequiptime_)));
          set_has_advanceequiptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 5;
      case 5: {
        if (tag == 40) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 6;
      case 6: {
        if (tag == 48) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scoutActivityInfoModel;
        break;
      }

      // repeated .main.ScoutActivityInfoModel scoutActivityInfoModel = 7;
      case 7: {
        if (tag == 58) {
         parse_scoutActivityInfoModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scoutactivityinfomodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scoutActivityInfoModel;
        if (input->ExpectTag(66)) goto parse_lotteryName;
        break;
      }

      // optional string lotteryName = 8;
      case 8: {
        if (tag == 66) {
         parse_lotteryName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lotteryname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_activityLotteryName;
        break;
      }

      // optional string activityLotteryName = 9;
      case 9: {
        if (tag == 74) {
         parse_activityLotteryName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activitylotteryname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_activityLotteryVipLv;
        break;
      }

      // optional int32 activityLotteryVipLv = 10;
      case 10: {
        if (tag == 80) {
         parse_activityLotteryVipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitylotteryviplv_)));
          set_has_activitylotteryviplv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_isActivityOpen;
        break;
      }

      // optional int32 isActivityOpen = 11;
      case 11: {
        if (tag == 88) {
         parse_isActivityOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isactivityopen_)));
          set_has_isactivityopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LotteryEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LotteryEntryResponse)
  return false;
#undef DO_
}

void LotteryEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LotteryEntryResponse)
  // optional int32 legendOfficerTime = 1;
  if (has_legendofficertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->legendofficertime(), output);
  }

  // optional int32 legendEquipTime = 2;
  if (has_legendequiptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->legendequiptime(), output);
  }

  // optional int32 advanceOfficerTime = 3;
  if (has_advanceofficertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->advanceofficertime(), output);
  }

  // optional int32 advanceEquipTime = 4;
  if (has_advanceequiptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->advanceequiptime(), output);
  }

  // optional int64 startTime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->starttime(), output);
  }

  // optional int64 endTime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->endtime(), output);
  }

  // repeated .main.ScoutActivityInfoModel scoutActivityInfoModel = 7;
  for (int i = 0; i < this->scoutactivityinfomodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->scoutactivityinfomodel(i), output);
  }

  // optional string lotteryName = 8;
  if (has_lotteryname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lotteryname(), output);
  }

  // optional string activityLotteryName = 9;
  if (has_activitylotteryname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->activitylotteryname(), output);
  }

  // optional int32 activityLotteryVipLv = 10;
  if (has_activitylotteryviplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->activitylotteryviplv(), output);
  }

  // optional int32 isActivityOpen = 11;
  if (has_isactivityopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isactivityopen(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LotteryEntryResponse)
}

int LotteryEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 legendOfficerTime = 1;
    if (has_legendofficertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legendofficertime());
    }

    // optional int32 legendEquipTime = 2;
    if (has_legendequiptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legendequiptime());
    }

    // optional int32 advanceOfficerTime = 3;
    if (has_advanceofficertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advanceofficertime());
    }

    // optional int32 advanceEquipTime = 4;
    if (has_advanceequiptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advanceequiptime());
    }

    // optional int64 startTime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional string lotteryName = 8;
    if (has_lotteryname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lotteryname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string activityLotteryName = 9;
    if (has_activitylotteryname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activitylotteryname());
    }

    // optional int32 activityLotteryVipLv = 10;
    if (has_activitylotteryviplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitylotteryviplv());
    }

    // optional int32 isActivityOpen = 11;
    if (has_isactivityopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isactivityopen());
    }

  }
  // repeated .main.ScoutActivityInfoModel scoutActivityInfoModel = 7;
  total_size += 1 * this->scoutactivityinfomodel_size();
  for (int i = 0; i < this->scoutactivityinfomodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scoutactivityinfomodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LotteryEntryResponse*>(&from));
}

void LotteryEntryResponse::MergeFrom(const LotteryEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  scoutactivityinfomodel_.MergeFrom(from.scoutactivityinfomodel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_legendofficertime()) {
      set_legendofficertime(from.legendofficertime());
    }
    if (from.has_legendequiptime()) {
      set_legendequiptime(from.legendequiptime());
    }
    if (from.has_advanceofficertime()) {
      set_advanceofficertime(from.advanceofficertime());
    }
    if (from.has_advanceequiptime()) {
      set_advanceequiptime(from.advanceequiptime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_lotteryname()) {
      set_lotteryname(from.lotteryname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activitylotteryname()) {
      set_activitylotteryname(from.activitylotteryname());
    }
    if (from.has_activitylotteryviplv()) {
      set_activitylotteryviplv(from.activitylotteryviplv());
    }
    if (from.has_isactivityopen()) {
      set_isactivityopen(from.isactivityopen());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LotteryEntryResponse::CopyFrom(const LotteryEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryEntryResponse::IsInitialized() const {

  return true;
}

void LotteryEntryResponse::Swap(LotteryEntryResponse* other) {
  if (other != this) {
    std::swap(legendofficertime_, other->legendofficertime_);
    std::swap(legendequiptime_, other->legendequiptime_);
    std::swap(advanceofficertime_, other->advanceofficertime_);
    std::swap(advanceequiptime_, other->advanceequiptime_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    scoutactivityinfomodel_.Swap(&other->scoutactivityinfomodel_);
    std::swap(lotteryname_, other->lotteryname_);
    std::swap(activitylotteryname_, other->activitylotteryname_);
    std::swap(activitylotteryviplv_, other->activitylotteryviplv_);
    std::swap(isactivityopen_, other->isactivityopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LotteryEntryResponse::GetTypeName() const {
  return "main.LotteryEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ScoutActivityInfoModel::kSubTypeFieldNumber;
const int ScoutActivityInfoModel::kStartTimeFieldNumber;
const int ScoutActivityInfoModel::kEndTimeFieldNumber;
const int ScoutActivityInfoModel::kDescriptionFieldNumber;
#endif  // !_MSC_VER

ScoutActivityInfoModel::ScoutActivityInfoModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ScoutActivityInfoModel)
}

void ScoutActivityInfoModel::InitAsDefaultInstance() {
}

ScoutActivityInfoModel::ScoutActivityInfoModel(const ScoutActivityInfoModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ScoutActivityInfoModel)
}

void ScoutActivityInfoModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subtype_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoutActivityInfoModel::~ScoutActivityInfoModel() {
  // @@protoc_insertion_point(destructor:main.ScoutActivityInfoModel)
  SharedDtor();
}

void ScoutActivityInfoModel::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScoutActivityInfoModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScoutActivityInfoModel& ScoutActivityInfoModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

ScoutActivityInfoModel* ScoutActivityInfoModel::default_instance_ = NULL;

ScoutActivityInfoModel* ScoutActivityInfoModel::New() const {
  return new ScoutActivityInfoModel;
}

void ScoutActivityInfoModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScoutActivityInfoModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(starttime_, endtime_);
    subtype_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ScoutActivityInfoModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ScoutActivityInfoModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 subType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 2;
      case 2: {
        if (tag == 16) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (tag == 24) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ScoutActivityInfoModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ScoutActivityInfoModel)
  return false;
#undef DO_
}

void ScoutActivityInfoModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ScoutActivityInfoModel)
  // optional int32 subType = 1;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->subtype(), output);
  }

  // optional int64 startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->starttime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ScoutActivityInfoModel)
}

int ScoutActivityInfoModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 subType = 1;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional int64 startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoutActivityInfoModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScoutActivityInfoModel*>(&from));
}

void ScoutActivityInfoModel::MergeFrom(const ScoutActivityInfoModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ScoutActivityInfoModel::CopyFrom(const ScoutActivityInfoModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoutActivityInfoModel::IsInitialized() const {

  return true;
}

void ScoutActivityInfoModel::Swap(ScoutActivityInfoModel* other) {
  if (other != this) {
    std::swap(subtype_, other->subtype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScoutActivityInfoModel::GetTypeName() const {
  return "main.ScoutActivityInfoModel";
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryPurchRequest::kTypeFieldNumber;
const int LotteryPurchRequest::kIsComboFieldNumber;
#endif  // !_MSC_VER

LotteryPurchRequest::LotteryPurchRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LotteryPurchRequest)
}

void LotteryPurchRequest::InitAsDefaultInstance() {
}

LotteryPurchRequest::LotteryPurchRequest(const LotteryPurchRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LotteryPurchRequest)
}

void LotteryPurchRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  iscombo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryPurchRequest::~LotteryPurchRequest() {
  // @@protoc_insertion_point(destructor:main.LotteryPurchRequest)
  SharedDtor();
}

void LotteryPurchRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LotteryPurchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LotteryPurchRequest& LotteryPurchRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

LotteryPurchRequest* LotteryPurchRequest::default_instance_ = NULL;

LotteryPurchRequest* LotteryPurchRequest::New() const {
  return new LotteryPurchRequest;
}

void LotteryPurchRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryPurchRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, iscombo_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LotteryPurchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LotteryPurchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isCombo;
        break;
      }

      // required int32 isCombo = 2;
      case 2: {
        if (tag == 16) {
         parse_isCombo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscombo_)));
          set_has_iscombo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LotteryPurchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LotteryPurchRequest)
  return false;
#undef DO_
}

void LotteryPurchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LotteryPurchRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 isCombo = 2;
  if (has_iscombo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iscombo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LotteryPurchRequest)
}

int LotteryPurchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 isCombo = 2;
    if (has_iscombo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscombo());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryPurchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LotteryPurchRequest*>(&from));
}

void LotteryPurchRequest::MergeFrom(const LotteryPurchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_iscombo()) {
      set_iscombo(from.iscombo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LotteryPurchRequest::CopyFrom(const LotteryPurchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryPurchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LotteryPurchRequest::Swap(LotteryPurchRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(iscombo_, other->iscombo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LotteryPurchRequest::GetTypeName() const {
  return "main.LotteryPurchRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryPurchResponse::kBalanceFieldNumber;
const int LotteryPurchResponse::kOfficerCardsFieldNumber;
const int LotteryPurchResponse::kEquipmentCardsFieldNumber;
const int LotteryPurchResponse::kPropsCardsFieldNumber;
const int LotteryPurchResponse::kFragmentCardsFieldNumber;
const int LotteryPurchResponse::kUpdateTimeFieldNumber;
const int LotteryPurchResponse::kBuyPropsCardFieldNumber;
const int LotteryPurchResponse::kConsumableCardsFieldNumber;
const int LotteryPurchResponse::kMaterialItemsFieldNumber;
const int LotteryPurchResponse::kStateFieldNumber;
#endif  // !_MSC_VER

LotteryPurchResponse::LotteryPurchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LotteryPurchResponse)
}

void LotteryPurchResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buypropscard_ = const_cast< ::main::PropsCardItemProto*>(
      ::main::PropsCardItemProto::internal_default_instance());
#else
  buypropscard_ = const_cast< ::main::PropsCardItemProto*>(&::main::PropsCardItemProto::default_instance());
#endif
}

LotteryPurchResponse::LotteryPurchResponse(const LotteryPurchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LotteryPurchResponse)
}

void LotteryPurchResponse::SharedCtor() {
  _cached_size_ = 0;
  balance_ = 0;
  updatetime_ = 0;
  buypropscard_ = NULL;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryPurchResponse::~LotteryPurchResponse() {
  // @@protoc_insertion_point(destructor:main.LotteryPurchResponse)
  SharedDtor();
}

void LotteryPurchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete buypropscard_;
  }
}

void LotteryPurchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LotteryPurchResponse& LotteryPurchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

LotteryPurchResponse* LotteryPurchResponse::default_instance_ = NULL;

LotteryPurchResponse* LotteryPurchResponse::New() const {
  return new LotteryPurchResponse;
}

void LotteryPurchResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryPurchResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 97) {
    ZR_(balance_, updatetime_);
    if (has_buypropscard()) {
      if (buypropscard_ != NULL) buypropscard_->::main::PropsCardItemProto::Clear();
    }
  }
  state_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  officercards_.Clear();
  equipmentcards_.Clear();
  propscards_.Clear();
  fragmentcards_.Clear();
  consumablecards_.Clear();
  materialitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LotteryPurchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LotteryPurchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 balance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_officerCards;
        break;
      }

      // repeated .main.OfficerCardItemProto officerCards = 2;
      case 2: {
        if (tag == 18) {
         parse_officerCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_officercards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_officerCards;
        if (input->ExpectTag(26)) goto parse_equipmentCards;
        break;
      }

      // repeated .main.EquipmentCardItemProto equipmentCards = 3;
      case 3: {
        if (tag == 26) {
         parse_equipmentCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equipmentCards;
        if (input->ExpectTag(34)) goto parse_propsCards;
        break;
      }

      // repeated .main.PropsCardItemProto propsCards = 4;
      case 4: {
        if (tag == 34) {
         parse_propsCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propscards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_propsCards;
        if (input->ExpectTag(42)) goto parse_fragmentCards;
        break;
      }

      // repeated .main.OfficerFragmentCardItemProto fragmentCards = 5;
      case 5: {
        if (tag == 42) {
         parse_fragmentCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragmentcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fragmentCards;
        if (input->ExpectTag(48)) goto parse_updateTime;
        break;
      }

      // optional int32 updateTime = 6;
      case 6: {
        if (tag == 48) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_buyPropsCard;
        break;
      }

      // required .main.PropsCardItemProto buyPropsCard = 7;
      case 7: {
        if (tag == 58) {
         parse_buyPropsCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buypropscard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_consumableCards;
        break;
      }

      // repeated .main.ConsumableCardItemProto consumableCards = 8;
      case 8: {
        if (tag == 66) {
         parse_consumableCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumablecards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_consumableCards;
        if (input->ExpectTag(74)) goto parse_materialItems;
        break;
      }

      // repeated .main.MaterialItemProto materialItems = 9;
      case 9: {
        if (tag == 74) {
         parse_materialItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_materialItems;
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // optional int32 state = 10;
      case 10: {
        if (tag == 80) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LotteryPurchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LotteryPurchResponse)
  return false;
#undef DO_
}

void LotteryPurchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LotteryPurchResponse)
  // required int32 balance = 1;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->balance(), output);
  }

  // repeated .main.OfficerCardItemProto officerCards = 2;
  for (int i = 0; i < this->officercards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->officercards(i), output);
  }

  // repeated .main.EquipmentCardItemProto equipmentCards = 3;
  for (int i = 0; i < this->equipmentcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equipmentcards(i), output);
  }

  // repeated .main.PropsCardItemProto propsCards = 4;
  for (int i = 0; i < this->propscards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->propscards(i), output);
  }

  // repeated .main.OfficerFragmentCardItemProto fragmentCards = 5;
  for (int i = 0; i < this->fragmentcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->fragmentcards(i), output);
  }

  // optional int32 updateTime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->updatetime(), output);
  }

  // required .main.PropsCardItemProto buyPropsCard = 7;
  if (has_buypropscard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->buypropscard(), output);
  }

  // repeated .main.ConsumableCardItemProto consumableCards = 8;
  for (int i = 0; i < this->consumablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->consumablecards(i), output);
  }

  // repeated .main.MaterialItemProto materialItems = 9;
  for (int i = 0; i < this->materialitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->materialitems(i), output);
  }

  // optional int32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LotteryPurchResponse)
}

int LotteryPurchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 balance = 1;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance());
    }

    // optional int32 updateTime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatetime());
    }

    // required .main.PropsCardItemProto buyPropsCard = 7;
    if (has_buypropscard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buypropscard());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .main.OfficerCardItemProto officerCards = 2;
  total_size += 1 * this->officercards_size();
  for (int i = 0; i < this->officercards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->officercards(i));
  }

  // repeated .main.EquipmentCardItemProto equipmentCards = 3;
  total_size += 1 * this->equipmentcards_size();
  for (int i = 0; i < this->equipmentcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentcards(i));
  }

  // repeated .main.PropsCardItemProto propsCards = 4;
  total_size += 1 * this->propscards_size();
  for (int i = 0; i < this->propscards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propscards(i));
  }

  // repeated .main.OfficerFragmentCardItemProto fragmentCards = 5;
  total_size += 1 * this->fragmentcards_size();
  for (int i = 0; i < this->fragmentcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragmentcards(i));
  }

  // repeated .main.ConsumableCardItemProto consumableCards = 8;
  total_size += 1 * this->consumablecards_size();
  for (int i = 0; i < this->consumablecards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumablecards(i));
  }

  // repeated .main.MaterialItemProto materialItems = 9;
  total_size += 1 * this->materialitems_size();
  for (int i = 0; i < this->materialitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialitems(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryPurchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LotteryPurchResponse*>(&from));
}

void LotteryPurchResponse::MergeFrom(const LotteryPurchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  officercards_.MergeFrom(from.officercards_);
  equipmentcards_.MergeFrom(from.equipmentcards_);
  propscards_.MergeFrom(from.propscards_);
  fragmentcards_.MergeFrom(from.fragmentcards_);
  consumablecards_.MergeFrom(from.consumablecards_);
  materialitems_.MergeFrom(from.materialitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_buypropscard()) {
      mutable_buypropscard()->::main::PropsCardItemProto::MergeFrom(from.buypropscard());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LotteryPurchResponse::CopyFrom(const LotteryPurchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryPurchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  return true;
}

void LotteryPurchResponse::Swap(LotteryPurchResponse* other) {
  if (other != this) {
    std::swap(balance_, other->balance_);
    officercards_.Swap(&other->officercards_);
    equipmentcards_.Swap(&other->equipmentcards_);
    propscards_.Swap(&other->propscards_);
    fragmentcards_.Swap(&other->fragmentcards_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(buypropscard_, other->buypropscard_);
    consumablecards_.Swap(&other->consumablecards_);
    materialitems_.Swap(&other->materialitems_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LotteryPurchResponse::GetTypeName() const {
  return "main.LotteryPurchResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int Lottery9ViewItem::kItemTypeFieldNumber;
const int Lottery9ViewItem::kItemIdFieldNumber;
const int Lottery9ViewItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

Lottery9ViewItem::Lottery9ViewItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.Lottery9ViewItem)
}

void Lottery9ViewItem::InitAsDefaultInstance() {
}

Lottery9ViewItem::Lottery9ViewItem(const Lottery9ViewItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.Lottery9ViewItem)
}

void Lottery9ViewItem::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lottery9ViewItem::~Lottery9ViewItem() {
  // @@protoc_insertion_point(destructor:main.Lottery9ViewItem)
  SharedDtor();
}

void Lottery9ViewItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Lottery9ViewItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lottery9ViewItem& Lottery9ViewItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

Lottery9ViewItem* Lottery9ViewItem::default_instance_ = NULL;

Lottery9ViewItem* Lottery9ViewItem::New() const {
  return new Lottery9ViewItem;
}

void Lottery9ViewItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lottery9ViewItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemtype_, itemnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Lottery9ViewItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.Lottery9ViewItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (tag == 24) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.Lottery9ViewItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.Lottery9ViewItem)
  return false;
#undef DO_
}

void Lottery9ViewItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.Lottery9ViewItem)
  // optional int32 itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.Lottery9ViewItem)
}

int Lottery9ViewItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lottery9ViewItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lottery9ViewItem*>(&from));
}

void Lottery9ViewItem::MergeFrom(const Lottery9ViewItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Lottery9ViewItem::CopyFrom(const Lottery9ViewItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lottery9ViewItem::IsInitialized() const {

  return true;
}

void Lottery9ViewItem::Swap(Lottery9ViewItem* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Lottery9ViewItem::GetTypeName() const {
  return "main.Lottery9ViewItem";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Lottery9PurchRequest::Lottery9PurchRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.Lottery9PurchRequest)
}

void Lottery9PurchRequest::InitAsDefaultInstance() {
}

Lottery9PurchRequest::Lottery9PurchRequest(const Lottery9PurchRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.Lottery9PurchRequest)
}

void Lottery9PurchRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lottery9PurchRequest::~Lottery9PurchRequest() {
  // @@protoc_insertion_point(destructor:main.Lottery9PurchRequest)
  SharedDtor();
}

void Lottery9PurchRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Lottery9PurchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lottery9PurchRequest& Lottery9PurchRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

Lottery9PurchRequest* Lottery9PurchRequest::default_instance_ = NULL;

Lottery9PurchRequest* Lottery9PurchRequest::New() const {
  return new Lottery9PurchRequest;
}

void Lottery9PurchRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Lottery9PurchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.Lottery9PurchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.Lottery9PurchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.Lottery9PurchRequest)
  return false;
#undef DO_
}

void Lottery9PurchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.Lottery9PurchRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.Lottery9PurchRequest)
}

int Lottery9PurchRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lottery9PurchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lottery9PurchRequest*>(&from));
}

void Lottery9PurchRequest::MergeFrom(const Lottery9PurchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Lottery9PurchRequest::CopyFrom(const Lottery9PurchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lottery9PurchRequest::IsInitialized() const {

  return true;
}

void Lottery9PurchRequest::Swap(Lottery9PurchRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Lottery9PurchRequest::GetTypeName() const {
  return "main.Lottery9PurchRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int Lottery9PurchResponse::kItemTypeFieldNumber;
const int Lottery9PurchResponse::kItemIdFieldNumber;
const int Lottery9PurchResponse::kItemNumFieldNumber;
#endif  // !_MSC_VER

Lottery9PurchResponse::Lottery9PurchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.Lottery9PurchResponse)
}

void Lottery9PurchResponse::InitAsDefaultInstance() {
}

Lottery9PurchResponse::Lottery9PurchResponse(const Lottery9PurchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.Lottery9PurchResponse)
}

void Lottery9PurchResponse::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lottery9PurchResponse::~Lottery9PurchResponse() {
  // @@protoc_insertion_point(destructor:main.Lottery9PurchResponse)
  SharedDtor();
}

void Lottery9PurchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Lottery9PurchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lottery9PurchResponse& Lottery9PurchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

Lottery9PurchResponse* Lottery9PurchResponse::default_instance_ = NULL;

Lottery9PurchResponse* Lottery9PurchResponse::New() const {
  return new Lottery9PurchResponse;
}

void Lottery9PurchResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lottery9PurchResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemtype_, itemnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Lottery9PurchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.Lottery9PurchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (tag == 24) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.Lottery9PurchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.Lottery9PurchResponse)
  return false;
#undef DO_
}

void Lottery9PurchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.Lottery9PurchResponse)
  // optional int32 itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.Lottery9PurchResponse)
}

int Lottery9PurchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lottery9PurchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lottery9PurchResponse*>(&from));
}

void Lottery9PurchResponse::MergeFrom(const Lottery9PurchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Lottery9PurchResponse::CopyFrom(const Lottery9PurchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lottery9PurchResponse::IsInitialized() const {

  return true;
}

void Lottery9PurchResponse::Swap(Lottery9PurchResponse* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Lottery9PurchResponse::GetTypeName() const {
  return "main.Lottery9PurchResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityLotteryRequest::kIsComboFieldNumber;
#endif  // !_MSC_VER

ActivityLotteryRequest::ActivityLotteryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityLotteryRequest)
}

void ActivityLotteryRequest::InitAsDefaultInstance() {
}

ActivityLotteryRequest::ActivityLotteryRequest(const ActivityLotteryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityLotteryRequest)
}

void ActivityLotteryRequest::SharedCtor() {
  _cached_size_ = 0;
  iscombo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityLotteryRequest::~ActivityLotteryRequest() {
  // @@protoc_insertion_point(destructor:main.ActivityLotteryRequest)
  SharedDtor();
}

void ActivityLotteryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityLotteryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityLotteryRequest& ActivityLotteryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

ActivityLotteryRequest* ActivityLotteryRequest::default_instance_ = NULL;

ActivityLotteryRequest* ActivityLotteryRequest::New() const {
  return new ActivityLotteryRequest;
}

void ActivityLotteryRequest::Clear() {
  iscombo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityLotteryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityLotteryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isCombo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscombo_)));
          set_has_iscombo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityLotteryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityLotteryRequest)
  return false;
#undef DO_
}

void ActivityLotteryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityLotteryRequest)
  // required int32 isCombo = 1;
  if (has_iscombo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iscombo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityLotteryRequest)
}

int ActivityLotteryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isCombo = 1;
    if (has_iscombo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscombo());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityLotteryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityLotteryRequest*>(&from));
}

void ActivityLotteryRequest::MergeFrom(const ActivityLotteryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscombo()) {
      set_iscombo(from.iscombo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityLotteryRequest::CopyFrom(const ActivityLotteryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityLotteryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivityLotteryRequest::Swap(ActivityLotteryRequest* other) {
  if (other != this) {
    std::swap(iscombo_, other->iscombo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityLotteryRequest::GetTypeName() const {
  return "main.ActivityLotteryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityLotteryResponse::kOfficerCardsFieldNumber;
const int ActivityLotteryResponse::kEquipmentCardsFieldNumber;
const int ActivityLotteryResponse::kPropsCardsFieldNumber;
const int ActivityLotteryResponse::kFragmentCardsFieldNumber;
const int ActivityLotteryResponse::kConsumableCardsFieldNumber;
const int ActivityLotteryResponse::kMaterialItemsFieldNumber;
const int ActivityLotteryResponse::kOfficerFragmentFieldNumber;
const int ActivityLotteryResponse::kBuyPropsCardFieldNumber;
#endif  // !_MSC_VER

ActivityLotteryResponse::ActivityLotteryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityLotteryResponse)
}

void ActivityLotteryResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buypropscard_ = const_cast< ::main::PropsCardItemProto*>(
      ::main::PropsCardItemProto::internal_default_instance());
#else
  buypropscard_ = const_cast< ::main::PropsCardItemProto*>(&::main::PropsCardItemProto::default_instance());
#endif
}

ActivityLotteryResponse::ActivityLotteryResponse(const ActivityLotteryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityLotteryResponse)
}

void ActivityLotteryResponse::SharedCtor() {
  _cached_size_ = 0;
  buypropscard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityLotteryResponse::~ActivityLotteryResponse() {
  // @@protoc_insertion_point(destructor:main.ActivityLotteryResponse)
  SharedDtor();
}

void ActivityLotteryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete buypropscard_;
  }
}

void ActivityLotteryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityLotteryResponse& ActivityLotteryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

ActivityLotteryResponse* ActivityLotteryResponse::default_instance_ = NULL;

ActivityLotteryResponse* ActivityLotteryResponse::New() const {
  return new ActivityLotteryResponse;
}

void ActivityLotteryResponse::Clear() {
  if (has_buypropscard()) {
    if (buypropscard_ != NULL) buypropscard_->::main::PropsCardItemProto::Clear();
  }
  officercards_.Clear();
  equipmentcards_.Clear();
  propscards_.Clear();
  fragmentcards_.Clear();
  consumablecards_.Clear();
  materialitems_.Clear();
  officerfragment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityLotteryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityLotteryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.OfficerCardItemProto officerCards = 1;
      case 1: {
        if (tag == 10) {
         parse_officerCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_officercards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_officerCards;
        if (input->ExpectTag(18)) goto parse_equipmentCards;
        break;
      }

      // repeated .main.EquipmentCardItemProto equipmentCards = 2;
      case 2: {
        if (tag == 18) {
         parse_equipmentCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipmentCards;
        if (input->ExpectTag(26)) goto parse_propsCards;
        break;
      }

      // repeated .main.PropsCardItemProto propsCards = 3;
      case 3: {
        if (tag == 26) {
         parse_propsCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propscards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_propsCards;
        if (input->ExpectTag(34)) goto parse_fragmentCards;
        break;
      }

      // repeated .main.OfficerFragmentCardItemProto fragmentCards = 4;
      case 4: {
        if (tag == 34) {
         parse_fragmentCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragmentcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fragmentCards;
        if (input->ExpectTag(42)) goto parse_consumableCards;
        break;
      }

      // repeated .main.ConsumableCardItemProto consumableCards = 5;
      case 5: {
        if (tag == 42) {
         parse_consumableCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumablecards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_consumableCards;
        if (input->ExpectTag(50)) goto parse_materialItems;
        break;
      }

      // repeated .main.MaterialItemProto materialItems = 6;
      case 6: {
        if (tag == 50) {
         parse_materialItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_materialItems;
        if (input->ExpectTag(58)) goto parse_officerFragment;
        break;
      }

      // repeated .main.ActivityLotteryItem officerFragment = 7;
      case 7: {
        if (tag == 58) {
         parse_officerFragment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_officerfragment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_officerFragment;
        if (input->ExpectTag(66)) goto parse_buyPropsCard;
        break;
      }

      // required .main.PropsCardItemProto buyPropsCard = 8;
      case 8: {
        if (tag == 66) {
         parse_buyPropsCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buypropscard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityLotteryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityLotteryResponse)
  return false;
#undef DO_
}

void ActivityLotteryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityLotteryResponse)
  // repeated .main.OfficerCardItemProto officerCards = 1;
  for (int i = 0; i < this->officercards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->officercards(i), output);
  }

  // repeated .main.EquipmentCardItemProto equipmentCards = 2;
  for (int i = 0; i < this->equipmentcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equipmentcards(i), output);
  }

  // repeated .main.PropsCardItemProto propsCards = 3;
  for (int i = 0; i < this->propscards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->propscards(i), output);
  }

  // repeated .main.OfficerFragmentCardItemProto fragmentCards = 4;
  for (int i = 0; i < this->fragmentcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->fragmentcards(i), output);
  }

  // repeated .main.ConsumableCardItemProto consumableCards = 5;
  for (int i = 0; i < this->consumablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->consumablecards(i), output);
  }

  // repeated .main.MaterialItemProto materialItems = 6;
  for (int i = 0; i < this->materialitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->materialitems(i), output);
  }

  // repeated .main.ActivityLotteryItem officerFragment = 7;
  for (int i = 0; i < this->officerfragment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->officerfragment(i), output);
  }

  // required .main.PropsCardItemProto buyPropsCard = 8;
  if (has_buypropscard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->buypropscard(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityLotteryResponse)
}

int ActivityLotteryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    // required .main.PropsCardItemProto buyPropsCard = 8;
    if (has_buypropscard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buypropscard());
    }

  }
  // repeated .main.OfficerCardItemProto officerCards = 1;
  total_size += 1 * this->officercards_size();
  for (int i = 0; i < this->officercards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->officercards(i));
  }

  // repeated .main.EquipmentCardItemProto equipmentCards = 2;
  total_size += 1 * this->equipmentcards_size();
  for (int i = 0; i < this->equipmentcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentcards(i));
  }

  // repeated .main.PropsCardItemProto propsCards = 3;
  total_size += 1 * this->propscards_size();
  for (int i = 0; i < this->propscards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propscards(i));
  }

  // repeated .main.OfficerFragmentCardItemProto fragmentCards = 4;
  total_size += 1 * this->fragmentcards_size();
  for (int i = 0; i < this->fragmentcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragmentcards(i));
  }

  // repeated .main.ConsumableCardItemProto consumableCards = 5;
  total_size += 1 * this->consumablecards_size();
  for (int i = 0; i < this->consumablecards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumablecards(i));
  }

  // repeated .main.MaterialItemProto materialItems = 6;
  total_size += 1 * this->materialitems_size();
  for (int i = 0; i < this->materialitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialitems(i));
  }

  // repeated .main.ActivityLotteryItem officerFragment = 7;
  total_size += 1 * this->officerfragment_size();
  for (int i = 0; i < this->officerfragment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->officerfragment(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityLotteryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityLotteryResponse*>(&from));
}

void ActivityLotteryResponse::MergeFrom(const ActivityLotteryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  officercards_.MergeFrom(from.officercards_);
  equipmentcards_.MergeFrom(from.equipmentcards_);
  propscards_.MergeFrom(from.propscards_);
  fragmentcards_.MergeFrom(from.fragmentcards_);
  consumablecards_.MergeFrom(from.consumablecards_);
  materialitems_.MergeFrom(from.materialitems_);
  officerfragment_.MergeFrom(from.officerfragment_);
  if (from._has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    if (from.has_buypropscard()) {
      mutable_buypropscard()->::main::PropsCardItemProto::MergeFrom(from.buypropscard());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityLotteryResponse::CopyFrom(const ActivityLotteryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityLotteryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;

  return true;
}

void ActivityLotteryResponse::Swap(ActivityLotteryResponse* other) {
  if (other != this) {
    officercards_.Swap(&other->officercards_);
    equipmentcards_.Swap(&other->equipmentcards_);
    propscards_.Swap(&other->propscards_);
    fragmentcards_.Swap(&other->fragmentcards_);
    consumablecards_.Swap(&other->consumablecards_);
    materialitems_.Swap(&other->materialitems_);
    officerfragment_.Swap(&other->officerfragment_);
    std::swap(buypropscard_, other->buypropscard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityLotteryResponse::GetTypeName() const {
  return "main.ActivityLotteryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityLotteryItem::kTypeFieldNumber;
const int ActivityLotteryItem::kItemIdFieldNumber;
const int ActivityLotteryItem::kNumFieldNumber;
const int ActivityLotteryItem::kLordSkillIdFieldNumber;
#endif  // !_MSC_VER

ActivityLotteryItem::ActivityLotteryItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityLotteryItem)
}

void ActivityLotteryItem::InitAsDefaultInstance() {
}

ActivityLotteryItem::ActivityLotteryItem(const ActivityLotteryItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityLotteryItem)
}

void ActivityLotteryItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  itemid_ = 0;
  num_ = 0;
  lordskillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityLotteryItem::~ActivityLotteryItem() {
  // @@protoc_insertion_point(destructor:main.ActivityLotteryItem)
  SharedDtor();
}

void ActivityLotteryItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityLotteryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityLotteryItem& ActivityLotteryItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

ActivityLotteryItem* ActivityLotteryItem::default_instance_ = NULL;

ActivityLotteryItem* ActivityLotteryItem::New() const {
  return new ActivityLotteryItem;
}

void ActivityLotteryItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityLotteryItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, lordskillid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityLotteryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityLotteryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lordSkillId;
        break;
      }

      // optional int32 lordSkillId = 4;
      case 4: {
        if (tag == 32) {
         parse_lordSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillid_)));
          set_has_lordskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityLotteryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityLotteryItem)
  return false;
#undef DO_
}

void ActivityLotteryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityLotteryItem)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 lordSkillId = 4;
  if (has_lordskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lordskillid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityLotteryItem)
}

int ActivityLotteryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 lordSkillId = 4;
    if (has_lordskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityLotteryItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityLotteryItem*>(&from));
}

void ActivityLotteryItem::MergeFrom(const ActivityLotteryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_lordskillid()) {
      set_lordskillid(from.lordskillid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityLotteryItem::CopyFrom(const ActivityLotteryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityLotteryItem::IsInitialized() const {

  return true;
}

void ActivityLotteryItem::Swap(ActivityLotteryItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(lordskillid_, other->lordskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityLotteryItem::GetTypeName() const {
  return "main.ActivityLotteryItem";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActivityLotteryEntryRequest::ActivityLotteryEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityLotteryEntryRequest)
}

void ActivityLotteryEntryRequest::InitAsDefaultInstance() {
}

ActivityLotteryEntryRequest::ActivityLotteryEntryRequest(const ActivityLotteryEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityLotteryEntryRequest)
}

void ActivityLotteryEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityLotteryEntryRequest::~ActivityLotteryEntryRequest() {
  // @@protoc_insertion_point(destructor:main.ActivityLotteryEntryRequest)
  SharedDtor();
}

void ActivityLotteryEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityLotteryEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityLotteryEntryRequest& ActivityLotteryEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

ActivityLotteryEntryRequest* ActivityLotteryEntryRequest::default_instance_ = NULL;

ActivityLotteryEntryRequest* ActivityLotteryEntryRequest::New() const {
  return new ActivityLotteryEntryRequest;
}

void ActivityLotteryEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityLotteryEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityLotteryEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityLotteryEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityLotteryEntryRequest)
  return false;
#undef DO_
}

void ActivityLotteryEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityLotteryEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityLotteryEntryRequest)
}

int ActivityLotteryEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityLotteryEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityLotteryEntryRequest*>(&from));
}

void ActivityLotteryEntryRequest::MergeFrom(const ActivityLotteryEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityLotteryEntryRequest::CopyFrom(const ActivityLotteryEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityLotteryEntryRequest::IsInitialized() const {

  return true;
}

void ActivityLotteryEntryRequest::Swap(ActivityLotteryEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityLotteryEntryRequest::GetTypeName() const {
  return "main.ActivityLotteryEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityLotteryEntryResponse::kSingleFieldNumber;
const int ActivityLotteryEntryResponse::kComboFieldNumber;
const int ActivityLotteryEntryResponse::kPlistIdFieldNumber;
#endif  // !_MSC_VER

ActivityLotteryEntryResponse::ActivityLotteryEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActivityLotteryEntryResponse)
}

void ActivityLotteryEntryResponse::InitAsDefaultInstance() {
}

ActivityLotteryEntryResponse::ActivityLotteryEntryResponse(const ActivityLotteryEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActivityLotteryEntryResponse)
}

void ActivityLotteryEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  single_ = 0;
  combo_ = 0;
  plistid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityLotteryEntryResponse::~ActivityLotteryEntryResponse() {
  // @@protoc_insertion_point(destructor:main.ActivityLotteryEntryResponse)
  SharedDtor();
}

void ActivityLotteryEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActivityLotteryEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityLotteryEntryResponse& ActivityLotteryEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

ActivityLotteryEntryResponse* ActivityLotteryEntryResponse::default_instance_ = NULL;

ActivityLotteryEntryResponse* ActivityLotteryEntryResponse::New() const {
  return new ActivityLotteryEntryResponse;
}

void ActivityLotteryEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityLotteryEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(single_, plistid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActivityLotteryEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActivityLotteryEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 single = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_)));
          set_has_single();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_combo;
        break;
      }

      // optional int32 combo = 2;
      case 2: {
        if (tag == 16) {
         parse_combo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_)));
          set_has_combo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_plistId;
        break;
      }

      // optional int32 plistId = 3;
      case 3: {
        if (tag == 24) {
         parse_plistId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plistid_)));
          set_has_plistid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActivityLotteryEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActivityLotteryEntryResponse)
  return false;
#undef DO_
}

void ActivityLotteryEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActivityLotteryEntryResponse)
  // optional int32 single = 1;
  if (has_single()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->single(), output);
  }

  // optional int32 combo = 2;
  if (has_combo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->combo(), output);
  }

  // optional int32 plistId = 3;
  if (has_plistid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->plistid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActivityLotteryEntryResponse)
}

int ActivityLotteryEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 single = 1;
    if (has_single()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single());
    }

    // optional int32 combo = 2;
    if (has_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo());
    }

    // optional int32 plistId = 3;
    if (has_plistid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plistid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityLotteryEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityLotteryEntryResponse*>(&from));
}

void ActivityLotteryEntryResponse::MergeFrom(const ActivityLotteryEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_single()) {
      set_single(from.single());
    }
    if (from.has_combo()) {
      set_combo(from.combo());
    }
    if (from.has_plistid()) {
      set_plistid(from.plistid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActivityLotteryEntryResponse::CopyFrom(const ActivityLotteryEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityLotteryEntryResponse::IsInitialized() const {

  return true;
}

void ActivityLotteryEntryResponse::Swap(ActivityLotteryEntryResponse* other) {
  if (other != this) {
    std::swap(single_, other->single_);
    std::swap(combo_, other->combo_);
    std::swap(plistid_, other->plistid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActivityLotteryEntryResponse::GetTypeName() const {
  return "main.ActivityLotteryEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TongQueLotteryDropRequest::TongQueLotteryDropRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TongQueLotteryDropRequest)
}

void TongQueLotteryDropRequest::InitAsDefaultInstance() {
}

TongQueLotteryDropRequest::TongQueLotteryDropRequest(const TongQueLotteryDropRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TongQueLotteryDropRequest)
}

void TongQueLotteryDropRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongQueLotteryDropRequest::~TongQueLotteryDropRequest() {
  // @@protoc_insertion_point(destructor:main.TongQueLotteryDropRequest)
  SharedDtor();
}

void TongQueLotteryDropRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TongQueLotteryDropRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TongQueLotteryDropRequest& TongQueLotteryDropRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

TongQueLotteryDropRequest* TongQueLotteryDropRequest::default_instance_ = NULL;

TongQueLotteryDropRequest* TongQueLotteryDropRequest::New() const {
  return new TongQueLotteryDropRequest;
}

void TongQueLotteryDropRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TongQueLotteryDropRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TongQueLotteryDropRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.TongQueLotteryDropRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TongQueLotteryDropRequest)
  return false;
#undef DO_
}

void TongQueLotteryDropRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TongQueLotteryDropRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TongQueLotteryDropRequest)
}

int TongQueLotteryDropRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongQueLotteryDropRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TongQueLotteryDropRequest*>(&from));
}

void TongQueLotteryDropRequest::MergeFrom(const TongQueLotteryDropRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TongQueLotteryDropRequest::CopyFrom(const TongQueLotteryDropRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongQueLotteryDropRequest::IsInitialized() const {

  return true;
}

void TongQueLotteryDropRequest::Swap(TongQueLotteryDropRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TongQueLotteryDropRequest::GetTypeName() const {
  return "main.TongQueLotteryDropRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int TongQueLotteryDropResponse::kItemListFieldNumber;
const int TongQueLotteryDropResponse::kSpendMedalFieldNumber;
const int TongQueLotteryDropResponse::kSpendGoldFieldNumber;
const int TongQueLotteryDropResponse::kMedalFieldNumber;
const int TongQueLotteryDropResponse::kSpendCoinsFieldNumber;
const int TongQueLotteryDropResponse::kRefreshTimeFieldNumber;
const int TongQueLotteryDropResponse::kBlessValueFieldNumber;
const int TongQueLotteryDropResponse::kRewardInfoFieldNumber;
const int TongQueLotteryDropResponse::kIsHideFieldNumber;
#endif  // !_MSC_VER

TongQueLotteryDropResponse::TongQueLotteryDropResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TongQueLotteryDropResponse)
}

void TongQueLotteryDropResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rewardinfo_ = const_cast< ::main::ItemInfo*>(
      ::main::ItemInfo::internal_default_instance());
#else
  rewardinfo_ = const_cast< ::main::ItemInfo*>(&::main::ItemInfo::default_instance());
#endif
}

TongQueLotteryDropResponse::TongQueLotteryDropResponse(const TongQueLotteryDropResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TongQueLotteryDropResponse)
}

void TongQueLotteryDropResponse::SharedCtor() {
  _cached_size_ = 0;
  spendmedal_ = 0;
  spendgold_ = 0;
  medal_ = 0;
  spendcoins_ = 0;
  refreshtime_ = 0;
  blessvalue_ = 0;
  rewardinfo_ = NULL;
  ishide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongQueLotteryDropResponse::~TongQueLotteryDropResponse() {
  // @@protoc_insertion_point(destructor:main.TongQueLotteryDropResponse)
  SharedDtor();
}

void TongQueLotteryDropResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rewardinfo_;
  }
}

void TongQueLotteryDropResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TongQueLotteryDropResponse& TongQueLotteryDropResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

TongQueLotteryDropResponse* TongQueLotteryDropResponse::default_instance_ = NULL;

TongQueLotteryDropResponse* TongQueLotteryDropResponse::New() const {
  return new TongQueLotteryDropResponse;
}

void TongQueLotteryDropResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TongQueLotteryDropResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(spendmedal_, blessvalue_);
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::main::ItemInfo::Clear();
    }
  }
  ishide_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TongQueLotteryDropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TongQueLotteryDropResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.ItemInfo itemList = 1;
      case 1: {
        if (tag == 10) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_itemList;
        if (input->ExpectTag(16)) goto parse_spendMedal;
        break;
      }

      // optional int32 spendMedal = 2;
      case 2: {
        if (tag == 16) {
         parse_spendMedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendmedal_)));
          set_has_spendmedal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_spendGold;
        break;
      }

      // optional int32 spendGold = 3;
      case 3: {
        if (tag == 24) {
         parse_spendGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendgold_)));
          set_has_spendgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_medal;
        break;
      }

      // optional int32 medal = 4;
      case 4: {
        if (tag == 32) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_spendCoins;
        break;
      }

      // optional int32 spendCoins = 5;
      case 5: {
        if (tag == 40) {
         parse_spendCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendcoins_)));
          set_has_spendcoins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_refreshTime;
        break;
      }

      // optional int32 refreshTime = 6;
      case 6: {
        if (tag == 48) {
         parse_refreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_blessValue;
        break;
      }

      // optional int32 blessValue = 7;
      case 7: {
        if (tag == 56) {
         parse_blessValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessvalue_)));
          set_has_blessvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rewardInfo;
        break;
      }

      // optional .main.ItemInfo rewardInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_rewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isHide;
        break;
      }

      // required sint32 isHide = 9;
      case 9: {
        if (tag == 72) {
         parse_isHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TongQueLotteryDropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TongQueLotteryDropResponse)
  return false;
#undef DO_
}

void TongQueLotteryDropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TongQueLotteryDropResponse)
  // repeated .main.ItemInfo itemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->itemlist(i), output);
  }

  // optional int32 spendMedal = 2;
  if (has_spendmedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spendmedal(), output);
  }

  // optional int32 spendGold = 3;
  if (has_spendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spendgold(), output);
  }

  // optional int32 medal = 4;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->medal(), output);
  }

  // optional int32 spendCoins = 5;
  if (has_spendcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->spendcoins(), output);
  }

  // optional int32 refreshTime = 6;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->refreshtime(), output);
  }

  // optional int32 blessValue = 7;
  if (has_blessvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->blessvalue(), output);
  }

  // optional .main.ItemInfo rewardInfo = 8;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->rewardinfo(), output);
  }

  // required sint32 isHide = 9;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->ishide(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TongQueLotteryDropResponse)
}

int TongQueLotteryDropResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 spendMedal = 2;
    if (has_spendmedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendmedal());
    }

    // optional int32 spendGold = 3;
    if (has_spendgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendgold());
    }

    // optional int32 medal = 4;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medal());
    }

    // optional int32 spendCoins = 5;
    if (has_spendcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendcoins());
    }

    // optional int32 refreshTime = 6;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshtime());
    }

    // optional int32 blessValue = 7;
    if (has_blessvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessvalue());
    }

    // optional .main.ItemInfo rewardInfo = 8;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint32 isHide = 9;
    if (has_ishide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ishide());
    }

  }
  // repeated .main.ItemInfo itemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongQueLotteryDropResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TongQueLotteryDropResponse*>(&from));
}

void TongQueLotteryDropResponse::MergeFrom(const TongQueLotteryDropResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_spendmedal()) {
      set_spendmedal(from.spendmedal());
    }
    if (from.has_spendgold()) {
      set_spendgold(from.spendgold());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
    if (from.has_spendcoins()) {
      set_spendcoins(from.spendcoins());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_blessvalue()) {
      set_blessvalue(from.blessvalue());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::main::ItemInfo::MergeFrom(from.rewardinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TongQueLotteryDropResponse::CopyFrom(const TongQueLotteryDropResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongQueLotteryDropResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;

  return true;
}

void TongQueLotteryDropResponse::Swap(TongQueLotteryDropResponse* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    std::swap(spendmedal_, other->spendmedal_);
    std::swap(spendgold_, other->spendgold_);
    std::swap(medal_, other->medal_);
    std::swap(spendcoins_, other->spendcoins_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(blessvalue_, other->blessvalue_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(ishide_, other->ishide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TongQueLotteryDropResponse::GetTypeName() const {
  return "main.TongQueLotteryDropResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LotteryRequest::LotteryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LotteryRequest)
}

void LotteryRequest::InitAsDefaultInstance() {
}

LotteryRequest::LotteryRequest(const LotteryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LotteryRequest)
}

void LotteryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryRequest::~LotteryRequest() {
  // @@protoc_insertion_point(destructor:main.LotteryRequest)
  SharedDtor();
}

void LotteryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LotteryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LotteryRequest& LotteryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

LotteryRequest* LotteryRequest::default_instance_ = NULL;

LotteryRequest* LotteryRequest::New() const {
  return new LotteryRequest;
}

void LotteryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LotteryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LotteryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.LotteryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LotteryRequest)
  return false;
#undef DO_
}

void LotteryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LotteryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LotteryRequest)
}

int LotteryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LotteryRequest*>(&from));
}

void LotteryRequest::MergeFrom(const LotteryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LotteryRequest::CopyFrom(const LotteryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryRequest::IsInitialized() const {

  return true;
}

void LotteryRequest::Swap(LotteryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LotteryRequest::GetTypeName() const {
  return "main.LotteryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryResponse::kStateFieldNumber;
const int LotteryResponse::kIdFieldNumber;
const int LotteryResponse::kMedalFieldNumber;
const int LotteryResponse::kBlessValueFieldNumber;
const int LotteryResponse::kSpendMedalFieldNumber;
const int LotteryResponse::kSpendGoldFieldNumber;
#endif  // !_MSC_VER

LotteryResponse::LotteryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LotteryResponse)
}

void LotteryResponse::InitAsDefaultInstance() {
}

LotteryResponse::LotteryResponse(const LotteryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LotteryResponse)
}

void LotteryResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  id_ = 0;
  medal_ = 0;
  blessvalue_ = 0;
  spendmedal_ = 0;
  spendgold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryResponse::~LotteryResponse() {
  // @@protoc_insertion_point(destructor:main.LotteryResponse)
  SharedDtor();
}

void LotteryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LotteryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LotteryResponse& LotteryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

LotteryResponse* LotteryResponse::default_instance_ = NULL;

LotteryResponse* LotteryResponse::New() const {
  return new LotteryResponse;
}

void LotteryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(state_, spendgold_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LotteryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LotteryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_medal;
        break;
      }

      // optional int32 medal = 3;
      case 3: {
        if (tag == 24) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blessValue;
        break;
      }

      // optional int32 blessValue = 4;
      case 4: {
        if (tag == 32) {
         parse_blessValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessvalue_)));
          set_has_blessvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_spendMedal;
        break;
      }

      // optional int32 spendMedal = 5;
      case 5: {
        if (tag == 40) {
         parse_spendMedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendmedal_)));
          set_has_spendmedal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_spendGold;
        break;
      }

      // optional int32 spendGold = 6;
      case 6: {
        if (tag == 48) {
         parse_spendGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendgold_)));
          set_has_spendgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LotteryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LotteryResponse)
  return false;
#undef DO_
}

void LotteryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LotteryResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 medal = 3;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->medal(), output);
  }

  // optional int32 blessValue = 4;
  if (has_blessvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blessvalue(), output);
  }

  // optional int32 spendMedal = 5;
  if (has_spendmedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->spendmedal(), output);
  }

  // optional int32 spendGold = 6;
  if (has_spendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->spendgold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LotteryResponse)
}

int LotteryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 medal = 3;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medal());
    }

    // optional int32 blessValue = 4;
    if (has_blessvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessvalue());
    }

    // optional int32 spendMedal = 5;
    if (has_spendmedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendmedal());
    }

    // optional int32 spendGold = 6;
    if (has_spendgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendgold());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LotteryResponse*>(&from));
}

void LotteryResponse::MergeFrom(const LotteryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
    if (from.has_blessvalue()) {
      set_blessvalue(from.blessvalue());
    }
    if (from.has_spendmedal()) {
      set_spendmedal(from.spendmedal());
    }
    if (from.has_spendgold()) {
      set_spendgold(from.spendgold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LotteryResponse::CopyFrom(const LotteryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryResponse::IsInitialized() const {

  return true;
}

void LotteryResponse::Swap(LotteryResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(id_, other->id_);
    std::swap(medal_, other->medal_);
    std::swap(blessvalue_, other->blessvalue_);
    std::swap(spendmedal_, other->spendmedal_);
    std::swap(spendgold_, other->spendgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LotteryResponse::GetTypeName() const {
  return "main.LotteryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int TongQueRefreshRequest::kSignalFieldNumber;
#endif  // !_MSC_VER

TongQueRefreshRequest::TongQueRefreshRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TongQueRefreshRequest)
}

void TongQueRefreshRequest::InitAsDefaultInstance() {
}

TongQueRefreshRequest::TongQueRefreshRequest(const TongQueRefreshRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TongQueRefreshRequest)
}

void TongQueRefreshRequest::SharedCtor() {
  _cached_size_ = 0;
  signal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongQueRefreshRequest::~TongQueRefreshRequest() {
  // @@protoc_insertion_point(destructor:main.TongQueRefreshRequest)
  SharedDtor();
}

void TongQueRefreshRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TongQueRefreshRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TongQueRefreshRequest& TongQueRefreshRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

TongQueRefreshRequest* TongQueRefreshRequest::default_instance_ = NULL;

TongQueRefreshRequest* TongQueRefreshRequest::New() const {
  return new TongQueRefreshRequest;
}

void TongQueRefreshRequest::Clear() {
  signal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TongQueRefreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TongQueRefreshRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 signal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_)));
          set_has_signal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TongQueRefreshRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TongQueRefreshRequest)
  return false;
#undef DO_
}

void TongQueRefreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TongQueRefreshRequest)
  // optional int32 signal = 1;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->signal(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TongQueRefreshRequest)
}

int TongQueRefreshRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 signal = 1;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongQueRefreshRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TongQueRefreshRequest*>(&from));
}

void TongQueRefreshRequest::MergeFrom(const TongQueRefreshRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signal()) {
      set_signal(from.signal());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TongQueRefreshRequest::CopyFrom(const TongQueRefreshRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongQueRefreshRequest::IsInitialized() const {

  return true;
}

void TongQueRefreshRequest::Swap(TongQueRefreshRequest* other) {
  if (other != this) {
    std::swap(signal_, other->signal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TongQueRefreshRequest::GetTypeName() const {
  return "main.TongQueRefreshRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int TongQueRefreshResponse::kItemListFieldNumber;
const int TongQueRefreshResponse::kSpendCoinsFieldNumber;
const int TongQueRefreshResponse::kSpendMedalFieldNumber;
const int TongQueRefreshResponse::kSpendGoldFieldNumber;
#endif  // !_MSC_VER

TongQueRefreshResponse::TongQueRefreshResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TongQueRefreshResponse)
}

void TongQueRefreshResponse::InitAsDefaultInstance() {
}

TongQueRefreshResponse::TongQueRefreshResponse(const TongQueRefreshResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TongQueRefreshResponse)
}

void TongQueRefreshResponse::SharedCtor() {
  _cached_size_ = 0;
  spendcoins_ = 0;
  spendmedal_ = 0;
  spendgold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongQueRefreshResponse::~TongQueRefreshResponse() {
  // @@protoc_insertion_point(destructor:main.TongQueRefreshResponse)
  SharedDtor();
}

void TongQueRefreshResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TongQueRefreshResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TongQueRefreshResponse& TongQueRefreshResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

TongQueRefreshResponse* TongQueRefreshResponse::default_instance_ = NULL;

TongQueRefreshResponse* TongQueRefreshResponse::New() const {
  return new TongQueRefreshResponse;
}

void TongQueRefreshResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TongQueRefreshResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(spendcoins_, spendgold_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TongQueRefreshResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TongQueRefreshResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.ItemInfo itemList = 1;
      case 1: {
        if (tag == 10) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_itemList;
        if (input->ExpectTag(16)) goto parse_spendCoins;
        break;
      }

      // optional int32 spendCoins = 2;
      case 2: {
        if (tag == 16) {
         parse_spendCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendcoins_)));
          set_has_spendcoins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_spendMedal;
        break;
      }

      // optional int32 spendMedal = 3;
      case 3: {
        if (tag == 24) {
         parse_spendMedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendmedal_)));
          set_has_spendmedal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_spendGold;
        break;
      }

      // optional int32 spendGold = 4;
      case 4: {
        if (tag == 32) {
         parse_spendGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendgold_)));
          set_has_spendgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TongQueRefreshResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TongQueRefreshResponse)
  return false;
#undef DO_
}

void TongQueRefreshResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TongQueRefreshResponse)
  // repeated .main.ItemInfo itemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->itemlist(i), output);
  }

  // optional int32 spendCoins = 2;
  if (has_spendcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spendcoins(), output);
  }

  // optional int32 spendMedal = 3;
  if (has_spendmedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spendmedal(), output);
  }

  // optional int32 spendGold = 4;
  if (has_spendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->spendgold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TongQueRefreshResponse)
}

int TongQueRefreshResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 spendCoins = 2;
    if (has_spendcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendcoins());
    }

    // optional int32 spendMedal = 3;
    if (has_spendmedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendmedal());
    }

    // optional int32 spendGold = 4;
    if (has_spendgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendgold());
    }

  }
  // repeated .main.ItemInfo itemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongQueRefreshResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TongQueRefreshResponse*>(&from));
}

void TongQueRefreshResponse::MergeFrom(const TongQueRefreshResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_spendcoins()) {
      set_spendcoins(from.spendcoins());
    }
    if (from.has_spendmedal()) {
      set_spendmedal(from.spendmedal());
    }
    if (from.has_spendgold()) {
      set_spendgold(from.spendgold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TongQueRefreshResponse::CopyFrom(const TongQueRefreshResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongQueRefreshResponse::IsInitialized() const {

  return true;
}

void TongQueRefreshResponse::Swap(TongQueRefreshResponse* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    std::swap(spendcoins_, other->spendcoins_);
    std::swap(spendmedal_, other->spendmedal_);
    std::swap(spendgold_, other->spendgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TongQueRefreshResponse::GetTypeName() const {
  return "main.TongQueRefreshResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TongQueYangXinRequest::TongQueYangXinRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TongQueYangXinRequest)
}

void TongQueYangXinRequest::InitAsDefaultInstance() {
}

TongQueYangXinRequest::TongQueYangXinRequest(const TongQueYangXinRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TongQueYangXinRequest)
}

void TongQueYangXinRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongQueYangXinRequest::~TongQueYangXinRequest() {
  // @@protoc_insertion_point(destructor:main.TongQueYangXinRequest)
  SharedDtor();
}

void TongQueYangXinRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TongQueYangXinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TongQueYangXinRequest& TongQueYangXinRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

TongQueYangXinRequest* TongQueYangXinRequest::default_instance_ = NULL;

TongQueYangXinRequest* TongQueYangXinRequest::New() const {
  return new TongQueYangXinRequest;
}

void TongQueYangXinRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TongQueYangXinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TongQueYangXinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.TongQueYangXinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TongQueYangXinRequest)
  return false;
#undef DO_
}

void TongQueYangXinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TongQueYangXinRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TongQueYangXinRequest)
}

int TongQueYangXinRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongQueYangXinRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TongQueYangXinRequest*>(&from));
}

void TongQueYangXinRequest::MergeFrom(const TongQueYangXinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TongQueYangXinRequest::CopyFrom(const TongQueYangXinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongQueYangXinRequest::IsInitialized() const {

  return true;
}

void TongQueYangXinRequest::Swap(TongQueYangXinRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TongQueYangXinRequest::GetTypeName() const {
  return "main.TongQueYangXinRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int TongQueYangXinResponse::kStateFieldNumber;
const int TongQueYangXinResponse::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

TongQueYangXinResponse::TongQueYangXinResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TongQueYangXinResponse)
}

void TongQueYangXinResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rewardinfo_ = const_cast< ::main::ItemInfo*>(
      ::main::ItemInfo::internal_default_instance());
#else
  rewardinfo_ = const_cast< ::main::ItemInfo*>(&::main::ItemInfo::default_instance());
#endif
}

TongQueYangXinResponse::TongQueYangXinResponse(const TongQueYangXinResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TongQueYangXinResponse)
}

void TongQueYangXinResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TongQueYangXinResponse::~TongQueYangXinResponse() {
  // @@protoc_insertion_point(destructor:main.TongQueYangXinResponse)
  SharedDtor();
}

void TongQueYangXinResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rewardinfo_;
  }
}

void TongQueYangXinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TongQueYangXinResponse& TongQueYangXinResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LotteryModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LotteryModule_2eproto();
#endif
  return *default_instance_;
}

TongQueYangXinResponse* TongQueYangXinResponse::default_instance_ = NULL;

TongQueYangXinResponse* TongQueYangXinResponse::New() const {
  return new TongQueYangXinResponse;
}

void TongQueYangXinResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::main::ItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TongQueYangXinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TongQueYangXinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewardInfo;
        break;
      }

      // optional .main.ItemInfo rewardInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_rewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TongQueYangXinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TongQueYangXinResponse)
  return false;
#undef DO_
}

void TongQueYangXinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TongQueYangXinResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.ItemInfo rewardInfo = 2;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rewardinfo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TongQueYangXinResponse)
}

int TongQueYangXinResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.ItemInfo rewardInfo = 2;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TongQueYangXinResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TongQueYangXinResponse*>(&from));
}

void TongQueYangXinResponse::MergeFrom(const TongQueYangXinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::main::ItemInfo::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TongQueYangXinResponse::CopyFrom(const TongQueYangXinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TongQueYangXinResponse::IsInitialized() const {

  return true;
}

void TongQueYangXinResponse::Swap(TongQueYangXinResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TongQueYangXinResponse::GetTypeName() const {
  return "main.TongQueYangXinResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
