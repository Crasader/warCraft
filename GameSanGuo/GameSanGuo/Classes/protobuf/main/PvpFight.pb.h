// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpFight.proto

#ifndef PROTOBUF_PvpFight_2eproto__INCLUDED
#define PROTOBUF_PvpFight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "ItemModule.pb.h"
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PvpFight_2eproto();
void protobuf_AssignDesc_PvpFight_2eproto();
void protobuf_ShutdownFile_PvpFight_2eproto();

class PvpEntryRequest;
class PvpEntryResponse;
class PvpTopRequest;
class PvpTopResponse;
class PvpTopMyLocalRequest;
class PvpTopMyLocalResponse;
class TopPlayerMessage;
class PvpApplyRequest;
class PvpApplyResponse;
class CheckReadyResponse;
class PvpExitApplyRequest;
class PvpExitApplyResponse;
class PvpGetReadyRequest;
class PvpGetReadyResponse;
class PvpMatchingResponse;
class PvpOfficerConfig;
class PvpShopListRequest;
class PvpShopListResponse;
class PvpShopItem;
class PvpShopPurchRequest;
class PvpShopPurchResponse;
class PvPDayAwardGiftEntryRequest;
class PvPDayAwardGiftEntryResponse;
class PvPDayAwardGiftBag;
class PvPDayAwardGiftItem;
class PvPSeasonAwardGiftEntryRequest;
class PvPSeasonAwardGiftEntryResponse;
class PvPDayAwardGiftGetRequest;
class PvPDayAwardGiftGetResponse;
class PvPSeasonAwardGiftGetRequest;
class PvPSeasonAwardGiftGetResponse;
class PvPEntryMapRequest;
class PvPActionReadyResponse;

// ===================================================================

class PvpEntryRequest : public ::google::protobuf::MessageLite {
 public:
  PvpEntryRequest();
  virtual ~PvpEntryRequest();

  PvpEntryRequest(const PvpEntryRequest& from);

  inline PvpEntryRequest& operator=(const PvpEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpEntryRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpEntryRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpEntryRequest* other);

  // implements Message ----------------------------------------------

  PvpEntryRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpEntryRequest& from);
  void MergeFrom(const PvpEntryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvpEntryRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpEntryRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpEntryResponse : public ::google::protobuf::MessageLite {
 public:
  PvpEntryResponse();
  virtual ~PvpEntryResponse();

  PvpEntryResponse(const PvpEntryResponse& from);

  inline PvpEntryResponse& operator=(const PvpEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpEntryResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpEntryResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpEntryResponse* other);

  // implements Message ----------------------------------------------

  PvpEntryResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpEntryResponse& from);
  void MergeFrom(const PvpEntryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float winRatio = 1;
  inline bool has_winratio() const;
  inline void clear_winratio();
  static const int kWinRatioFieldNumber = 1;
  inline float winratio() const;
  inline void set_winratio(float value);

  // optional int32 prestige = 2;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 2;
  inline ::google::protobuf::int32 prestige() const;
  inline void set_prestige(::google::protobuf::int32 value);

  // optional int32 continuousWin = 3;
  inline bool has_continuouswin() const;
  inline void clear_continuouswin();
  static const int kContinuousWinFieldNumber = 3;
  inline ::google::protobuf::int32 continuouswin() const;
  inline void set_continuouswin(::google::protobuf::int32 value);

  // optional int32 maxContinuousWin = 4;
  inline bool has_maxcontinuouswin() const;
  inline void clear_maxcontinuouswin();
  static const int kMaxContinuousWinFieldNumber = 4;
  inline ::google::protobuf::int32 maxcontinuouswin() const;
  inline void set_maxcontinuouswin(::google::protobuf::int32 value);

  // optional int32 awardScore = 5;
  inline bool has_awardscore() const;
  inline void clear_awardscore();
  static const int kAwardScoreFieldNumber = 5;
  inline ::google::protobuf::int32 awardscore() const;
  inline void set_awardscore(::google::protobuf::int32 value);

  // optional int32 prestigeRank = 6;
  inline bool has_prestigerank() const;
  inline void clear_prestigerank();
  static const int kPrestigeRankFieldNumber = 6;
  inline ::google::protobuf::int32 prestigerank() const;
  inline void set_prestigerank(::google::protobuf::int32 value);

  // optional string pvpRankName = 7;
  inline bool has_pvprankname() const;
  inline void clear_pvprankname();
  static const int kPvpRankNameFieldNumber = 7;
  inline const ::std::string& pvprankname() const;
  inline void set_pvprankname(const ::std::string& value);
  inline void set_pvprankname(const char* value);
  inline void set_pvprankname(const char* value, size_t size);
  inline ::std::string* mutable_pvprankname();
  inline ::std::string* release_pvprankname();
  inline void set_allocated_pvprankname(::std::string* pvprankname);

  // optional int32 pvpCount = 8;
  inline bool has_pvpcount() const;
  inline void clear_pvpcount();
  static const int kPvpCountFieldNumber = 8;
  inline ::google::protobuf::int32 pvpcount() const;
  inline void set_pvpcount(::google::protobuf::int32 value);

  // optional string pvpEndDate = 9;
  inline bool has_pvpenddate() const;
  inline void clear_pvpenddate();
  static const int kPvpEndDateFieldNumber = 9;
  inline const ::std::string& pvpenddate() const;
  inline void set_pvpenddate(const ::std::string& value);
  inline void set_pvpenddate(const char* value);
  inline void set_pvpenddate(const char* value, size_t size);
  inline ::std::string* mutable_pvpenddate();
  inline ::std::string* release_pvpenddate();
  inline void set_allocated_pvpenddate(::std::string* pvpenddate);

  // optional int32 pvpRank = 10;
  inline bool has_pvprank() const;
  inline void clear_pvprank();
  static const int kPvpRankFieldNumber = 10;
  inline ::google::protobuf::int32 pvprank() const;
  inline void set_pvprank(::google::protobuf::int32 value);

  // optional int32 pvpScore = 11;
  inline bool has_pvpscore() const;
  inline void clear_pvpscore();
  static const int kPvpScoreFieldNumber = 11;
  inline ::google::protobuf::int32 pvpscore() const;
  inline void set_pvpscore(::google::protobuf::int32 value);

  // optional int32 pvpFightCount = 12;
  inline bool has_pvpfightcount() const;
  inline void clear_pvpfightcount();
  static const int kPvpFightCountFieldNumber = 12;
  inline ::google::protobuf::int32 pvpfightcount() const;
  inline void set_pvpfightcount(::google::protobuf::int32 value);

  // optional bool hasDayReward = 13;
  inline bool has_hasdayreward() const;
  inline void clear_hasdayreward();
  static const int kHasDayRewardFieldNumber = 13;
  inline bool hasdayreward() const;
  inline void set_hasdayreward(bool value);

  // optional bool hasSeasonReward = 14;
  inline bool has_hasseasonreward() const;
  inline void clear_hasseasonreward();
  static const int kHasSeasonRewardFieldNumber = 14;
  inline bool hasseasonreward() const;
  inline void set_hasseasonreward(bool value);

  // optional string specStartTime = 15;
  inline bool has_specstarttime() const;
  inline void clear_specstarttime();
  static const int kSpecStartTimeFieldNumber = 15;
  inline const ::std::string& specstarttime() const;
  inline void set_specstarttime(const ::std::string& value);
  inline void set_specstarttime(const char* value);
  inline void set_specstarttime(const char* value, size_t size);
  inline ::std::string* mutable_specstarttime();
  inline ::std::string* release_specstarttime();
  inline void set_allocated_specstarttime(::std::string* specstarttime);

  // optional string specEndTime = 16;
  inline bool has_specendtime() const;
  inline void clear_specendtime();
  static const int kSpecEndTimeFieldNumber = 16;
  inline const ::std::string& specendtime() const;
  inline void set_specendtime(const ::std::string& value);
  inline void set_specendtime(const char* value);
  inline void set_specendtime(const char* value, size_t size);
  inline ::std::string* mutable_specendtime();
  inline ::std::string* release_specendtime();
  inline void set_allocated_specendtime(::std::string* specendtime);

  // @@protoc_insertion_point(class_scope:main.PvpEntryResponse)
 private:
  inline void set_has_winratio();
  inline void clear_has_winratio();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_continuouswin();
  inline void clear_has_continuouswin();
  inline void set_has_maxcontinuouswin();
  inline void clear_has_maxcontinuouswin();
  inline void set_has_awardscore();
  inline void clear_has_awardscore();
  inline void set_has_prestigerank();
  inline void clear_has_prestigerank();
  inline void set_has_pvprankname();
  inline void clear_has_pvprankname();
  inline void set_has_pvpcount();
  inline void clear_has_pvpcount();
  inline void set_has_pvpenddate();
  inline void clear_has_pvpenddate();
  inline void set_has_pvprank();
  inline void clear_has_pvprank();
  inline void set_has_pvpscore();
  inline void clear_has_pvpscore();
  inline void set_has_pvpfightcount();
  inline void clear_has_pvpfightcount();
  inline void set_has_hasdayreward();
  inline void clear_has_hasdayreward();
  inline void set_has_hasseasonreward();
  inline void clear_has_hasseasonreward();
  inline void set_has_specstarttime();
  inline void clear_has_specstarttime();
  inline void set_has_specendtime();
  inline void clear_has_specendtime();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float winratio_;
  ::google::protobuf::int32 prestige_;
  ::google::protobuf::int32 continuouswin_;
  ::google::protobuf::int32 maxcontinuouswin_;
  ::google::protobuf::int32 awardscore_;
  ::google::protobuf::int32 prestigerank_;
  ::std::string* pvprankname_;
  ::std::string* pvpenddate_;
  ::google::protobuf::int32 pvpcount_;
  ::google::protobuf::int32 pvprank_;
  ::google::protobuf::int32 pvpscore_;
  ::google::protobuf::int32 pvpfightcount_;
  ::std::string* specstarttime_;
  ::std::string* specendtime_;
  bool hasdayreward_;
  bool hasseasonreward_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpEntryResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvpTopRequest : public ::google::protobuf::MessageLite {
 public:
  PvpTopRequest();
  virtual ~PvpTopRequest();

  PvpTopRequest(const PvpTopRequest& from);

  inline PvpTopRequest& operator=(const PvpTopRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpTopRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpTopRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpTopRequest* other);

  // implements Message ----------------------------------------------

  PvpTopRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpTopRequest& from);
  void MergeFrom(const PvpTopRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 page = 2;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpTopRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_page();
  inline void clear_has_page();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 page_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpTopRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpTopResponse : public ::google::protobuf::MessageLite {
 public:
  PvpTopResponse();
  virtual ~PvpTopResponse();

  PvpTopResponse(const PvpTopResponse& from);

  inline PvpTopResponse& operator=(const PvpTopResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpTopResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpTopResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpTopResponse* other);

  // implements Message ----------------------------------------------

  PvpTopResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpTopResponse& from);
  void MergeFrom(const PvpTopResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 allCount = 1;
  inline bool has_allcount() const;
  inline void clear_allcount();
  static const int kAllCountFieldNumber = 1;
  inline ::google::protobuf::int32 allcount() const;
  inline void set_allcount(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .main.TopPlayerMessage players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::main::TopPlayerMessage& players(int index) const;
  inline ::main::TopPlayerMessage* mutable_players(int index);
  inline ::main::TopPlayerMessage* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:main.PvpTopResponse)
 private:
  inline void set_has_allcount();
  inline void clear_has_allcount();
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 allcount_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage > players_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpTopResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvpTopMyLocalRequest : public ::google::protobuf::MessageLite {
 public:
  PvpTopMyLocalRequest();
  virtual ~PvpTopMyLocalRequest();

  PvpTopMyLocalRequest(const PvpTopMyLocalRequest& from);

  inline PvpTopMyLocalRequest& operator=(const PvpTopMyLocalRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpTopMyLocalRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpTopMyLocalRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpTopMyLocalRequest* other);

  // implements Message ----------------------------------------------

  PvpTopMyLocalRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpTopMyLocalRequest& from);
  void MergeFrom(const PvpTopMyLocalRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpTopMyLocalRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpTopMyLocalRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpTopMyLocalResponse : public ::google::protobuf::MessageLite {
 public:
  PvpTopMyLocalResponse();
  virtual ~PvpTopMyLocalResponse();

  PvpTopMyLocalResponse(const PvpTopMyLocalResponse& from);

  inline PvpTopMyLocalResponse& operator=(const PvpTopMyLocalResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpTopMyLocalResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpTopMyLocalResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpTopMyLocalResponse* other);

  // implements Message ----------------------------------------------

  PvpTopMyLocalResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpTopMyLocalResponse& from);
  void MergeFrom(const PvpTopMyLocalResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .main.TopPlayerMessage players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::main::TopPlayerMessage& players(int index) const;
  inline ::main::TopPlayerMessage* mutable_players(int index);
  inline ::main::TopPlayerMessage* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:main.PvpTopMyLocalResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage > players_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpTopMyLocalResponse* default_instance_;
};
// -------------------------------------------------------------------

class TopPlayerMessage : public ::google::protobuf::MessageLite {
 public:
  TopPlayerMessage();
  virtual ~TopPlayerMessage();

  TopPlayerMessage(const TopPlayerMessage& from);

  inline TopPlayerMessage& operator=(const TopPlayerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const TopPlayerMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TopPlayerMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TopPlayerMessage* other);

  // implements Message ----------------------------------------------

  TopPlayerMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TopPlayerMessage& from);
  void MergeFrom(const TopPlayerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 headId = 1;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIdFieldNumber = 1;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 topPos = 3;
  inline bool has_toppos() const;
  inline void clear_toppos();
  static const int kTopPosFieldNumber = 3;
  inline ::google::protobuf::int32 toppos() const;
  inline void set_toppos(::google::protobuf::int32 value);

  // optional int32 topLevel = 4;
  inline bool has_toplevel() const;
  inline void clear_toplevel();
  static const int kTopLevelFieldNumber = 4;
  inline ::google::protobuf::int32 toplevel() const;
  inline void set_toplevel(::google::protobuf::int32 value);

  // optional int32 fightTimes = 5;
  inline bool has_fighttimes() const;
  inline void clear_fighttimes();
  static const int kFightTimesFieldNumber = 5;
  inline ::google::protobuf::int32 fighttimes() const;
  inline void set_fighttimes(::google::protobuf::int32 value);

  // optional float winRatio = 6;
  inline bool has_winratio() const;
  inline void clear_winratio();
  static const int kWinRatioFieldNumber = 6;
  inline float winratio() const;
  inline void set_winratio(float value);

  // @@protoc_insertion_point(class_scope:main.TopPlayerMessage)
 private:
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_toppos();
  inline void clear_has_toppos();
  inline void set_has_toplevel();
  inline void clear_has_toplevel();
  inline void set_has_fighttimes();
  inline void clear_has_fighttimes();
  inline void set_has_winratio();
  inline void clear_has_winratio();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int32 toppos_;
  ::google::protobuf::int32 toplevel_;
  ::google::protobuf::int32 fighttimes_;
  float winratio_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static TopPlayerMessage* default_instance_;
};
// -------------------------------------------------------------------

class PvpApplyRequest : public ::google::protobuf::MessageLite {
 public:
  PvpApplyRequest();
  virtual ~PvpApplyRequest();

  PvpApplyRequest(const PvpApplyRequest& from);

  inline PvpApplyRequest& operator=(const PvpApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpApplyRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpApplyRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpApplyRequest* other);

  // implements Message ----------------------------------------------

  PvpApplyRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpApplyRequest& from);
  void MergeFrom(const PvpApplyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpApplyRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpApplyRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpApplyResponse : public ::google::protobuf::MessageLite {
 public:
  PvpApplyResponse();
  virtual ~PvpApplyResponse();

  PvpApplyResponse(const PvpApplyResponse& from);

  inline PvpApplyResponse& operator=(const PvpApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpApplyResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpApplyResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpApplyResponse* other);

  // implements Message ----------------------------------------------

  PvpApplyResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpApplyResponse& from);
  void MergeFrom(const PvpApplyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpApplyResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpApplyResponse* default_instance_;
};
// -------------------------------------------------------------------

class CheckReadyResponse : public ::google::protobuf::MessageLite {
 public:
  CheckReadyResponse();
  virtual ~CheckReadyResponse();

  CheckReadyResponse(const CheckReadyResponse& from);

  inline CheckReadyResponse& operator=(const CheckReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CheckReadyResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CheckReadyResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CheckReadyResponse* other);

  // implements Message ----------------------------------------------

  CheckReadyResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CheckReadyResponse& from);
  void MergeFrom(const CheckReadyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.CheckReadyResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static CheckReadyResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvpExitApplyRequest : public ::google::protobuf::MessageLite {
 public:
  PvpExitApplyRequest();
  virtual ~PvpExitApplyRequest();

  PvpExitApplyRequest(const PvpExitApplyRequest& from);

  inline PvpExitApplyRequest& operator=(const PvpExitApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpExitApplyRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpExitApplyRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpExitApplyRequest* other);

  // implements Message ----------------------------------------------

  PvpExitApplyRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpExitApplyRequest& from);
  void MergeFrom(const PvpExitApplyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvpExitApplyRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpExitApplyRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpExitApplyResponse : public ::google::protobuf::MessageLite {
 public:
  PvpExitApplyResponse();
  virtual ~PvpExitApplyResponse();

  PvpExitApplyResponse(const PvpExitApplyResponse& from);

  inline PvpExitApplyResponse& operator=(const PvpExitApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpExitApplyResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpExitApplyResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpExitApplyResponse* other);

  // implements Message ----------------------------------------------

  PvpExitApplyResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpExitApplyResponse& from);
  void MergeFrom(const PvpExitApplyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvpExitApplyResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpExitApplyResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvpGetReadyRequest : public ::google::protobuf::MessageLite {
 public:
  PvpGetReadyRequest();
  virtual ~PvpGetReadyRequest();

  PvpGetReadyRequest(const PvpGetReadyRequest& from);

  inline PvpGetReadyRequest& operator=(const PvpGetReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpGetReadyRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpGetReadyRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpGetReadyRequest* other);

  // implements Message ----------------------------------------------

  PvpGetReadyRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpGetReadyRequest& from);
  void MergeFrom(const PvpGetReadyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvpGetReadyRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpGetReadyRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpGetReadyResponse : public ::google::protobuf::MessageLite {
 public:
  PvpGetReadyResponse();
  virtual ~PvpGetReadyResponse();

  PvpGetReadyResponse(const PvpGetReadyResponse& from);

  inline PvpGetReadyResponse& operator=(const PvpGetReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpGetReadyResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpGetReadyResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpGetReadyResponse* other);

  // implements Message ----------------------------------------------

  PvpGetReadyResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpGetReadyResponse& from);
  void MergeFrom(const PvpGetReadyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvpGetReadyResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpGetReadyResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvpMatchingResponse : public ::google::protobuf::MessageLite {
 public:
  PvpMatchingResponse();
  virtual ~PvpMatchingResponse();

  PvpMatchingResponse(const PvpMatchingResponse& from);

  inline PvpMatchingResponse& operator=(const PvpMatchingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpMatchingResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpMatchingResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpMatchingResponse* other);

  // implements Message ----------------------------------------------

  PvpMatchingResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpMatchingResponse& from);
  void MergeFrom(const PvpMatchingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string fightId = 2;
  inline bool has_fightid() const;
  inline void clear_fightid();
  static const int kFightIdFieldNumber = 2;
  inline const ::std::string& fightid() const;
  inline void set_fightid(const ::std::string& value);
  inline void set_fightid(const char* value);
  inline void set_fightid(const char* value, size_t size);
  inline ::std::string* mutable_fightid();
  inline ::std::string* release_fightid();
  inline void set_allocated_fightid(::std::string* fightid);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 icon = 5;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 5;
  inline ::google::protobuf::int32 icon() const;
  inline void set_icon(::google::protobuf::int32 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 pos = 7;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 7;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 fightCounter = 9;
  inline bool has_fightcounter() const;
  inline void clear_fightcounter();
  static const int kFightCounterFieldNumber = 9;
  inline ::google::protobuf::int32 fightcounter() const;
  inline void set_fightcounter(::google::protobuf::int32 value);

  // optional float winRatio = 10;
  inline bool has_winratio() const;
  inline void clear_winratio();
  static const int kWinRatioFieldNumber = 10;
  inline float winratio() const;
  inline void set_winratio(float value);

  // optional int32 serverId = 11;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 11;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional string serverName = 12;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 12;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:main.PvpMatchingResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fightid();
  inline void clear_has_fightid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fightcounter();
  inline void clear_has_fightcounter();
  inline void set_has_winratio();
  inline void clear_has_winratio();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servername();
  inline void clear_has_servername();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fightid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 port_;
  ::std::string* ip_;
  ::std::string* name_;
  ::google::protobuf::int32 icon_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fightcounter_;
  float winratio_;
  ::google::protobuf::int32 serverid_;
  ::std::string* servername_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpMatchingResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvpOfficerConfig : public ::google::protobuf::MessageLite {
 public:
  PvpOfficerConfig();
  virtual ~PvpOfficerConfig();

  PvpOfficerConfig(const PvpOfficerConfig& from);

  inline PvpOfficerConfig& operator=(const PvpOfficerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpOfficerConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpOfficerConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpOfficerConfig* other);

  // implements Message ----------------------------------------------

  PvpOfficerConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpOfficerConfig& from);
  void MergeFrom(const PvpOfficerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 myLord = 1;
  inline bool has_mylord() const;
  inline void clear_mylord();
  static const int kMyLordFieldNumber = 1;
  inline ::google::protobuf::int32 mylord() const;
  inline void set_mylord(::google::protobuf::int32 value);

  // repeated int32 myCards = 2;
  inline int mycards_size() const;
  inline void clear_mycards();
  static const int kMyCardsFieldNumber = 2;
  inline ::google::protobuf::int32 mycards(int index) const;
  inline void set_mycards(int index, ::google::protobuf::int32 value);
  inline void add_mycards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mycards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mycards();

  // optional int32 enemyLord = 3;
  inline bool has_enemylord() const;
  inline void clear_enemylord();
  static const int kEnemyLordFieldNumber = 3;
  inline ::google::protobuf::int32 enemylord() const;
  inline void set_enemylord(::google::protobuf::int32 value);

  // repeated int32 enemyCards = 4;
  inline int enemycards_size() const;
  inline void clear_enemycards();
  static const int kEnemyCardsFieldNumber = 4;
  inline ::google::protobuf::int32 enemycards(int index) const;
  inline void set_enemycards(int index, ::google::protobuf::int32 value);
  inline void add_enemycards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enemycards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enemycards();

  // @@protoc_insertion_point(class_scope:main.PvpOfficerConfig)
 private:
  inline void set_has_mylord();
  inline void clear_has_mylord();
  inline void set_has_enemylord();
  inline void clear_has_enemylord();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mycards_;
  ::google::protobuf::int32 mylord_;
  ::google::protobuf::int32 enemylord_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enemycards_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpOfficerConfig* default_instance_;
};
// -------------------------------------------------------------------

class PvpShopListRequest : public ::google::protobuf::MessageLite {
 public:
  PvpShopListRequest();
  virtual ~PvpShopListRequest();

  PvpShopListRequest(const PvpShopListRequest& from);

  inline PvpShopListRequest& operator=(const PvpShopListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpShopListRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpShopListRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpShopListRequest* other);

  // implements Message ----------------------------------------------

  PvpShopListRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpShopListRequest& from);
  void MergeFrom(const PvpShopListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpShopListRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpShopListRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpShopListResponse : public ::google::protobuf::MessageLite {
 public:
  PvpShopListResponse();
  virtual ~PvpShopListResponse();

  PvpShopListResponse(const PvpShopListResponse& from);

  inline PvpShopListResponse& operator=(const PvpShopListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpShopListResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpShopListResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpShopListResponse* other);

  // implements Message ----------------------------------------------

  PvpShopListResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpShopListResponse& from);
  void MergeFrom(const PvpShopListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 awardScore = 1;
  inline bool has_awardscore() const;
  inline void clear_awardscore();
  static const int kAwardScoreFieldNumber = 1;
  inline ::google::protobuf::int32 awardscore() const;
  inline void set_awardscore(::google::protobuf::int32 value);

  // repeated .main.PvpShopItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::main::PvpShopItem& items(int index) const;
  inline ::main::PvpShopItem* mutable_items(int index);
  inline ::main::PvpShopItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::main::PvpShopItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::PvpShopItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:main.PvpShopListResponse)
 private:
  inline void set_has_awardscore();
  inline void clear_has_awardscore();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::main::PvpShopItem > items_;
  ::google::protobuf::int32 awardscore_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpShopListResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvpShopItem : public ::google::protobuf::MessageLite {
 public:
  PvpShopItem();
  virtual ~PvpShopItem();

  PvpShopItem(const PvpShopItem& from);

  inline PvpShopItem& operator=(const PvpShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpShopItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpShopItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpShopItem* other);

  // implements Message ----------------------------------------------

  PvpShopItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpShopItem& from);
  void MergeFrom(const PvpShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional sint32 itemType = 3;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 3;
  inline ::google::protobuf::int32 itemtype() const;
  inline void set_itemtype(::google::protobuf::int32 value);

  // optional sint32 itemCount = 4;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemCountFieldNumber = 4;
  inline ::google::protobuf::int32 itemcount() const;
  inline void set_itemcount(::google::protobuf::int32 value);

  // optional sint32 itemLevel = 5;
  inline bool has_itemlevel() const;
  inline void clear_itemlevel();
  static const int kItemLevelFieldNumber = 5;
  inline ::google::protobuf::int32 itemlevel() const;
  inline void set_itemlevel(::google::protobuf::int32 value);

  // optional int32 costScore = 6;
  inline bool has_costscore() const;
  inline void clear_costscore();
  static const int kCostScoreFieldNumber = 6;
  inline ::google::protobuf::int32 costscore() const;
  inline void set_costscore(::google::protobuf::int32 value);

  // optional int32 pvpLevelMin = 7;
  inline bool has_pvplevelmin() const;
  inline void clear_pvplevelmin();
  static const int kPvpLevelMinFieldNumber = 7;
  inline ::google::protobuf::int32 pvplevelmin() const;
  inline void set_pvplevelmin(::google::protobuf::int32 value);

  // optional int32 currentCount = 8;
  inline bool has_currentcount() const;
  inline void clear_currentcount();
  static const int kCurrentCountFieldNumber = 8;
  inline ::google::protobuf::int32 currentcount() const;
  inline void set_currentcount(::google::protobuf::int32 value);

  // optional int32 maxCount = 9;
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxCountFieldNumber = 9;
  inline ::google::protobuf::int32 maxcount() const;
  inline void set_maxcount(::google::protobuf::int32 value);

  // optional int32 discountCostScore = 10;
  inline bool has_discountcostscore() const;
  inline void clear_discountcostscore();
  static const int kDiscountCostScoreFieldNumber = 10;
  inline ::google::protobuf::int32 discountcostscore() const;
  inline void set_discountcostscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpShopItem)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();
  inline void set_has_itemlevel();
  inline void clear_has_itemlevel();
  inline void set_has_costscore();
  inline void clear_has_costscore();
  inline void set_has_pvplevelmin();
  inline void clear_has_pvplevelmin();
  inline void set_has_currentcount();
  inline void clear_has_currentcount();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_discountcostscore();
  inline void clear_has_discountcostscore();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemtype_;
  ::google::protobuf::int32 itemcount_;
  ::google::protobuf::int32 itemlevel_;
  ::google::protobuf::int32 costscore_;
  ::google::protobuf::int32 pvplevelmin_;
  ::google::protobuf::int32 currentcount_;
  ::google::protobuf::int32 maxcount_;
  ::google::protobuf::int32 discountcostscore_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpShopItem* default_instance_;
};
// -------------------------------------------------------------------

class PvpShopPurchRequest : public ::google::protobuf::MessageLite {
 public:
  PvpShopPurchRequest();
  virtual ~PvpShopPurchRequest();

  PvpShopPurchRequest(const PvpShopPurchRequest& from);

  inline PvpShopPurchRequest& operator=(const PvpShopPurchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpShopPurchRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpShopPurchRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpShopPurchRequest* other);

  // implements Message ----------------------------------------------

  PvpShopPurchRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpShopPurchRequest& from);
  void MergeFrom(const PvpShopPurchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpShopPurchRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpShopPurchRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvpShopPurchResponse : public ::google::protobuf::MessageLite {
 public:
  PvpShopPurchResponse();
  virtual ~PvpShopPurchResponse();

  PvpShopPurchResponse(const PvpShopPurchResponse& from);

  inline PvpShopPurchResponse& operator=(const PvpShopPurchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvpShopPurchResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvpShopPurchResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvpShopPurchResponse* other);

  // implements Message ----------------------------------------------

  PvpShopPurchResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvpShopPurchResponse& from);
  void MergeFrom(const PvpShopPurchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvpShopPurchResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvpShopPurchResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPDayAwardGiftEntryRequest : public ::google::protobuf::MessageLite {
 public:
  PvPDayAwardGiftEntryRequest();
  virtual ~PvPDayAwardGiftEntryRequest();

  PvPDayAwardGiftEntryRequest(const PvPDayAwardGiftEntryRequest& from);

  inline PvPDayAwardGiftEntryRequest& operator=(const PvPDayAwardGiftEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPDayAwardGiftEntryRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPDayAwardGiftEntryRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPDayAwardGiftEntryRequest* other);

  // implements Message ----------------------------------------------

  PvPDayAwardGiftEntryRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPDayAwardGiftEntryRequest& from);
  void MergeFrom(const PvPDayAwardGiftEntryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvPDayAwardGiftEntryRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPDayAwardGiftEntryRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvPDayAwardGiftEntryResponse : public ::google::protobuf::MessageLite {
 public:
  PvPDayAwardGiftEntryResponse();
  virtual ~PvPDayAwardGiftEntryResponse();

  PvPDayAwardGiftEntryResponse(const PvPDayAwardGiftEntryResponse& from);

  inline PvPDayAwardGiftEntryResponse& operator=(const PvPDayAwardGiftEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPDayAwardGiftEntryResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPDayAwardGiftEntryResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPDayAwardGiftEntryResponse* other);

  // implements Message ----------------------------------------------

  PvPDayAwardGiftEntryResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPDayAwardGiftEntryResponse& from);
  void MergeFrom(const PvPDayAwardGiftEntryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fightCounter = 1;
  inline bool has_fightcounter() const;
  inline void clear_fightcounter();
  static const int kFightCounterFieldNumber = 1;
  inline ::google::protobuf::int32 fightcounter() const;
  inline void set_fightcounter(::google::protobuf::int32 value);

  // repeated .main.PvPDayAwardGiftBag list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::main::PvPDayAwardGiftBag& list(int index) const;
  inline ::main::PvPDayAwardGiftBag* mutable_list(int index);
  inline ::main::PvPDayAwardGiftBag* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:main.PvPDayAwardGiftEntryResponse)
 private:
  inline void set_has_fightcounter();
  inline void clear_has_fightcounter();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag > list_;
  ::google::protobuf::int32 fightcounter_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPDayAwardGiftEntryResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPDayAwardGiftBag : public ::google::protobuf::MessageLite {
 public:
  PvPDayAwardGiftBag();
  virtual ~PvPDayAwardGiftBag();

  PvPDayAwardGiftBag(const PvPDayAwardGiftBag& from);

  inline PvPDayAwardGiftBag& operator=(const PvPDayAwardGiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPDayAwardGiftBag& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPDayAwardGiftBag* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPDayAwardGiftBag* other);

  // implements Message ----------------------------------------------

  PvPDayAwardGiftBag* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPDayAwardGiftBag& from);
  void MergeFrom(const PvPDayAwardGiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 giftCoin = 5;
  inline bool has_giftcoin() const;
  inline void clear_giftcoin();
  static const int kGiftCoinFieldNumber = 5;
  inline ::google::protobuf::int32 giftcoin() const;
  inline void set_giftcoin(::google::protobuf::int32 value);

  // optional int32 giftAward = 6;
  inline bool has_giftaward() const;
  inline void clear_giftaward();
  static const int kGiftAwardFieldNumber = 6;
  inline ::google::protobuf::int32 giftaward() const;
  inline void set_giftaward(::google::protobuf::int32 value);

  // optional int32 speaker = 7;
  inline bool has_speaker() const;
  inline void clear_speaker();
  static const int kSpeakerFieldNumber = 7;
  inline ::google::protobuf::int32 speaker() const;
  inline void set_speaker(::google::protobuf::int32 value);

  // optional int32 liandan = 8;
  inline bool has_liandan() const;
  inline void clear_liandan();
  static const int kLiandanFieldNumber = 8;
  inline ::google::protobuf::int32 liandan() const;
  inline void set_liandan(::google::protobuf::int32 value);

  // optional int32 isBuy = 9;
  inline bool has_isbuy() const;
  inline void clear_isbuy();
  static const int kIsBuyFieldNumber = 9;
  inline ::google::protobuf::int32 isbuy() const;
  inline void set_isbuy(::google::protobuf::int32 value);

  // repeated .main.PvPDayAwardGiftItem list = 10;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 10;
  inline const ::main::PvPDayAwardGiftItem& list(int index) const;
  inline ::main::PvPDayAwardGiftItem* mutable_list(int index);
  inline ::main::PvPDayAwardGiftItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftItem >*
      mutable_list();

  // optional int32 giftCostDiscount = 11;
  inline bool has_giftcostdiscount() const;
  inline void clear_giftcostdiscount();
  static const int kGiftCostDiscountFieldNumber = 11;
  inline ::google::protobuf::int32 giftcostdiscount() const;
  inline void set_giftcostdiscount(::google::protobuf::int32 value);

  // optional string custom = 12;
  inline bool has_custom() const;
  inline void clear_custom();
  static const int kCustomFieldNumber = 12;
  inline const ::std::string& custom() const;
  inline void set_custom(const ::std::string& value);
  inline void set_custom(const char* value);
  inline void set_custom(const char* value, size_t size);
  inline ::std::string* mutable_custom();
  inline ::std::string* release_custom();
  inline void set_allocated_custom(::std::string* custom);

  // @@protoc_insertion_point(class_scope:main.PvPDayAwardGiftBag)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_giftcoin();
  inline void clear_has_giftcoin();
  inline void set_has_giftaward();
  inline void clear_has_giftaward();
  inline void set_has_speaker();
  inline void clear_has_speaker();
  inline void set_has_liandan();
  inline void clear_has_liandan();
  inline void set_has_isbuy();
  inline void clear_has_isbuy();
  inline void set_has_giftcostdiscount();
  inline void clear_has_giftcostdiscount();
  inline void set_has_custom();
  inline void clear_has_custom();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 count_;
  ::std::string* info_;
  ::google::protobuf::int32 giftcoin_;
  ::google::protobuf::int32 giftaward_;
  ::google::protobuf::int32 speaker_;
  ::google::protobuf::int32 liandan_;
  ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftItem > list_;
  ::google::protobuf::int32 isbuy_;
  ::google::protobuf::int32 giftcostdiscount_;
  ::std::string* custom_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPDayAwardGiftBag* default_instance_;
};
// -------------------------------------------------------------------

class PvPDayAwardGiftItem : public ::google::protobuf::MessageLite {
 public:
  PvPDayAwardGiftItem();
  virtual ~PvPDayAwardGiftItem();

  PvPDayAwardGiftItem(const PvPDayAwardGiftItem& from);

  inline PvPDayAwardGiftItem& operator=(const PvPDayAwardGiftItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPDayAwardGiftItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPDayAwardGiftItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPDayAwardGiftItem* other);

  // implements Message ----------------------------------------------

  PvPDayAwardGiftItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPDayAwardGiftItem& from);
  void MergeFrom(const PvPDayAwardGiftItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemType = 1;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 1;
  inline ::google::protobuf::int32 itemtype() const;
  inline void set_itemtype(::google::protobuf::int32 value);

  // optional int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 smillStars = 6;
  inline bool has_smillstars() const;
  inline void clear_smillstars();
  static const int kSmillStarsFieldNumber = 6;
  inline ::google::protobuf::int32 smillstars() const;
  inline void set_smillstars(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvPDayAwardGiftItem)
 private:
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_smillstars();
  inline void clear_has_smillstars();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemtype_;
  ::google::protobuf::int32 itemid_;
  ::std::string* name_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 smillstars_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPDayAwardGiftItem* default_instance_;
};
// -------------------------------------------------------------------

class PvPSeasonAwardGiftEntryRequest : public ::google::protobuf::MessageLite {
 public:
  PvPSeasonAwardGiftEntryRequest();
  virtual ~PvPSeasonAwardGiftEntryRequest();

  PvPSeasonAwardGiftEntryRequest(const PvPSeasonAwardGiftEntryRequest& from);

  inline PvPSeasonAwardGiftEntryRequest& operator=(const PvPSeasonAwardGiftEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPSeasonAwardGiftEntryRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPSeasonAwardGiftEntryRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPSeasonAwardGiftEntryRequest* other);

  // implements Message ----------------------------------------------

  PvPSeasonAwardGiftEntryRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPSeasonAwardGiftEntryRequest& from);
  void MergeFrom(const PvPSeasonAwardGiftEntryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvPSeasonAwardGiftEntryRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPSeasonAwardGiftEntryRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvPSeasonAwardGiftEntryResponse : public ::google::protobuf::MessageLite {
 public:
  PvPSeasonAwardGiftEntryResponse();
  virtual ~PvPSeasonAwardGiftEntryResponse();

  PvPSeasonAwardGiftEntryResponse(const PvPSeasonAwardGiftEntryResponse& from);

  inline PvPSeasonAwardGiftEntryResponse& operator=(const PvPSeasonAwardGiftEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPSeasonAwardGiftEntryResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPSeasonAwardGiftEntryResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPSeasonAwardGiftEntryResponse* other);

  // implements Message ----------------------------------------------

  PvPSeasonAwardGiftEntryResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPSeasonAwardGiftEntryResponse& from);
  void MergeFrom(const PvPSeasonAwardGiftEntryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seasonCount = 1;
  inline bool has_seasoncount() const;
  inline void clear_seasoncount();
  static const int kSeasonCountFieldNumber = 1;
  inline ::google::protobuf::int32 seasoncount() const;
  inline void set_seasoncount(::google::protobuf::int32 value);

  // repeated .main.PvPDayAwardGiftBag list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::main::PvPDayAwardGiftBag& list(int index) const;
  inline ::main::PvPDayAwardGiftBag* mutable_list(int index);
  inline ::main::PvPDayAwardGiftBag* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:main.PvPSeasonAwardGiftEntryResponse)
 private:
  inline void set_has_seasoncount();
  inline void clear_has_seasoncount();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag > list_;
  ::google::protobuf::int32 seasoncount_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPSeasonAwardGiftEntryResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPDayAwardGiftGetRequest : public ::google::protobuf::MessageLite {
 public:
  PvPDayAwardGiftGetRequest();
  virtual ~PvPDayAwardGiftGetRequest();

  PvPDayAwardGiftGetRequest(const PvPDayAwardGiftGetRequest& from);

  inline PvPDayAwardGiftGetRequest& operator=(const PvPDayAwardGiftGetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPDayAwardGiftGetRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPDayAwardGiftGetRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPDayAwardGiftGetRequest* other);

  // implements Message ----------------------------------------------

  PvPDayAwardGiftGetRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPDayAwardGiftGetRequest& from);
  void MergeFrom(const PvPDayAwardGiftGetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvPDayAwardGiftGetRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 key_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPDayAwardGiftGetRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvPDayAwardGiftGetResponse : public ::google::protobuf::MessageLite {
 public:
  PvPDayAwardGiftGetResponse();
  virtual ~PvPDayAwardGiftGetResponse();

  PvPDayAwardGiftGetResponse(const PvPDayAwardGiftGetResponse& from);

  inline PvPDayAwardGiftGetResponse& operator=(const PvPDayAwardGiftGetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPDayAwardGiftGetResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPDayAwardGiftGetResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPDayAwardGiftGetResponse* other);

  // implements Message ----------------------------------------------

  PvPDayAwardGiftGetResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPDayAwardGiftGetResponse& from);
  void MergeFrom(const PvPDayAwardGiftGetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 cout = 2;
  inline bool has_cout() const;
  inline void clear_cout();
  static const int kCoutFieldNumber = 2;
  inline ::google::protobuf::int32 cout() const;
  inline void set_cout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvPDayAwardGiftGetResponse)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cout();
  inline void clear_has_cout();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 cout_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPDayAwardGiftGetResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPSeasonAwardGiftGetRequest : public ::google::protobuf::MessageLite {
 public:
  PvPSeasonAwardGiftGetRequest();
  virtual ~PvPSeasonAwardGiftGetRequest();

  PvPSeasonAwardGiftGetRequest(const PvPSeasonAwardGiftGetRequest& from);

  inline PvPSeasonAwardGiftGetRequest& operator=(const PvPSeasonAwardGiftGetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPSeasonAwardGiftGetRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPSeasonAwardGiftGetRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPSeasonAwardGiftGetRequest* other);

  // implements Message ----------------------------------------------

  PvPSeasonAwardGiftGetRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPSeasonAwardGiftGetRequest& from);
  void MergeFrom(const PvPSeasonAwardGiftGetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvPSeasonAwardGiftGetRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 key_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPSeasonAwardGiftGetRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvPSeasonAwardGiftGetResponse : public ::google::protobuf::MessageLite {
 public:
  PvPSeasonAwardGiftGetResponse();
  virtual ~PvPSeasonAwardGiftGetResponse();

  PvPSeasonAwardGiftGetResponse(const PvPSeasonAwardGiftGetResponse& from);

  inline PvPSeasonAwardGiftGetResponse& operator=(const PvPSeasonAwardGiftGetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPSeasonAwardGiftGetResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPSeasonAwardGiftGetResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPSeasonAwardGiftGetResponse* other);

  // implements Message ----------------------------------------------

  PvPSeasonAwardGiftGetResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPSeasonAwardGiftGetResponse& from);
  void MergeFrom(const PvPSeasonAwardGiftGetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 cout = 2;
  inline bool has_cout() const;
  inline void clear_cout();
  static const int kCoutFieldNumber = 2;
  inline ::google::protobuf::int32 cout() const;
  inline void set_cout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.PvPSeasonAwardGiftGetResponse)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cout();
  inline void clear_has_cout();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 cout_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPSeasonAwardGiftGetResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPEntryMapRequest : public ::google::protobuf::MessageLite {
 public:
  PvPEntryMapRequest();
  virtual ~PvPEntryMapRequest();

  PvPEntryMapRequest(const PvPEntryMapRequest& from);

  inline PvPEntryMapRequest& operator=(const PvPEntryMapRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPEntryMapRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPEntryMapRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPEntryMapRequest* other);

  // implements Message ----------------------------------------------

  PvPEntryMapRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPEntryMapRequest& from);
  void MergeFrom(const PvPEntryMapRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvPEntryMapRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPEntryMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class PvPActionReadyResponse : public ::google::protobuf::MessageLite {
 public:
  PvPActionReadyResponse();
  virtual ~PvPActionReadyResponse();

  PvPActionReadyResponse(const PvPActionReadyResponse& from);

  inline PvPActionReadyResponse& operator=(const PvPActionReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PvPActionReadyResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PvPActionReadyResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PvPActionReadyResponse* other);

  // implements Message ----------------------------------------------

  PvPActionReadyResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PvPActionReadyResponse& from);
  void MergeFrom(const PvPActionReadyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:main.PvPActionReadyResponse)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpFight_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpFight_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpFight_2eproto();
  friend void protobuf_ShutdownFile_PvpFight_2eproto();

  void InitAsDefaultInstance();
  static PvPActionReadyResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// PvpEntryRequest

// -------------------------------------------------------------------

// PvpEntryResponse

// optional float winRatio = 1;
inline bool PvpEntryResponse::has_winratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpEntryResponse::set_has_winratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpEntryResponse::clear_has_winratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpEntryResponse::clear_winratio() {
  winratio_ = 0;
  clear_has_winratio();
}
inline float PvpEntryResponse::winratio() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.winRatio)
  return winratio_;
}
inline void PvpEntryResponse::set_winratio(float value) {
  set_has_winratio();
  winratio_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.winRatio)
}

// optional int32 prestige = 2;
inline bool PvpEntryResponse::has_prestige() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpEntryResponse::set_has_prestige() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpEntryResponse::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpEntryResponse::clear_prestige() {
  prestige_ = 0;
  clear_has_prestige();
}
inline ::google::protobuf::int32 PvpEntryResponse::prestige() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.prestige)
  return prestige_;
}
inline void PvpEntryResponse::set_prestige(::google::protobuf::int32 value) {
  set_has_prestige();
  prestige_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.prestige)
}

// optional int32 continuousWin = 3;
inline bool PvpEntryResponse::has_continuouswin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpEntryResponse::set_has_continuouswin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpEntryResponse::clear_has_continuouswin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpEntryResponse::clear_continuouswin() {
  continuouswin_ = 0;
  clear_has_continuouswin();
}
inline ::google::protobuf::int32 PvpEntryResponse::continuouswin() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.continuousWin)
  return continuouswin_;
}
inline void PvpEntryResponse::set_continuouswin(::google::protobuf::int32 value) {
  set_has_continuouswin();
  continuouswin_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.continuousWin)
}

// optional int32 maxContinuousWin = 4;
inline bool PvpEntryResponse::has_maxcontinuouswin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpEntryResponse::set_has_maxcontinuouswin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpEntryResponse::clear_has_maxcontinuouswin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpEntryResponse::clear_maxcontinuouswin() {
  maxcontinuouswin_ = 0;
  clear_has_maxcontinuouswin();
}
inline ::google::protobuf::int32 PvpEntryResponse::maxcontinuouswin() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.maxContinuousWin)
  return maxcontinuouswin_;
}
inline void PvpEntryResponse::set_maxcontinuouswin(::google::protobuf::int32 value) {
  set_has_maxcontinuouswin();
  maxcontinuouswin_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.maxContinuousWin)
}

// optional int32 awardScore = 5;
inline bool PvpEntryResponse::has_awardscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpEntryResponse::set_has_awardscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpEntryResponse::clear_has_awardscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpEntryResponse::clear_awardscore() {
  awardscore_ = 0;
  clear_has_awardscore();
}
inline ::google::protobuf::int32 PvpEntryResponse::awardscore() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.awardScore)
  return awardscore_;
}
inline void PvpEntryResponse::set_awardscore(::google::protobuf::int32 value) {
  set_has_awardscore();
  awardscore_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.awardScore)
}

// optional int32 prestigeRank = 6;
inline bool PvpEntryResponse::has_prestigerank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpEntryResponse::set_has_prestigerank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpEntryResponse::clear_has_prestigerank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpEntryResponse::clear_prestigerank() {
  prestigerank_ = 0;
  clear_has_prestigerank();
}
inline ::google::protobuf::int32 PvpEntryResponse::prestigerank() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.prestigeRank)
  return prestigerank_;
}
inline void PvpEntryResponse::set_prestigerank(::google::protobuf::int32 value) {
  set_has_prestigerank();
  prestigerank_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.prestigeRank)
}

// optional string pvpRankName = 7;
inline bool PvpEntryResponse::has_pvprankname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpEntryResponse::set_has_pvprankname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpEntryResponse::clear_has_pvprankname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpEntryResponse::clear_pvprankname() {
  if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvprankname_->clear();
  }
  clear_has_pvprankname();
}
inline const ::std::string& PvpEntryResponse::pvprankname() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.pvpRankName)
  return *pvprankname_;
}
inline void PvpEntryResponse::set_pvprankname(const ::std::string& value) {
  set_has_pvprankname();
  if (pvprankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvprankname_ = new ::std::string;
  }
  pvprankname_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.pvpRankName)
}
inline void PvpEntryResponse::set_pvprankname(const char* value) {
  set_has_pvprankname();
  if (pvprankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvprankname_ = new ::std::string;
  }
  pvprankname_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpEntryResponse.pvpRankName)
}
inline void PvpEntryResponse::set_pvprankname(const char* value, size_t size) {
  set_has_pvprankname();
  if (pvprankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvprankname_ = new ::std::string;
  }
  pvprankname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpEntryResponse.pvpRankName)
}
inline ::std::string* PvpEntryResponse::mutable_pvprankname() {
  set_has_pvprankname();
  if (pvprankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvprankname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpEntryResponse.pvpRankName)
  return pvprankname_;
}
inline ::std::string* PvpEntryResponse::release_pvprankname() {
  clear_has_pvprankname();
  if (pvprankname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pvprankname_;
    pvprankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpEntryResponse::set_allocated_pvprankname(::std::string* pvprankname) {
  if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvprankname_;
  }
  if (pvprankname) {
    set_has_pvprankname();
    pvprankname_ = pvprankname;
  } else {
    clear_has_pvprankname();
    pvprankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpEntryResponse.pvpRankName)
}

// optional int32 pvpCount = 8;
inline bool PvpEntryResponse::has_pvpcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvpEntryResponse::set_has_pvpcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvpEntryResponse::clear_has_pvpcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvpEntryResponse::clear_pvpcount() {
  pvpcount_ = 0;
  clear_has_pvpcount();
}
inline ::google::protobuf::int32 PvpEntryResponse::pvpcount() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.pvpCount)
  return pvpcount_;
}
inline void PvpEntryResponse::set_pvpcount(::google::protobuf::int32 value) {
  set_has_pvpcount();
  pvpcount_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.pvpCount)
}

// optional string pvpEndDate = 9;
inline bool PvpEntryResponse::has_pvpenddate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PvpEntryResponse::set_has_pvpenddate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PvpEntryResponse::clear_has_pvpenddate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PvpEntryResponse::clear_pvpenddate() {
  if (pvpenddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvpenddate_->clear();
  }
  clear_has_pvpenddate();
}
inline const ::std::string& PvpEntryResponse::pvpenddate() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.pvpEndDate)
  return *pvpenddate_;
}
inline void PvpEntryResponse::set_pvpenddate(const ::std::string& value) {
  set_has_pvpenddate();
  if (pvpenddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvpenddate_ = new ::std::string;
  }
  pvpenddate_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.pvpEndDate)
}
inline void PvpEntryResponse::set_pvpenddate(const char* value) {
  set_has_pvpenddate();
  if (pvpenddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvpenddate_ = new ::std::string;
  }
  pvpenddate_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpEntryResponse.pvpEndDate)
}
inline void PvpEntryResponse::set_pvpenddate(const char* value, size_t size) {
  set_has_pvpenddate();
  if (pvpenddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvpenddate_ = new ::std::string;
  }
  pvpenddate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpEntryResponse.pvpEndDate)
}
inline ::std::string* PvpEntryResponse::mutable_pvpenddate() {
  set_has_pvpenddate();
  if (pvpenddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pvpenddate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpEntryResponse.pvpEndDate)
  return pvpenddate_;
}
inline ::std::string* PvpEntryResponse::release_pvpenddate() {
  clear_has_pvpenddate();
  if (pvpenddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pvpenddate_;
    pvpenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpEntryResponse::set_allocated_pvpenddate(::std::string* pvpenddate) {
  if (pvpenddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvpenddate_;
  }
  if (pvpenddate) {
    set_has_pvpenddate();
    pvpenddate_ = pvpenddate;
  } else {
    clear_has_pvpenddate();
    pvpenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpEntryResponse.pvpEndDate)
}

// optional int32 pvpRank = 10;
inline bool PvpEntryResponse::has_pvprank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PvpEntryResponse::set_has_pvprank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PvpEntryResponse::clear_has_pvprank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PvpEntryResponse::clear_pvprank() {
  pvprank_ = 0;
  clear_has_pvprank();
}
inline ::google::protobuf::int32 PvpEntryResponse::pvprank() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.pvpRank)
  return pvprank_;
}
inline void PvpEntryResponse::set_pvprank(::google::protobuf::int32 value) {
  set_has_pvprank();
  pvprank_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.pvpRank)
}

// optional int32 pvpScore = 11;
inline bool PvpEntryResponse::has_pvpscore() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PvpEntryResponse::set_has_pvpscore() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PvpEntryResponse::clear_has_pvpscore() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PvpEntryResponse::clear_pvpscore() {
  pvpscore_ = 0;
  clear_has_pvpscore();
}
inline ::google::protobuf::int32 PvpEntryResponse::pvpscore() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.pvpScore)
  return pvpscore_;
}
inline void PvpEntryResponse::set_pvpscore(::google::protobuf::int32 value) {
  set_has_pvpscore();
  pvpscore_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.pvpScore)
}

// optional int32 pvpFightCount = 12;
inline bool PvpEntryResponse::has_pvpfightcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PvpEntryResponse::set_has_pvpfightcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PvpEntryResponse::clear_has_pvpfightcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PvpEntryResponse::clear_pvpfightcount() {
  pvpfightcount_ = 0;
  clear_has_pvpfightcount();
}
inline ::google::protobuf::int32 PvpEntryResponse::pvpfightcount() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.pvpFightCount)
  return pvpfightcount_;
}
inline void PvpEntryResponse::set_pvpfightcount(::google::protobuf::int32 value) {
  set_has_pvpfightcount();
  pvpfightcount_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.pvpFightCount)
}

// optional bool hasDayReward = 13;
inline bool PvpEntryResponse::has_hasdayreward() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PvpEntryResponse::set_has_hasdayreward() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PvpEntryResponse::clear_has_hasdayreward() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PvpEntryResponse::clear_hasdayreward() {
  hasdayreward_ = false;
  clear_has_hasdayreward();
}
inline bool PvpEntryResponse::hasdayreward() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.hasDayReward)
  return hasdayreward_;
}
inline void PvpEntryResponse::set_hasdayreward(bool value) {
  set_has_hasdayreward();
  hasdayreward_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.hasDayReward)
}

// optional bool hasSeasonReward = 14;
inline bool PvpEntryResponse::has_hasseasonreward() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PvpEntryResponse::set_has_hasseasonreward() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PvpEntryResponse::clear_has_hasseasonreward() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PvpEntryResponse::clear_hasseasonreward() {
  hasseasonreward_ = false;
  clear_has_hasseasonreward();
}
inline bool PvpEntryResponse::hasseasonreward() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.hasSeasonReward)
  return hasseasonreward_;
}
inline void PvpEntryResponse::set_hasseasonreward(bool value) {
  set_has_hasseasonreward();
  hasseasonreward_ = value;
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.hasSeasonReward)
}

// optional string specStartTime = 15;
inline bool PvpEntryResponse::has_specstarttime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PvpEntryResponse::set_has_specstarttime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PvpEntryResponse::clear_has_specstarttime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PvpEntryResponse::clear_specstarttime() {
  if (specstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specstarttime_->clear();
  }
  clear_has_specstarttime();
}
inline const ::std::string& PvpEntryResponse::specstarttime() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.specStartTime)
  return *specstarttime_;
}
inline void PvpEntryResponse::set_specstarttime(const ::std::string& value) {
  set_has_specstarttime();
  if (specstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specstarttime_ = new ::std::string;
  }
  specstarttime_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.specStartTime)
}
inline void PvpEntryResponse::set_specstarttime(const char* value) {
  set_has_specstarttime();
  if (specstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specstarttime_ = new ::std::string;
  }
  specstarttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpEntryResponse.specStartTime)
}
inline void PvpEntryResponse::set_specstarttime(const char* value, size_t size) {
  set_has_specstarttime();
  if (specstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specstarttime_ = new ::std::string;
  }
  specstarttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpEntryResponse.specStartTime)
}
inline ::std::string* PvpEntryResponse::mutable_specstarttime() {
  set_has_specstarttime();
  if (specstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specstarttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpEntryResponse.specStartTime)
  return specstarttime_;
}
inline ::std::string* PvpEntryResponse::release_specstarttime() {
  clear_has_specstarttime();
  if (specstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = specstarttime_;
    specstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpEntryResponse::set_allocated_specstarttime(::std::string* specstarttime) {
  if (specstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specstarttime_;
  }
  if (specstarttime) {
    set_has_specstarttime();
    specstarttime_ = specstarttime;
  } else {
    clear_has_specstarttime();
    specstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpEntryResponse.specStartTime)
}

// optional string specEndTime = 16;
inline bool PvpEntryResponse::has_specendtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PvpEntryResponse::set_has_specendtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PvpEntryResponse::clear_has_specendtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PvpEntryResponse::clear_specendtime() {
  if (specendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specendtime_->clear();
  }
  clear_has_specendtime();
}
inline const ::std::string& PvpEntryResponse::specendtime() const {
  // @@protoc_insertion_point(field_get:main.PvpEntryResponse.specEndTime)
  return *specendtime_;
}
inline void PvpEntryResponse::set_specendtime(const ::std::string& value) {
  set_has_specendtime();
  if (specendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specendtime_ = new ::std::string;
  }
  specendtime_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpEntryResponse.specEndTime)
}
inline void PvpEntryResponse::set_specendtime(const char* value) {
  set_has_specendtime();
  if (specendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specendtime_ = new ::std::string;
  }
  specendtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpEntryResponse.specEndTime)
}
inline void PvpEntryResponse::set_specendtime(const char* value, size_t size) {
  set_has_specendtime();
  if (specendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specendtime_ = new ::std::string;
  }
  specendtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpEntryResponse.specEndTime)
}
inline ::std::string* PvpEntryResponse::mutable_specendtime() {
  set_has_specendtime();
  if (specendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specendtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpEntryResponse.specEndTime)
  return specendtime_;
}
inline ::std::string* PvpEntryResponse::release_specendtime() {
  clear_has_specendtime();
  if (specendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = specendtime_;
    specendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpEntryResponse::set_allocated_specendtime(::std::string* specendtime) {
  if (specendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specendtime_;
  }
  if (specendtime) {
    set_has_specendtime();
    specendtime_ = specendtime;
  } else {
    clear_has_specendtime();
    specendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpEntryResponse.specEndTime)
}

// -------------------------------------------------------------------

// PvpTopRequest

// required int32 type = 1;
inline bool PvpTopRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpTopRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpTopRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpTopRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PvpTopRequest::type() const {
  // @@protoc_insertion_point(field_get:main.PvpTopRequest.type)
  return type_;
}
inline void PvpTopRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:main.PvpTopRequest.type)
}

// required int32 page = 2;
inline bool PvpTopRequest::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpTopRequest::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpTopRequest::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpTopRequest::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 PvpTopRequest::page() const {
  // @@protoc_insertion_point(field_get:main.PvpTopRequest.page)
  return page_;
}
inline void PvpTopRequest::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:main.PvpTopRequest.page)
}

// -------------------------------------------------------------------

// PvpTopResponse

// optional int32 allCount = 1;
inline bool PvpTopResponse::has_allcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpTopResponse::set_has_allcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpTopResponse::clear_has_allcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpTopResponse::clear_allcount() {
  allcount_ = 0;
  clear_has_allcount();
}
inline ::google::protobuf::int32 PvpTopResponse::allcount() const {
  // @@protoc_insertion_point(field_get:main.PvpTopResponse.allCount)
  return allcount_;
}
inline void PvpTopResponse::set_allcount(::google::protobuf::int32 value) {
  set_has_allcount();
  allcount_ = value;
  // @@protoc_insertion_point(field_set:main.PvpTopResponse.allCount)
}

// optional int32 type = 2;
inline bool PvpTopResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpTopResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpTopResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpTopResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PvpTopResponse::type() const {
  // @@protoc_insertion_point(field_get:main.PvpTopResponse.type)
  return type_;
}
inline void PvpTopResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:main.PvpTopResponse.type)
}

// repeated .main.TopPlayerMessage players = 3;
inline int PvpTopResponse::players_size() const {
  return players_.size();
}
inline void PvpTopResponse::clear_players() {
  players_.Clear();
}
inline const ::main::TopPlayerMessage& PvpTopResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:main.PvpTopResponse.players)
  return players_.Get(index);
}
inline ::main::TopPlayerMessage* PvpTopResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:main.PvpTopResponse.players)
  return players_.Mutable(index);
}
inline ::main::TopPlayerMessage* PvpTopResponse::add_players() {
  // @@protoc_insertion_point(field_add:main.PvpTopResponse.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >&
PvpTopResponse::players() const {
  // @@protoc_insertion_point(field_list:main.PvpTopResponse.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >*
PvpTopResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:main.PvpTopResponse.players)
  return &players_;
}

// -------------------------------------------------------------------

// PvpTopMyLocalRequest

// required int32 type = 1;
inline bool PvpTopMyLocalRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpTopMyLocalRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpTopMyLocalRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpTopMyLocalRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PvpTopMyLocalRequest::type() const {
  // @@protoc_insertion_point(field_get:main.PvpTopMyLocalRequest.type)
  return type_;
}
inline void PvpTopMyLocalRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:main.PvpTopMyLocalRequest.type)
}

// -------------------------------------------------------------------

// PvpTopMyLocalResponse

// repeated .main.TopPlayerMessage players = 2;
inline int PvpTopMyLocalResponse::players_size() const {
  return players_.size();
}
inline void PvpTopMyLocalResponse::clear_players() {
  players_.Clear();
}
inline const ::main::TopPlayerMessage& PvpTopMyLocalResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:main.PvpTopMyLocalResponse.players)
  return players_.Get(index);
}
inline ::main::TopPlayerMessage* PvpTopMyLocalResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:main.PvpTopMyLocalResponse.players)
  return players_.Mutable(index);
}
inline ::main::TopPlayerMessage* PvpTopMyLocalResponse::add_players() {
  // @@protoc_insertion_point(field_add:main.PvpTopMyLocalResponse.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >&
PvpTopMyLocalResponse::players() const {
  // @@protoc_insertion_point(field_list:main.PvpTopMyLocalResponse.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::TopPlayerMessage >*
PvpTopMyLocalResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:main.PvpTopMyLocalResponse.players)
  return &players_;
}

// -------------------------------------------------------------------

// TopPlayerMessage

// optional int32 headId = 1;
inline bool TopPlayerMessage::has_headid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopPlayerMessage::set_has_headid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopPlayerMessage::clear_has_headid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopPlayerMessage::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 TopPlayerMessage::headid() const {
  // @@protoc_insertion_point(field_get:main.TopPlayerMessage.headId)
  return headid_;
}
inline void TopPlayerMessage::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
  // @@protoc_insertion_point(field_set:main.TopPlayerMessage.headId)
}

// optional string name = 2;
inline bool TopPlayerMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopPlayerMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopPlayerMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopPlayerMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TopPlayerMessage::name() const {
  // @@protoc_insertion_point(field_get:main.TopPlayerMessage.name)
  return *name_;
}
inline void TopPlayerMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:main.TopPlayerMessage.name)
}
inline void TopPlayerMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.TopPlayerMessage.name)
}
inline void TopPlayerMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.TopPlayerMessage.name)
}
inline ::std::string* TopPlayerMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.TopPlayerMessage.name)
  return name_;
}
inline ::std::string* TopPlayerMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TopPlayerMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.TopPlayerMessage.name)
}

// optional int32 topPos = 3;
inline bool TopPlayerMessage::has_toppos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopPlayerMessage::set_has_toppos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopPlayerMessage::clear_has_toppos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopPlayerMessage::clear_toppos() {
  toppos_ = 0;
  clear_has_toppos();
}
inline ::google::protobuf::int32 TopPlayerMessage::toppos() const {
  // @@protoc_insertion_point(field_get:main.TopPlayerMessage.topPos)
  return toppos_;
}
inline void TopPlayerMessage::set_toppos(::google::protobuf::int32 value) {
  set_has_toppos();
  toppos_ = value;
  // @@protoc_insertion_point(field_set:main.TopPlayerMessage.topPos)
}

// optional int32 topLevel = 4;
inline bool TopPlayerMessage::has_toplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopPlayerMessage::set_has_toplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopPlayerMessage::clear_has_toplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopPlayerMessage::clear_toplevel() {
  toplevel_ = 0;
  clear_has_toplevel();
}
inline ::google::protobuf::int32 TopPlayerMessage::toplevel() const {
  // @@protoc_insertion_point(field_get:main.TopPlayerMessage.topLevel)
  return toplevel_;
}
inline void TopPlayerMessage::set_toplevel(::google::protobuf::int32 value) {
  set_has_toplevel();
  toplevel_ = value;
  // @@protoc_insertion_point(field_set:main.TopPlayerMessage.topLevel)
}

// optional int32 fightTimes = 5;
inline bool TopPlayerMessage::has_fighttimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopPlayerMessage::set_has_fighttimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopPlayerMessage::clear_has_fighttimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopPlayerMessage::clear_fighttimes() {
  fighttimes_ = 0;
  clear_has_fighttimes();
}
inline ::google::protobuf::int32 TopPlayerMessage::fighttimes() const {
  // @@protoc_insertion_point(field_get:main.TopPlayerMessage.fightTimes)
  return fighttimes_;
}
inline void TopPlayerMessage::set_fighttimes(::google::protobuf::int32 value) {
  set_has_fighttimes();
  fighttimes_ = value;
  // @@protoc_insertion_point(field_set:main.TopPlayerMessage.fightTimes)
}

// optional float winRatio = 6;
inline bool TopPlayerMessage::has_winratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopPlayerMessage::set_has_winratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopPlayerMessage::clear_has_winratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopPlayerMessage::clear_winratio() {
  winratio_ = 0;
  clear_has_winratio();
}
inline float TopPlayerMessage::winratio() const {
  // @@protoc_insertion_point(field_get:main.TopPlayerMessage.winRatio)
  return winratio_;
}
inline void TopPlayerMessage::set_winratio(float value) {
  set_has_winratio();
  winratio_ = value;
  // @@protoc_insertion_point(field_set:main.TopPlayerMessage.winRatio)
}

// -------------------------------------------------------------------

// PvpApplyRequest

// optional int32 type = 1;
inline bool PvpApplyRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpApplyRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpApplyRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpApplyRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PvpApplyRequest::type() const {
  // @@protoc_insertion_point(field_get:main.PvpApplyRequest.type)
  return type_;
}
inline void PvpApplyRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:main.PvpApplyRequest.type)
}

// -------------------------------------------------------------------

// PvpApplyResponse

// optional int32 result = 1;
inline bool PvpApplyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpApplyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpApplyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpApplyResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpApplyResponse::result() const {
  // @@protoc_insertion_point(field_get:main.PvpApplyResponse.result)
  return result_;
}
inline void PvpApplyResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:main.PvpApplyResponse.result)
}

// -------------------------------------------------------------------

// CheckReadyResponse

// optional int32 result = 1;
inline bool CheckReadyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckReadyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckReadyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckReadyResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CheckReadyResponse::result() const {
  // @@protoc_insertion_point(field_get:main.CheckReadyResponse.result)
  return result_;
}
inline void CheckReadyResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:main.CheckReadyResponse.result)
}

// -------------------------------------------------------------------

// PvpExitApplyRequest

// -------------------------------------------------------------------

// PvpExitApplyResponse

// -------------------------------------------------------------------

// PvpGetReadyRequest

// -------------------------------------------------------------------

// PvpGetReadyResponse

// -------------------------------------------------------------------

// PvpMatchingResponse

// optional int32 result = 1;
inline bool PvpMatchingResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpMatchingResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpMatchingResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpMatchingResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpMatchingResponse::result() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.result)
  return result_;
}
inline void PvpMatchingResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.result)
}

// optional string fightId = 2;
inline bool PvpMatchingResponse::has_fightid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpMatchingResponse::set_has_fightid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpMatchingResponse::clear_has_fightid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpMatchingResponse::clear_fightid() {
  if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fightid_->clear();
  }
  clear_has_fightid();
}
inline const ::std::string& PvpMatchingResponse::fightid() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.fightId)
  return *fightid_;
}
inline void PvpMatchingResponse::set_fightid(const ::std::string& value) {
  set_has_fightid();
  if (fightid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fightid_ = new ::std::string;
  }
  fightid_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.fightId)
}
inline void PvpMatchingResponse::set_fightid(const char* value) {
  set_has_fightid();
  if (fightid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fightid_ = new ::std::string;
  }
  fightid_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpMatchingResponse.fightId)
}
inline void PvpMatchingResponse::set_fightid(const char* value, size_t size) {
  set_has_fightid();
  if (fightid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fightid_ = new ::std::string;
  }
  fightid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpMatchingResponse.fightId)
}
inline ::std::string* PvpMatchingResponse::mutable_fightid() {
  set_has_fightid();
  if (fightid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fightid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpMatchingResponse.fightId)
  return fightid_;
}
inline ::std::string* PvpMatchingResponse::release_fightid() {
  clear_has_fightid();
  if (fightid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fightid_;
    fightid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpMatchingResponse::set_allocated_fightid(::std::string* fightid) {
  if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fightid_;
  }
  if (fightid) {
    set_has_fightid();
    fightid_ = fightid;
  } else {
    clear_has_fightid();
    fightid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpMatchingResponse.fightId)
}

// optional string ip = 3;
inline bool PvpMatchingResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpMatchingResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpMatchingResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpMatchingResponse::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PvpMatchingResponse::ip() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.ip)
  return *ip_;
}
inline void PvpMatchingResponse::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.ip)
}
inline void PvpMatchingResponse::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpMatchingResponse.ip)
}
inline void PvpMatchingResponse::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpMatchingResponse.ip)
}
inline ::std::string* PvpMatchingResponse::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpMatchingResponse.ip)
  return ip_;
}
inline ::std::string* PvpMatchingResponse::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpMatchingResponse::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpMatchingResponse.ip)
}

// optional int32 port = 4;
inline bool PvpMatchingResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpMatchingResponse::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpMatchingResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpMatchingResponse::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 PvpMatchingResponse::port() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.port)
  return port_;
}
inline void PvpMatchingResponse::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.port)
}

// optional int32 icon = 5;
inline bool PvpMatchingResponse::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpMatchingResponse::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpMatchingResponse::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpMatchingResponse::clear_icon() {
  icon_ = 0;
  clear_has_icon();
}
inline ::google::protobuf::int32 PvpMatchingResponse::icon() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.icon)
  return icon_;
}
inline void PvpMatchingResponse::set_icon(::google::protobuf::int32 value) {
  set_has_icon();
  icon_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.icon)
}

// optional string name = 6;
inline bool PvpMatchingResponse::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpMatchingResponse::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpMatchingResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpMatchingResponse::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PvpMatchingResponse::name() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.name)
  return *name_;
}
inline void PvpMatchingResponse::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.name)
}
inline void PvpMatchingResponse::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpMatchingResponse.name)
}
inline void PvpMatchingResponse::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpMatchingResponse.name)
}
inline ::std::string* PvpMatchingResponse::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpMatchingResponse.name)
  return name_;
}
inline ::std::string* PvpMatchingResponse::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpMatchingResponse::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpMatchingResponse.name)
}

// optional int32 pos = 7;
inline bool PvpMatchingResponse::has_pos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpMatchingResponse::set_has_pos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpMatchingResponse::clear_has_pos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpMatchingResponse::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 PvpMatchingResponse::pos() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.pos)
  return pos_;
}
inline void PvpMatchingResponse::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.pos)
}

// optional int32 level = 8;
inline bool PvpMatchingResponse::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvpMatchingResponse::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvpMatchingResponse::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvpMatchingResponse::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PvpMatchingResponse::level() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.level)
  return level_;
}
inline void PvpMatchingResponse::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.level)
}

// optional int32 fightCounter = 9;
inline bool PvpMatchingResponse::has_fightcounter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PvpMatchingResponse::set_has_fightcounter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PvpMatchingResponse::clear_has_fightcounter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PvpMatchingResponse::clear_fightcounter() {
  fightcounter_ = 0;
  clear_has_fightcounter();
}
inline ::google::protobuf::int32 PvpMatchingResponse::fightcounter() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.fightCounter)
  return fightcounter_;
}
inline void PvpMatchingResponse::set_fightcounter(::google::protobuf::int32 value) {
  set_has_fightcounter();
  fightcounter_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.fightCounter)
}

// optional float winRatio = 10;
inline bool PvpMatchingResponse::has_winratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PvpMatchingResponse::set_has_winratio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PvpMatchingResponse::clear_has_winratio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PvpMatchingResponse::clear_winratio() {
  winratio_ = 0;
  clear_has_winratio();
}
inline float PvpMatchingResponse::winratio() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.winRatio)
  return winratio_;
}
inline void PvpMatchingResponse::set_winratio(float value) {
  set_has_winratio();
  winratio_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.winRatio)
}

// optional int32 serverId = 11;
inline bool PvpMatchingResponse::has_serverid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PvpMatchingResponse::set_has_serverid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PvpMatchingResponse::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PvpMatchingResponse::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 PvpMatchingResponse::serverid() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.serverId)
  return serverid_;
}
inline void PvpMatchingResponse::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.serverId)
}

// optional string serverName = 12;
inline bool PvpMatchingResponse::has_servername() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PvpMatchingResponse::set_has_servername() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PvpMatchingResponse::clear_has_servername() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PvpMatchingResponse::clear_servername() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& PvpMatchingResponse::servername() const {
  // @@protoc_insertion_point(field_get:main.PvpMatchingResponse.serverName)
  return *servername_;
}
inline void PvpMatchingResponse::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvpMatchingResponse.serverName)
}
inline void PvpMatchingResponse::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvpMatchingResponse.serverName)
}
inline void PvpMatchingResponse::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvpMatchingResponse.serverName)
}
inline ::std::string* PvpMatchingResponse::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvpMatchingResponse.serverName)
  return servername_;
}
inline ::std::string* PvpMatchingResponse::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvpMatchingResponse::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvpMatchingResponse.serverName)
}

// -------------------------------------------------------------------

// PvpOfficerConfig

// optional int32 myLord = 1;
inline bool PvpOfficerConfig::has_mylord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpOfficerConfig::set_has_mylord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpOfficerConfig::clear_has_mylord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpOfficerConfig::clear_mylord() {
  mylord_ = 0;
  clear_has_mylord();
}
inline ::google::protobuf::int32 PvpOfficerConfig::mylord() const {
  // @@protoc_insertion_point(field_get:main.PvpOfficerConfig.myLord)
  return mylord_;
}
inline void PvpOfficerConfig::set_mylord(::google::protobuf::int32 value) {
  set_has_mylord();
  mylord_ = value;
  // @@protoc_insertion_point(field_set:main.PvpOfficerConfig.myLord)
}

// repeated int32 myCards = 2;
inline int PvpOfficerConfig::mycards_size() const {
  return mycards_.size();
}
inline void PvpOfficerConfig::clear_mycards() {
  mycards_.Clear();
}
inline ::google::protobuf::int32 PvpOfficerConfig::mycards(int index) const {
  // @@protoc_insertion_point(field_get:main.PvpOfficerConfig.myCards)
  return mycards_.Get(index);
}
inline void PvpOfficerConfig::set_mycards(int index, ::google::protobuf::int32 value) {
  mycards_.Set(index, value);
  // @@protoc_insertion_point(field_set:main.PvpOfficerConfig.myCards)
}
inline void PvpOfficerConfig::add_mycards(::google::protobuf::int32 value) {
  mycards_.Add(value);
  // @@protoc_insertion_point(field_add:main.PvpOfficerConfig.myCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PvpOfficerConfig::mycards() const {
  // @@protoc_insertion_point(field_list:main.PvpOfficerConfig.myCards)
  return mycards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PvpOfficerConfig::mutable_mycards() {
  // @@protoc_insertion_point(field_mutable_list:main.PvpOfficerConfig.myCards)
  return &mycards_;
}

// optional int32 enemyLord = 3;
inline bool PvpOfficerConfig::has_enemylord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpOfficerConfig::set_has_enemylord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpOfficerConfig::clear_has_enemylord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpOfficerConfig::clear_enemylord() {
  enemylord_ = 0;
  clear_has_enemylord();
}
inline ::google::protobuf::int32 PvpOfficerConfig::enemylord() const {
  // @@protoc_insertion_point(field_get:main.PvpOfficerConfig.enemyLord)
  return enemylord_;
}
inline void PvpOfficerConfig::set_enemylord(::google::protobuf::int32 value) {
  set_has_enemylord();
  enemylord_ = value;
  // @@protoc_insertion_point(field_set:main.PvpOfficerConfig.enemyLord)
}

// repeated int32 enemyCards = 4;
inline int PvpOfficerConfig::enemycards_size() const {
  return enemycards_.size();
}
inline void PvpOfficerConfig::clear_enemycards() {
  enemycards_.Clear();
}
inline ::google::protobuf::int32 PvpOfficerConfig::enemycards(int index) const {
  // @@protoc_insertion_point(field_get:main.PvpOfficerConfig.enemyCards)
  return enemycards_.Get(index);
}
inline void PvpOfficerConfig::set_enemycards(int index, ::google::protobuf::int32 value) {
  enemycards_.Set(index, value);
  // @@protoc_insertion_point(field_set:main.PvpOfficerConfig.enemyCards)
}
inline void PvpOfficerConfig::add_enemycards(::google::protobuf::int32 value) {
  enemycards_.Add(value);
  // @@protoc_insertion_point(field_add:main.PvpOfficerConfig.enemyCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PvpOfficerConfig::enemycards() const {
  // @@protoc_insertion_point(field_list:main.PvpOfficerConfig.enemyCards)
  return enemycards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PvpOfficerConfig::mutable_enemycards() {
  // @@protoc_insertion_point(field_mutable_list:main.PvpOfficerConfig.enemyCards)
  return &enemycards_;
}

// -------------------------------------------------------------------

// PvpShopListRequest

// required int32 type = 1;
inline bool PvpShopListRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpShopListRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpShopListRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpShopListRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PvpShopListRequest::type() const {
  // @@protoc_insertion_point(field_get:main.PvpShopListRequest.type)
  return type_;
}
inline void PvpShopListRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopListRequest.type)
}

// -------------------------------------------------------------------

// PvpShopListResponse

// optional int32 awardScore = 1;
inline bool PvpShopListResponse::has_awardscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpShopListResponse::set_has_awardscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpShopListResponse::clear_has_awardscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpShopListResponse::clear_awardscore() {
  awardscore_ = 0;
  clear_has_awardscore();
}
inline ::google::protobuf::int32 PvpShopListResponse::awardscore() const {
  // @@protoc_insertion_point(field_get:main.PvpShopListResponse.awardScore)
  return awardscore_;
}
inline void PvpShopListResponse::set_awardscore(::google::protobuf::int32 value) {
  set_has_awardscore();
  awardscore_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopListResponse.awardScore)
}

// repeated .main.PvpShopItem items = 2;
inline int PvpShopListResponse::items_size() const {
  return items_.size();
}
inline void PvpShopListResponse::clear_items() {
  items_.Clear();
}
inline const ::main::PvpShopItem& PvpShopListResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:main.PvpShopListResponse.items)
  return items_.Get(index);
}
inline ::main::PvpShopItem* PvpShopListResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:main.PvpShopListResponse.items)
  return items_.Mutable(index);
}
inline ::main::PvpShopItem* PvpShopListResponse::add_items() {
  // @@protoc_insertion_point(field_add:main.PvpShopListResponse.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::PvpShopItem >&
PvpShopListResponse::items() const {
  // @@protoc_insertion_point(field_list:main.PvpShopListResponse.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::PvpShopItem >*
PvpShopListResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:main.PvpShopListResponse.items)
  return &items_;
}

// -------------------------------------------------------------------

// PvpShopItem

// optional int32 uid = 1;
inline bool PvpShopItem::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpShopItem::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpShopItem::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpShopItem::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PvpShopItem::uid() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.uid)
  return uid_;
}
inline void PvpShopItem::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.uid)
}

// optional int32 itemId = 2;
inline bool PvpShopItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpShopItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpShopItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpShopItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 PvpShopItem::itemid() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.itemId)
  return itemid_;
}
inline void PvpShopItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.itemId)
}

// optional sint32 itemType = 3;
inline bool PvpShopItem::has_itemtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpShopItem::set_has_itemtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpShopItem::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpShopItem::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::google::protobuf::int32 PvpShopItem::itemtype() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.itemType)
  return itemtype_;
}
inline void PvpShopItem::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.itemType)
}

// optional sint32 itemCount = 4;
inline bool PvpShopItem::has_itemcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpShopItem::set_has_itemcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpShopItem::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpShopItem::clear_itemcount() {
  itemcount_ = 0;
  clear_has_itemcount();
}
inline ::google::protobuf::int32 PvpShopItem::itemcount() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.itemCount)
  return itemcount_;
}
inline void PvpShopItem::set_itemcount(::google::protobuf::int32 value) {
  set_has_itemcount();
  itemcount_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.itemCount)
}

// optional sint32 itemLevel = 5;
inline bool PvpShopItem::has_itemlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvpShopItem::set_has_itemlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvpShopItem::clear_has_itemlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvpShopItem::clear_itemlevel() {
  itemlevel_ = 0;
  clear_has_itemlevel();
}
inline ::google::protobuf::int32 PvpShopItem::itemlevel() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.itemLevel)
  return itemlevel_;
}
inline void PvpShopItem::set_itemlevel(::google::protobuf::int32 value) {
  set_has_itemlevel();
  itemlevel_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.itemLevel)
}

// optional int32 costScore = 6;
inline bool PvpShopItem::has_costscore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvpShopItem::set_has_costscore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvpShopItem::clear_has_costscore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvpShopItem::clear_costscore() {
  costscore_ = 0;
  clear_has_costscore();
}
inline ::google::protobuf::int32 PvpShopItem::costscore() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.costScore)
  return costscore_;
}
inline void PvpShopItem::set_costscore(::google::protobuf::int32 value) {
  set_has_costscore();
  costscore_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.costScore)
}

// optional int32 pvpLevelMin = 7;
inline bool PvpShopItem::has_pvplevelmin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpShopItem::set_has_pvplevelmin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpShopItem::clear_has_pvplevelmin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpShopItem::clear_pvplevelmin() {
  pvplevelmin_ = 0;
  clear_has_pvplevelmin();
}
inline ::google::protobuf::int32 PvpShopItem::pvplevelmin() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.pvpLevelMin)
  return pvplevelmin_;
}
inline void PvpShopItem::set_pvplevelmin(::google::protobuf::int32 value) {
  set_has_pvplevelmin();
  pvplevelmin_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.pvpLevelMin)
}

// optional int32 currentCount = 8;
inline bool PvpShopItem::has_currentcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvpShopItem::set_has_currentcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvpShopItem::clear_has_currentcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvpShopItem::clear_currentcount() {
  currentcount_ = 0;
  clear_has_currentcount();
}
inline ::google::protobuf::int32 PvpShopItem::currentcount() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.currentCount)
  return currentcount_;
}
inline void PvpShopItem::set_currentcount(::google::protobuf::int32 value) {
  set_has_currentcount();
  currentcount_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.currentCount)
}

// optional int32 maxCount = 9;
inline bool PvpShopItem::has_maxcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PvpShopItem::set_has_maxcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PvpShopItem::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PvpShopItem::clear_maxcount() {
  maxcount_ = 0;
  clear_has_maxcount();
}
inline ::google::protobuf::int32 PvpShopItem::maxcount() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.maxCount)
  return maxcount_;
}
inline void PvpShopItem::set_maxcount(::google::protobuf::int32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.maxCount)
}

// optional int32 discountCostScore = 10;
inline bool PvpShopItem::has_discountcostscore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PvpShopItem::set_has_discountcostscore() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PvpShopItem::clear_has_discountcostscore() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PvpShopItem::clear_discountcostscore() {
  discountcostscore_ = 0;
  clear_has_discountcostscore();
}
inline ::google::protobuf::int32 PvpShopItem::discountcostscore() const {
  // @@protoc_insertion_point(field_get:main.PvpShopItem.discountCostScore)
  return discountcostscore_;
}
inline void PvpShopItem::set_discountcostscore(::google::protobuf::int32 value) {
  set_has_discountcostscore();
  discountcostscore_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopItem.discountCostScore)
}

// -------------------------------------------------------------------

// PvpShopPurchRequest

// required int32 uid = 1;
inline bool PvpShopPurchRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpShopPurchRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpShopPurchRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpShopPurchRequest::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PvpShopPurchRequest::uid() const {
  // @@protoc_insertion_point(field_get:main.PvpShopPurchRequest.uid)
  return uid_;
}
inline void PvpShopPurchRequest::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopPurchRequest.uid)
}

// -------------------------------------------------------------------

// PvpShopPurchResponse

// optional int32 result = 1;
inline bool PvpShopPurchResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpShopPurchResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpShopPurchResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpShopPurchResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PvpShopPurchResponse::result() const {
  // @@protoc_insertion_point(field_get:main.PvpShopPurchResponse.result)
  return result_;
}
inline void PvpShopPurchResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:main.PvpShopPurchResponse.result)
}

// -------------------------------------------------------------------

// PvPDayAwardGiftEntryRequest

// -------------------------------------------------------------------

// PvPDayAwardGiftEntryResponse

// optional int32 fightCounter = 1;
inline bool PvPDayAwardGiftEntryResponse::has_fightcounter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPDayAwardGiftEntryResponse::set_has_fightcounter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPDayAwardGiftEntryResponse::clear_has_fightcounter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPDayAwardGiftEntryResponse::clear_fightcounter() {
  fightcounter_ = 0;
  clear_has_fightcounter();
}
inline ::google::protobuf::int32 PvPDayAwardGiftEntryResponse::fightcounter() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftEntryResponse.fightCounter)
  return fightcounter_;
}
inline void PvPDayAwardGiftEntryResponse::set_fightcounter(::google::protobuf::int32 value) {
  set_has_fightcounter();
  fightcounter_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftEntryResponse.fightCounter)
}

// repeated .main.PvPDayAwardGiftBag list = 2;
inline int PvPDayAwardGiftEntryResponse::list_size() const {
  return list_.size();
}
inline void PvPDayAwardGiftEntryResponse::clear_list() {
  list_.Clear();
}
inline const ::main::PvPDayAwardGiftBag& PvPDayAwardGiftEntryResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftEntryResponse.list)
  return list_.Get(index);
}
inline ::main::PvPDayAwardGiftBag* PvPDayAwardGiftEntryResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:main.PvPDayAwardGiftEntryResponse.list)
  return list_.Mutable(index);
}
inline ::main::PvPDayAwardGiftBag* PvPDayAwardGiftEntryResponse::add_list() {
  // @@protoc_insertion_point(field_add:main.PvPDayAwardGiftEntryResponse.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >&
PvPDayAwardGiftEntryResponse::list() const {
  // @@protoc_insertion_point(field_list:main.PvPDayAwardGiftEntryResponse.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >*
PvPDayAwardGiftEntryResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:main.PvPDayAwardGiftEntryResponse.list)
  return &list_;
}

// -------------------------------------------------------------------

// PvPDayAwardGiftBag

// optional int32 level = 1;
inline bool PvPDayAwardGiftBag::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPDayAwardGiftBag::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPDayAwardGiftBag::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::level() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.level)
  return level_;
}
inline void PvPDayAwardGiftBag::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.level)
}

// optional string name = 2;
inline bool PvPDayAwardGiftBag::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPDayAwardGiftBag::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPDayAwardGiftBag::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PvPDayAwardGiftBag::name() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.name)
  return *name_;
}
inline void PvPDayAwardGiftBag::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.name)
}
inline void PvPDayAwardGiftBag::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvPDayAwardGiftBag.name)
}
inline void PvPDayAwardGiftBag::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvPDayAwardGiftBag.name)
}
inline ::std::string* PvPDayAwardGiftBag::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvPDayAwardGiftBag.name)
  return name_;
}
inline ::std::string* PvPDayAwardGiftBag::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvPDayAwardGiftBag::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvPDayAwardGiftBag.name)
}

// optional string info = 3;
inline bool PvPDayAwardGiftBag::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPDayAwardGiftBag::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPDayAwardGiftBag::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& PvPDayAwardGiftBag::info() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.info)
  return *info_;
}
inline void PvPDayAwardGiftBag::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.info)
}
inline void PvPDayAwardGiftBag::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvPDayAwardGiftBag.info)
}
inline void PvPDayAwardGiftBag::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvPDayAwardGiftBag.info)
}
inline ::std::string* PvPDayAwardGiftBag::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvPDayAwardGiftBag.info)
  return info_;
}
inline ::std::string* PvPDayAwardGiftBag::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvPDayAwardGiftBag::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvPDayAwardGiftBag.info)
}

// optional int32 count = 4;
inline bool PvPDayAwardGiftBag::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPDayAwardGiftBag::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPDayAwardGiftBag::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::count() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.count)
  return count_;
}
inline void PvPDayAwardGiftBag::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.count)
}

// optional int32 giftCoin = 5;
inline bool PvPDayAwardGiftBag::has_giftcoin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_giftcoin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvPDayAwardGiftBag::clear_has_giftcoin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvPDayAwardGiftBag::clear_giftcoin() {
  giftcoin_ = 0;
  clear_has_giftcoin();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::giftcoin() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.giftCoin)
  return giftcoin_;
}
inline void PvPDayAwardGiftBag::set_giftcoin(::google::protobuf::int32 value) {
  set_has_giftcoin();
  giftcoin_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.giftCoin)
}

// optional int32 giftAward = 6;
inline bool PvPDayAwardGiftBag::has_giftaward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_giftaward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvPDayAwardGiftBag::clear_has_giftaward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvPDayAwardGiftBag::clear_giftaward() {
  giftaward_ = 0;
  clear_has_giftaward();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::giftaward() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.giftAward)
  return giftaward_;
}
inline void PvPDayAwardGiftBag::set_giftaward(::google::protobuf::int32 value) {
  set_has_giftaward();
  giftaward_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.giftAward)
}

// optional int32 speaker = 7;
inline bool PvPDayAwardGiftBag::has_speaker() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_speaker() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvPDayAwardGiftBag::clear_has_speaker() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvPDayAwardGiftBag::clear_speaker() {
  speaker_ = 0;
  clear_has_speaker();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::speaker() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.speaker)
  return speaker_;
}
inline void PvPDayAwardGiftBag::set_speaker(::google::protobuf::int32 value) {
  set_has_speaker();
  speaker_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.speaker)
}

// optional int32 liandan = 8;
inline bool PvPDayAwardGiftBag::has_liandan() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_liandan() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvPDayAwardGiftBag::clear_has_liandan() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvPDayAwardGiftBag::clear_liandan() {
  liandan_ = 0;
  clear_has_liandan();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::liandan() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.liandan)
  return liandan_;
}
inline void PvPDayAwardGiftBag::set_liandan(::google::protobuf::int32 value) {
  set_has_liandan();
  liandan_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.liandan)
}

// optional int32 isBuy = 9;
inline bool PvPDayAwardGiftBag::has_isbuy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_isbuy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PvPDayAwardGiftBag::clear_has_isbuy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PvPDayAwardGiftBag::clear_isbuy() {
  isbuy_ = 0;
  clear_has_isbuy();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::isbuy() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.isBuy)
  return isbuy_;
}
inline void PvPDayAwardGiftBag::set_isbuy(::google::protobuf::int32 value) {
  set_has_isbuy();
  isbuy_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.isBuy)
}

// repeated .main.PvPDayAwardGiftItem list = 10;
inline int PvPDayAwardGiftBag::list_size() const {
  return list_.size();
}
inline void PvPDayAwardGiftBag::clear_list() {
  list_.Clear();
}
inline const ::main::PvPDayAwardGiftItem& PvPDayAwardGiftBag::list(int index) const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.list)
  return list_.Get(index);
}
inline ::main::PvPDayAwardGiftItem* PvPDayAwardGiftBag::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:main.PvPDayAwardGiftBag.list)
  return list_.Mutable(index);
}
inline ::main::PvPDayAwardGiftItem* PvPDayAwardGiftBag::add_list() {
  // @@protoc_insertion_point(field_add:main.PvPDayAwardGiftBag.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftItem >&
PvPDayAwardGiftBag::list() const {
  // @@protoc_insertion_point(field_list:main.PvPDayAwardGiftBag.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftItem >*
PvPDayAwardGiftBag::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:main.PvPDayAwardGiftBag.list)
  return &list_;
}

// optional int32 giftCostDiscount = 11;
inline bool PvPDayAwardGiftBag::has_giftcostdiscount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_giftcostdiscount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PvPDayAwardGiftBag::clear_has_giftcostdiscount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PvPDayAwardGiftBag::clear_giftcostdiscount() {
  giftcostdiscount_ = 0;
  clear_has_giftcostdiscount();
}
inline ::google::protobuf::int32 PvPDayAwardGiftBag::giftcostdiscount() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.giftCostDiscount)
  return giftcostdiscount_;
}
inline void PvPDayAwardGiftBag::set_giftcostdiscount(::google::protobuf::int32 value) {
  set_has_giftcostdiscount();
  giftcostdiscount_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.giftCostDiscount)
}

// optional string custom = 12;
inline bool PvPDayAwardGiftBag::has_custom() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PvPDayAwardGiftBag::set_has_custom() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PvPDayAwardGiftBag::clear_has_custom() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PvPDayAwardGiftBag::clear_custom() {
  if (custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_->clear();
  }
  clear_has_custom();
}
inline const ::std::string& PvPDayAwardGiftBag::custom() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftBag.custom)
  return *custom_;
}
inline void PvPDayAwardGiftBag::set_custom(const ::std::string& value) {
  set_has_custom();
  if (custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_ = new ::std::string;
  }
  custom_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftBag.custom)
}
inline void PvPDayAwardGiftBag::set_custom(const char* value) {
  set_has_custom();
  if (custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_ = new ::std::string;
  }
  custom_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvPDayAwardGiftBag.custom)
}
inline void PvPDayAwardGiftBag::set_custom(const char* value, size_t size) {
  set_has_custom();
  if (custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_ = new ::std::string;
  }
  custom_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvPDayAwardGiftBag.custom)
}
inline ::std::string* PvPDayAwardGiftBag::mutable_custom() {
  set_has_custom();
  if (custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    custom_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvPDayAwardGiftBag.custom)
  return custom_;
}
inline ::std::string* PvPDayAwardGiftBag::release_custom() {
  clear_has_custom();
  if (custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = custom_;
    custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvPDayAwardGiftBag::set_allocated_custom(::std::string* custom) {
  if (custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_;
  }
  if (custom) {
    set_has_custom();
    custom_ = custom;
  } else {
    clear_has_custom();
    custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvPDayAwardGiftBag.custom)
}

// -------------------------------------------------------------------

// PvPDayAwardGiftItem

// optional int32 itemType = 1;
inline bool PvPDayAwardGiftItem::has_itemtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPDayAwardGiftItem::set_has_itemtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPDayAwardGiftItem::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPDayAwardGiftItem::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::google::protobuf::int32 PvPDayAwardGiftItem::itemtype() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftItem.itemType)
  return itemtype_;
}
inline void PvPDayAwardGiftItem::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftItem.itemType)
}

// optional int32 itemId = 2;
inline bool PvPDayAwardGiftItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPDayAwardGiftItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPDayAwardGiftItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPDayAwardGiftItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 PvPDayAwardGiftItem::itemid() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftItem.itemId)
  return itemid_;
}
inline void PvPDayAwardGiftItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftItem.itemId)
}

// optional int32 num = 3;
inline bool PvPDayAwardGiftItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPDayAwardGiftItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPDayAwardGiftItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPDayAwardGiftItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 PvPDayAwardGiftItem::num() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftItem.num)
  return num_;
}
inline void PvPDayAwardGiftItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftItem.num)
}

// optional string name = 4;
inline bool PvPDayAwardGiftItem::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPDayAwardGiftItem::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPDayAwardGiftItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPDayAwardGiftItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PvPDayAwardGiftItem::name() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftItem.name)
  return *name_;
}
inline void PvPDayAwardGiftItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftItem.name)
}
inline void PvPDayAwardGiftItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.PvPDayAwardGiftItem.name)
}
inline void PvPDayAwardGiftItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.PvPDayAwardGiftItem.name)
}
inline ::std::string* PvPDayAwardGiftItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.PvPDayAwardGiftItem.name)
  return name_;
}
inline ::std::string* PvPDayAwardGiftItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvPDayAwardGiftItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.PvPDayAwardGiftItem.name)
}

// optional int32 star = 5;
inline bool PvPDayAwardGiftItem::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvPDayAwardGiftItem::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvPDayAwardGiftItem::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvPDayAwardGiftItem::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 PvPDayAwardGiftItem::star() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftItem.star)
  return star_;
}
inline void PvPDayAwardGiftItem::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftItem.star)
}

// optional int32 smillStars = 6;
inline bool PvPDayAwardGiftItem::has_smillstars() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvPDayAwardGiftItem::set_has_smillstars() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvPDayAwardGiftItem::clear_has_smillstars() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvPDayAwardGiftItem::clear_smillstars() {
  smillstars_ = 0;
  clear_has_smillstars();
}
inline ::google::protobuf::int32 PvPDayAwardGiftItem::smillstars() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftItem.smillStars)
  return smillstars_;
}
inline void PvPDayAwardGiftItem::set_smillstars(::google::protobuf::int32 value) {
  set_has_smillstars();
  smillstars_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftItem.smillStars)
}

// -------------------------------------------------------------------

// PvPSeasonAwardGiftEntryRequest

// -------------------------------------------------------------------

// PvPSeasonAwardGiftEntryResponse

// optional int32 seasonCount = 1;
inline bool PvPSeasonAwardGiftEntryResponse::has_seasoncount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPSeasonAwardGiftEntryResponse::set_has_seasoncount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPSeasonAwardGiftEntryResponse::clear_has_seasoncount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPSeasonAwardGiftEntryResponse::clear_seasoncount() {
  seasoncount_ = 0;
  clear_has_seasoncount();
}
inline ::google::protobuf::int32 PvPSeasonAwardGiftEntryResponse::seasoncount() const {
  // @@protoc_insertion_point(field_get:main.PvPSeasonAwardGiftEntryResponse.seasonCount)
  return seasoncount_;
}
inline void PvPSeasonAwardGiftEntryResponse::set_seasoncount(::google::protobuf::int32 value) {
  set_has_seasoncount();
  seasoncount_ = value;
  // @@protoc_insertion_point(field_set:main.PvPSeasonAwardGiftEntryResponse.seasonCount)
}

// repeated .main.PvPDayAwardGiftBag list = 2;
inline int PvPSeasonAwardGiftEntryResponse::list_size() const {
  return list_.size();
}
inline void PvPSeasonAwardGiftEntryResponse::clear_list() {
  list_.Clear();
}
inline const ::main::PvPDayAwardGiftBag& PvPSeasonAwardGiftEntryResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:main.PvPSeasonAwardGiftEntryResponse.list)
  return list_.Get(index);
}
inline ::main::PvPDayAwardGiftBag* PvPSeasonAwardGiftEntryResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:main.PvPSeasonAwardGiftEntryResponse.list)
  return list_.Mutable(index);
}
inline ::main::PvPDayAwardGiftBag* PvPSeasonAwardGiftEntryResponse::add_list() {
  // @@protoc_insertion_point(field_add:main.PvPSeasonAwardGiftEntryResponse.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >&
PvPSeasonAwardGiftEntryResponse::list() const {
  // @@protoc_insertion_point(field_list:main.PvPSeasonAwardGiftEntryResponse.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::main::PvPDayAwardGiftBag >*
PvPSeasonAwardGiftEntryResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:main.PvPSeasonAwardGiftEntryResponse.list)
  return &list_;
}

// -------------------------------------------------------------------

// PvPDayAwardGiftGetRequest

// optional int32 key = 1;
inline bool PvPDayAwardGiftGetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPDayAwardGiftGetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPDayAwardGiftGetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPDayAwardGiftGetRequest::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 PvPDayAwardGiftGetRequest::key() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftGetRequest.key)
  return key_;
}
inline void PvPDayAwardGiftGetRequest::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftGetRequest.key)
}

// -------------------------------------------------------------------

// PvPDayAwardGiftGetResponse

// optional int32 state = 1;
inline bool PvPDayAwardGiftGetResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPDayAwardGiftGetResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPDayAwardGiftGetResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPDayAwardGiftGetResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PvPDayAwardGiftGetResponse::state() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftGetResponse.state)
  return state_;
}
inline void PvPDayAwardGiftGetResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftGetResponse.state)
}

// optional int32 cout = 2;
inline bool PvPDayAwardGiftGetResponse::has_cout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPDayAwardGiftGetResponse::set_has_cout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPDayAwardGiftGetResponse::clear_has_cout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPDayAwardGiftGetResponse::clear_cout() {
  cout_ = 0;
  clear_has_cout();
}
inline ::google::protobuf::int32 PvPDayAwardGiftGetResponse::cout() const {
  // @@protoc_insertion_point(field_get:main.PvPDayAwardGiftGetResponse.cout)
  return cout_;
}
inline void PvPDayAwardGiftGetResponse::set_cout(::google::protobuf::int32 value) {
  set_has_cout();
  cout_ = value;
  // @@protoc_insertion_point(field_set:main.PvPDayAwardGiftGetResponse.cout)
}

// -------------------------------------------------------------------

// PvPSeasonAwardGiftGetRequest

// optional int32 key = 1;
inline bool PvPSeasonAwardGiftGetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPSeasonAwardGiftGetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPSeasonAwardGiftGetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPSeasonAwardGiftGetRequest::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 PvPSeasonAwardGiftGetRequest::key() const {
  // @@protoc_insertion_point(field_get:main.PvPSeasonAwardGiftGetRequest.key)
  return key_;
}
inline void PvPSeasonAwardGiftGetRequest::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:main.PvPSeasonAwardGiftGetRequest.key)
}

// -------------------------------------------------------------------

// PvPSeasonAwardGiftGetResponse

// optional int32 state = 1;
inline bool PvPSeasonAwardGiftGetResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPSeasonAwardGiftGetResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPSeasonAwardGiftGetResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPSeasonAwardGiftGetResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PvPSeasonAwardGiftGetResponse::state() const {
  // @@protoc_insertion_point(field_get:main.PvPSeasonAwardGiftGetResponse.state)
  return state_;
}
inline void PvPSeasonAwardGiftGetResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:main.PvPSeasonAwardGiftGetResponse.state)
}

// optional int32 cout = 2;
inline bool PvPSeasonAwardGiftGetResponse::has_cout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPSeasonAwardGiftGetResponse::set_has_cout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPSeasonAwardGiftGetResponse::clear_has_cout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPSeasonAwardGiftGetResponse::clear_cout() {
  cout_ = 0;
  clear_has_cout();
}
inline ::google::protobuf::int32 PvPSeasonAwardGiftGetResponse::cout() const {
  // @@protoc_insertion_point(field_get:main.PvPSeasonAwardGiftGetResponse.cout)
  return cout_;
}
inline void PvPSeasonAwardGiftGetResponse::set_cout(::google::protobuf::int32 value) {
  set_has_cout();
  cout_ = value;
  // @@protoc_insertion_point(field_set:main.PvPSeasonAwardGiftGetResponse.cout)
}

// -------------------------------------------------------------------

// PvPEntryMapRequest

// -------------------------------------------------------------------

// PvPActionReadyResponse


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PvpFight_2eproto__INCLUDED
