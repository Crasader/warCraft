// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DayTaskModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DayTaskModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_DayTaskModule_2eproto() {
  delete DayTaskListRequest::default_instance_;
  delete DayTaskListResponse::default_instance_;
  delete DayTaskModel::default_instance_;
  delete DayTaskGetRewardRequest::default_instance_;
  delete DayTaskGetRewardResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DayTaskModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DayTaskModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DayTaskListRequest::default_instance_ = new DayTaskListRequest();
  DayTaskListResponse::default_instance_ = new DayTaskListResponse();
  DayTaskModel::default_instance_ = new DayTaskModel();
  DayTaskGetRewardRequest::default_instance_ = new DayTaskGetRewardRequest();
  DayTaskGetRewardResponse::default_instance_ = new DayTaskGetRewardResponse();
  DayTaskListRequest::default_instance_->InitAsDefaultInstance();
  DayTaskListResponse::default_instance_->InitAsDefaultInstance();
  DayTaskModel::default_instance_->InitAsDefaultInstance();
  DayTaskGetRewardRequest::default_instance_->InitAsDefaultInstance();
  DayTaskGetRewardResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DayTaskModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DayTaskModule_2eproto_once_);
void protobuf_AddDesc_DayTaskModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DayTaskModule_2eproto_once_,
                 &protobuf_AddDesc_DayTaskModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DayTaskModule_2eproto {
  StaticDescriptorInitializer_DayTaskModule_2eproto() {
    protobuf_AddDesc_DayTaskModule_2eproto();
  }
} static_descriptor_initializer_DayTaskModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DayTaskListRequest::DayTaskListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DayTaskListRequest)
}

void DayTaskListRequest::InitAsDefaultInstance() {
}

DayTaskListRequest::DayTaskListRequest(const DayTaskListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DayTaskListRequest)
}

void DayTaskListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayTaskListRequest::~DayTaskListRequest() {
  // @@protoc_insertion_point(destructor:main.DayTaskListRequest)
  SharedDtor();
}

void DayTaskListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DayTaskListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayTaskListRequest& DayTaskListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DayTaskModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DayTaskModule_2eproto();
#endif
  return *default_instance_;
}

DayTaskListRequest* DayTaskListRequest::default_instance_ = NULL;

DayTaskListRequest* DayTaskListRequest::New() const {
  return new DayTaskListRequest;
}

void DayTaskListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayTaskListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DayTaskListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.DayTaskListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DayTaskListRequest)
  return false;
#undef DO_
}

void DayTaskListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DayTaskListRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DayTaskListRequest)
}

int DayTaskListRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayTaskListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayTaskListRequest*>(&from));
}

void DayTaskListRequest::MergeFrom(const DayTaskListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayTaskListRequest::CopyFrom(const DayTaskListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayTaskListRequest::IsInitialized() const {

  return true;
}

void DayTaskListRequest::Swap(DayTaskListRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayTaskListRequest::GetTypeName() const {
  return "main.DayTaskListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DayTaskListResponse::kDayTaskModelFieldNumber;
#endif  // !_MSC_VER

DayTaskListResponse::DayTaskListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DayTaskListResponse)
}

void DayTaskListResponse::InitAsDefaultInstance() {
}

DayTaskListResponse::DayTaskListResponse(const DayTaskListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DayTaskListResponse)
}

void DayTaskListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayTaskListResponse::~DayTaskListResponse() {
  // @@protoc_insertion_point(destructor:main.DayTaskListResponse)
  SharedDtor();
}

void DayTaskListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DayTaskListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayTaskListResponse& DayTaskListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DayTaskModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DayTaskModule_2eproto();
#endif
  return *default_instance_;
}

DayTaskListResponse* DayTaskListResponse::default_instance_ = NULL;

DayTaskListResponse* DayTaskListResponse::New() const {
  return new DayTaskListResponse;
}

void DayTaskListResponse::Clear() {
  daytaskmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayTaskListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DayTaskListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.DayTaskModel dayTaskModel = 1;
      case 1: {
        if (tag == 10) {
         parse_dayTaskModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daytaskmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dayTaskModel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DayTaskListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DayTaskListResponse)
  return false;
#undef DO_
}

void DayTaskListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DayTaskListResponse)
  // repeated .main.DayTaskModel dayTaskModel = 1;
  for (int i = 0; i < this->daytaskmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->daytaskmodel(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DayTaskListResponse)
}

int DayTaskListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.DayTaskModel dayTaskModel = 1;
  total_size += 1 * this->daytaskmodel_size();
  for (int i = 0; i < this->daytaskmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daytaskmodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayTaskListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayTaskListResponse*>(&from));
}

void DayTaskListResponse::MergeFrom(const DayTaskListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  daytaskmodel_.MergeFrom(from.daytaskmodel_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayTaskListResponse::CopyFrom(const DayTaskListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayTaskListResponse::IsInitialized() const {

  return true;
}

void DayTaskListResponse::Swap(DayTaskListResponse* other) {
  if (other != this) {
    daytaskmodel_.Swap(&other->daytaskmodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayTaskListResponse::GetTypeName() const {
  return "main.DayTaskListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DayTaskModel::kTaskIdFieldNumber;
const int DayTaskModel::kCountFieldNumber;
const int DayTaskModel::kGoldFieldNumber;
const int DayTaskModel::kIsAwardFieldNumber;
#endif  // !_MSC_VER

DayTaskModel::DayTaskModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DayTaskModel)
}

void DayTaskModel::InitAsDefaultInstance() {
}

DayTaskModel::DayTaskModel(const DayTaskModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DayTaskModel)
}

void DayTaskModel::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  count_ = 0;
  gold_ = 0;
  isaward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayTaskModel::~DayTaskModel() {
  // @@protoc_insertion_point(destructor:main.DayTaskModel)
  SharedDtor();
}

void DayTaskModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DayTaskModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayTaskModel& DayTaskModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DayTaskModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DayTaskModule_2eproto();
#endif
  return *default_instance_;
}

DayTaskModel* DayTaskModel::default_instance_ = NULL;

DayTaskModel* DayTaskModel::New() const {
  return new DayTaskModel;
}

void DayTaskModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DayTaskModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, isaward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayTaskModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DayTaskModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isAward;
        break;
      }

      // optional int32 isAward = 4;
      case 4: {
        if (tag == 32) {
         parse_isAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaward_)));
          set_has_isaward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DayTaskModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DayTaskModel)
  return false;
#undef DO_
}

void DayTaskModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DayTaskModel)
  // optional int32 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // optional int32 isAward = 4;
  if (has_isaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isaward(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DayTaskModel)
}

int DayTaskModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 isAward = 4;
    if (has_isaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaward());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayTaskModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayTaskModel*>(&from));
}

void DayTaskModel::MergeFrom(const DayTaskModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_isaward()) {
      set_isaward(from.isaward());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayTaskModel::CopyFrom(const DayTaskModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayTaskModel::IsInitialized() const {

  return true;
}

void DayTaskModel::Swap(DayTaskModel* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(count_, other->count_);
    std::swap(gold_, other->gold_);
    std::swap(isaward_, other->isaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayTaskModel::GetTypeName() const {
  return "main.DayTaskModel";
}


// ===================================================================

#ifndef _MSC_VER
const int DayTaskGetRewardRequest::kTaskIdFieldNumber;
#endif  // !_MSC_VER

DayTaskGetRewardRequest::DayTaskGetRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DayTaskGetRewardRequest)
}

void DayTaskGetRewardRequest::InitAsDefaultInstance() {
}

DayTaskGetRewardRequest::DayTaskGetRewardRequest(const DayTaskGetRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DayTaskGetRewardRequest)
}

void DayTaskGetRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayTaskGetRewardRequest::~DayTaskGetRewardRequest() {
  // @@protoc_insertion_point(destructor:main.DayTaskGetRewardRequest)
  SharedDtor();
}

void DayTaskGetRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DayTaskGetRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayTaskGetRewardRequest& DayTaskGetRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DayTaskModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DayTaskModule_2eproto();
#endif
  return *default_instance_;
}

DayTaskGetRewardRequest* DayTaskGetRewardRequest::default_instance_ = NULL;

DayTaskGetRewardRequest* DayTaskGetRewardRequest::New() const {
  return new DayTaskGetRewardRequest;
}

void DayTaskGetRewardRequest::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayTaskGetRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DayTaskGetRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DayTaskGetRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DayTaskGetRewardRequest)
  return false;
#undef DO_
}

void DayTaskGetRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DayTaskGetRewardRequest)
  // optional int32 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DayTaskGetRewardRequest)
}

int DayTaskGetRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayTaskGetRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayTaskGetRewardRequest*>(&from));
}

void DayTaskGetRewardRequest::MergeFrom(const DayTaskGetRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayTaskGetRewardRequest::CopyFrom(const DayTaskGetRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayTaskGetRewardRequest::IsInitialized() const {

  return true;
}

void DayTaskGetRewardRequest::Swap(DayTaskGetRewardRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayTaskGetRewardRequest::GetTypeName() const {
  return "main.DayTaskGetRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DayTaskGetRewardResponse::kStateFieldNumber;
#endif  // !_MSC_VER

DayTaskGetRewardResponse::DayTaskGetRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DayTaskGetRewardResponse)
}

void DayTaskGetRewardResponse::InitAsDefaultInstance() {
}

DayTaskGetRewardResponse::DayTaskGetRewardResponse(const DayTaskGetRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DayTaskGetRewardResponse)
}

void DayTaskGetRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayTaskGetRewardResponse::~DayTaskGetRewardResponse() {
  // @@protoc_insertion_point(destructor:main.DayTaskGetRewardResponse)
  SharedDtor();
}

void DayTaskGetRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DayTaskGetRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayTaskGetRewardResponse& DayTaskGetRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DayTaskModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DayTaskModule_2eproto();
#endif
  return *default_instance_;
}

DayTaskGetRewardResponse* DayTaskGetRewardResponse::default_instance_ = NULL;

DayTaskGetRewardResponse* DayTaskGetRewardResponse::New() const {
  return new DayTaskGetRewardResponse;
}

void DayTaskGetRewardResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayTaskGetRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DayTaskGetRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DayTaskGetRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DayTaskGetRewardResponse)
  return false;
#undef DO_
}

void DayTaskGetRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DayTaskGetRewardResponse)
  // optional int32 state = 1 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DayTaskGetRewardResponse)
}

int DayTaskGetRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayTaskGetRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayTaskGetRewardResponse*>(&from));
}

void DayTaskGetRewardResponse::MergeFrom(const DayTaskGetRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayTaskGetRewardResponse::CopyFrom(const DayTaskGetRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayTaskGetRewardResponse::IsInitialized() const {

  return true;
}

void DayTaskGetRewardResponse::Swap(DayTaskGetRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayTaskGetRewardResponse::GetTypeName() const {
  return "main.DayTaskGetRewardResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
