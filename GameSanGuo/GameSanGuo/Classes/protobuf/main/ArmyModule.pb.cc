// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArmyModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArmyModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_ArmyModule_2eproto() {
  delete DispatchOfficerRequest::default_instance_;
  delete DispatchOfficerResponse::default_instance_;
  delete RemoveOfficerRequest::default_instance_;
  delete RemoveOfficerResponse::default_instance_;
  delete SetLordRequest::default_instance_;
  delete SetLordResponse::default_instance_;
  delete DispatchSoldierRequest::default_instance_;
  delete DispatchSoldierResponse::default_instance_;
  delete ChangePositionRequest::default_instance_;
  delete ChangePositionResponse::default_instance_;
  delete ChangeOfficerRequest::default_instance_;
  delete ChangeOfficerResponse::default_instance_;
  delete ChangeCurrentTeamRequest::default_instance_;
  delete ChangeCurrentTeamResponse::default_instance_;
  delete BatchChangeOfficerRequest::default_instance_;
  delete BatchChangeOfficerResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ArmyModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ArmyModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DispatchOfficerRequest::default_instance_ = new DispatchOfficerRequest();
  DispatchOfficerResponse::default_instance_ = new DispatchOfficerResponse();
  RemoveOfficerRequest::default_instance_ = new RemoveOfficerRequest();
  RemoveOfficerResponse::default_instance_ = new RemoveOfficerResponse();
  SetLordRequest::default_instance_ = new SetLordRequest();
  SetLordResponse::default_instance_ = new SetLordResponse();
  DispatchSoldierRequest::default_instance_ = new DispatchSoldierRequest();
  DispatchSoldierResponse::default_instance_ = new DispatchSoldierResponse();
  ChangePositionRequest::default_instance_ = new ChangePositionRequest();
  ChangePositionResponse::default_instance_ = new ChangePositionResponse();
  ChangeOfficerRequest::default_instance_ = new ChangeOfficerRequest();
  ChangeOfficerResponse::default_instance_ = new ChangeOfficerResponse();
  ChangeCurrentTeamRequest::default_instance_ = new ChangeCurrentTeamRequest();
  ChangeCurrentTeamResponse::default_instance_ = new ChangeCurrentTeamResponse();
  BatchChangeOfficerRequest::default_instance_ = new BatchChangeOfficerRequest();
  BatchChangeOfficerResponse::default_instance_ = new BatchChangeOfficerResponse();
  DispatchOfficerRequest::default_instance_->InitAsDefaultInstance();
  DispatchOfficerResponse::default_instance_->InitAsDefaultInstance();
  RemoveOfficerRequest::default_instance_->InitAsDefaultInstance();
  RemoveOfficerResponse::default_instance_->InitAsDefaultInstance();
  SetLordRequest::default_instance_->InitAsDefaultInstance();
  SetLordResponse::default_instance_->InitAsDefaultInstance();
  DispatchSoldierRequest::default_instance_->InitAsDefaultInstance();
  DispatchSoldierResponse::default_instance_->InitAsDefaultInstance();
  ChangePositionRequest::default_instance_->InitAsDefaultInstance();
  ChangePositionResponse::default_instance_->InitAsDefaultInstance();
  ChangeOfficerRequest::default_instance_->InitAsDefaultInstance();
  ChangeOfficerResponse::default_instance_->InitAsDefaultInstance();
  ChangeCurrentTeamRequest::default_instance_->InitAsDefaultInstance();
  ChangeCurrentTeamResponse::default_instance_->InitAsDefaultInstance();
  BatchChangeOfficerRequest::default_instance_->InitAsDefaultInstance();
  BatchChangeOfficerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArmyModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ArmyModule_2eproto_once_);
void protobuf_AddDesc_ArmyModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ArmyModule_2eproto_once_,
                 &protobuf_AddDesc_ArmyModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArmyModule_2eproto {
  StaticDescriptorInitializer_ArmyModule_2eproto() {
    protobuf_AddDesc_ArmyModule_2eproto();
  }
} static_descriptor_initializer_ArmyModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DispatchOfficerRequest::kSsidFieldNumber;
const int DispatchOfficerRequest::kPositionFieldNumber;
const int DispatchOfficerRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

DispatchOfficerRequest::DispatchOfficerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DispatchOfficerRequest)
}

void DispatchOfficerRequest::InitAsDefaultInstance() {
}

DispatchOfficerRequest::DispatchOfficerRequest(const DispatchOfficerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DispatchOfficerRequest)
}

void DispatchOfficerRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  position_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchOfficerRequest::~DispatchOfficerRequest() {
  // @@protoc_insertion_point(destructor:main.DispatchOfficerRequest)
  SharedDtor();
}

void DispatchOfficerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DispatchOfficerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DispatchOfficerRequest& DispatchOfficerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

DispatchOfficerRequest* DispatchOfficerRequest::default_instance_ = NULL;

DispatchOfficerRequest* DispatchOfficerRequest::New() const {
  return new DispatchOfficerRequest;
}

void DispatchOfficerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DispatchOfficerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DispatchOfficerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DispatchOfficerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 3;
      case 3: {
        if (tag == 24) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DispatchOfficerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DispatchOfficerRequest)
  return false;
#undef DO_
}

void DispatchOfficerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DispatchOfficerRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  // optional int32 teamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DispatchOfficerRequest)
}

int DispatchOfficerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 teamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchOfficerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DispatchOfficerRequest*>(&from));
}

void DispatchOfficerRequest::MergeFrom(const DispatchOfficerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DispatchOfficerRequest::CopyFrom(const DispatchOfficerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchOfficerRequest::IsInitialized() const {

  return true;
}

void DispatchOfficerRequest::Swap(DispatchOfficerRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(position_, other->position_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DispatchOfficerRequest::GetTypeName() const {
  return "main.DispatchOfficerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DispatchOfficerResponse::kStateFieldNumber;
const int DispatchOfficerResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

DispatchOfficerResponse::DispatchOfficerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DispatchOfficerResponse)
}

void DispatchOfficerResponse::InitAsDefaultInstance() {
}

DispatchOfficerResponse::DispatchOfficerResponse(const DispatchOfficerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DispatchOfficerResponse)
}

void DispatchOfficerResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchOfficerResponse::~DispatchOfficerResponse() {
  // @@protoc_insertion_point(destructor:main.DispatchOfficerResponse)
  SharedDtor();
}

void DispatchOfficerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DispatchOfficerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DispatchOfficerResponse& DispatchOfficerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

DispatchOfficerResponse* DispatchOfficerResponse::default_instance_ = NULL;

DispatchOfficerResponse* DispatchOfficerResponse::New() const {
  return new DispatchOfficerResponse;
}

void DispatchOfficerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DispatchOfficerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DispatchOfficerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DispatchOfficerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DispatchOfficerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DispatchOfficerResponse)
  return false;
#undef DO_
}

void DispatchOfficerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DispatchOfficerResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DispatchOfficerResponse)
}

int DispatchOfficerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchOfficerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DispatchOfficerResponse*>(&from));
}

void DispatchOfficerResponse::MergeFrom(const DispatchOfficerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DispatchOfficerResponse::CopyFrom(const DispatchOfficerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchOfficerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DispatchOfficerResponse::Swap(DispatchOfficerResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DispatchOfficerResponse::GetTypeName() const {
  return "main.DispatchOfficerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveOfficerRequest::kPositionFieldNumber;
const int RemoveOfficerRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

RemoveOfficerRequest::RemoveOfficerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RemoveOfficerRequest)
}

void RemoveOfficerRequest::InitAsDefaultInstance() {
}

RemoveOfficerRequest::RemoveOfficerRequest(const RemoveOfficerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RemoveOfficerRequest)
}

void RemoveOfficerRequest::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveOfficerRequest::~RemoveOfficerRequest() {
  // @@protoc_insertion_point(destructor:main.RemoveOfficerRequest)
  SharedDtor();
}

void RemoveOfficerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveOfficerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveOfficerRequest& RemoveOfficerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

RemoveOfficerRequest* RemoveOfficerRequest::default_instance_ = NULL;

RemoveOfficerRequest* RemoveOfficerRequest::New() const {
  return new RemoveOfficerRequest;
}

void RemoveOfficerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoveOfficerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(position_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RemoveOfficerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RemoveOfficerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RemoveOfficerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RemoveOfficerRequest)
  return false;
#undef DO_
}

void RemoveOfficerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RemoveOfficerRequest)
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RemoveOfficerRequest)
}

int RemoveOfficerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveOfficerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveOfficerRequest*>(&from));
}

void RemoveOfficerRequest::MergeFrom(const RemoveOfficerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RemoveOfficerRequest::CopyFrom(const RemoveOfficerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveOfficerRequest::IsInitialized() const {

  return true;
}

void RemoveOfficerRequest::Swap(RemoveOfficerRequest* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveOfficerRequest::GetTypeName() const {
  return "main.RemoveOfficerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveOfficerResponse::kStateFieldNumber;
const int RemoveOfficerResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

RemoveOfficerResponse::RemoveOfficerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RemoveOfficerResponse)
}

void RemoveOfficerResponse::InitAsDefaultInstance() {
}

RemoveOfficerResponse::RemoveOfficerResponse(const RemoveOfficerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RemoveOfficerResponse)
}

void RemoveOfficerResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveOfficerResponse::~RemoveOfficerResponse() {
  // @@protoc_insertion_point(destructor:main.RemoveOfficerResponse)
  SharedDtor();
}

void RemoveOfficerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveOfficerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveOfficerResponse& RemoveOfficerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

RemoveOfficerResponse* RemoveOfficerResponse::default_instance_ = NULL;

RemoveOfficerResponse* RemoveOfficerResponse::New() const {
  return new RemoveOfficerResponse;
}

void RemoveOfficerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoveOfficerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RemoveOfficerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RemoveOfficerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RemoveOfficerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RemoveOfficerResponse)
  return false;
#undef DO_
}

void RemoveOfficerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RemoveOfficerResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RemoveOfficerResponse)
}

int RemoveOfficerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveOfficerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveOfficerResponse*>(&from));
}

void RemoveOfficerResponse::MergeFrom(const RemoveOfficerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RemoveOfficerResponse::CopyFrom(const RemoveOfficerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveOfficerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RemoveOfficerResponse::Swap(RemoveOfficerResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveOfficerResponse::GetTypeName() const {
  return "main.RemoveOfficerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SetLordRequest::kSsidFieldNumber;
const int SetLordRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

SetLordRequest::SetLordRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SetLordRequest)
}

void SetLordRequest::InitAsDefaultInstance() {
}

SetLordRequest::SetLordRequest(const SetLordRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SetLordRequest)
}

void SetLordRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLordRequest::~SetLordRequest() {
  // @@protoc_insertion_point(destructor:main.SetLordRequest)
  SharedDtor();
}

void SetLordRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetLordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetLordRequest& SetLordRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

SetLordRequest* SetLordRequest::default_instance_ = NULL;

SetLordRequest* SetLordRequest::New() const {
  return new SetLordRequest;
}

void SetLordRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetLordRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SetLordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SetLordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SetLordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SetLordRequest)
  return false;
#undef DO_
}

void SetLordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SetLordRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SetLordRequest)
}

int SetLordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLordRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetLordRequest*>(&from));
}

void SetLordRequest::MergeFrom(const SetLordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SetLordRequest::CopyFrom(const SetLordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLordRequest::IsInitialized() const {

  return true;
}

void SetLordRequest::Swap(SetLordRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetLordRequest::GetTypeName() const {
  return "main.SetLordRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SetLordResponse::kStateFieldNumber;
const int SetLordResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

SetLordResponse::SetLordResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SetLordResponse)
}

void SetLordResponse::InitAsDefaultInstance() {
}

SetLordResponse::SetLordResponse(const SetLordResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SetLordResponse)
}

void SetLordResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLordResponse::~SetLordResponse() {
  // @@protoc_insertion_point(destructor:main.SetLordResponse)
  SharedDtor();
}

void SetLordResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetLordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetLordResponse& SetLordResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

SetLordResponse* SetLordResponse::default_instance_ = NULL;

SetLordResponse* SetLordResponse::New() const {
  return new SetLordResponse;
}

void SetLordResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetLordResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SetLordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SetLordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SetLordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SetLordResponse)
  return false;
#undef DO_
}

void SetLordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SetLordResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SetLordResponse)
}

int SetLordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLordResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SetLordResponse*>(&from));
}

void SetLordResponse::MergeFrom(const SetLordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SetLordResponse::CopyFrom(const SetLordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLordResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetLordResponse::Swap(SetLordResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SetLordResponse::GetTypeName() const {
  return "main.SetLordResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DispatchSoldierRequest::kSsidFieldNumber;
const int DispatchSoldierRequest::kColorFieldNumber;
const int DispatchSoldierRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

DispatchSoldierRequest::DispatchSoldierRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DispatchSoldierRequest)
}

void DispatchSoldierRequest::InitAsDefaultInstance() {
}

DispatchSoldierRequest::DispatchSoldierRequest(const DispatchSoldierRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DispatchSoldierRequest)
}

void DispatchSoldierRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  color_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchSoldierRequest::~DispatchSoldierRequest() {
  // @@protoc_insertion_point(destructor:main.DispatchSoldierRequest)
  SharedDtor();
}

void DispatchSoldierRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DispatchSoldierRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DispatchSoldierRequest& DispatchSoldierRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

DispatchSoldierRequest* DispatchSoldierRequest::default_instance_ = NULL;

DispatchSoldierRequest* DispatchSoldierRequest::New() const {
  return new DispatchSoldierRequest;
}

void DispatchSoldierRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DispatchSoldierRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DispatchSoldierRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DispatchSoldierRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional int32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 3;
      case 3: {
        if (tag == 24) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DispatchSoldierRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DispatchSoldierRequest)
  return false;
#undef DO_
}

void DispatchSoldierRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DispatchSoldierRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

  // optional int32 teamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DispatchSoldierRequest)
}

int DispatchSoldierRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 teamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchSoldierRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DispatchSoldierRequest*>(&from));
}

void DispatchSoldierRequest::MergeFrom(const DispatchSoldierRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DispatchSoldierRequest::CopyFrom(const DispatchSoldierRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchSoldierRequest::IsInitialized() const {

  return true;
}

void DispatchSoldierRequest::Swap(DispatchSoldierRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(color_, other->color_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DispatchSoldierRequest::GetTypeName() const {
  return "main.DispatchSoldierRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DispatchSoldierResponse::kStateFieldNumber;
const int DispatchSoldierResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

DispatchSoldierResponse::DispatchSoldierResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DispatchSoldierResponse)
}

void DispatchSoldierResponse::InitAsDefaultInstance() {
}

DispatchSoldierResponse::DispatchSoldierResponse(const DispatchSoldierResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DispatchSoldierResponse)
}

void DispatchSoldierResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchSoldierResponse::~DispatchSoldierResponse() {
  // @@protoc_insertion_point(destructor:main.DispatchSoldierResponse)
  SharedDtor();
}

void DispatchSoldierResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DispatchSoldierResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DispatchSoldierResponse& DispatchSoldierResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

DispatchSoldierResponse* DispatchSoldierResponse::default_instance_ = NULL;

DispatchSoldierResponse* DispatchSoldierResponse::New() const {
  return new DispatchSoldierResponse;
}

void DispatchSoldierResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DispatchSoldierResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DispatchSoldierResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DispatchSoldierResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DispatchSoldierResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DispatchSoldierResponse)
  return false;
#undef DO_
}

void DispatchSoldierResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DispatchSoldierResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DispatchSoldierResponse)
}

int DispatchSoldierResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchSoldierResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DispatchSoldierResponse*>(&from));
}

void DispatchSoldierResponse::MergeFrom(const DispatchSoldierResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DispatchSoldierResponse::CopyFrom(const DispatchSoldierResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchSoldierResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DispatchSoldierResponse::Swap(DispatchSoldierResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DispatchSoldierResponse::GetTypeName() const {
  return "main.DispatchSoldierResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePositionRequest::kFromFieldNumber;
const int ChangePositionRequest::kToFieldNumber;
const int ChangePositionRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ChangePositionRequest::ChangePositionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChangePositionRequest)
}

void ChangePositionRequest::InitAsDefaultInstance() {
}

ChangePositionRequest::ChangePositionRequest(const ChangePositionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChangePositionRequest)
}

void ChangePositionRequest::SharedCtor() {
  _cached_size_ = 0;
  from_ = 0;
  to_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePositionRequest::~ChangePositionRequest() {
  // @@protoc_insertion_point(destructor:main.ChangePositionRequest)
  SharedDtor();
}

void ChangePositionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangePositionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangePositionRequest& ChangePositionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

ChangePositionRequest* ChangePositionRequest::default_instance_ = NULL;

ChangePositionRequest* ChangePositionRequest::New() const {
  return new ChangePositionRequest;
}

void ChangePositionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangePositionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(from_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChangePositionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChangePositionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // optional int32 to = 2;
      case 2: {
        if (tag == 16) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 3;
      case 3: {
        if (tag == 24) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChangePositionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChangePositionRequest)
  return false;
#undef DO_
}

void ChangePositionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChangePositionRequest)
  // optional int32 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from(), output);
  }

  // optional int32 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to(), output);
  }

  // optional int32 teamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChangePositionRequest)
}

int ChangePositionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional int32 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }

    // optional int32 teamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePositionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangePositionRequest*>(&from));
}

void ChangePositionRequest::MergeFrom(const ChangePositionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChangePositionRequest::CopyFrom(const ChangePositionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePositionRequest::IsInitialized() const {

  return true;
}

void ChangePositionRequest::Swap(ChangePositionRequest* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangePositionRequest::GetTypeName() const {
  return "main.ChangePositionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePositionResponse::kStateFieldNumber;
const int ChangePositionResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ChangePositionResponse::ChangePositionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChangePositionResponse)
}

void ChangePositionResponse::InitAsDefaultInstance() {
}

ChangePositionResponse::ChangePositionResponse(const ChangePositionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChangePositionResponse)
}

void ChangePositionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePositionResponse::~ChangePositionResponse() {
  // @@protoc_insertion_point(destructor:main.ChangePositionResponse)
  SharedDtor();
}

void ChangePositionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangePositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangePositionResponse& ChangePositionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

ChangePositionResponse* ChangePositionResponse::default_instance_ = NULL;

ChangePositionResponse* ChangePositionResponse::New() const {
  return new ChangePositionResponse;
}

void ChangePositionResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangePositionResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChangePositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChangePositionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChangePositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChangePositionResponse)
  return false;
#undef DO_
}

void ChangePositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChangePositionResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChangePositionResponse)
}

int ChangePositionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePositionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangePositionResponse*>(&from));
}

void ChangePositionResponse::MergeFrom(const ChangePositionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChangePositionResponse::CopyFrom(const ChangePositionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePositionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangePositionResponse::Swap(ChangePositionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangePositionResponse::GetTypeName() const {
  return "main.ChangePositionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeOfficerRequest::kSourceIdFieldNumber;
const int ChangeOfficerRequest::kTargetIdFieldNumber;
const int ChangeOfficerRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ChangeOfficerRequest::ChangeOfficerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChangeOfficerRequest)
}

void ChangeOfficerRequest::InitAsDefaultInstance() {
}

ChangeOfficerRequest::ChangeOfficerRequest(const ChangeOfficerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChangeOfficerRequest)
}

void ChangeOfficerRequest::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = 0;
  targetid_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeOfficerRequest::~ChangeOfficerRequest() {
  // @@protoc_insertion_point(destructor:main.ChangeOfficerRequest)
  SharedDtor();
}

void ChangeOfficerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangeOfficerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeOfficerRequest& ChangeOfficerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

ChangeOfficerRequest* ChangeOfficerRequest::default_instance_ = NULL;

ChangeOfficerRequest* ChangeOfficerRequest::New() const {
  return new ChangeOfficerRequest;
}

void ChangeOfficerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeOfficerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sourceid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChangeOfficerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChangeOfficerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sourceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // optional int32 targetId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamId;
        break;
      }

      // optional int32 teamId = 3;
      case 3: {
        if (tag == 24) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChangeOfficerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChangeOfficerRequest)
  return false;
#undef DO_
}

void ChangeOfficerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChangeOfficerRequest)
  // optional int32 sourceId = 1;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sourceid(), output);
  }

  // optional int32 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  // optional int32 teamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChangeOfficerRequest)
}

int ChangeOfficerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sourceId = 1;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceid());
    }

    // optional int32 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // optional int32 teamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeOfficerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeOfficerRequest*>(&from));
}

void ChangeOfficerRequest::MergeFrom(const ChangeOfficerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChangeOfficerRequest::CopyFrom(const ChangeOfficerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeOfficerRequest::IsInitialized() const {

  return true;
}

void ChangeOfficerRequest::Swap(ChangeOfficerRequest* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(targetid_, other->targetid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangeOfficerRequest::GetTypeName() const {
  return "main.ChangeOfficerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeOfficerResponse::kStateFieldNumber;
const int ChangeOfficerResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ChangeOfficerResponse::ChangeOfficerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChangeOfficerResponse)
}

void ChangeOfficerResponse::InitAsDefaultInstance() {
}

ChangeOfficerResponse::ChangeOfficerResponse(const ChangeOfficerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChangeOfficerResponse)
}

void ChangeOfficerResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeOfficerResponse::~ChangeOfficerResponse() {
  // @@protoc_insertion_point(destructor:main.ChangeOfficerResponse)
  SharedDtor();
}

void ChangeOfficerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangeOfficerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeOfficerResponse& ChangeOfficerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

ChangeOfficerResponse* ChangeOfficerResponse::default_instance_ = NULL;

ChangeOfficerResponse* ChangeOfficerResponse::New() const {
  return new ChangeOfficerResponse;
}

void ChangeOfficerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeOfficerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChangeOfficerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChangeOfficerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChangeOfficerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChangeOfficerResponse)
  return false;
#undef DO_
}

void ChangeOfficerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChangeOfficerResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChangeOfficerResponse)
}

int ChangeOfficerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeOfficerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeOfficerResponse*>(&from));
}

void ChangeOfficerResponse::MergeFrom(const ChangeOfficerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChangeOfficerResponse::CopyFrom(const ChangeOfficerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeOfficerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeOfficerResponse::Swap(ChangeOfficerResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangeOfficerResponse::GetTypeName() const {
  return "main.ChangeOfficerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeCurrentTeamRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ChangeCurrentTeamRequest::ChangeCurrentTeamRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChangeCurrentTeamRequest)
}

void ChangeCurrentTeamRequest::InitAsDefaultInstance() {
}

ChangeCurrentTeamRequest::ChangeCurrentTeamRequest(const ChangeCurrentTeamRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChangeCurrentTeamRequest)
}

void ChangeCurrentTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeCurrentTeamRequest::~ChangeCurrentTeamRequest() {
  // @@protoc_insertion_point(destructor:main.ChangeCurrentTeamRequest)
  SharedDtor();
}

void ChangeCurrentTeamRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangeCurrentTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeCurrentTeamRequest& ChangeCurrentTeamRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

ChangeCurrentTeamRequest* ChangeCurrentTeamRequest::default_instance_ = NULL;

ChangeCurrentTeamRequest* ChangeCurrentTeamRequest::New() const {
  return new ChangeCurrentTeamRequest;
}

void ChangeCurrentTeamRequest::Clear() {
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChangeCurrentTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChangeCurrentTeamRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 teamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChangeCurrentTeamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChangeCurrentTeamRequest)
  return false;
#undef DO_
}

void ChangeCurrentTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChangeCurrentTeamRequest)
  // optional int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChangeCurrentTeamRequest)
}

int ChangeCurrentTeamRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeCurrentTeamRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeCurrentTeamRequest*>(&from));
}

void ChangeCurrentTeamRequest::MergeFrom(const ChangeCurrentTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChangeCurrentTeamRequest::CopyFrom(const ChangeCurrentTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeCurrentTeamRequest::IsInitialized() const {

  return true;
}

void ChangeCurrentTeamRequest::Swap(ChangeCurrentTeamRequest* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangeCurrentTeamRequest::GetTypeName() const {
  return "main.ChangeCurrentTeamRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeCurrentTeamResponse::kStateFieldNumber;
const int ChangeCurrentTeamResponse::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ChangeCurrentTeamResponse::ChangeCurrentTeamResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChangeCurrentTeamResponse)
}

void ChangeCurrentTeamResponse::InitAsDefaultInstance() {
}

ChangeCurrentTeamResponse::ChangeCurrentTeamResponse(const ChangeCurrentTeamResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChangeCurrentTeamResponse)
}

void ChangeCurrentTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeCurrentTeamResponse::~ChangeCurrentTeamResponse() {
  // @@protoc_insertion_point(destructor:main.ChangeCurrentTeamResponse)
  SharedDtor();
}

void ChangeCurrentTeamResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangeCurrentTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeCurrentTeamResponse& ChangeCurrentTeamResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

ChangeCurrentTeamResponse* ChangeCurrentTeamResponse::default_instance_ = NULL;

ChangeCurrentTeamResponse* ChangeCurrentTeamResponse::New() const {
  return new ChangeCurrentTeamResponse;
}

void ChangeCurrentTeamResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeCurrentTeamResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChangeCurrentTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChangeCurrentTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teamId;
        break;
      }

      // required int32 teamId = 2;
      case 2: {
        if (tag == 16) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChangeCurrentTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChangeCurrentTeamResponse)
  return false;
#undef DO_
}

void ChangeCurrentTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChangeCurrentTeamResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 teamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChangeCurrentTeamResponse)
}

int ChangeCurrentTeamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 teamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeCurrentTeamResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeCurrentTeamResponse*>(&from));
}

void ChangeCurrentTeamResponse::MergeFrom(const ChangeCurrentTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChangeCurrentTeamResponse::CopyFrom(const ChangeCurrentTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeCurrentTeamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeCurrentTeamResponse::Swap(ChangeCurrentTeamResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangeCurrentTeamResponse::GetTypeName() const {
  return "main.ChangeCurrentTeamResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BatchChangeOfficerRequest::kTeamIdFieldNumber;
const int BatchChangeOfficerRequest::kOfficerIdsFieldNumber;
#endif  // !_MSC_VER

BatchChangeOfficerRequest::BatchChangeOfficerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BatchChangeOfficerRequest)
}

void BatchChangeOfficerRequest::InitAsDefaultInstance() {
}

BatchChangeOfficerRequest::BatchChangeOfficerRequest(const BatchChangeOfficerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BatchChangeOfficerRequest)
}

void BatchChangeOfficerRequest::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchChangeOfficerRequest::~BatchChangeOfficerRequest() {
  // @@protoc_insertion_point(destructor:main.BatchChangeOfficerRequest)
  SharedDtor();
}

void BatchChangeOfficerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BatchChangeOfficerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BatchChangeOfficerRequest& BatchChangeOfficerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

BatchChangeOfficerRequest* BatchChangeOfficerRequest::default_instance_ = NULL;

BatchChangeOfficerRequest* BatchChangeOfficerRequest::New() const {
  return new BatchChangeOfficerRequest;
}

void BatchChangeOfficerRequest::Clear() {
  teamid_ = 0;
  officerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BatchChangeOfficerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BatchChangeOfficerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_officerIds;
        break;
      }

      // repeated int32 officerIds = 2;
      case 2: {
        if (tag == 16) {
         parse_officerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_officerids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_officerids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_officerIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BatchChangeOfficerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BatchChangeOfficerRequest)
  return false;
#undef DO_
}

void BatchChangeOfficerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BatchChangeOfficerRequest)
  // required int32 teamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamid(), output);
  }

  // repeated int32 officerIds = 2;
  for (int i = 0; i < this->officerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->officerids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BatchChangeOfficerRequest)
}

int BatchChangeOfficerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  // repeated int32 officerIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->officerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->officerids(i));
    }
    total_size += 1 * this->officerids_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchChangeOfficerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BatchChangeOfficerRequest*>(&from));
}

void BatchChangeOfficerRequest::MergeFrom(const BatchChangeOfficerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  officerids_.MergeFrom(from.officerids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BatchChangeOfficerRequest::CopyFrom(const BatchChangeOfficerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchChangeOfficerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BatchChangeOfficerRequest::Swap(BatchChangeOfficerRequest* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    officerids_.Swap(&other->officerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BatchChangeOfficerRequest::GetTypeName() const {
  return "main.BatchChangeOfficerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BatchChangeOfficerResponse::kStateFieldNumber;
#endif  // !_MSC_VER

BatchChangeOfficerResponse::BatchChangeOfficerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BatchChangeOfficerResponse)
}

void BatchChangeOfficerResponse::InitAsDefaultInstance() {
}

BatchChangeOfficerResponse::BatchChangeOfficerResponse(const BatchChangeOfficerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BatchChangeOfficerResponse)
}

void BatchChangeOfficerResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchChangeOfficerResponse::~BatchChangeOfficerResponse() {
  // @@protoc_insertion_point(destructor:main.BatchChangeOfficerResponse)
  SharedDtor();
}

void BatchChangeOfficerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BatchChangeOfficerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BatchChangeOfficerResponse& BatchChangeOfficerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArmyModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArmyModule_2eproto();
#endif
  return *default_instance_;
}

BatchChangeOfficerResponse* BatchChangeOfficerResponse::default_instance_ = NULL;

BatchChangeOfficerResponse* BatchChangeOfficerResponse::New() const {
  return new BatchChangeOfficerResponse;
}

void BatchChangeOfficerResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BatchChangeOfficerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BatchChangeOfficerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BatchChangeOfficerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BatchChangeOfficerResponse)
  return false;
#undef DO_
}

void BatchChangeOfficerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BatchChangeOfficerResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BatchChangeOfficerResponse)
}

int BatchChangeOfficerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchChangeOfficerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BatchChangeOfficerResponse*>(&from));
}

void BatchChangeOfficerResponse::MergeFrom(const BatchChangeOfficerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BatchChangeOfficerResponse::CopyFrom(const BatchChangeOfficerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchChangeOfficerResponse::IsInitialized() const {

  return true;
}

void BatchChangeOfficerResponse::Swap(BatchChangeOfficerResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BatchChangeOfficerResponse::GetTypeName() const {
  return "main.BatchChangeOfficerResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
