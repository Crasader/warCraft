// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_ItemModule_2eproto() {
  delete BuyItemRequest::default_instance_;
  delete RoleItemResponse::default_instance_;
  delete UpdateBagInfo::default_instance_;
  delete OfficerCardItemUpdateProto::default_instance_;
  delete OfficerCardItemProto::default_instance_;
  delete EquipmentCardItemUpdateProto::default_instance_;
  delete EquipmentCardItemProto::default_instance_;
  delete SoldierCardItemUpdateProto::default_instance_;
  delete SoldierCardItemProto::default_instance_;
  delete PropsCardItemUpdateProto::default_instance_;
  delete PropsCardItemProto::default_instance_;
  delete MaterialItemUpdateProto::default_instance_;
  delete MaterialItemProto::default_instance_;
  delete OfficerFragmentCardItemUpdateProto::default_instance_;
  delete OfficerFragmentCardItemProto::default_instance_;
  delete ConsumableCardItemUpdateProto::default_instance_;
  delete ConsumableCardItemProto::default_instance_;
  delete OfficerCompositeRequest::default_instance_;
  delete OfficerCompositeResponse::default_instance_;
  delete OfficerProtectionRequest::default_instance_;
  delete OfficerProtectionResponse::default_instance_;
  delete OfficerUnProtectionRequest::default_instance_;
  delete OfficerUnProtectionResponse::default_instance_;
  delete OfficerUpgradeRequest::default_instance_;
  delete OfficerUpgradeResponse::default_instance_;
  delete EquipmentCompositeRequest::default_instance_;
  delete EquipmentCompositeResponse::default_instance_;
  delete EquipmentStrengthRequest::default_instance_;
  delete EquipmentStrengthResponse::default_instance_;
  delete EquipmentStrengthAutoRequest::default_instance_;
  delete EquipmentStrengthAutoResponse::default_instance_;
  delete EquipmentUpgradeRequest::default_instance_;
  delete EquipmentUpgradeResponse::default_instance_;
  delete EquipmentProtectionRequest::default_instance_;
  delete EquipmentProtectionResponse::default_instance_;
  delete EquipmentUnProtectionRequest::default_instance_;
  delete EquipmentUnProtectionResponse::default_instance_;
  delete WearEquipmentRequest::default_instance_;
  delete WearEquipmentResponse::default_instance_;
  delete OffEquipmentRequest::default_instance_;
  delete OffEquipmentResponse::default_instance_;
  delete SellRoleItemRequest::default_instance_;
  delete SellRoleItemResponse::default_instance_;
  delete SellRoleItemAllAutoRequest::default_instance_;
  delete SellRoleItemAllAutoResponse::default_instance_;
  delete SellRoleItemAllRequest::default_instance_;
  delete SellRoleItemAllResponse::default_instance_;
  delete SoldierCompositeRequest::default_instance_;
  delete SoldierCompositeResponse::default_instance_;
  delete ExpansionRequest::default_instance_;
  delete ExpansionResponse::default_instance_;
  delete PropsProtectionRequest::default_instance_;
  delete PropsProtectionResponse::default_instance_;
  delete PropsUnProtectionRequest::default_instance_;
  delete PropsUnProtectionResponse::default_instance_;
  delete CardStatesRequest::default_instance_;
  delete CardStatesResponse::default_instance_;
  delete CardStateMessage::default_instance_;
  delete SkillCompositeRequest::default_instance_;
  delete SkillCompositeResponse::default_instance_;
  delete SummonCardRequest::default_instance_;
  delete SummonCardResponse::default_instance_;
  delete LordSkillCompositeRequest::default_instance_;
  delete LordSkillCompositeResponse::default_instance_;
  delete UseConsumableItemRequest::default_instance_;
  delete UseConsumableItemResponse::default_instance_;
  delete MergeItemRequest::default_instance_;
  delete MergeItemResponse::default_instance_;
  delete ItemDataProto::default_instance_;
  delete GoodsDataProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ItemModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ItemModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BuyItemRequest::default_instance_ = new BuyItemRequest();
  RoleItemResponse::default_instance_ = new RoleItemResponse();
  UpdateBagInfo::default_instance_ = new UpdateBagInfo();
  OfficerCardItemUpdateProto::default_instance_ = new OfficerCardItemUpdateProto();
  OfficerCardItemProto::default_instance_ = new OfficerCardItemProto();
  EquipmentCardItemUpdateProto::default_instance_ = new EquipmentCardItemUpdateProto();
  EquipmentCardItemProto::default_instance_ = new EquipmentCardItemProto();
  SoldierCardItemUpdateProto::default_instance_ = new SoldierCardItemUpdateProto();
  SoldierCardItemProto::default_instance_ = new SoldierCardItemProto();
  PropsCardItemUpdateProto::default_instance_ = new PropsCardItemUpdateProto();
  PropsCardItemProto::default_instance_ = new PropsCardItemProto();
  MaterialItemUpdateProto::default_instance_ = new MaterialItemUpdateProto();
  MaterialItemProto::default_instance_ = new MaterialItemProto();
  OfficerFragmentCardItemUpdateProto::default_instance_ = new OfficerFragmentCardItemUpdateProto();
  OfficerFragmentCardItemProto::default_instance_ = new OfficerFragmentCardItemProto();
  ConsumableCardItemUpdateProto::default_instance_ = new ConsumableCardItemUpdateProto();
  ConsumableCardItemProto::default_instance_ = new ConsumableCardItemProto();
  OfficerCompositeRequest::default_instance_ = new OfficerCompositeRequest();
  OfficerCompositeResponse::default_instance_ = new OfficerCompositeResponse();
  OfficerProtectionRequest::default_instance_ = new OfficerProtectionRequest();
  OfficerProtectionResponse::default_instance_ = new OfficerProtectionResponse();
  OfficerUnProtectionRequest::default_instance_ = new OfficerUnProtectionRequest();
  OfficerUnProtectionResponse::default_instance_ = new OfficerUnProtectionResponse();
  OfficerUpgradeRequest::default_instance_ = new OfficerUpgradeRequest();
  OfficerUpgradeResponse::default_instance_ = new OfficerUpgradeResponse();
  EquipmentCompositeRequest::default_instance_ = new EquipmentCompositeRequest();
  EquipmentCompositeResponse::default_instance_ = new EquipmentCompositeResponse();
  EquipmentStrengthRequest::default_instance_ = new EquipmentStrengthRequest();
  EquipmentStrengthResponse::default_instance_ = new EquipmentStrengthResponse();
  EquipmentStrengthAutoRequest::default_instance_ = new EquipmentStrengthAutoRequest();
  EquipmentStrengthAutoResponse::default_instance_ = new EquipmentStrengthAutoResponse();
  EquipmentUpgradeRequest::default_instance_ = new EquipmentUpgradeRequest();
  EquipmentUpgradeResponse::default_instance_ = new EquipmentUpgradeResponse();
  EquipmentProtectionRequest::default_instance_ = new EquipmentProtectionRequest();
  EquipmentProtectionResponse::default_instance_ = new EquipmentProtectionResponse();
  EquipmentUnProtectionRequest::default_instance_ = new EquipmentUnProtectionRequest();
  EquipmentUnProtectionResponse::default_instance_ = new EquipmentUnProtectionResponse();
  WearEquipmentRequest::default_instance_ = new WearEquipmentRequest();
  WearEquipmentResponse::default_instance_ = new WearEquipmentResponse();
  OffEquipmentRequest::default_instance_ = new OffEquipmentRequest();
  OffEquipmentResponse::default_instance_ = new OffEquipmentResponse();
  SellRoleItemRequest::default_instance_ = new SellRoleItemRequest();
  SellRoleItemResponse::default_instance_ = new SellRoleItemResponse();
  SellRoleItemAllAutoRequest::default_instance_ = new SellRoleItemAllAutoRequest();
  SellRoleItemAllAutoResponse::default_instance_ = new SellRoleItemAllAutoResponse();
  SellRoleItemAllRequest::default_instance_ = new SellRoleItemAllRequest();
  SellRoleItemAllResponse::default_instance_ = new SellRoleItemAllResponse();
  SoldierCompositeRequest::default_instance_ = new SoldierCompositeRequest();
  SoldierCompositeResponse::default_instance_ = new SoldierCompositeResponse();
  ExpansionRequest::default_instance_ = new ExpansionRequest();
  ExpansionResponse::default_instance_ = new ExpansionResponse();
  PropsProtectionRequest::default_instance_ = new PropsProtectionRequest();
  PropsProtectionResponse::default_instance_ = new PropsProtectionResponse();
  PropsUnProtectionRequest::default_instance_ = new PropsUnProtectionRequest();
  PropsUnProtectionResponse::default_instance_ = new PropsUnProtectionResponse();
  CardStatesRequest::default_instance_ = new CardStatesRequest();
  CardStatesResponse::default_instance_ = new CardStatesResponse();
  CardStateMessage::default_instance_ = new CardStateMessage();
  SkillCompositeRequest::default_instance_ = new SkillCompositeRequest();
  SkillCompositeResponse::default_instance_ = new SkillCompositeResponse();
  SummonCardRequest::default_instance_ = new SummonCardRequest();
  SummonCardResponse::default_instance_ = new SummonCardResponse();
  LordSkillCompositeRequest::default_instance_ = new LordSkillCompositeRequest();
  LordSkillCompositeResponse::default_instance_ = new LordSkillCompositeResponse();
  UseConsumableItemRequest::default_instance_ = new UseConsumableItemRequest();
  UseConsumableItemResponse::default_instance_ = new UseConsumableItemResponse();
  MergeItemRequest::default_instance_ = new MergeItemRequest();
  MergeItemResponse::default_instance_ = new MergeItemResponse();
  ItemDataProto::default_instance_ = new ItemDataProto();
  GoodsDataProto::default_instance_ = new GoodsDataProto();
  BuyItemRequest::default_instance_->InitAsDefaultInstance();
  RoleItemResponse::default_instance_->InitAsDefaultInstance();
  UpdateBagInfo::default_instance_->InitAsDefaultInstance();
  OfficerCardItemUpdateProto::default_instance_->InitAsDefaultInstance();
  OfficerCardItemProto::default_instance_->InitAsDefaultInstance();
  EquipmentCardItemUpdateProto::default_instance_->InitAsDefaultInstance();
  EquipmentCardItemProto::default_instance_->InitAsDefaultInstance();
  SoldierCardItemUpdateProto::default_instance_->InitAsDefaultInstance();
  SoldierCardItemProto::default_instance_->InitAsDefaultInstance();
  PropsCardItemUpdateProto::default_instance_->InitAsDefaultInstance();
  PropsCardItemProto::default_instance_->InitAsDefaultInstance();
  MaterialItemUpdateProto::default_instance_->InitAsDefaultInstance();
  MaterialItemProto::default_instance_->InitAsDefaultInstance();
  OfficerFragmentCardItemUpdateProto::default_instance_->InitAsDefaultInstance();
  OfficerFragmentCardItemProto::default_instance_->InitAsDefaultInstance();
  ConsumableCardItemUpdateProto::default_instance_->InitAsDefaultInstance();
  ConsumableCardItemProto::default_instance_->InitAsDefaultInstance();
  OfficerCompositeRequest::default_instance_->InitAsDefaultInstance();
  OfficerCompositeResponse::default_instance_->InitAsDefaultInstance();
  OfficerProtectionRequest::default_instance_->InitAsDefaultInstance();
  OfficerProtectionResponse::default_instance_->InitAsDefaultInstance();
  OfficerUnProtectionRequest::default_instance_->InitAsDefaultInstance();
  OfficerUnProtectionResponse::default_instance_->InitAsDefaultInstance();
  OfficerUpgradeRequest::default_instance_->InitAsDefaultInstance();
  OfficerUpgradeResponse::default_instance_->InitAsDefaultInstance();
  EquipmentCompositeRequest::default_instance_->InitAsDefaultInstance();
  EquipmentCompositeResponse::default_instance_->InitAsDefaultInstance();
  EquipmentStrengthRequest::default_instance_->InitAsDefaultInstance();
  EquipmentStrengthResponse::default_instance_->InitAsDefaultInstance();
  EquipmentStrengthAutoRequest::default_instance_->InitAsDefaultInstance();
  EquipmentStrengthAutoResponse::default_instance_->InitAsDefaultInstance();
  EquipmentUpgradeRequest::default_instance_->InitAsDefaultInstance();
  EquipmentUpgradeResponse::default_instance_->InitAsDefaultInstance();
  EquipmentProtectionRequest::default_instance_->InitAsDefaultInstance();
  EquipmentProtectionResponse::default_instance_->InitAsDefaultInstance();
  EquipmentUnProtectionRequest::default_instance_->InitAsDefaultInstance();
  EquipmentUnProtectionResponse::default_instance_->InitAsDefaultInstance();
  WearEquipmentRequest::default_instance_->InitAsDefaultInstance();
  WearEquipmentResponse::default_instance_->InitAsDefaultInstance();
  OffEquipmentRequest::default_instance_->InitAsDefaultInstance();
  OffEquipmentResponse::default_instance_->InitAsDefaultInstance();
  SellRoleItemRequest::default_instance_->InitAsDefaultInstance();
  SellRoleItemResponse::default_instance_->InitAsDefaultInstance();
  SellRoleItemAllAutoRequest::default_instance_->InitAsDefaultInstance();
  SellRoleItemAllAutoResponse::default_instance_->InitAsDefaultInstance();
  SellRoleItemAllRequest::default_instance_->InitAsDefaultInstance();
  SellRoleItemAllResponse::default_instance_->InitAsDefaultInstance();
  SoldierCompositeRequest::default_instance_->InitAsDefaultInstance();
  SoldierCompositeResponse::default_instance_->InitAsDefaultInstance();
  ExpansionRequest::default_instance_->InitAsDefaultInstance();
  ExpansionResponse::default_instance_->InitAsDefaultInstance();
  PropsProtectionRequest::default_instance_->InitAsDefaultInstance();
  PropsProtectionResponse::default_instance_->InitAsDefaultInstance();
  PropsUnProtectionRequest::default_instance_->InitAsDefaultInstance();
  PropsUnProtectionResponse::default_instance_->InitAsDefaultInstance();
  CardStatesRequest::default_instance_->InitAsDefaultInstance();
  CardStatesResponse::default_instance_->InitAsDefaultInstance();
  CardStateMessage::default_instance_->InitAsDefaultInstance();
  SkillCompositeRequest::default_instance_->InitAsDefaultInstance();
  SkillCompositeResponse::default_instance_->InitAsDefaultInstance();
  SummonCardRequest::default_instance_->InitAsDefaultInstance();
  SummonCardResponse::default_instance_->InitAsDefaultInstance();
  LordSkillCompositeRequest::default_instance_->InitAsDefaultInstance();
  LordSkillCompositeResponse::default_instance_->InitAsDefaultInstance();
  UseConsumableItemRequest::default_instance_->InitAsDefaultInstance();
  UseConsumableItemResponse::default_instance_->InitAsDefaultInstance();
  MergeItemRequest::default_instance_->InitAsDefaultInstance();
  MergeItemResponse::default_instance_->InitAsDefaultInstance();
  ItemDataProto::default_instance_->InitAsDefaultInstance();
  GoodsDataProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ItemModule_2eproto_once_);
void protobuf_AddDesc_ItemModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ItemModule_2eproto_once_,
                 &protobuf_AddDesc_ItemModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemModule_2eproto {
  StaticDescriptorInitializer_ItemModule_2eproto() {
    protobuf_AddDesc_ItemModule_2eproto();
  }
} static_descriptor_initializer_ItemModule_2eproto_;
#endif
bool MergeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BuyItemRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

BuyItemRequest::BuyItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BuyItemRequest)
}

void BuyItemRequest::InitAsDefaultInstance() {
}

BuyItemRequest::BuyItemRequest(const BuyItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BuyItemRequest)
}

void BuyItemRequest::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyItemRequest::~BuyItemRequest() {
  // @@protoc_insertion_point(destructor:main.BuyItemRequest)
  SharedDtor();
}

void BuyItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BuyItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BuyItemRequest& BuyItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

BuyItemRequest* BuyItemRequest::default_instance_ = NULL;

BuyItemRequest* BuyItemRequest::New() const {
  return new BuyItemRequest;
}

void BuyItemRequest::Clear() {
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BuyItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BuyItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BuyItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BuyItemRequest)
  return false;
#undef DO_
}

void BuyItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BuyItemRequest)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BuyItemRequest)
}

int BuyItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BuyItemRequest*>(&from));
}

void BuyItemRequest::MergeFrom(const BuyItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BuyItemRequest::CopyFrom(const BuyItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyItemRequest::IsInitialized() const {

  return true;
}

void BuyItemRequest::Swap(BuyItemRequest* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BuyItemRequest::GetTypeName() const {
  return "main.BuyItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RoleItemResponse::kStateFieldNumber;
const int RoleItemResponse::kFailMsgFieldNumber;
#endif  // !_MSC_VER

RoleItemResponse::RoleItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RoleItemResponse)
}

void RoleItemResponse::InitAsDefaultInstance() {
}

RoleItemResponse::RoleItemResponse(const RoleItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RoleItemResponse)
}

void RoleItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleItemResponse::~RoleItemResponse() {
  // @@protoc_insertion_point(destructor:main.RoleItemResponse)
  SharedDtor();
}

void RoleItemResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoleItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoleItemResponse& RoleItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

RoleItemResponse* RoleItemResponse::default_instance_ = NULL;

RoleItemResponse* RoleItemResponse::New() const {
  return new RoleItemResponse;
}

void RoleItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RoleItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RoleItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RoleItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RoleItemResponse)
  return false;
#undef DO_
}

void RoleItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RoleItemResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RoleItemResponse)
}

int RoleItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoleItemResponse*>(&from));
}

void RoleItemResponse::MergeFrom(const RoleItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoleItemResponse::CopyFrom(const RoleItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleItemResponse::IsInitialized() const {

  return true;
}

void RoleItemResponse::Swap(RoleItemResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoleItemResponse::GetTypeName() const {
  return "main.RoleItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBagInfo::kUpdateOfficerCardItemProtoFieldNumber;
const int UpdateBagInfo::kUpdateEquipmentCardItemProtoFieldNumber;
const int UpdateBagInfo::kUpdateSoldierCardItemProtoFieldNumber;
const int UpdateBagInfo::kUpdatePropsCardItemProtoFieldNumber;
const int UpdateBagInfo::kUpdateOfficerFragmentCardItemProtoFieldNumber;
const int UpdateBagInfo::kUpdateConsumableCardItemProtoFieldNumber;
const int UpdateBagInfo::kUpdateMaterialItemProtoFieldNumber;
#endif  // !_MSC_VER

UpdateBagInfo::UpdateBagInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UpdateBagInfo)
}

void UpdateBagInfo::InitAsDefaultInstance() {
}

UpdateBagInfo::UpdateBagInfo(const UpdateBagInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UpdateBagInfo)
}

void UpdateBagInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBagInfo::~UpdateBagInfo() {
  // @@protoc_insertion_point(destructor:main.UpdateBagInfo)
  SharedDtor();
}

void UpdateBagInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateBagInfo& UpdateBagInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

UpdateBagInfo* UpdateBagInfo::default_instance_ = NULL;

UpdateBagInfo* UpdateBagInfo::New() const {
  return new UpdateBagInfo;
}

void UpdateBagInfo::Clear() {
  updateofficercarditemproto_.Clear();
  updateequipmentcarditemproto_.Clear();
  updatesoldiercarditemproto_.Clear();
  updatepropscarditemproto_.Clear();
  updateofficerfragmentcarditemproto_.Clear();
  updateconsumablecarditemproto_.Clear();
  updatematerialitemproto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UpdateBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.OfficerCardItemUpdateProto updateOfficerCardItemProto = 1;
      case 1: {
        if (tag == 10) {
         parse_updateOfficerCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updateofficercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_updateOfficerCardItemProto;
        if (input->ExpectTag(18)) goto parse_updateEquipmentCardItemProto;
        break;
      }

      // repeated .main.EquipmentCardItemUpdateProto updateEquipmentCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_updateEquipmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updateequipmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updateEquipmentCardItemProto;
        if (input->ExpectTag(26)) goto parse_updateSoldierCardItemProto;
        break;
      }

      // repeated .main.SoldierCardItemUpdateProto updateSoldierCardItemProto = 3;
      case 3: {
        if (tag == 26) {
         parse_updateSoldierCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatesoldiercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updateSoldierCardItemProto;
        if (input->ExpectTag(34)) goto parse_updatePropsCardItemProto;
        break;
      }

      // repeated .main.PropsCardItemUpdateProto updatePropsCardItemProto = 4;
      case 4: {
        if (tag == 34) {
         parse_updatePropsCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatepropscarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updatePropsCardItemProto;
        if (input->ExpectTag(42)) goto parse_updateOfficerFragmentCardItemProto;
        break;
      }

      // repeated .main.OfficerFragmentCardItemUpdateProto updateOfficerFragmentCardItemProto = 5;
      case 5: {
        if (tag == 42) {
         parse_updateOfficerFragmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updateofficerfragmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updateOfficerFragmentCardItemProto;
        if (input->ExpectTag(50)) goto parse_updateConsumableCardItemProto;
        break;
      }

      // repeated .main.ConsumableCardItemUpdateProto updateConsumableCardItemProto = 6;
      case 6: {
        if (tag == 50) {
         parse_updateConsumableCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updateconsumablecarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_updateConsumableCardItemProto;
        if (input->ExpectTag(58)) goto parse_updateMaterialItemProto;
        break;
      }

      // repeated .main.MaterialItemUpdateProto updateMaterialItemProto = 7;
      case 7: {
        if (tag == 58) {
         parse_updateMaterialItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatematerialitemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_updateMaterialItemProto;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UpdateBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UpdateBagInfo)
  return false;
#undef DO_
}

void UpdateBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UpdateBagInfo)
  // repeated .main.OfficerCardItemUpdateProto updateOfficerCardItemProto = 1;
  for (int i = 0; i < this->updateofficercarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->updateofficercarditemproto(i), output);
  }

  // repeated .main.EquipmentCardItemUpdateProto updateEquipmentCardItemProto = 2;
  for (int i = 0; i < this->updateequipmentcarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->updateequipmentcarditemproto(i), output);
  }

  // repeated .main.SoldierCardItemUpdateProto updateSoldierCardItemProto = 3;
  for (int i = 0; i < this->updatesoldiercarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->updatesoldiercarditemproto(i), output);
  }

  // repeated .main.PropsCardItemUpdateProto updatePropsCardItemProto = 4;
  for (int i = 0; i < this->updatepropscarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->updatepropscarditemproto(i), output);
  }

  // repeated .main.OfficerFragmentCardItemUpdateProto updateOfficerFragmentCardItemProto = 5;
  for (int i = 0; i < this->updateofficerfragmentcarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->updateofficerfragmentcarditemproto(i), output);
  }

  // repeated .main.ConsumableCardItemUpdateProto updateConsumableCardItemProto = 6;
  for (int i = 0; i < this->updateconsumablecarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->updateconsumablecarditemproto(i), output);
  }

  // repeated .main.MaterialItemUpdateProto updateMaterialItemProto = 7;
  for (int i = 0; i < this->updatematerialitemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->updatematerialitemproto(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UpdateBagInfo)
}

int UpdateBagInfo::ByteSize() const {
  int total_size = 0;

  // repeated .main.OfficerCardItemUpdateProto updateOfficerCardItemProto = 1;
  total_size += 1 * this->updateofficercarditemproto_size();
  for (int i = 0; i < this->updateofficercarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updateofficercarditemproto(i));
  }

  // repeated .main.EquipmentCardItemUpdateProto updateEquipmentCardItemProto = 2;
  total_size += 1 * this->updateequipmentcarditemproto_size();
  for (int i = 0; i < this->updateequipmentcarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updateequipmentcarditemproto(i));
  }

  // repeated .main.SoldierCardItemUpdateProto updateSoldierCardItemProto = 3;
  total_size += 1 * this->updatesoldiercarditemproto_size();
  for (int i = 0; i < this->updatesoldiercarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatesoldiercarditemproto(i));
  }

  // repeated .main.PropsCardItemUpdateProto updatePropsCardItemProto = 4;
  total_size += 1 * this->updatepropscarditemproto_size();
  for (int i = 0; i < this->updatepropscarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatepropscarditemproto(i));
  }

  // repeated .main.OfficerFragmentCardItemUpdateProto updateOfficerFragmentCardItemProto = 5;
  total_size += 1 * this->updateofficerfragmentcarditemproto_size();
  for (int i = 0; i < this->updateofficerfragmentcarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updateofficerfragmentcarditemproto(i));
  }

  // repeated .main.ConsumableCardItemUpdateProto updateConsumableCardItemProto = 6;
  total_size += 1 * this->updateconsumablecarditemproto_size();
  for (int i = 0; i < this->updateconsumablecarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updateconsumablecarditemproto(i));
  }

  // repeated .main.MaterialItemUpdateProto updateMaterialItemProto = 7;
  total_size += 1 * this->updatematerialitemproto_size();
  for (int i = 0; i < this->updatematerialitemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatematerialitemproto(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBagInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateBagInfo*>(&from));
}

void UpdateBagInfo::MergeFrom(const UpdateBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  updateofficercarditemproto_.MergeFrom(from.updateofficercarditemproto_);
  updateequipmentcarditemproto_.MergeFrom(from.updateequipmentcarditemproto_);
  updatesoldiercarditemproto_.MergeFrom(from.updatesoldiercarditemproto_);
  updatepropscarditemproto_.MergeFrom(from.updatepropscarditemproto_);
  updateofficerfragmentcarditemproto_.MergeFrom(from.updateofficerfragmentcarditemproto_);
  updateconsumablecarditemproto_.MergeFrom(from.updateconsumablecarditemproto_);
  updatematerialitemproto_.MergeFrom(from.updatematerialitemproto_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateBagInfo::CopyFrom(const UpdateBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBagInfo::IsInitialized() const {

  return true;
}

void UpdateBagInfo::Swap(UpdateBagInfo* other) {
  if (other != this) {
    updateofficercarditemproto_.Swap(&other->updateofficercarditemproto_);
    updateequipmentcarditemproto_.Swap(&other->updateequipmentcarditemproto_);
    updatesoldiercarditemproto_.Swap(&other->updatesoldiercarditemproto_);
    updatepropscarditemproto_.Swap(&other->updatepropscarditemproto_);
    updateofficerfragmentcarditemproto_.Swap(&other->updateofficerfragmentcarditemproto_);
    updateconsumablecarditemproto_.Swap(&other->updateconsumablecarditemproto_);
    updatematerialitemproto_.Swap(&other->updatematerialitemproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateBagInfo::GetTypeName() const {
  return "main.UpdateBagInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerCardItemUpdateProto::kStateFieldNumber;
const int OfficerCardItemUpdateProto::kSsidFieldNumber;
const int OfficerCardItemUpdateProto::kOfficerItemFieldNumber;
#endif  // !_MSC_VER

OfficerCardItemUpdateProto::OfficerCardItemUpdateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerCardItemUpdateProto)
}

void OfficerCardItemUpdateProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officeritem_ = const_cast< ::main::OfficerCardItemProto*>(
      ::main::OfficerCardItemProto::internal_default_instance());
#else
  officeritem_ = const_cast< ::main::OfficerCardItemProto*>(&::main::OfficerCardItemProto::default_instance());
#endif
}

OfficerCardItemUpdateProto::OfficerCardItemUpdateProto(const OfficerCardItemUpdateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerCardItemUpdateProto)
}

void OfficerCardItemUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  officeritem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerCardItemUpdateProto::~OfficerCardItemUpdateProto() {
  // @@protoc_insertion_point(destructor:main.OfficerCardItemUpdateProto)
  SharedDtor();
}

void OfficerCardItemUpdateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete officeritem_;
  }
}

void OfficerCardItemUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerCardItemUpdateProto& OfficerCardItemUpdateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerCardItemUpdateProto* OfficerCardItemUpdateProto::default_instance_ = NULL;

OfficerCardItemUpdateProto* OfficerCardItemUpdateProto::New() const {
  return new OfficerCardItemUpdateProto;
}

void OfficerCardItemUpdateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfficerCardItemUpdateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, ssid_);
    if (has_officeritem()) {
      if (officeritem_ != NULL) officeritem_->::main::OfficerCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerCardItemUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerCardItemUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_officerItem;
        break;
      }

      // optional .main.OfficerCardItemProto officerItem = 3;
      case 3: {
        if (tag == 26) {
         parse_officerItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officeritem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerCardItemUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerCardItemUpdateProto)
  return false;
#undef DO_
}

void OfficerCardItemUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerCardItemUpdateProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.OfficerCardItemProto officerItem = 3;
  if (has_officeritem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->officeritem(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerCardItemUpdateProto)
}

int OfficerCardItemUpdateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.OfficerCardItemProto officerItem = 3;
    if (has_officeritem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officeritem());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerCardItemUpdateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerCardItemUpdateProto*>(&from));
}

void OfficerCardItemUpdateProto::MergeFrom(const OfficerCardItemUpdateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_officeritem()) {
      mutable_officeritem()->::main::OfficerCardItemProto::MergeFrom(from.officeritem());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerCardItemUpdateProto::CopyFrom(const OfficerCardItemUpdateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerCardItemUpdateProto::IsInitialized() const {

  return true;
}

void OfficerCardItemUpdateProto::Swap(OfficerCardItemUpdateProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(officeritem_, other->officeritem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerCardItemUpdateProto::GetTypeName() const {
  return "main.OfficerCardItemUpdateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerCardItemProto::kSsidFieldNumber;
const int OfficerCardItemProto::kItemIdFieldNumber;
const int OfficerCardItemProto::kAtkFieldNumber;
const int OfficerCardItemProto::kDefFieldNumber;
const int OfficerCardItemProto::kHpFieldNumber;
const int OfficerCardItemProto::kSpFieldNumber;
const int OfficerCardItemProto::kCurrLevelFieldNumber;
const int OfficerCardItemProto::kCurrExpFieldNumber;
const int OfficerCardItemProto::kIsProtectionFieldNumber;
const int OfficerCardItemProto::kGeneralsSkillIdFieldNumber;
const int OfficerCardItemProto::kLordSkillIdFieldNumber;
const int OfficerCardItemProto::kGeneralsSkillCurrExpFieldNumber;
const int OfficerCardItemProto::kLordSkillCurrExpFieldNumber;
const int OfficerCardItemProto::kIsCrashFieldNumber;
const int OfficerCardItemProto::kCrashFragmentNumFieldNumber;
const int OfficerCardItemProto::kCrashFragmentIdFieldNumber;
const int OfficerCardItemProto::kLeftDevPointFieldNumber;
const int OfficerCardItemProto::kSavedDevFieldNumber;
#endif  // !_MSC_VER

OfficerCardItemProto::OfficerCardItemProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerCardItemProto)
}

void OfficerCardItemProto::InitAsDefaultInstance() {
}

OfficerCardItemProto::OfficerCardItemProto(const OfficerCardItemProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerCardItemProto)
}

void OfficerCardItemProto::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  itemid_ = 0;
  atk_ = 0;
  def_ = 0;
  hp_ = 0;
  sp_ = 0;
  currlevel_ = 0;
  currexp_ = 0;
  isprotection_ = 0;
  generalsskillid_ = 0;
  lordskillid_ = 0;
  generalsskillcurrexp_ = 0;
  lordskillcurrexp_ = 0;
  iscrash_ = false;
  crashfragmentnum_ = 0;
  crashfragmentid_ = 0;
  leftdevpoint_ = 0;
  saveddev_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerCardItemProto::~OfficerCardItemProto() {
  // @@protoc_insertion_point(destructor:main.OfficerCardItemProto)
  SharedDtor();
}

void OfficerCardItemProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerCardItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerCardItemProto& OfficerCardItemProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerCardItemProto* OfficerCardItemProto::default_instance_ = NULL;

OfficerCardItemProto* OfficerCardItemProto::New() const {
  return new OfficerCardItemProto;
}

void OfficerCardItemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfficerCardItemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ssid_, currexp_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(isprotection_, iscrash_);
  }
  ZR_(saveddev_, leftdevpoint_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerCardItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerCardItemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_atk;
        break;
      }

      // optional int32 atk = 3;
      case 3: {
        if (tag == 24) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_def;
        break;
      }

      // optional int32 def = 4;
      case 4: {
        if (tag == 32) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (tag == 40) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sp;
        break;
      }

      // optional int32 sp = 6;
      case 6: {
        if (tag == 48) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_currLevel;
        break;
      }

      // optional int32 currLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_currLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currlevel_)));
          set_has_currlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_currExp;
        break;
      }

      // optional int32 currExp = 8;
      case 8: {
        if (tag == 64) {
         parse_currExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currexp_)));
          set_has_currexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isProtection;
        break;
      }

      // optional int32 isProtection = 9;
      case 9: {
        if (tag == 72) {
         parse_isProtection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isprotection_)));
          set_has_isprotection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_generalsSkillId;
        break;
      }

      // optional int32 generalsSkillId = 10;
      case 10: {
        if (tag == 80) {
         parse_generalsSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generalsskillid_)));
          set_has_generalsskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lordSkillId;
        break;
      }

      // optional int32 lordSkillId = 11;
      case 11: {
        if (tag == 88) {
         parse_lordSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillid_)));
          set_has_lordskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_generalsSkillCurrExp;
        break;
      }

      // optional int32 generalsSkillCurrExp = 12;
      case 12: {
        if (tag == 96) {
         parse_generalsSkillCurrExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generalsskillcurrexp_)));
          set_has_generalsskillcurrexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_lordSkillCurrExp;
        break;
      }

      // optional int32 lordSkillCurrExp = 13;
      case 13: {
        if (tag == 104) {
         parse_lordSkillCurrExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillcurrexp_)));
          set_has_lordskillcurrexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isCrash;
        break;
      }

      // optional bool isCrash = 14;
      case 14: {
        if (tag == 112) {
         parse_isCrash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscrash_)));
          set_has_iscrash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_crashFragmentNum;
        break;
      }

      // optional int32 crashFragmentNum = 15;
      case 15: {
        if (tag == 120) {
         parse_crashFragmentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crashfragmentnum_)));
          set_has_crashfragmentnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_crashFragmentId;
        break;
      }

      // optional int32 crashFragmentId = 16;
      case 16: {
        if (tag == 128) {
         parse_crashFragmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crashfragmentid_)));
          set_has_crashfragmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_leftDevPoint;
        break;
      }

      // optional int32 leftDevPoint = 17;
      case 17: {
        if (tag == 136) {
         parse_leftDevPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftdevpoint_)));
          set_has_leftdevpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_savedDev;
        break;
      }

      // optional bool savedDev = 18;
      case 18: {
        if (tag == 144) {
         parse_savedDev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &saveddev_)));
          set_has_saveddev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerCardItemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerCardItemProto)
  return false;
#undef DO_
}

void OfficerCardItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerCardItemProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 atk = 3;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->atk(), output);
  }

  // optional int32 def = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->def(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int32 sp = 6;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sp(), output);
  }

  // optional int32 currLevel = 7;
  if (has_currlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->currlevel(), output);
  }

  // optional int32 currExp = 8;
  if (has_currexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currexp(), output);
  }

  // optional int32 isProtection = 9;
  if (has_isprotection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isprotection(), output);
  }

  // optional int32 generalsSkillId = 10;
  if (has_generalsskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->generalsskillid(), output);
  }

  // optional int32 lordSkillId = 11;
  if (has_lordskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lordskillid(), output);
  }

  // optional int32 generalsSkillCurrExp = 12;
  if (has_generalsskillcurrexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->generalsskillcurrexp(), output);
  }

  // optional int32 lordSkillCurrExp = 13;
  if (has_lordskillcurrexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lordskillcurrexp(), output);
  }

  // optional bool isCrash = 14;
  if (has_iscrash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->iscrash(), output);
  }

  // optional int32 crashFragmentNum = 15;
  if (has_crashfragmentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->crashfragmentnum(), output);
  }

  // optional int32 crashFragmentId = 16;
  if (has_crashfragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->crashfragmentid(), output);
  }

  // optional int32 leftDevPoint = 17;
  if (has_leftdevpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->leftdevpoint(), output);
  }

  // optional bool savedDev = 18;
  if (has_saveddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->saveddev(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerCardItemProto)
}

int OfficerCardItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 atk = 3;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

    // optional int32 def = 4;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 sp = 6;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp());
    }

    // optional int32 currLevel = 7;
    if (has_currlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currlevel());
    }

    // optional int32 currExp = 8;
    if (has_currexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isProtection = 9;
    if (has_isprotection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isprotection());
    }

    // optional int32 generalsSkillId = 10;
    if (has_generalsskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generalsskillid());
    }

    // optional int32 lordSkillId = 11;
    if (has_lordskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillid());
    }

    // optional int32 generalsSkillCurrExp = 12;
    if (has_generalsskillcurrexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generalsskillcurrexp());
    }

    // optional int32 lordSkillCurrExp = 13;
    if (has_lordskillcurrexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillcurrexp());
    }

    // optional bool isCrash = 14;
    if (has_iscrash()) {
      total_size += 1 + 1;
    }

    // optional int32 crashFragmentNum = 15;
    if (has_crashfragmentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crashfragmentnum());
    }

    // optional int32 crashFragmentId = 16;
    if (has_crashfragmentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crashfragmentid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 leftDevPoint = 17;
    if (has_leftdevpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftdevpoint());
    }

    // optional bool savedDev = 18;
    if (has_saveddev()) {
      total_size += 2 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerCardItemProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerCardItemProto*>(&from));
}

void OfficerCardItemProto::MergeFrom(const OfficerCardItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_currlevel()) {
      set_currlevel(from.currlevel());
    }
    if (from.has_currexp()) {
      set_currexp(from.currexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isprotection()) {
      set_isprotection(from.isprotection());
    }
    if (from.has_generalsskillid()) {
      set_generalsskillid(from.generalsskillid());
    }
    if (from.has_lordskillid()) {
      set_lordskillid(from.lordskillid());
    }
    if (from.has_generalsskillcurrexp()) {
      set_generalsskillcurrexp(from.generalsskillcurrexp());
    }
    if (from.has_lordskillcurrexp()) {
      set_lordskillcurrexp(from.lordskillcurrexp());
    }
    if (from.has_iscrash()) {
      set_iscrash(from.iscrash());
    }
    if (from.has_crashfragmentnum()) {
      set_crashfragmentnum(from.crashfragmentnum());
    }
    if (from.has_crashfragmentid()) {
      set_crashfragmentid(from.crashfragmentid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leftdevpoint()) {
      set_leftdevpoint(from.leftdevpoint());
    }
    if (from.has_saveddev()) {
      set_saveddev(from.saveddev());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerCardItemProto::CopyFrom(const OfficerCardItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerCardItemProto::IsInitialized() const {

  return true;
}

void OfficerCardItemProto::Swap(OfficerCardItemProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(itemid_, other->itemid_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(hp_, other->hp_);
    std::swap(sp_, other->sp_);
    std::swap(currlevel_, other->currlevel_);
    std::swap(currexp_, other->currexp_);
    std::swap(isprotection_, other->isprotection_);
    std::swap(generalsskillid_, other->generalsskillid_);
    std::swap(lordskillid_, other->lordskillid_);
    std::swap(generalsskillcurrexp_, other->generalsskillcurrexp_);
    std::swap(lordskillcurrexp_, other->lordskillcurrexp_);
    std::swap(iscrash_, other->iscrash_);
    std::swap(crashfragmentnum_, other->crashfragmentnum_);
    std::swap(crashfragmentid_, other->crashfragmentid_);
    std::swap(leftdevpoint_, other->leftdevpoint_);
    std::swap(saveddev_, other->saveddev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerCardItemProto::GetTypeName() const {
  return "main.OfficerCardItemProto";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCardItemUpdateProto::kStateFieldNumber;
const int EquipmentCardItemUpdateProto::kSsidFieldNumber;
const int EquipmentCardItemUpdateProto::kOldOfficerIdFieldNumber;
const int EquipmentCardItemUpdateProto::kEquipmentItemFieldNumber;
const int EquipmentCardItemUpdateProto::kCostFieldNumber;
#endif  // !_MSC_VER

EquipmentCardItemUpdateProto::EquipmentCardItemUpdateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentCardItemUpdateProto)
}

void EquipmentCardItemUpdateProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipmentitem_ = const_cast< ::main::EquipmentCardItemProto*>(
      ::main::EquipmentCardItemProto::internal_default_instance());
#else
  equipmentitem_ = const_cast< ::main::EquipmentCardItemProto*>(&::main::EquipmentCardItemProto::default_instance());
#endif
}

EquipmentCardItemUpdateProto::EquipmentCardItemUpdateProto(const EquipmentCardItemUpdateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentCardItemUpdateProto)
}

void EquipmentCardItemUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  oldofficerid_ = 0;
  equipmentitem_ = NULL;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCardItemUpdateProto::~EquipmentCardItemUpdateProto() {
  // @@protoc_insertion_point(destructor:main.EquipmentCardItemUpdateProto)
  SharedDtor();
}

void EquipmentCardItemUpdateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equipmentitem_;
  }
}

void EquipmentCardItemUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentCardItemUpdateProto& EquipmentCardItemUpdateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentCardItemUpdateProto* EquipmentCardItemUpdateProto::default_instance_ = NULL;

EquipmentCardItemUpdateProto* EquipmentCardItemUpdateProto::New() const {
  return new EquipmentCardItemUpdateProto;
}

void EquipmentCardItemUpdateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentCardItemUpdateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(state_, ssid_);
    ZR_(oldofficerid_, cost_);
    if (has_equipmentitem()) {
      if (equipmentitem_ != NULL) equipmentitem_->::main::EquipmentCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentCardItemUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentCardItemUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oldOfficerId;
        break;
      }

      // optional int32 oldOfficerId = 3;
      case 3: {
        if (tag == 24) {
         parse_oldOfficerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldofficerid_)));
          set_has_oldofficerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipmentItem;
        break;
      }

      // optional .main.EquipmentCardItemProto equipmentItem = 4;
      case 4: {
        if (tag == 34) {
         parse_equipmentItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cost;
        break;
      }

      // optional int32 cost = 5;
      case 5: {
        if (tag == 40) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentCardItemUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentCardItemUpdateProto)
  return false;
#undef DO_
}

void EquipmentCardItemUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentCardItemUpdateProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional int32 oldOfficerId = 3;
  if (has_oldofficerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oldofficerid(), output);
  }

  // optional .main.EquipmentCardItemProto equipmentItem = 4;
  if (has_equipmentitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->equipmentitem(), output);
  }

  // optional int32 cost = 5;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cost(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentCardItemUpdateProto)
}

int EquipmentCardItemUpdateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 oldOfficerId = 3;
    if (has_oldofficerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldofficerid());
    }

    // optional .main.EquipmentCardItemProto equipmentItem = 4;
    if (has_equipmentitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentitem());
    }

    // optional int32 cost = 5;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCardItemUpdateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentCardItemUpdateProto*>(&from));
}

void EquipmentCardItemUpdateProto::MergeFrom(const EquipmentCardItemUpdateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_oldofficerid()) {
      set_oldofficerid(from.oldofficerid());
    }
    if (from.has_equipmentitem()) {
      mutable_equipmentitem()->::main::EquipmentCardItemProto::MergeFrom(from.equipmentitem());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentCardItemUpdateProto::CopyFrom(const EquipmentCardItemUpdateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCardItemUpdateProto::IsInitialized() const {

  return true;
}

void EquipmentCardItemUpdateProto::Swap(EquipmentCardItemUpdateProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(oldofficerid_, other->oldofficerid_);
    std::swap(equipmentitem_, other->equipmentitem_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentCardItemUpdateProto::GetTypeName() const {
  return "main.EquipmentCardItemUpdateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCardItemProto::kItemIdFieldNumber;
const int EquipmentCardItemProto::kCurrLevelFieldNumber;
const int EquipmentCardItemProto::kSsidFieldNumber;
const int EquipmentCardItemProto::kOfficerCardItemIdFieldNumber;
const int EquipmentCardItemProto::kIsProtectionFieldNumber;
const int EquipmentCardItemProto::kCostFieldNumber;
#endif  // !_MSC_VER

EquipmentCardItemProto::EquipmentCardItemProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentCardItemProto)
}

void EquipmentCardItemProto::InitAsDefaultInstance() {
}

EquipmentCardItemProto::EquipmentCardItemProto(const EquipmentCardItemProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentCardItemProto)
}

void EquipmentCardItemProto::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  currlevel_ = 0;
  ssid_ = 0;
  officercarditemid_ = 0;
  isprotection_ = 0;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCardItemProto::~EquipmentCardItemProto() {
  // @@protoc_insertion_point(destructor:main.EquipmentCardItemProto)
  SharedDtor();
}

void EquipmentCardItemProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentCardItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentCardItemProto& EquipmentCardItemProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentCardItemProto* EquipmentCardItemProto::default_instance_ = NULL;

EquipmentCardItemProto* EquipmentCardItemProto::New() const {
  return new EquipmentCardItemProto;
}

void EquipmentCardItemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentCardItemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(itemid_, cost_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentCardItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentCardItemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currLevel;
        break;
      }

      // optional int32 currLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_currLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currlevel_)));
          set_has_currlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 3;
      case 3: {
        if (tag == 24) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_officerCardItemId;
        break;
      }

      // optional int32 officerCardItemId = 4;
      case 4: {
        if (tag == 32) {
         parse_officerCardItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officercarditemid_)));
          set_has_officercarditemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isProtection;
        break;
      }

      // optional int32 isProtection = 5;
      case 5: {
        if (tag == 40) {
         parse_isProtection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isprotection_)));
          set_has_isprotection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cost;
        break;
      }

      // optional int32 cost = 6;
      case 6: {
        if (tag == 48) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentCardItemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentCardItemProto)
  return false;
#undef DO_
}

void EquipmentCardItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentCardItemProto)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 currLevel = 2;
  if (has_currlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currlevel(), output);
  }

  // optional int32 ssid = 3;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ssid(), output);
  }

  // optional int32 officerCardItemId = 4;
  if (has_officercarditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->officercarditemid(), output);
  }

  // optional int32 isProtection = 5;
  if (has_isprotection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isprotection(), output);
  }

  // optional int32 cost = 6;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cost(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentCardItemProto)
}

int EquipmentCardItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 currLevel = 2;
    if (has_currlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currlevel());
    }

    // optional int32 ssid = 3;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 officerCardItemId = 4;
    if (has_officercarditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officercarditemid());
    }

    // optional int32 isProtection = 5;
    if (has_isprotection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isprotection());
    }

    // optional int32 cost = 6;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCardItemProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentCardItemProto*>(&from));
}

void EquipmentCardItemProto::MergeFrom(const EquipmentCardItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_currlevel()) {
      set_currlevel(from.currlevel());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_officercarditemid()) {
      set_officercarditemid(from.officercarditemid());
    }
    if (from.has_isprotection()) {
      set_isprotection(from.isprotection());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentCardItemProto::CopyFrom(const EquipmentCardItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCardItemProto::IsInitialized() const {

  return true;
}

void EquipmentCardItemProto::Swap(EquipmentCardItemProto* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(currlevel_, other->currlevel_);
    std::swap(ssid_, other->ssid_);
    std::swap(officercarditemid_, other->officercarditemid_);
    std::swap(isprotection_, other->isprotection_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentCardItemProto::GetTypeName() const {
  return "main.EquipmentCardItemProto";
}


// ===================================================================

#ifndef _MSC_VER
const int SoldierCardItemUpdateProto::kStateFieldNumber;
const int SoldierCardItemUpdateProto::kSsidFieldNumber;
const int SoldierCardItemUpdateProto::kSoldierItemFieldNumber;
#endif  // !_MSC_VER

SoldierCardItemUpdateProto::SoldierCardItemUpdateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SoldierCardItemUpdateProto)
}

void SoldierCardItemUpdateProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  soldieritem_ = const_cast< ::main::SoldierCardItemProto*>(
      ::main::SoldierCardItemProto::internal_default_instance());
#else
  soldieritem_ = const_cast< ::main::SoldierCardItemProto*>(&::main::SoldierCardItemProto::default_instance());
#endif
}

SoldierCardItemUpdateProto::SoldierCardItemUpdateProto(const SoldierCardItemUpdateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SoldierCardItemUpdateProto)
}

void SoldierCardItemUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  soldieritem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldierCardItemUpdateProto::~SoldierCardItemUpdateProto() {
  // @@protoc_insertion_point(destructor:main.SoldierCardItemUpdateProto)
  SharedDtor();
}

void SoldierCardItemUpdateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete soldieritem_;
  }
}

void SoldierCardItemUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SoldierCardItemUpdateProto& SoldierCardItemUpdateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SoldierCardItemUpdateProto* SoldierCardItemUpdateProto::default_instance_ = NULL;

SoldierCardItemUpdateProto* SoldierCardItemUpdateProto::New() const {
  return new SoldierCardItemUpdateProto;
}

void SoldierCardItemUpdateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SoldierCardItemUpdateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, ssid_);
    if (has_soldieritem()) {
      if (soldieritem_ != NULL) soldieritem_->::main::SoldierCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SoldierCardItemUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SoldierCardItemUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_soldierItem;
        break;
      }

      // optional .main.SoldierCardItemProto soldierItem = 3;
      case 3: {
        if (tag == 26) {
         parse_soldierItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soldieritem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SoldierCardItemUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SoldierCardItemUpdateProto)
  return false;
#undef DO_
}

void SoldierCardItemUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SoldierCardItemUpdateProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.SoldierCardItemProto soldierItem = 3;
  if (has_soldieritem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->soldieritem(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SoldierCardItemUpdateProto)
}

int SoldierCardItemUpdateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.SoldierCardItemProto soldierItem = 3;
    if (has_soldieritem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soldieritem());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldierCardItemUpdateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SoldierCardItemUpdateProto*>(&from));
}

void SoldierCardItemUpdateProto::MergeFrom(const SoldierCardItemUpdateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_soldieritem()) {
      mutable_soldieritem()->::main::SoldierCardItemProto::MergeFrom(from.soldieritem());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SoldierCardItemUpdateProto::CopyFrom(const SoldierCardItemUpdateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldierCardItemUpdateProto::IsInitialized() const {

  return true;
}

void SoldierCardItemUpdateProto::Swap(SoldierCardItemUpdateProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(soldieritem_, other->soldieritem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SoldierCardItemUpdateProto::GetTypeName() const {
  return "main.SoldierCardItemUpdateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int SoldierCardItemProto::kCurrLevelFieldNumber;
const int SoldierCardItemProto::kCurrExpFieldNumber;
const int SoldierCardItemProto::kSsidFieldNumber;
const int SoldierCardItemProto::kItemIdFieldNumber;
#endif  // !_MSC_VER

SoldierCardItemProto::SoldierCardItemProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SoldierCardItemProto)
}

void SoldierCardItemProto::InitAsDefaultInstance() {
}

SoldierCardItemProto::SoldierCardItemProto(const SoldierCardItemProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SoldierCardItemProto)
}

void SoldierCardItemProto::SharedCtor() {
  _cached_size_ = 0;
  currlevel_ = 0;
  currexp_ = 0;
  ssid_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldierCardItemProto::~SoldierCardItemProto() {
  // @@protoc_insertion_point(destructor:main.SoldierCardItemProto)
  SharedDtor();
}

void SoldierCardItemProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SoldierCardItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SoldierCardItemProto& SoldierCardItemProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SoldierCardItemProto* SoldierCardItemProto::default_instance_ = NULL;

SoldierCardItemProto* SoldierCardItemProto::New() const {
  return new SoldierCardItemProto;
}

void SoldierCardItemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SoldierCardItemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(currlevel_, itemid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SoldierCardItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SoldierCardItemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 currLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currlevel_)));
          set_has_currlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currExp;
        break;
      }

      // optional int32 currExp = 2;
      case 2: {
        if (tag == 16) {
         parse_currExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currexp_)));
          set_has_currexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 3;
      case 3: {
        if (tag == 24) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 4;
      case 4: {
        if (tag == 32) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SoldierCardItemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SoldierCardItemProto)
  return false;
#undef DO_
}

void SoldierCardItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SoldierCardItemProto)
  // optional int32 currLevel = 1;
  if (has_currlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currlevel(), output);
  }

  // optional int32 currExp = 2;
  if (has_currexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currexp(), output);
  }

  // optional int32 ssid = 3;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ssid(), output);
  }

  // optional int32 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SoldierCardItemProto)
}

int SoldierCardItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 currLevel = 1;
    if (has_currlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currlevel());
    }

    // optional int32 currExp = 2;
    if (has_currexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currexp());
    }

    // optional int32 ssid = 3;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldierCardItemProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SoldierCardItemProto*>(&from));
}

void SoldierCardItemProto::MergeFrom(const SoldierCardItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currlevel()) {
      set_currlevel(from.currlevel());
    }
    if (from.has_currexp()) {
      set_currexp(from.currexp());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SoldierCardItemProto::CopyFrom(const SoldierCardItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldierCardItemProto::IsInitialized() const {

  return true;
}

void SoldierCardItemProto::Swap(SoldierCardItemProto* other) {
  if (other != this) {
    std::swap(currlevel_, other->currlevel_);
    std::swap(currexp_, other->currexp_);
    std::swap(ssid_, other->ssid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SoldierCardItemProto::GetTypeName() const {
  return "main.SoldierCardItemProto";
}


// ===================================================================

#ifndef _MSC_VER
const int PropsCardItemUpdateProto::kStateFieldNumber;
const int PropsCardItemUpdateProto::kSsidFieldNumber;
const int PropsCardItemUpdateProto::kPropsItemFieldNumber;
#endif  // !_MSC_VER

PropsCardItemUpdateProto::PropsCardItemUpdateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PropsCardItemUpdateProto)
}

void PropsCardItemUpdateProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  propsitem_ = const_cast< ::main::PropsCardItemProto*>(
      ::main::PropsCardItemProto::internal_default_instance());
#else
  propsitem_ = const_cast< ::main::PropsCardItemProto*>(&::main::PropsCardItemProto::default_instance());
#endif
}

PropsCardItemUpdateProto::PropsCardItemUpdateProto(const PropsCardItemUpdateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PropsCardItemUpdateProto)
}

void PropsCardItemUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  propsitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsCardItemUpdateProto::~PropsCardItemUpdateProto() {
  // @@protoc_insertion_point(destructor:main.PropsCardItemUpdateProto)
  SharedDtor();
}

void PropsCardItemUpdateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete propsitem_;
  }
}

void PropsCardItemUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropsCardItemUpdateProto& PropsCardItemUpdateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

PropsCardItemUpdateProto* PropsCardItemUpdateProto::default_instance_ = NULL;

PropsCardItemUpdateProto* PropsCardItemUpdateProto::New() const {
  return new PropsCardItemUpdateProto;
}

void PropsCardItemUpdateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PropsCardItemUpdateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, ssid_);
    if (has_propsitem()) {
      if (propsitem_ != NULL) propsitem_->::main::PropsCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropsCardItemUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PropsCardItemUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_propsItem;
        break;
      }

      // optional .main.PropsCardItemProto propsItem = 3;
      case 3: {
        if (tag == 26) {
         parse_propsItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propsitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PropsCardItemUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PropsCardItemUpdateProto)
  return false;
#undef DO_
}

void PropsCardItemUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PropsCardItemUpdateProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.PropsCardItemProto propsItem = 3;
  if (has_propsitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->propsitem(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PropsCardItemUpdateProto)
}

int PropsCardItemUpdateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.PropsCardItemProto propsItem = 3;
    if (has_propsitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propsitem());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsCardItemUpdateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropsCardItemUpdateProto*>(&from));
}

void PropsCardItemUpdateProto::MergeFrom(const PropsCardItemUpdateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_propsitem()) {
      mutable_propsitem()->::main::PropsCardItemProto::MergeFrom(from.propsitem());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropsCardItemUpdateProto::CopyFrom(const PropsCardItemUpdateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsCardItemUpdateProto::IsInitialized() const {

  return true;
}

void PropsCardItemUpdateProto::Swap(PropsCardItemUpdateProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(propsitem_, other->propsitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropsCardItemUpdateProto::GetTypeName() const {
  return "main.PropsCardItemUpdateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int PropsCardItemProto::kSsidFieldNumber;
const int PropsCardItemProto::kItemIdFieldNumber;
const int PropsCardItemProto::kIsProtectionFieldNumber;
const int PropsCardItemProto::kCurrItemNumberFieldNumber;
#endif  // !_MSC_VER

PropsCardItemProto::PropsCardItemProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PropsCardItemProto)
}

void PropsCardItemProto::InitAsDefaultInstance() {
}

PropsCardItemProto::PropsCardItemProto(const PropsCardItemProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PropsCardItemProto)
}

void PropsCardItemProto::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  itemid_ = 0;
  isprotection_ = 0;
  curritemnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsCardItemProto::~PropsCardItemProto() {
  // @@protoc_insertion_point(destructor:main.PropsCardItemProto)
  SharedDtor();
}

void PropsCardItemProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropsCardItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropsCardItemProto& PropsCardItemProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

PropsCardItemProto* PropsCardItemProto::default_instance_ = NULL;

PropsCardItemProto* PropsCardItemProto::New() const {
  return new PropsCardItemProto;
}

void PropsCardItemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PropsCardItemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, curritemnumber_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropsCardItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PropsCardItemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isProtection;
        break;
      }

      // optional int32 isProtection = 3;
      case 3: {
        if (tag == 24) {
         parse_isProtection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isprotection_)));
          set_has_isprotection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_currItemNumber;
        break;
      }

      // optional int32 currItemNumber = 4;
      case 4: {
        if (tag == 32) {
         parse_currItemNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curritemnumber_)));
          set_has_curritemnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PropsCardItemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PropsCardItemProto)
  return false;
#undef DO_
}

void PropsCardItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PropsCardItemProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 isProtection = 3;
  if (has_isprotection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isprotection(), output);
  }

  // optional int32 currItemNumber = 4;
  if (has_curritemnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curritemnumber(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PropsCardItemProto)
}

int PropsCardItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 isProtection = 3;
    if (has_isprotection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isprotection());
    }

    // optional int32 currItemNumber = 4;
    if (has_curritemnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curritemnumber());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsCardItemProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropsCardItemProto*>(&from));
}

void PropsCardItemProto::MergeFrom(const PropsCardItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_isprotection()) {
      set_isprotection(from.isprotection());
    }
    if (from.has_curritemnumber()) {
      set_curritemnumber(from.curritemnumber());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropsCardItemProto::CopyFrom(const PropsCardItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsCardItemProto::IsInitialized() const {

  return true;
}

void PropsCardItemProto::Swap(PropsCardItemProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(itemid_, other->itemid_);
    std::swap(isprotection_, other->isprotection_);
    std::swap(curritemnumber_, other->curritemnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropsCardItemProto::GetTypeName() const {
  return "main.PropsCardItemProto";
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialItemUpdateProto::kStateFieldNumber;
const int MaterialItemUpdateProto::kSsidFieldNumber;
const int MaterialItemUpdateProto::kMaterialItemFieldNumber;
#endif  // !_MSC_VER

MaterialItemUpdateProto::MaterialItemUpdateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MaterialItemUpdateProto)
}

void MaterialItemUpdateProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  materialitem_ = const_cast< ::main::MaterialItemProto*>(
      ::main::MaterialItemProto::internal_default_instance());
#else
  materialitem_ = const_cast< ::main::MaterialItemProto*>(&::main::MaterialItemProto::default_instance());
#endif
}

MaterialItemUpdateProto::MaterialItemUpdateProto(const MaterialItemUpdateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MaterialItemUpdateProto)
}

void MaterialItemUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  materialitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialItemUpdateProto::~MaterialItemUpdateProto() {
  // @@protoc_insertion_point(destructor:main.MaterialItemUpdateProto)
  SharedDtor();
}

void MaterialItemUpdateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete materialitem_;
  }
}

void MaterialItemUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MaterialItemUpdateProto& MaterialItemUpdateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

MaterialItemUpdateProto* MaterialItemUpdateProto::default_instance_ = NULL;

MaterialItemUpdateProto* MaterialItemUpdateProto::New() const {
  return new MaterialItemUpdateProto;
}

void MaterialItemUpdateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MaterialItemUpdateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, ssid_);
    if (has_materialitem()) {
      if (materialitem_ != NULL) materialitem_->::main::MaterialItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MaterialItemUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MaterialItemUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_materialItem;
        break;
      }

      // optional .main.MaterialItemProto materialItem = 3;
      case 3: {
        if (tag == 26) {
         parse_materialItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_materialitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MaterialItemUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MaterialItemUpdateProto)
  return false;
#undef DO_
}

void MaterialItemUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MaterialItemUpdateProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.MaterialItemProto materialItem = 3;
  if (has_materialitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->materialitem(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MaterialItemUpdateProto)
}

int MaterialItemUpdateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.MaterialItemProto materialItem = 3;
    if (has_materialitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->materialitem());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialItemUpdateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MaterialItemUpdateProto*>(&from));
}

void MaterialItemUpdateProto::MergeFrom(const MaterialItemUpdateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_materialitem()) {
      mutable_materialitem()->::main::MaterialItemProto::MergeFrom(from.materialitem());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MaterialItemUpdateProto::CopyFrom(const MaterialItemUpdateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialItemUpdateProto::IsInitialized() const {

  return true;
}

void MaterialItemUpdateProto::Swap(MaterialItemUpdateProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(materialitem_, other->materialitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MaterialItemUpdateProto::GetTypeName() const {
  return "main.MaterialItemUpdateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialItemProto::kSsidFieldNumber;
const int MaterialItemProto::kItemIdFieldNumber;
const int MaterialItemProto::kItemNumFieldNumber;
#endif  // !_MSC_VER

MaterialItemProto::MaterialItemProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MaterialItemProto)
}

void MaterialItemProto::InitAsDefaultInstance() {
}

MaterialItemProto::MaterialItemProto(const MaterialItemProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MaterialItemProto)
}

void MaterialItemProto::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialItemProto::~MaterialItemProto() {
  // @@protoc_insertion_point(destructor:main.MaterialItemProto)
  SharedDtor();
}

void MaterialItemProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MaterialItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MaterialItemProto& MaterialItemProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

MaterialItemProto* MaterialItemProto::default_instance_ = NULL;

MaterialItemProto* MaterialItemProto::New() const {
  return new MaterialItemProto;
}

void MaterialItemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MaterialItemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, itemnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MaterialItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MaterialItemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (tag == 24) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MaterialItemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MaterialItemProto)
  return false;
#undef DO_
}

void MaterialItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MaterialItemProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MaterialItemProto)
}

int MaterialItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialItemProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MaterialItemProto*>(&from));
}

void MaterialItemProto::MergeFrom(const MaterialItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MaterialItemProto::CopyFrom(const MaterialItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialItemProto::IsInitialized() const {

  return true;
}

void MaterialItemProto::Swap(MaterialItemProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MaterialItemProto::GetTypeName() const {
  return "main.MaterialItemProto";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerFragmentCardItemUpdateProto::kStateFieldNumber;
const int OfficerFragmentCardItemUpdateProto::kSsidFieldNumber;
const int OfficerFragmentCardItemUpdateProto::kOfficerFragmentCardItemFieldNumber;
#endif  // !_MSC_VER

OfficerFragmentCardItemUpdateProto::OfficerFragmentCardItemUpdateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerFragmentCardItemUpdateProto)
}

void OfficerFragmentCardItemUpdateProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officerfragmentcarditem_ = const_cast< ::main::OfficerFragmentCardItemProto*>(
      ::main::OfficerFragmentCardItemProto::internal_default_instance());
#else
  officerfragmentcarditem_ = const_cast< ::main::OfficerFragmentCardItemProto*>(&::main::OfficerFragmentCardItemProto::default_instance());
#endif
}

OfficerFragmentCardItemUpdateProto::OfficerFragmentCardItemUpdateProto(const OfficerFragmentCardItemUpdateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerFragmentCardItemUpdateProto)
}

void OfficerFragmentCardItemUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  officerfragmentcarditem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerFragmentCardItemUpdateProto::~OfficerFragmentCardItemUpdateProto() {
  // @@protoc_insertion_point(destructor:main.OfficerFragmentCardItemUpdateProto)
  SharedDtor();
}

void OfficerFragmentCardItemUpdateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete officerfragmentcarditem_;
  }
}

void OfficerFragmentCardItemUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerFragmentCardItemUpdateProto& OfficerFragmentCardItemUpdateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerFragmentCardItemUpdateProto* OfficerFragmentCardItemUpdateProto::default_instance_ = NULL;

OfficerFragmentCardItemUpdateProto* OfficerFragmentCardItemUpdateProto::New() const {
  return new OfficerFragmentCardItemUpdateProto;
}

void OfficerFragmentCardItemUpdateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfficerFragmentCardItemUpdateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, ssid_);
    if (has_officerfragmentcarditem()) {
      if (officerfragmentcarditem_ != NULL) officerfragmentcarditem_->::main::OfficerFragmentCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerFragmentCardItemUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerFragmentCardItemUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_officerFragmentCardItem;
        break;
      }

      // optional .main.OfficerFragmentCardItemProto officerFragmentCardItem = 3;
      case 3: {
        if (tag == 26) {
         parse_officerFragmentCardItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officerfragmentcarditem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerFragmentCardItemUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerFragmentCardItemUpdateProto)
  return false;
#undef DO_
}

void OfficerFragmentCardItemUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerFragmentCardItemUpdateProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.OfficerFragmentCardItemProto officerFragmentCardItem = 3;
  if (has_officerfragmentcarditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->officerfragmentcarditem(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerFragmentCardItemUpdateProto)
}

int OfficerFragmentCardItemUpdateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.OfficerFragmentCardItemProto officerFragmentCardItem = 3;
    if (has_officerfragmentcarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officerfragmentcarditem());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerFragmentCardItemUpdateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerFragmentCardItemUpdateProto*>(&from));
}

void OfficerFragmentCardItemUpdateProto::MergeFrom(const OfficerFragmentCardItemUpdateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_officerfragmentcarditem()) {
      mutable_officerfragmentcarditem()->::main::OfficerFragmentCardItemProto::MergeFrom(from.officerfragmentcarditem());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerFragmentCardItemUpdateProto::CopyFrom(const OfficerFragmentCardItemUpdateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerFragmentCardItemUpdateProto::IsInitialized() const {

  return true;
}

void OfficerFragmentCardItemUpdateProto::Swap(OfficerFragmentCardItemUpdateProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(officerfragmentcarditem_, other->officerfragmentcarditem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerFragmentCardItemUpdateProto::GetTypeName() const {
  return "main.OfficerFragmentCardItemUpdateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerFragmentCardItemProto::kSsidFieldNumber;
const int OfficerFragmentCardItemProto::kItemIdFieldNumber;
const int OfficerFragmentCardItemProto::kCurrItemNumberFieldNumber;
#endif  // !_MSC_VER

OfficerFragmentCardItemProto::OfficerFragmentCardItemProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerFragmentCardItemProto)
}

void OfficerFragmentCardItemProto::InitAsDefaultInstance() {
}

OfficerFragmentCardItemProto::OfficerFragmentCardItemProto(const OfficerFragmentCardItemProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerFragmentCardItemProto)
}

void OfficerFragmentCardItemProto::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  itemid_ = 0;
  curritemnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerFragmentCardItemProto::~OfficerFragmentCardItemProto() {
  // @@protoc_insertion_point(destructor:main.OfficerFragmentCardItemProto)
  SharedDtor();
}

void OfficerFragmentCardItemProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerFragmentCardItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerFragmentCardItemProto& OfficerFragmentCardItemProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerFragmentCardItemProto* OfficerFragmentCardItemProto::default_instance_ = NULL;

OfficerFragmentCardItemProto* OfficerFragmentCardItemProto::New() const {
  return new OfficerFragmentCardItemProto;
}

void OfficerFragmentCardItemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfficerFragmentCardItemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, curritemnumber_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerFragmentCardItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerFragmentCardItemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currItemNumber;
        break;
      }

      // optional int32 currItemNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_currItemNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curritemnumber_)));
          set_has_curritemnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerFragmentCardItemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerFragmentCardItemProto)
  return false;
#undef DO_
}

void OfficerFragmentCardItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerFragmentCardItemProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 currItemNumber = 3;
  if (has_curritemnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curritemnumber(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerFragmentCardItemProto)
}

int OfficerFragmentCardItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 currItemNumber = 3;
    if (has_curritemnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curritemnumber());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerFragmentCardItemProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerFragmentCardItemProto*>(&from));
}

void OfficerFragmentCardItemProto::MergeFrom(const OfficerFragmentCardItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_curritemnumber()) {
      set_curritemnumber(from.curritemnumber());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerFragmentCardItemProto::CopyFrom(const OfficerFragmentCardItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerFragmentCardItemProto::IsInitialized() const {

  return true;
}

void OfficerFragmentCardItemProto::Swap(OfficerFragmentCardItemProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(itemid_, other->itemid_);
    std::swap(curritemnumber_, other->curritemnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerFragmentCardItemProto::GetTypeName() const {
  return "main.OfficerFragmentCardItemProto";
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumableCardItemUpdateProto::kStateFieldNumber;
const int ConsumableCardItemUpdateProto::kSsidFieldNumber;
const int ConsumableCardItemUpdateProto::kConsumableCardItemFieldNumber;
#endif  // !_MSC_VER

ConsumableCardItemUpdateProto::ConsumableCardItemUpdateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ConsumableCardItemUpdateProto)
}

void ConsumableCardItemUpdateProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  consumablecarditem_ = const_cast< ::main::ConsumableCardItemProto*>(
      ::main::ConsumableCardItemProto::internal_default_instance());
#else
  consumablecarditem_ = const_cast< ::main::ConsumableCardItemProto*>(&::main::ConsumableCardItemProto::default_instance());
#endif
}

ConsumableCardItemUpdateProto::ConsumableCardItemUpdateProto(const ConsumableCardItemUpdateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ConsumableCardItemUpdateProto)
}

void ConsumableCardItemUpdateProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  consumablecarditem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumableCardItemUpdateProto::~ConsumableCardItemUpdateProto() {
  // @@protoc_insertion_point(destructor:main.ConsumableCardItemUpdateProto)
  SharedDtor();
}

void ConsumableCardItemUpdateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete consumablecarditem_;
  }
}

void ConsumableCardItemUpdateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConsumableCardItemUpdateProto& ConsumableCardItemUpdateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

ConsumableCardItemUpdateProto* ConsumableCardItemUpdateProto::default_instance_ = NULL;

ConsumableCardItemUpdateProto* ConsumableCardItemUpdateProto::New() const {
  return new ConsumableCardItemUpdateProto;
}

void ConsumableCardItemUpdateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConsumableCardItemUpdateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(state_, ssid_);
    if (has_consumablecarditem()) {
      if (consumablecarditem_ != NULL) consumablecarditem_->::main::ConsumableCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ConsumableCardItemUpdateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ConsumableCardItemUpdateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_consumableCardItem;
        break;
      }

      // optional .main.ConsumableCardItemProto consumableCardItem = 3;
      case 3: {
        if (tag == 26) {
         parse_consumableCardItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consumablecarditem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ConsumableCardItemUpdateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ConsumableCardItemUpdateProto)
  return false;
#undef DO_
}

void ConsumableCardItemUpdateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ConsumableCardItemUpdateProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  // optional .main.ConsumableCardItemProto consumableCardItem = 3;
  if (has_consumablecarditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->consumablecarditem(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ConsumableCardItemUpdateProto)
}

int ConsumableCardItemUpdateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional .main.ConsumableCardItemProto consumableCardItem = 3;
    if (has_consumablecarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consumablecarditem());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumableCardItemUpdateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConsumableCardItemUpdateProto*>(&from));
}

void ConsumableCardItemUpdateProto::MergeFrom(const ConsumableCardItemUpdateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_consumablecarditem()) {
      mutable_consumablecarditem()->::main::ConsumableCardItemProto::MergeFrom(from.consumablecarditem());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ConsumableCardItemUpdateProto::CopyFrom(const ConsumableCardItemUpdateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumableCardItemUpdateProto::IsInitialized() const {

  return true;
}

void ConsumableCardItemUpdateProto::Swap(ConsumableCardItemUpdateProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(consumablecarditem_, other->consumablecarditem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConsumableCardItemUpdateProto::GetTypeName() const {
  return "main.ConsumableCardItemUpdateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumableCardItemProto::kSsidFieldNumber;
const int ConsumableCardItemProto::kItemIdFieldNumber;
const int ConsumableCardItemProto::kCurrItemNumberFieldNumber;
#endif  // !_MSC_VER

ConsumableCardItemProto::ConsumableCardItemProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ConsumableCardItemProto)
}

void ConsumableCardItemProto::InitAsDefaultInstance() {
}

ConsumableCardItemProto::ConsumableCardItemProto(const ConsumableCardItemProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ConsumableCardItemProto)
}

void ConsumableCardItemProto::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  itemid_ = 0;
  curritemnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumableCardItemProto::~ConsumableCardItemProto() {
  // @@protoc_insertion_point(destructor:main.ConsumableCardItemProto)
  SharedDtor();
}

void ConsumableCardItemProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConsumableCardItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConsumableCardItemProto& ConsumableCardItemProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

ConsumableCardItemProto* ConsumableCardItemProto::default_instance_ = NULL;

ConsumableCardItemProto* ConsumableCardItemProto::New() const {
  return new ConsumableCardItemProto;
}

void ConsumableCardItemProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConsumableCardItemProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, curritemnumber_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ConsumableCardItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ConsumableCardItemProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currItemNumber;
        break;
      }

      // optional int32 currItemNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_currItemNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curritemnumber_)));
          set_has_curritemnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ConsumableCardItemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ConsumableCardItemProto)
  return false;
#undef DO_
}

void ConsumableCardItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ConsumableCardItemProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 currItemNumber = 3;
  if (has_curritemnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curritemnumber(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ConsumableCardItemProto)
}

int ConsumableCardItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 currItemNumber = 3;
    if (has_curritemnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curritemnumber());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumableCardItemProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConsumableCardItemProto*>(&from));
}

void ConsumableCardItemProto::MergeFrom(const ConsumableCardItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_curritemnumber()) {
      set_curritemnumber(from.curritemnumber());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ConsumableCardItemProto::CopyFrom(const ConsumableCardItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumableCardItemProto::IsInitialized() const {

  return true;
}

void ConsumableCardItemProto::Swap(ConsumableCardItemProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(itemid_, other->itemid_);
    std::swap(curritemnumber_, other->curritemnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConsumableCardItemProto::GetTypeName() const {
  return "main.ConsumableCardItemProto";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerCompositeRequest::kSsidFieldNumber;
const int OfficerCompositeRequest::kMaterialIdFieldNumber;
const int OfficerCompositeRequest::kPropsIdFieldNumber;
#endif  // !_MSC_VER

OfficerCompositeRequest::OfficerCompositeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerCompositeRequest)
}

void OfficerCompositeRequest::InitAsDefaultInstance() {
}

OfficerCompositeRequest::OfficerCompositeRequest(const OfficerCompositeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerCompositeRequest)
}

void OfficerCompositeRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerCompositeRequest::~OfficerCompositeRequest() {
  // @@protoc_insertion_point(destructor:main.OfficerCompositeRequest)
  SharedDtor();
}

void OfficerCompositeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerCompositeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerCompositeRequest& OfficerCompositeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerCompositeRequest* OfficerCompositeRequest::default_instance_ = NULL;

OfficerCompositeRequest* OfficerCompositeRequest::New() const {
  return new OfficerCompositeRequest;
}

void OfficerCompositeRequest::Clear() {
  ssid_ = 0;
  materialid_.Clear();
  propsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerCompositeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerCompositeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_materialId;
        break;
      }

      // repeated int32 materialId = 2;
      case 2: {
        if (tag == 16) {
         parse_materialId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_materialid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_materialid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_materialId;
        if (input->ExpectTag(24)) goto parse_propsId;
        break;
      }

      // repeated int32 propsId = 3;
      case 3: {
        if (tag == 24) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_propsid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_propsid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propsId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerCompositeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerCompositeRequest)
  return false;
#undef DO_
}

void OfficerCompositeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerCompositeRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // repeated int32 materialId = 2;
  for (int i = 0; i < this->materialid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->materialid(i), output);
  }

  // repeated int32 propsId = 3;
  for (int i = 0; i < this->propsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->propsid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerCompositeRequest)
}

int OfficerCompositeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  // repeated int32 materialId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->materialid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->materialid(i));
    }
    total_size += 1 * this->materialid_size() + data_size;
  }

  // repeated int32 propsId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->propsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->propsid(i));
    }
    total_size += 1 * this->propsid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerCompositeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerCompositeRequest*>(&from));
}

void OfficerCompositeRequest::MergeFrom(const OfficerCompositeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  materialid_.MergeFrom(from.materialid_);
  propsid_.MergeFrom(from.propsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerCompositeRequest::CopyFrom(const OfficerCompositeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerCompositeRequest::IsInitialized() const {

  return true;
}

void OfficerCompositeRequest::Swap(OfficerCompositeRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    materialid_.Swap(&other->materialid_);
    propsid_.Swap(&other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerCompositeRequest::GetTypeName() const {
  return "main.OfficerCompositeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerCompositeResponse::kStateFieldNumber;
const int OfficerCompositeResponse::kOfficerCardItemProtoFieldNumber;
const int OfficerCompositeResponse::kAllExpFieldNumber;
const int OfficerCompositeResponse::kUpgradeStateFieldNumber;
#endif  // !_MSC_VER

OfficerCompositeResponse::OfficerCompositeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerCompositeResponse)
}

void OfficerCompositeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officercarditemproto_ = const_cast< ::main::OfficerCardItemProto*>(
      ::main::OfficerCardItemProto::internal_default_instance());
#else
  officercarditemproto_ = const_cast< ::main::OfficerCardItemProto*>(&::main::OfficerCardItemProto::default_instance());
#endif
}

OfficerCompositeResponse::OfficerCompositeResponse(const OfficerCompositeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerCompositeResponse)
}

void OfficerCompositeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  officercarditemproto_ = NULL;
  allexp_ = 0;
  upgradestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerCompositeResponse::~OfficerCompositeResponse() {
  // @@protoc_insertion_point(destructor:main.OfficerCompositeResponse)
  SharedDtor();
}

void OfficerCompositeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete officercarditemproto_;
  }
}

void OfficerCompositeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerCompositeResponse& OfficerCompositeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerCompositeResponse* OfficerCompositeResponse::default_instance_ = NULL;

OfficerCompositeResponse* OfficerCompositeResponse::New() const {
  return new OfficerCompositeResponse;
}

void OfficerCompositeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfficerCompositeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, upgradestate_);
    if (has_officercarditemproto()) {
      if (officercarditemproto_ != NULL) officercarditemproto_->::main::OfficerCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerCompositeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerCompositeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_officerCardItemProto;
        break;
      }

      // optional .main.OfficerCardItemProto officerCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_officerCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allExp;
        break;
      }

      // optional int32 allExp = 3;
      case 3: {
        if (tag == 24) {
         parse_allExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allexp_)));
          set_has_allexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upgradeState;
        break;
      }

      // optional int32 upgradeState = 4;
      case 4: {
        if (tag == 32) {
         parse_upgradeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradestate_)));
          set_has_upgradestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerCompositeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerCompositeResponse)
  return false;
#undef DO_
}

void OfficerCompositeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerCompositeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.OfficerCardItemProto officerCardItemProto = 2;
  if (has_officercarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->officercarditemproto(), output);
  }

  // optional int32 allExp = 3;
  if (has_allexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allexp(), output);
  }

  // optional int32 upgradeState = 4;
  if (has_upgradestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradestate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerCompositeResponse)
}

int OfficerCompositeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.OfficerCardItemProto officerCardItemProto = 2;
    if (has_officercarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officercarditemproto());
    }

    // optional int32 allExp = 3;
    if (has_allexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allexp());
    }

    // optional int32 upgradeState = 4;
    if (has_upgradestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradestate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerCompositeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerCompositeResponse*>(&from));
}

void OfficerCompositeResponse::MergeFrom(const OfficerCompositeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_officercarditemproto()) {
      mutable_officercarditemproto()->::main::OfficerCardItemProto::MergeFrom(from.officercarditemproto());
    }
    if (from.has_allexp()) {
      set_allexp(from.allexp());
    }
    if (from.has_upgradestate()) {
      set_upgradestate(from.upgradestate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerCompositeResponse::CopyFrom(const OfficerCompositeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerCompositeResponse::IsInitialized() const {

  return true;
}

void OfficerCompositeResponse::Swap(OfficerCompositeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(officercarditemproto_, other->officercarditemproto_);
    std::swap(allexp_, other->allexp_);
    std::swap(upgradestate_, other->upgradestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerCompositeResponse::GetTypeName() const {
  return "main.OfficerCompositeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerProtectionRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

OfficerProtectionRequest::OfficerProtectionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerProtectionRequest)
}

void OfficerProtectionRequest::InitAsDefaultInstance() {
}

OfficerProtectionRequest::OfficerProtectionRequest(const OfficerProtectionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerProtectionRequest)
}

void OfficerProtectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerProtectionRequest::~OfficerProtectionRequest() {
  // @@protoc_insertion_point(destructor:main.OfficerProtectionRequest)
  SharedDtor();
}

void OfficerProtectionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerProtectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerProtectionRequest& OfficerProtectionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerProtectionRequest* OfficerProtectionRequest::default_instance_ = NULL;

OfficerProtectionRequest* OfficerProtectionRequest::New() const {
  return new OfficerProtectionRequest;
}

void OfficerProtectionRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerProtectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerProtectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerProtectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerProtectionRequest)
  return false;
#undef DO_
}

void OfficerProtectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerProtectionRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerProtectionRequest)
}

int OfficerProtectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerProtectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerProtectionRequest*>(&from));
}

void OfficerProtectionRequest::MergeFrom(const OfficerProtectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerProtectionRequest::CopyFrom(const OfficerProtectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerProtectionRequest::IsInitialized() const {

  return true;
}

void OfficerProtectionRequest::Swap(OfficerProtectionRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerProtectionRequest::GetTypeName() const {
  return "main.OfficerProtectionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerProtectionResponse::kStateFieldNumber;
#endif  // !_MSC_VER

OfficerProtectionResponse::OfficerProtectionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerProtectionResponse)
}

void OfficerProtectionResponse::InitAsDefaultInstance() {
}

OfficerProtectionResponse::OfficerProtectionResponse(const OfficerProtectionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerProtectionResponse)
}

void OfficerProtectionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerProtectionResponse::~OfficerProtectionResponse() {
  // @@protoc_insertion_point(destructor:main.OfficerProtectionResponse)
  SharedDtor();
}

void OfficerProtectionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerProtectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerProtectionResponse& OfficerProtectionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerProtectionResponse* OfficerProtectionResponse::default_instance_ = NULL;

OfficerProtectionResponse* OfficerProtectionResponse::New() const {
  return new OfficerProtectionResponse;
}

void OfficerProtectionResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerProtectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerProtectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerProtectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerProtectionResponse)
  return false;
#undef DO_
}

void OfficerProtectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerProtectionResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerProtectionResponse)
}

int OfficerProtectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerProtectionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerProtectionResponse*>(&from));
}

void OfficerProtectionResponse::MergeFrom(const OfficerProtectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerProtectionResponse::CopyFrom(const OfficerProtectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerProtectionResponse::IsInitialized() const {

  return true;
}

void OfficerProtectionResponse::Swap(OfficerProtectionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerProtectionResponse::GetTypeName() const {
  return "main.OfficerProtectionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerUnProtectionRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

OfficerUnProtectionRequest::OfficerUnProtectionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerUnProtectionRequest)
}

void OfficerUnProtectionRequest::InitAsDefaultInstance() {
}

OfficerUnProtectionRequest::OfficerUnProtectionRequest(const OfficerUnProtectionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerUnProtectionRequest)
}

void OfficerUnProtectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerUnProtectionRequest::~OfficerUnProtectionRequest() {
  // @@protoc_insertion_point(destructor:main.OfficerUnProtectionRequest)
  SharedDtor();
}

void OfficerUnProtectionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerUnProtectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerUnProtectionRequest& OfficerUnProtectionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerUnProtectionRequest* OfficerUnProtectionRequest::default_instance_ = NULL;

OfficerUnProtectionRequest* OfficerUnProtectionRequest::New() const {
  return new OfficerUnProtectionRequest;
}

void OfficerUnProtectionRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerUnProtectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerUnProtectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerUnProtectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerUnProtectionRequest)
  return false;
#undef DO_
}

void OfficerUnProtectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerUnProtectionRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerUnProtectionRequest)
}

int OfficerUnProtectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerUnProtectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerUnProtectionRequest*>(&from));
}

void OfficerUnProtectionRequest::MergeFrom(const OfficerUnProtectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerUnProtectionRequest::CopyFrom(const OfficerUnProtectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerUnProtectionRequest::IsInitialized() const {

  return true;
}

void OfficerUnProtectionRequest::Swap(OfficerUnProtectionRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerUnProtectionRequest::GetTypeName() const {
  return "main.OfficerUnProtectionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerUnProtectionResponse::kStateFieldNumber;
#endif  // !_MSC_VER

OfficerUnProtectionResponse::OfficerUnProtectionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerUnProtectionResponse)
}

void OfficerUnProtectionResponse::InitAsDefaultInstance() {
}

OfficerUnProtectionResponse::OfficerUnProtectionResponse(const OfficerUnProtectionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerUnProtectionResponse)
}

void OfficerUnProtectionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerUnProtectionResponse::~OfficerUnProtectionResponse() {
  // @@protoc_insertion_point(destructor:main.OfficerUnProtectionResponse)
  SharedDtor();
}

void OfficerUnProtectionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerUnProtectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerUnProtectionResponse& OfficerUnProtectionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerUnProtectionResponse* OfficerUnProtectionResponse::default_instance_ = NULL;

OfficerUnProtectionResponse* OfficerUnProtectionResponse::New() const {
  return new OfficerUnProtectionResponse;
}

void OfficerUnProtectionResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerUnProtectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerUnProtectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerUnProtectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerUnProtectionResponse)
  return false;
#undef DO_
}

void OfficerUnProtectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerUnProtectionResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerUnProtectionResponse)
}

int OfficerUnProtectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerUnProtectionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerUnProtectionResponse*>(&from));
}

void OfficerUnProtectionResponse::MergeFrom(const OfficerUnProtectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerUnProtectionResponse::CopyFrom(const OfficerUnProtectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerUnProtectionResponse::IsInitialized() const {

  return true;
}

void OfficerUnProtectionResponse::Swap(OfficerUnProtectionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerUnProtectionResponse::GetTypeName() const {
  return "main.OfficerUnProtectionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerUpgradeRequest::kOfficerIdFieldNumber;
#endif  // !_MSC_VER

OfficerUpgradeRequest::OfficerUpgradeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerUpgradeRequest)
}

void OfficerUpgradeRequest::InitAsDefaultInstance() {
}

OfficerUpgradeRequest::OfficerUpgradeRequest(const OfficerUpgradeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerUpgradeRequest)
}

void OfficerUpgradeRequest::SharedCtor() {
  _cached_size_ = 0;
  officerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerUpgradeRequest::~OfficerUpgradeRequest() {
  // @@protoc_insertion_point(destructor:main.OfficerUpgradeRequest)
  SharedDtor();
}

void OfficerUpgradeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OfficerUpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerUpgradeRequest& OfficerUpgradeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerUpgradeRequest* OfficerUpgradeRequest::default_instance_ = NULL;

OfficerUpgradeRequest* OfficerUpgradeRequest::New() const {
  return new OfficerUpgradeRequest;
}

void OfficerUpgradeRequest::Clear() {
  officerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerUpgradeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officerid_)));
          set_has_officerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerUpgradeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerUpgradeRequest)
  return false;
#undef DO_
}

void OfficerUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerUpgradeRequest)
  // optional int32 officerId = 1;
  if (has_officerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerUpgradeRequest)
}

int OfficerUpgradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officerId = 1;
    if (has_officerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerUpgradeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerUpgradeRequest*>(&from));
}

void OfficerUpgradeRequest::MergeFrom(const OfficerUpgradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officerid()) {
      set_officerid(from.officerid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerUpgradeRequest::CopyFrom(const OfficerUpgradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerUpgradeRequest::IsInitialized() const {

  return true;
}

void OfficerUpgradeRequest::Swap(OfficerUpgradeRequest* other) {
  if (other != this) {
    std::swap(officerid_, other->officerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerUpgradeRequest::GetTypeName() const {
  return "main.OfficerUpgradeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OfficerUpgradeResponse::kStateFieldNumber;
const int OfficerUpgradeResponse::kOfficerCardItemProtoFieldNumber;
#endif  // !_MSC_VER

OfficerUpgradeResponse::OfficerUpgradeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OfficerUpgradeResponse)
}

void OfficerUpgradeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officercarditemproto_ = const_cast< ::main::OfficerCardItemProto*>(
      ::main::OfficerCardItemProto::internal_default_instance());
#else
  officercarditemproto_ = const_cast< ::main::OfficerCardItemProto*>(&::main::OfficerCardItemProto::default_instance());
#endif
}

OfficerUpgradeResponse::OfficerUpgradeResponse(const OfficerUpgradeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OfficerUpgradeResponse)
}

void OfficerUpgradeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  officercarditemproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfficerUpgradeResponse::~OfficerUpgradeResponse() {
  // @@protoc_insertion_point(destructor:main.OfficerUpgradeResponse)
  SharedDtor();
}

void OfficerUpgradeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete officercarditemproto_;
  }
}

void OfficerUpgradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfficerUpgradeResponse& OfficerUpgradeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OfficerUpgradeResponse* OfficerUpgradeResponse::default_instance_ = NULL;

OfficerUpgradeResponse* OfficerUpgradeResponse::New() const {
  return new OfficerUpgradeResponse;
}

void OfficerUpgradeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_officercarditemproto()) {
      if (officercarditemproto_ != NULL) officercarditemproto_->::main::OfficerCardItemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OfficerUpgradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OfficerUpgradeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_officerCardItemProto;
        break;
      }

      // optional .main.OfficerCardItemProto officerCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_officerCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OfficerUpgradeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OfficerUpgradeResponse)
  return false;
#undef DO_
}

void OfficerUpgradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OfficerUpgradeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.OfficerCardItemProto officerCardItemProto = 2;
  if (has_officercarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->officercarditemproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OfficerUpgradeResponse)
}

int OfficerUpgradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.OfficerCardItemProto officerCardItemProto = 2;
    if (has_officercarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officercarditemproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfficerUpgradeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfficerUpgradeResponse*>(&from));
}

void OfficerUpgradeResponse::MergeFrom(const OfficerUpgradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_officercarditemproto()) {
      mutable_officercarditemproto()->::main::OfficerCardItemProto::MergeFrom(from.officercarditemproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OfficerUpgradeResponse::CopyFrom(const OfficerUpgradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfficerUpgradeResponse::IsInitialized() const {

  return true;
}

void OfficerUpgradeResponse::Swap(OfficerUpgradeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(officercarditemproto_, other->officercarditemproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OfficerUpgradeResponse::GetTypeName() const {
  return "main.OfficerUpgradeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCompositeRequest::kSsidFieldNumber;
const int EquipmentCompositeRequest::kMaterialIdFieldNumber;
const int EquipmentCompositeRequest::kPropsIdFieldNumber;
#endif  // !_MSC_VER

EquipmentCompositeRequest::EquipmentCompositeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentCompositeRequest)
}

void EquipmentCompositeRequest::InitAsDefaultInstance() {
}

EquipmentCompositeRequest::EquipmentCompositeRequest(const EquipmentCompositeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentCompositeRequest)
}

void EquipmentCompositeRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCompositeRequest::~EquipmentCompositeRequest() {
  // @@protoc_insertion_point(destructor:main.EquipmentCompositeRequest)
  SharedDtor();
}

void EquipmentCompositeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentCompositeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentCompositeRequest& EquipmentCompositeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentCompositeRequest* EquipmentCompositeRequest::default_instance_ = NULL;

EquipmentCompositeRequest* EquipmentCompositeRequest::New() const {
  return new EquipmentCompositeRequest;
}

void EquipmentCompositeRequest::Clear() {
  ssid_ = 0;
  materialid_.Clear();
  propsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentCompositeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentCompositeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_materialId;
        break;
      }

      // repeated int32 materialId = 2;
      case 2: {
        if (tag == 16) {
         parse_materialId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_materialid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_materialid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_materialId;
        if (input->ExpectTag(24)) goto parse_propsId;
        break;
      }

      // repeated int32 propsId = 3;
      case 3: {
        if (tag == 24) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_propsid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_propsid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propsId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentCompositeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentCompositeRequest)
  return false;
#undef DO_
}

void EquipmentCompositeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentCompositeRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // repeated int32 materialId = 2;
  for (int i = 0; i < this->materialid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->materialid(i), output);
  }

  // repeated int32 propsId = 3;
  for (int i = 0; i < this->propsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->propsid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentCompositeRequest)
}

int EquipmentCompositeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  // repeated int32 materialId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->materialid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->materialid(i));
    }
    total_size += 1 * this->materialid_size() + data_size;
  }

  // repeated int32 propsId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->propsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->propsid(i));
    }
    total_size += 1 * this->propsid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCompositeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentCompositeRequest*>(&from));
}

void EquipmentCompositeRequest::MergeFrom(const EquipmentCompositeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  materialid_.MergeFrom(from.materialid_);
  propsid_.MergeFrom(from.propsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentCompositeRequest::CopyFrom(const EquipmentCompositeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCompositeRequest::IsInitialized() const {

  return true;
}

void EquipmentCompositeRequest::Swap(EquipmentCompositeRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    materialid_.Swap(&other->materialid_);
    propsid_.Swap(&other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentCompositeRequest::GetTypeName() const {
  return "main.EquipmentCompositeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCompositeResponse::kStateFieldNumber;
const int EquipmentCompositeResponse::kEquipmentCardItemProtoFieldNumber;
const int EquipmentCompositeResponse::kAllExpFieldNumber;
const int EquipmentCompositeResponse::kUpgradeStateFieldNumber;
#endif  // !_MSC_VER

EquipmentCompositeResponse::EquipmentCompositeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentCompositeResponse)
}

void EquipmentCompositeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipmentcarditemproto_ = const_cast< ::main::EquipmentCardItemProto*>(
      ::main::EquipmentCardItemProto::internal_default_instance());
#else
  equipmentcarditemproto_ = const_cast< ::main::EquipmentCardItemProto*>(&::main::EquipmentCardItemProto::default_instance());
#endif
}

EquipmentCompositeResponse::EquipmentCompositeResponse(const EquipmentCompositeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentCompositeResponse)
}

void EquipmentCompositeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  equipmentcarditemproto_ = NULL;
  allexp_ = 0;
  upgradestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCompositeResponse::~EquipmentCompositeResponse() {
  // @@protoc_insertion_point(destructor:main.EquipmentCompositeResponse)
  SharedDtor();
}

void EquipmentCompositeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equipmentcarditemproto_;
  }
}

void EquipmentCompositeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentCompositeResponse& EquipmentCompositeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentCompositeResponse* EquipmentCompositeResponse::default_instance_ = NULL;

EquipmentCompositeResponse* EquipmentCompositeResponse::New() const {
  return new EquipmentCompositeResponse;
}

void EquipmentCompositeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentCompositeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, upgradestate_);
    if (has_equipmentcarditemproto()) {
      if (equipmentcarditemproto_ != NULL) equipmentcarditemproto_->::main::EquipmentCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentCompositeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentCompositeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipmentCardItemProto;
        break;
      }

      // optional .main.EquipmentCardItemProto equipmentCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_equipmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allExp;
        break;
      }

      // optional int32 allExp = 3;
      case 3: {
        if (tag == 24) {
         parse_allExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allexp_)));
          set_has_allexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upgradeState;
        break;
      }

      // optional int32 upgradeState = 4;
      case 4: {
        if (tag == 32) {
         parse_upgradeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradestate_)));
          set_has_upgradestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentCompositeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentCompositeResponse)
  return false;
#undef DO_
}

void EquipmentCompositeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentCompositeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.EquipmentCardItemProto equipmentCardItemProto = 2;
  if (has_equipmentcarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equipmentcarditemproto(), output);
  }

  // optional int32 allExp = 3;
  if (has_allexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allexp(), output);
  }

  // optional int32 upgradeState = 4;
  if (has_upgradestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradestate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentCompositeResponse)
}

int EquipmentCompositeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.EquipmentCardItemProto equipmentCardItemProto = 2;
    if (has_equipmentcarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentcarditemproto());
    }

    // optional int32 allExp = 3;
    if (has_allexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allexp());
    }

    // optional int32 upgradeState = 4;
    if (has_upgradestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradestate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCompositeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentCompositeResponse*>(&from));
}

void EquipmentCompositeResponse::MergeFrom(const EquipmentCompositeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_equipmentcarditemproto()) {
      mutable_equipmentcarditemproto()->::main::EquipmentCardItemProto::MergeFrom(from.equipmentcarditemproto());
    }
    if (from.has_allexp()) {
      set_allexp(from.allexp());
    }
    if (from.has_upgradestate()) {
      set_upgradestate(from.upgradestate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentCompositeResponse::CopyFrom(const EquipmentCompositeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCompositeResponse::IsInitialized() const {

  return true;
}

void EquipmentCompositeResponse::Swap(EquipmentCompositeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(equipmentcarditemproto_, other->equipmentcarditemproto_);
    std::swap(allexp_, other->allexp_);
    std::swap(upgradestate_, other->upgradestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentCompositeResponse::GetTypeName() const {
  return "main.EquipmentCompositeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentStrengthRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

EquipmentStrengthRequest::EquipmentStrengthRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentStrengthRequest)
}

void EquipmentStrengthRequest::InitAsDefaultInstance() {
}

EquipmentStrengthRequest::EquipmentStrengthRequest(const EquipmentStrengthRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentStrengthRequest)
}

void EquipmentStrengthRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentStrengthRequest::~EquipmentStrengthRequest() {
  // @@protoc_insertion_point(destructor:main.EquipmentStrengthRequest)
  SharedDtor();
}

void EquipmentStrengthRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentStrengthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentStrengthRequest& EquipmentStrengthRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentStrengthRequest* EquipmentStrengthRequest::default_instance_ = NULL;

EquipmentStrengthRequest* EquipmentStrengthRequest::New() const {
  return new EquipmentStrengthRequest;
}

void EquipmentStrengthRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentStrengthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentStrengthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentStrengthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentStrengthRequest)
  return false;
#undef DO_
}

void EquipmentStrengthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentStrengthRequest)
  // required int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentStrengthRequest)
}

int EquipmentStrengthRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentStrengthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentStrengthRequest*>(&from));
}

void EquipmentStrengthRequest::MergeFrom(const EquipmentStrengthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentStrengthRequest::CopyFrom(const EquipmentStrengthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentStrengthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipmentStrengthRequest::Swap(EquipmentStrengthRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentStrengthRequest::GetTypeName() const {
  return "main.EquipmentStrengthRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentStrengthResponse::kStateFieldNumber;
const int EquipmentStrengthResponse::kLevelFieldNumber;
const int EquipmentStrengthResponse::kAddLevelFieldNumber;
#endif  // !_MSC_VER

EquipmentStrengthResponse::EquipmentStrengthResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentStrengthResponse)
}

void EquipmentStrengthResponse::InitAsDefaultInstance() {
}

EquipmentStrengthResponse::EquipmentStrengthResponse(const EquipmentStrengthResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentStrengthResponse)
}

void EquipmentStrengthResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  level_ = 0;
  addlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentStrengthResponse::~EquipmentStrengthResponse() {
  // @@protoc_insertion_point(destructor:main.EquipmentStrengthResponse)
  SharedDtor();
}

void EquipmentStrengthResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentStrengthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentStrengthResponse& EquipmentStrengthResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentStrengthResponse* EquipmentStrengthResponse::default_instance_ = NULL;

EquipmentStrengthResponse* EquipmentStrengthResponse::New() const {
  return new EquipmentStrengthResponse;
}

void EquipmentStrengthResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentStrengthResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, addlevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentStrengthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentStrengthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addLevel;
        break;
      }

      // required int32 addLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_addLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addlevel_)));
          set_has_addlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentStrengthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentStrengthResponse)
  return false;
#undef DO_
}

void EquipmentStrengthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentStrengthResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 addLevel = 3;
  if (has_addlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addlevel(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentStrengthResponse)
}

int EquipmentStrengthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 addLevel = 3;
    if (has_addlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addlevel());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentStrengthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentStrengthResponse*>(&from));
}

void EquipmentStrengthResponse::MergeFrom(const EquipmentStrengthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_addlevel()) {
      set_addlevel(from.addlevel());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentStrengthResponse::CopyFrom(const EquipmentStrengthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentStrengthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipmentStrengthResponse::Swap(EquipmentStrengthResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(level_, other->level_);
    std::swap(addlevel_, other->addlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentStrengthResponse::GetTypeName() const {
  return "main.EquipmentStrengthResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentStrengthAutoRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

EquipmentStrengthAutoRequest::EquipmentStrengthAutoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentStrengthAutoRequest)
}

void EquipmentStrengthAutoRequest::InitAsDefaultInstance() {
}

EquipmentStrengthAutoRequest::EquipmentStrengthAutoRequest(const EquipmentStrengthAutoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentStrengthAutoRequest)
}

void EquipmentStrengthAutoRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentStrengthAutoRequest::~EquipmentStrengthAutoRequest() {
  // @@protoc_insertion_point(destructor:main.EquipmentStrengthAutoRequest)
  SharedDtor();
}

void EquipmentStrengthAutoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentStrengthAutoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentStrengthAutoRequest& EquipmentStrengthAutoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentStrengthAutoRequest* EquipmentStrengthAutoRequest::default_instance_ = NULL;

EquipmentStrengthAutoRequest* EquipmentStrengthAutoRequest::New() const {
  return new EquipmentStrengthAutoRequest;
}

void EquipmentStrengthAutoRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentStrengthAutoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentStrengthAutoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentStrengthAutoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentStrengthAutoRequest)
  return false;
#undef DO_
}

void EquipmentStrengthAutoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentStrengthAutoRequest)
  // required int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentStrengthAutoRequest)
}

int EquipmentStrengthAutoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentStrengthAutoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentStrengthAutoRequest*>(&from));
}

void EquipmentStrengthAutoRequest::MergeFrom(const EquipmentStrengthAutoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentStrengthAutoRequest::CopyFrom(const EquipmentStrengthAutoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentStrengthAutoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipmentStrengthAutoRequest::Swap(EquipmentStrengthAutoRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentStrengthAutoRequest::GetTypeName() const {
  return "main.EquipmentStrengthAutoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentStrengthAutoResponse::kStateFieldNumber;
const int EquipmentStrengthAutoResponse::kLevelFieldNumber;
const int EquipmentStrengthAutoResponse::kProcessFieldNumber;
#endif  // !_MSC_VER

EquipmentStrengthAutoResponse::EquipmentStrengthAutoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentStrengthAutoResponse)
}

void EquipmentStrengthAutoResponse::InitAsDefaultInstance() {
}

EquipmentStrengthAutoResponse::EquipmentStrengthAutoResponse(const EquipmentStrengthAutoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentStrengthAutoResponse)
}

void EquipmentStrengthAutoResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentStrengthAutoResponse::~EquipmentStrengthAutoResponse() {
  // @@protoc_insertion_point(destructor:main.EquipmentStrengthAutoResponse)
  SharedDtor();
}

void EquipmentStrengthAutoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentStrengthAutoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentStrengthAutoResponse& EquipmentStrengthAutoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentStrengthAutoResponse* EquipmentStrengthAutoResponse::default_instance_ = NULL;

EquipmentStrengthAutoResponse* EquipmentStrengthAutoResponse::New() const {
  return new EquipmentStrengthAutoResponse;
}

void EquipmentStrengthAutoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentStrengthAutoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentStrengthAutoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentStrengthAutoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_process;
        break;
      }

      // repeated int32 process = 3;
      case 3: {
        if (tag == 24) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_process())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_process())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_process;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentStrengthAutoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentStrengthAutoResponse)
  return false;
#undef DO_
}

void EquipmentStrengthAutoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentStrengthAutoResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated int32 process = 3;
  for (int i = 0; i < this->process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->process(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentStrengthAutoResponse)
}

int EquipmentStrengthAutoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated int32 process = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->process_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->process(i));
    }
    total_size += 1 * this->process_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentStrengthAutoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentStrengthAutoResponse*>(&from));
}

void EquipmentStrengthAutoResponse::MergeFrom(const EquipmentStrengthAutoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  process_.MergeFrom(from.process_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentStrengthAutoResponse::CopyFrom(const EquipmentStrengthAutoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentStrengthAutoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipmentStrengthAutoResponse::Swap(EquipmentStrengthAutoResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(level_, other->level_);
    process_.Swap(&other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentStrengthAutoResponse::GetTypeName() const {
  return "main.EquipmentStrengthAutoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentUpgradeRequest::kSsIdFieldNumber;
#endif  // !_MSC_VER

EquipmentUpgradeRequest::EquipmentUpgradeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentUpgradeRequest)
}

void EquipmentUpgradeRequest::InitAsDefaultInstance() {
}

EquipmentUpgradeRequest::EquipmentUpgradeRequest(const EquipmentUpgradeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentUpgradeRequest)
}

void EquipmentUpgradeRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentUpgradeRequest::~EquipmentUpgradeRequest() {
  // @@protoc_insertion_point(destructor:main.EquipmentUpgradeRequest)
  SharedDtor();
}

void EquipmentUpgradeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentUpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentUpgradeRequest& EquipmentUpgradeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentUpgradeRequest* EquipmentUpgradeRequest::default_instance_ = NULL;

EquipmentUpgradeRequest* EquipmentUpgradeRequest::New() const {
  return new EquipmentUpgradeRequest;
}

void EquipmentUpgradeRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentUpgradeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentUpgradeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentUpgradeRequest)
  return false;
#undef DO_
}

void EquipmentUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentUpgradeRequest)
  // optional int32 ssId = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentUpgradeRequest)
}

int EquipmentUpgradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssId = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentUpgradeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentUpgradeRequest*>(&from));
}

void EquipmentUpgradeRequest::MergeFrom(const EquipmentUpgradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentUpgradeRequest::CopyFrom(const EquipmentUpgradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentUpgradeRequest::IsInitialized() const {

  return true;
}

void EquipmentUpgradeRequest::Swap(EquipmentUpgradeRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentUpgradeRequest::GetTypeName() const {
  return "main.EquipmentUpgradeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentUpgradeResponse::kStateFieldNumber;
const int EquipmentUpgradeResponse::kEquipmentCardItemProtoFieldNumber;
#endif  // !_MSC_VER

EquipmentUpgradeResponse::EquipmentUpgradeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentUpgradeResponse)
}

void EquipmentUpgradeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipmentcarditemproto_ = const_cast< ::main::EquipmentCardItemProto*>(
      ::main::EquipmentCardItemProto::internal_default_instance());
#else
  equipmentcarditemproto_ = const_cast< ::main::EquipmentCardItemProto*>(&::main::EquipmentCardItemProto::default_instance());
#endif
}

EquipmentUpgradeResponse::EquipmentUpgradeResponse(const EquipmentUpgradeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentUpgradeResponse)
}

void EquipmentUpgradeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  equipmentcarditemproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentUpgradeResponse::~EquipmentUpgradeResponse() {
  // @@protoc_insertion_point(destructor:main.EquipmentUpgradeResponse)
  SharedDtor();
}

void EquipmentUpgradeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equipmentcarditemproto_;
  }
}

void EquipmentUpgradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentUpgradeResponse& EquipmentUpgradeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentUpgradeResponse* EquipmentUpgradeResponse::default_instance_ = NULL;

EquipmentUpgradeResponse* EquipmentUpgradeResponse::New() const {
  return new EquipmentUpgradeResponse;
}

void EquipmentUpgradeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_equipmentcarditemproto()) {
      if (equipmentcarditemproto_ != NULL) equipmentcarditemproto_->::main::EquipmentCardItemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentUpgradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentUpgradeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipmentCardItemProto;
        break;
      }

      // optional .main.EquipmentCardItemProto equipmentCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_equipmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentUpgradeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentUpgradeResponse)
  return false;
#undef DO_
}

void EquipmentUpgradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentUpgradeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.EquipmentCardItemProto equipmentCardItemProto = 2;
  if (has_equipmentcarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equipmentcarditemproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentUpgradeResponse)
}

int EquipmentUpgradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.EquipmentCardItemProto equipmentCardItemProto = 2;
    if (has_equipmentcarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentcarditemproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentUpgradeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentUpgradeResponse*>(&from));
}

void EquipmentUpgradeResponse::MergeFrom(const EquipmentUpgradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_equipmentcarditemproto()) {
      mutable_equipmentcarditemproto()->::main::EquipmentCardItemProto::MergeFrom(from.equipmentcarditemproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentUpgradeResponse::CopyFrom(const EquipmentUpgradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentUpgradeResponse::IsInitialized() const {

  return true;
}

void EquipmentUpgradeResponse::Swap(EquipmentUpgradeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(equipmentcarditemproto_, other->equipmentcarditemproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentUpgradeResponse::GetTypeName() const {
  return "main.EquipmentUpgradeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentProtectionRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

EquipmentProtectionRequest::EquipmentProtectionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentProtectionRequest)
}

void EquipmentProtectionRequest::InitAsDefaultInstance() {
}

EquipmentProtectionRequest::EquipmentProtectionRequest(const EquipmentProtectionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentProtectionRequest)
}

void EquipmentProtectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentProtectionRequest::~EquipmentProtectionRequest() {
  // @@protoc_insertion_point(destructor:main.EquipmentProtectionRequest)
  SharedDtor();
}

void EquipmentProtectionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentProtectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentProtectionRequest& EquipmentProtectionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentProtectionRequest* EquipmentProtectionRequest::default_instance_ = NULL;

EquipmentProtectionRequest* EquipmentProtectionRequest::New() const {
  return new EquipmentProtectionRequest;
}

void EquipmentProtectionRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentProtectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentProtectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentProtectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentProtectionRequest)
  return false;
#undef DO_
}

void EquipmentProtectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentProtectionRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentProtectionRequest)
}

int EquipmentProtectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentProtectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentProtectionRequest*>(&from));
}

void EquipmentProtectionRequest::MergeFrom(const EquipmentProtectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentProtectionRequest::CopyFrom(const EquipmentProtectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentProtectionRequest::IsInitialized() const {

  return true;
}

void EquipmentProtectionRequest::Swap(EquipmentProtectionRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentProtectionRequest::GetTypeName() const {
  return "main.EquipmentProtectionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentProtectionResponse::kStateFieldNumber;
#endif  // !_MSC_VER

EquipmentProtectionResponse::EquipmentProtectionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentProtectionResponse)
}

void EquipmentProtectionResponse::InitAsDefaultInstance() {
}

EquipmentProtectionResponse::EquipmentProtectionResponse(const EquipmentProtectionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentProtectionResponse)
}

void EquipmentProtectionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentProtectionResponse::~EquipmentProtectionResponse() {
  // @@protoc_insertion_point(destructor:main.EquipmentProtectionResponse)
  SharedDtor();
}

void EquipmentProtectionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentProtectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentProtectionResponse& EquipmentProtectionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentProtectionResponse* EquipmentProtectionResponse::default_instance_ = NULL;

EquipmentProtectionResponse* EquipmentProtectionResponse::New() const {
  return new EquipmentProtectionResponse;
}

void EquipmentProtectionResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentProtectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentProtectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentProtectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentProtectionResponse)
  return false;
#undef DO_
}

void EquipmentProtectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentProtectionResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentProtectionResponse)
}

int EquipmentProtectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentProtectionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentProtectionResponse*>(&from));
}

void EquipmentProtectionResponse::MergeFrom(const EquipmentProtectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentProtectionResponse::CopyFrom(const EquipmentProtectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentProtectionResponse::IsInitialized() const {

  return true;
}

void EquipmentProtectionResponse::Swap(EquipmentProtectionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentProtectionResponse::GetTypeName() const {
  return "main.EquipmentProtectionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentUnProtectionRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

EquipmentUnProtectionRequest::EquipmentUnProtectionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentUnProtectionRequest)
}

void EquipmentUnProtectionRequest::InitAsDefaultInstance() {
}

EquipmentUnProtectionRequest::EquipmentUnProtectionRequest(const EquipmentUnProtectionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentUnProtectionRequest)
}

void EquipmentUnProtectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentUnProtectionRequest::~EquipmentUnProtectionRequest() {
  // @@protoc_insertion_point(destructor:main.EquipmentUnProtectionRequest)
  SharedDtor();
}

void EquipmentUnProtectionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentUnProtectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentUnProtectionRequest& EquipmentUnProtectionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentUnProtectionRequest* EquipmentUnProtectionRequest::default_instance_ = NULL;

EquipmentUnProtectionRequest* EquipmentUnProtectionRequest::New() const {
  return new EquipmentUnProtectionRequest;
}

void EquipmentUnProtectionRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentUnProtectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentUnProtectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentUnProtectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentUnProtectionRequest)
  return false;
#undef DO_
}

void EquipmentUnProtectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentUnProtectionRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentUnProtectionRequest)
}

int EquipmentUnProtectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentUnProtectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentUnProtectionRequest*>(&from));
}

void EquipmentUnProtectionRequest::MergeFrom(const EquipmentUnProtectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentUnProtectionRequest::CopyFrom(const EquipmentUnProtectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentUnProtectionRequest::IsInitialized() const {

  return true;
}

void EquipmentUnProtectionRequest::Swap(EquipmentUnProtectionRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentUnProtectionRequest::GetTypeName() const {
  return "main.EquipmentUnProtectionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentUnProtectionResponse::kStateFieldNumber;
#endif  // !_MSC_VER

EquipmentUnProtectionResponse::EquipmentUnProtectionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EquipmentUnProtectionResponse)
}

void EquipmentUnProtectionResponse::InitAsDefaultInstance() {
}

EquipmentUnProtectionResponse::EquipmentUnProtectionResponse(const EquipmentUnProtectionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EquipmentUnProtectionResponse)
}

void EquipmentUnProtectionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentUnProtectionResponse::~EquipmentUnProtectionResponse() {
  // @@protoc_insertion_point(destructor:main.EquipmentUnProtectionResponse)
  SharedDtor();
}

void EquipmentUnProtectionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentUnProtectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentUnProtectionResponse& EquipmentUnProtectionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

EquipmentUnProtectionResponse* EquipmentUnProtectionResponse::default_instance_ = NULL;

EquipmentUnProtectionResponse* EquipmentUnProtectionResponse::New() const {
  return new EquipmentUnProtectionResponse;
}

void EquipmentUnProtectionResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EquipmentUnProtectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EquipmentUnProtectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EquipmentUnProtectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EquipmentUnProtectionResponse)
  return false;
#undef DO_
}

void EquipmentUnProtectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EquipmentUnProtectionResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EquipmentUnProtectionResponse)
}

int EquipmentUnProtectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentUnProtectionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentUnProtectionResponse*>(&from));
}

void EquipmentUnProtectionResponse::MergeFrom(const EquipmentUnProtectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EquipmentUnProtectionResponse::CopyFrom(const EquipmentUnProtectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentUnProtectionResponse::IsInitialized() const {

  return true;
}

void EquipmentUnProtectionResponse::Swap(EquipmentUnProtectionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentUnProtectionResponse::GetTypeName() const {
  return "main.EquipmentUnProtectionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int WearEquipmentRequest::kOfficerIdFieldNumber;
const int WearEquipmentRequest::kEquipmentIdFieldNumber;
#endif  // !_MSC_VER

WearEquipmentRequest::WearEquipmentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.WearEquipmentRequest)
}

void WearEquipmentRequest::InitAsDefaultInstance() {
}

WearEquipmentRequest::WearEquipmentRequest(const WearEquipmentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.WearEquipmentRequest)
}

void WearEquipmentRequest::SharedCtor() {
  _cached_size_ = 0;
  officerid_ = 0;
  equipmentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WearEquipmentRequest::~WearEquipmentRequest() {
  // @@protoc_insertion_point(destructor:main.WearEquipmentRequest)
  SharedDtor();
}

void WearEquipmentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WearEquipmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WearEquipmentRequest& WearEquipmentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

WearEquipmentRequest* WearEquipmentRequest::default_instance_ = NULL;

WearEquipmentRequest* WearEquipmentRequest::New() const {
  return new WearEquipmentRequest;
}

void WearEquipmentRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WearEquipmentRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(officerid_, equipmentid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool WearEquipmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.WearEquipmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officerid_)));
          set_has_officerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipmentId;
        break;
      }

      // optional int32 equipmentId = 2;
      case 2: {
        if (tag == 16) {
         parse_equipmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.WearEquipmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.WearEquipmentRequest)
  return false;
#undef DO_
}

void WearEquipmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.WearEquipmentRequest)
  // optional int32 officerId = 1;
  if (has_officerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officerid(), output);
  }

  // optional int32 equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmentid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.WearEquipmentRequest)
}

int WearEquipmentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officerId = 1;
    if (has_officerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerid());
    }

    // optional int32 equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WearEquipmentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WearEquipmentRequest*>(&from));
}

void WearEquipmentRequest::MergeFrom(const WearEquipmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officerid()) {
      set_officerid(from.officerid());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void WearEquipmentRequest::CopyFrom(const WearEquipmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WearEquipmentRequest::IsInitialized() const {

  return true;
}

void WearEquipmentRequest::Swap(WearEquipmentRequest* other) {
  if (other != this) {
    std::swap(officerid_, other->officerid_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WearEquipmentRequest::GetTypeName() const {
  return "main.WearEquipmentRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int WearEquipmentResponse::kStateFieldNumber;
#endif  // !_MSC_VER

WearEquipmentResponse::WearEquipmentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.WearEquipmentResponse)
}

void WearEquipmentResponse::InitAsDefaultInstance() {
}

WearEquipmentResponse::WearEquipmentResponse(const WearEquipmentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.WearEquipmentResponse)
}

void WearEquipmentResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WearEquipmentResponse::~WearEquipmentResponse() {
  // @@protoc_insertion_point(destructor:main.WearEquipmentResponse)
  SharedDtor();
}

void WearEquipmentResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WearEquipmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WearEquipmentResponse& WearEquipmentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

WearEquipmentResponse* WearEquipmentResponse::default_instance_ = NULL;

WearEquipmentResponse* WearEquipmentResponse::New() const {
  return new WearEquipmentResponse;
}

void WearEquipmentResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool WearEquipmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.WearEquipmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.WearEquipmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.WearEquipmentResponse)
  return false;
#undef DO_
}

void WearEquipmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.WearEquipmentResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.WearEquipmentResponse)
}

int WearEquipmentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WearEquipmentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WearEquipmentResponse*>(&from));
}

void WearEquipmentResponse::MergeFrom(const WearEquipmentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void WearEquipmentResponse::CopyFrom(const WearEquipmentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WearEquipmentResponse::IsInitialized() const {

  return true;
}

void WearEquipmentResponse::Swap(WearEquipmentResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WearEquipmentResponse::GetTypeName() const {
  return "main.WearEquipmentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int OffEquipmentRequest::kOfficerIdFieldNumber;
const int OffEquipmentRequest::kEquipmentIdFieldNumber;
#endif  // !_MSC_VER

OffEquipmentRequest::OffEquipmentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OffEquipmentRequest)
}

void OffEquipmentRequest::InitAsDefaultInstance() {
}

OffEquipmentRequest::OffEquipmentRequest(const OffEquipmentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OffEquipmentRequest)
}

void OffEquipmentRequest::SharedCtor() {
  _cached_size_ = 0;
  officerid_ = 0;
  equipmentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffEquipmentRequest::~OffEquipmentRequest() {
  // @@protoc_insertion_point(destructor:main.OffEquipmentRequest)
  SharedDtor();
}

void OffEquipmentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OffEquipmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OffEquipmentRequest& OffEquipmentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OffEquipmentRequest* OffEquipmentRequest::default_instance_ = NULL;

OffEquipmentRequest* OffEquipmentRequest::New() const {
  return new OffEquipmentRequest;
}

void OffEquipmentRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OffEquipmentRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(officerid_, equipmentid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OffEquipmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OffEquipmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officerid_)));
          set_has_officerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipmentId;
        break;
      }

      // optional int32 equipmentId = 2;
      case 2: {
        if (tag == 16) {
         parse_equipmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OffEquipmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OffEquipmentRequest)
  return false;
#undef DO_
}

void OffEquipmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OffEquipmentRequest)
  // optional int32 officerId = 1;
  if (has_officerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officerid(), output);
  }

  // optional int32 equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmentid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OffEquipmentRequest)
}

int OffEquipmentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officerId = 1;
    if (has_officerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerid());
    }

    // optional int32 equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffEquipmentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OffEquipmentRequest*>(&from));
}

void OffEquipmentRequest::MergeFrom(const OffEquipmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officerid()) {
      set_officerid(from.officerid());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OffEquipmentRequest::CopyFrom(const OffEquipmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffEquipmentRequest::IsInitialized() const {

  return true;
}

void OffEquipmentRequest::Swap(OffEquipmentRequest* other) {
  if (other != this) {
    std::swap(officerid_, other->officerid_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OffEquipmentRequest::GetTypeName() const {
  return "main.OffEquipmentRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int OffEquipmentResponse::kStateFieldNumber;
#endif  // !_MSC_VER

OffEquipmentResponse::OffEquipmentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.OffEquipmentResponse)
}

void OffEquipmentResponse::InitAsDefaultInstance() {
}

OffEquipmentResponse::OffEquipmentResponse(const OffEquipmentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.OffEquipmentResponse)
}

void OffEquipmentResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffEquipmentResponse::~OffEquipmentResponse() {
  // @@protoc_insertion_point(destructor:main.OffEquipmentResponse)
  SharedDtor();
}

void OffEquipmentResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OffEquipmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OffEquipmentResponse& OffEquipmentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

OffEquipmentResponse* OffEquipmentResponse::default_instance_ = NULL;

OffEquipmentResponse* OffEquipmentResponse::New() const {
  return new OffEquipmentResponse;
}

void OffEquipmentResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OffEquipmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.OffEquipmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.OffEquipmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.OffEquipmentResponse)
  return false;
#undef DO_
}

void OffEquipmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.OffEquipmentResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.OffEquipmentResponse)
}

int OffEquipmentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffEquipmentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OffEquipmentResponse*>(&from));
}

void OffEquipmentResponse::MergeFrom(const OffEquipmentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OffEquipmentResponse::CopyFrom(const OffEquipmentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffEquipmentResponse::IsInitialized() const {

  return true;
}

void OffEquipmentResponse::Swap(OffEquipmentResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OffEquipmentResponse::GetTypeName() const {
  return "main.OffEquipmentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SellRoleItemRequest::kSsidFieldNumber;
const int SellRoleItemRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

SellRoleItemRequest::SellRoleItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SellRoleItemRequest)
}

void SellRoleItemRequest::InitAsDefaultInstance() {
}

SellRoleItemRequest::SellRoleItemRequest(const SellRoleItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SellRoleItemRequest)
}

void SellRoleItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellRoleItemRequest::~SellRoleItemRequest() {
  // @@protoc_insertion_point(destructor:main.SellRoleItemRequest)
  SharedDtor();
}

void SellRoleItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SellRoleItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SellRoleItemRequest& SellRoleItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SellRoleItemRequest* SellRoleItemRequest::default_instance_ = NULL;

SellRoleItemRequest* SellRoleItemRequest::New() const {
  return new SellRoleItemRequest;
}

void SellRoleItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SellRoleItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, itemid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SellRoleItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SellRoleItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SellRoleItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SellRoleItemRequest)
  return false;
#undef DO_
}

void SellRoleItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SellRoleItemRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SellRoleItemRequest)
}

int SellRoleItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellRoleItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SellRoleItemRequest*>(&from));
}

void SellRoleItemRequest::MergeFrom(const SellRoleItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SellRoleItemRequest::CopyFrom(const SellRoleItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellRoleItemRequest::IsInitialized() const {

  return true;
}

void SellRoleItemRequest::Swap(SellRoleItemRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SellRoleItemRequest::GetTypeName() const {
  return "main.SellRoleItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SellRoleItemResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SellRoleItemResponse::SellRoleItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SellRoleItemResponse)
}

void SellRoleItemResponse::InitAsDefaultInstance() {
}

SellRoleItemResponse::SellRoleItemResponse(const SellRoleItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SellRoleItemResponse)
}

void SellRoleItemResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellRoleItemResponse::~SellRoleItemResponse() {
  // @@protoc_insertion_point(destructor:main.SellRoleItemResponse)
  SharedDtor();
}

void SellRoleItemResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SellRoleItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SellRoleItemResponse& SellRoleItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SellRoleItemResponse* SellRoleItemResponse::default_instance_ = NULL;

SellRoleItemResponse* SellRoleItemResponse::New() const {
  return new SellRoleItemResponse;
}

void SellRoleItemResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SellRoleItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SellRoleItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SellRoleItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SellRoleItemResponse)
  return false;
#undef DO_
}

void SellRoleItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SellRoleItemResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SellRoleItemResponse)
}

int SellRoleItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellRoleItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SellRoleItemResponse*>(&from));
}

void SellRoleItemResponse::MergeFrom(const SellRoleItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SellRoleItemResponse::CopyFrom(const SellRoleItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellRoleItemResponse::IsInitialized() const {

  return true;
}

void SellRoleItemResponse::Swap(SellRoleItemResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SellRoleItemResponse::GetTypeName() const {
  return "main.SellRoleItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SellRoleItemAllAutoRequest::kTypeFieldNumber;
const int SellRoleItemAllAutoRequest::kStarsFieldNumber;
#endif  // !_MSC_VER

SellRoleItemAllAutoRequest::SellRoleItemAllAutoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SellRoleItemAllAutoRequest)
}

void SellRoleItemAllAutoRequest::InitAsDefaultInstance() {
}

SellRoleItemAllAutoRequest::SellRoleItemAllAutoRequest(const SellRoleItemAllAutoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SellRoleItemAllAutoRequest)
}

void SellRoleItemAllAutoRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellRoleItemAllAutoRequest::~SellRoleItemAllAutoRequest() {
  // @@protoc_insertion_point(destructor:main.SellRoleItemAllAutoRequest)
  SharedDtor();
}

void SellRoleItemAllAutoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SellRoleItemAllAutoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SellRoleItemAllAutoRequest& SellRoleItemAllAutoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SellRoleItemAllAutoRequest* SellRoleItemAllAutoRequest::default_instance_ = NULL;

SellRoleItemAllAutoRequest* SellRoleItemAllAutoRequest::New() const {
  return new SellRoleItemAllAutoRequest;
}

void SellRoleItemAllAutoRequest::Clear() {
  type_ = 0;
  stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SellRoleItemAllAutoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SellRoleItemAllAutoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stars;
        break;
      }

      // repeated int32 stars = 2;
      case 2: {
        if (tag == 16) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_stars())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stars())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stars;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SellRoleItemAllAutoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SellRoleItemAllAutoRequest)
  return false;
#undef DO_
}

void SellRoleItemAllAutoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SellRoleItemAllAutoRequest)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 stars = 2;
  for (int i = 0; i < this->stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->stars(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SellRoleItemAllAutoRequest)
}

int SellRoleItemAllAutoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 stars = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stars(i));
    }
    total_size += 1 * this->stars_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellRoleItemAllAutoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SellRoleItemAllAutoRequest*>(&from));
}

void SellRoleItemAllAutoRequest::MergeFrom(const SellRoleItemAllAutoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stars_.MergeFrom(from.stars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SellRoleItemAllAutoRequest::CopyFrom(const SellRoleItemAllAutoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellRoleItemAllAutoRequest::IsInitialized() const {

  return true;
}

void SellRoleItemAllAutoRequest::Swap(SellRoleItemAllAutoRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    stars_.Swap(&other->stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SellRoleItemAllAutoRequest::GetTypeName() const {
  return "main.SellRoleItemAllAutoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SellRoleItemAllAutoResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SellRoleItemAllAutoResponse::SellRoleItemAllAutoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SellRoleItemAllAutoResponse)
}

void SellRoleItemAllAutoResponse::InitAsDefaultInstance() {
}

SellRoleItemAllAutoResponse::SellRoleItemAllAutoResponse(const SellRoleItemAllAutoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SellRoleItemAllAutoResponse)
}

void SellRoleItemAllAutoResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellRoleItemAllAutoResponse::~SellRoleItemAllAutoResponse() {
  // @@protoc_insertion_point(destructor:main.SellRoleItemAllAutoResponse)
  SharedDtor();
}

void SellRoleItemAllAutoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SellRoleItemAllAutoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SellRoleItemAllAutoResponse& SellRoleItemAllAutoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SellRoleItemAllAutoResponse* SellRoleItemAllAutoResponse::default_instance_ = NULL;

SellRoleItemAllAutoResponse* SellRoleItemAllAutoResponse::New() const {
  return new SellRoleItemAllAutoResponse;
}

void SellRoleItemAllAutoResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SellRoleItemAllAutoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SellRoleItemAllAutoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SellRoleItemAllAutoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SellRoleItemAllAutoResponse)
  return false;
#undef DO_
}

void SellRoleItemAllAutoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SellRoleItemAllAutoResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SellRoleItemAllAutoResponse)
}

int SellRoleItemAllAutoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellRoleItemAllAutoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SellRoleItemAllAutoResponse*>(&from));
}

void SellRoleItemAllAutoResponse::MergeFrom(const SellRoleItemAllAutoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SellRoleItemAllAutoResponse::CopyFrom(const SellRoleItemAllAutoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellRoleItemAllAutoResponse::IsInitialized() const {

  return true;
}

void SellRoleItemAllAutoResponse::Swap(SellRoleItemAllAutoResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SellRoleItemAllAutoResponse::GetTypeName() const {
  return "main.SellRoleItemAllAutoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SellRoleItemAllRequest::kTypeFieldNumber;
const int SellRoleItemAllRequest::kItemIdFieldNumber;
const int SellRoleItemAllRequest::kNumFieldNumber;
#endif  // !_MSC_VER

SellRoleItemAllRequest::SellRoleItemAllRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SellRoleItemAllRequest)
}

void SellRoleItemAllRequest::InitAsDefaultInstance() {
}

SellRoleItemAllRequest::SellRoleItemAllRequest(const SellRoleItemAllRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SellRoleItemAllRequest)
}

void SellRoleItemAllRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellRoleItemAllRequest::~SellRoleItemAllRequest() {
  // @@protoc_insertion_point(destructor:main.SellRoleItemAllRequest)
  SharedDtor();
}

void SellRoleItemAllRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SellRoleItemAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SellRoleItemAllRequest& SellRoleItemAllRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SellRoleItemAllRequest* SellRoleItemAllRequest::default_instance_ = NULL;

SellRoleItemAllRequest* SellRoleItemAllRequest::New() const {
  return new SellRoleItemAllRequest;
}

void SellRoleItemAllRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SellRoleItemAllRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SellRoleItemAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SellRoleItemAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SellRoleItemAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SellRoleItemAllRequest)
  return false;
#undef DO_
}

void SellRoleItemAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SellRoleItemAllRequest)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SellRoleItemAllRequest)
}

int SellRoleItemAllRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated int32 itemId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellRoleItemAllRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SellRoleItemAllRequest*>(&from));
}

void SellRoleItemAllRequest::MergeFrom(const SellRoleItemAllRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SellRoleItemAllRequest::CopyFrom(const SellRoleItemAllRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellRoleItemAllRequest::IsInitialized() const {

  return true;
}

void SellRoleItemAllRequest::Swap(SellRoleItemAllRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    itemid_.Swap(&other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SellRoleItemAllRequest::GetTypeName() const {
  return "main.SellRoleItemAllRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SellRoleItemAllResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SellRoleItemAllResponse::SellRoleItemAllResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SellRoleItemAllResponse)
}

void SellRoleItemAllResponse::InitAsDefaultInstance() {
}

SellRoleItemAllResponse::SellRoleItemAllResponse(const SellRoleItemAllResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SellRoleItemAllResponse)
}

void SellRoleItemAllResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellRoleItemAllResponse::~SellRoleItemAllResponse() {
  // @@protoc_insertion_point(destructor:main.SellRoleItemAllResponse)
  SharedDtor();
}

void SellRoleItemAllResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SellRoleItemAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SellRoleItemAllResponse& SellRoleItemAllResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SellRoleItemAllResponse* SellRoleItemAllResponse::default_instance_ = NULL;

SellRoleItemAllResponse* SellRoleItemAllResponse::New() const {
  return new SellRoleItemAllResponse;
}

void SellRoleItemAllResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SellRoleItemAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SellRoleItemAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SellRoleItemAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SellRoleItemAllResponse)
  return false;
#undef DO_
}

void SellRoleItemAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SellRoleItemAllResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SellRoleItemAllResponse)
}

int SellRoleItemAllResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellRoleItemAllResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SellRoleItemAllResponse*>(&from));
}

void SellRoleItemAllResponse::MergeFrom(const SellRoleItemAllResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SellRoleItemAllResponse::CopyFrom(const SellRoleItemAllResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellRoleItemAllResponse::IsInitialized() const {

  return true;
}

void SellRoleItemAllResponse::Swap(SellRoleItemAllResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SellRoleItemAllResponse::GetTypeName() const {
  return "main.SellRoleItemAllResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SoldierCompositeRequest::kSsidFieldNumber;
const int SoldierCompositeRequest::kPropsIdFieldNumber;
#endif  // !_MSC_VER

SoldierCompositeRequest::SoldierCompositeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SoldierCompositeRequest)
}

void SoldierCompositeRequest::InitAsDefaultInstance() {
}

SoldierCompositeRequest::SoldierCompositeRequest(const SoldierCompositeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SoldierCompositeRequest)
}

void SoldierCompositeRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldierCompositeRequest::~SoldierCompositeRequest() {
  // @@protoc_insertion_point(destructor:main.SoldierCompositeRequest)
  SharedDtor();
}

void SoldierCompositeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SoldierCompositeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SoldierCompositeRequest& SoldierCompositeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SoldierCompositeRequest* SoldierCompositeRequest::default_instance_ = NULL;

SoldierCompositeRequest* SoldierCompositeRequest::New() const {
  return new SoldierCompositeRequest;
}

void SoldierCompositeRequest::Clear() {
  ssid_ = 0;
  propsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SoldierCompositeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SoldierCompositeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        break;
      }

      // repeated int32 propsId = 2;
      case 2: {
        if (tag == 16) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_propsid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_propsid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SoldierCompositeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SoldierCompositeRequest)
  return false;
#undef DO_
}

void SoldierCompositeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SoldierCompositeRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // repeated int32 propsId = 2;
  for (int i = 0; i < this->propsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->propsid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SoldierCompositeRequest)
}

int SoldierCompositeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  // repeated int32 propsId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->propsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->propsid(i));
    }
    total_size += 1 * this->propsid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldierCompositeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SoldierCompositeRequest*>(&from));
}

void SoldierCompositeRequest::MergeFrom(const SoldierCompositeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  propsid_.MergeFrom(from.propsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SoldierCompositeRequest::CopyFrom(const SoldierCompositeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldierCompositeRequest::IsInitialized() const {

  return true;
}

void SoldierCompositeRequest::Swap(SoldierCompositeRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    propsid_.Swap(&other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SoldierCompositeRequest::GetTypeName() const {
  return "main.SoldierCompositeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SoldierCompositeResponse::kStateFieldNumber;
const int SoldierCompositeResponse::kSoldierCardItemProtoFieldNumber;
const int SoldierCompositeResponse::kAllExpFieldNumber;
const int SoldierCompositeResponse::kUpgradeStateFieldNumber;
#endif  // !_MSC_VER

SoldierCompositeResponse::SoldierCompositeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SoldierCompositeResponse)
}

void SoldierCompositeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  soldiercarditemproto_ = const_cast< ::main::SoldierCardItemProto*>(
      ::main::SoldierCardItemProto::internal_default_instance());
#else
  soldiercarditemproto_ = const_cast< ::main::SoldierCardItemProto*>(&::main::SoldierCardItemProto::default_instance());
#endif
}

SoldierCompositeResponse::SoldierCompositeResponse(const SoldierCompositeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SoldierCompositeResponse)
}

void SoldierCompositeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  soldiercarditemproto_ = NULL;
  allexp_ = 0;
  upgradestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldierCompositeResponse::~SoldierCompositeResponse() {
  // @@protoc_insertion_point(destructor:main.SoldierCompositeResponse)
  SharedDtor();
}

void SoldierCompositeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete soldiercarditemproto_;
  }
}

void SoldierCompositeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SoldierCompositeResponse& SoldierCompositeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SoldierCompositeResponse* SoldierCompositeResponse::default_instance_ = NULL;

SoldierCompositeResponse* SoldierCompositeResponse::New() const {
  return new SoldierCompositeResponse;
}

void SoldierCompositeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SoldierCompositeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, upgradestate_);
    if (has_soldiercarditemproto()) {
      if (soldiercarditemproto_ != NULL) soldiercarditemproto_->::main::SoldierCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SoldierCompositeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SoldierCompositeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_soldierCardItemProto;
        break;
      }

      // optional .main.SoldierCardItemProto soldierCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_soldierCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soldiercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allExp;
        break;
      }

      // optional int32 allExp = 3;
      case 3: {
        if (tag == 24) {
         parse_allExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allexp_)));
          set_has_allexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upgradeState;
        break;
      }

      // optional int32 upgradeState = 4;
      case 4: {
        if (tag == 32) {
         parse_upgradeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradestate_)));
          set_has_upgradestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SoldierCompositeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SoldierCompositeResponse)
  return false;
#undef DO_
}

void SoldierCompositeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SoldierCompositeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.SoldierCardItemProto soldierCardItemProto = 2;
  if (has_soldiercarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->soldiercarditemproto(), output);
  }

  // optional int32 allExp = 3;
  if (has_allexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allexp(), output);
  }

  // optional int32 upgradeState = 4;
  if (has_upgradestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgradestate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SoldierCompositeResponse)
}

int SoldierCompositeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.SoldierCardItemProto soldierCardItemProto = 2;
    if (has_soldiercarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soldiercarditemproto());
    }

    // optional int32 allExp = 3;
    if (has_allexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allexp());
    }

    // optional int32 upgradeState = 4;
    if (has_upgradestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradestate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldierCompositeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SoldierCompositeResponse*>(&from));
}

void SoldierCompositeResponse::MergeFrom(const SoldierCompositeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_soldiercarditemproto()) {
      mutable_soldiercarditemproto()->::main::SoldierCardItemProto::MergeFrom(from.soldiercarditemproto());
    }
    if (from.has_allexp()) {
      set_allexp(from.allexp());
    }
    if (from.has_upgradestate()) {
      set_upgradestate(from.upgradestate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SoldierCompositeResponse::CopyFrom(const SoldierCompositeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldierCompositeResponse::IsInitialized() const {

  return true;
}

void SoldierCompositeResponse::Swap(SoldierCompositeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(soldiercarditemproto_, other->soldiercarditemproto_);
    std::swap(allexp_, other->allexp_);
    std::swap(upgradestate_, other->upgradestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SoldierCompositeResponse::GetTypeName() const {
  return "main.SoldierCompositeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ExpansionRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

ExpansionRequest::ExpansionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ExpansionRequest)
}

void ExpansionRequest::InitAsDefaultInstance() {
}

ExpansionRequest::ExpansionRequest(const ExpansionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ExpansionRequest)
}

void ExpansionRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpansionRequest::~ExpansionRequest() {
  // @@protoc_insertion_point(destructor:main.ExpansionRequest)
  SharedDtor();
}

void ExpansionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ExpansionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExpansionRequest& ExpansionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

ExpansionRequest* ExpansionRequest::default_instance_ = NULL;

ExpansionRequest* ExpansionRequest::New() const {
  return new ExpansionRequest;
}

void ExpansionRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ExpansionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ExpansionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ExpansionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ExpansionRequest)
  return false;
#undef DO_
}

void ExpansionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ExpansionRequest)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ExpansionRequest)
}

int ExpansionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpansionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExpansionRequest*>(&from));
}

void ExpansionRequest::MergeFrom(const ExpansionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ExpansionRequest::CopyFrom(const ExpansionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpansionRequest::IsInitialized() const {

  return true;
}

void ExpansionRequest::Swap(ExpansionRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExpansionRequest::GetTypeName() const {
  return "main.ExpansionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ExpansionResponse::kStateFieldNumber;
#endif  // !_MSC_VER

ExpansionResponse::ExpansionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ExpansionResponse)
}

void ExpansionResponse::InitAsDefaultInstance() {
}

ExpansionResponse::ExpansionResponse(const ExpansionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ExpansionResponse)
}

void ExpansionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpansionResponse::~ExpansionResponse() {
  // @@protoc_insertion_point(destructor:main.ExpansionResponse)
  SharedDtor();
}

void ExpansionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ExpansionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExpansionResponse& ExpansionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

ExpansionResponse* ExpansionResponse::default_instance_ = NULL;

ExpansionResponse* ExpansionResponse::New() const {
  return new ExpansionResponse;
}

void ExpansionResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ExpansionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ExpansionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ExpansionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ExpansionResponse)
  return false;
#undef DO_
}

void ExpansionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ExpansionResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ExpansionResponse)
}

int ExpansionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpansionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExpansionResponse*>(&from));
}

void ExpansionResponse::MergeFrom(const ExpansionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ExpansionResponse::CopyFrom(const ExpansionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpansionResponse::IsInitialized() const {

  return true;
}

void ExpansionResponse::Swap(ExpansionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExpansionResponse::GetTypeName() const {
  return "main.ExpansionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PropsProtectionRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

PropsProtectionRequest::PropsProtectionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PropsProtectionRequest)
}

void PropsProtectionRequest::InitAsDefaultInstance() {
}

PropsProtectionRequest::PropsProtectionRequest(const PropsProtectionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PropsProtectionRequest)
}

void PropsProtectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsProtectionRequest::~PropsProtectionRequest() {
  // @@protoc_insertion_point(destructor:main.PropsProtectionRequest)
  SharedDtor();
}

void PropsProtectionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropsProtectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropsProtectionRequest& PropsProtectionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

PropsProtectionRequest* PropsProtectionRequest::default_instance_ = NULL;

PropsProtectionRequest* PropsProtectionRequest::New() const {
  return new PropsProtectionRequest;
}

void PropsProtectionRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropsProtectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PropsProtectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PropsProtectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PropsProtectionRequest)
  return false;
#undef DO_
}

void PropsProtectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PropsProtectionRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PropsProtectionRequest)
}

int PropsProtectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsProtectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropsProtectionRequest*>(&from));
}

void PropsProtectionRequest::MergeFrom(const PropsProtectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropsProtectionRequest::CopyFrom(const PropsProtectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsProtectionRequest::IsInitialized() const {

  return true;
}

void PropsProtectionRequest::Swap(PropsProtectionRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropsProtectionRequest::GetTypeName() const {
  return "main.PropsProtectionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PropsProtectionResponse::kStateFieldNumber;
#endif  // !_MSC_VER

PropsProtectionResponse::PropsProtectionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PropsProtectionResponse)
}

void PropsProtectionResponse::InitAsDefaultInstance() {
}

PropsProtectionResponse::PropsProtectionResponse(const PropsProtectionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PropsProtectionResponse)
}

void PropsProtectionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsProtectionResponse::~PropsProtectionResponse() {
  // @@protoc_insertion_point(destructor:main.PropsProtectionResponse)
  SharedDtor();
}

void PropsProtectionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropsProtectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropsProtectionResponse& PropsProtectionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

PropsProtectionResponse* PropsProtectionResponse::default_instance_ = NULL;

PropsProtectionResponse* PropsProtectionResponse::New() const {
  return new PropsProtectionResponse;
}

void PropsProtectionResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropsProtectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PropsProtectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PropsProtectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PropsProtectionResponse)
  return false;
#undef DO_
}

void PropsProtectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PropsProtectionResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PropsProtectionResponse)
}

int PropsProtectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsProtectionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropsProtectionResponse*>(&from));
}

void PropsProtectionResponse::MergeFrom(const PropsProtectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropsProtectionResponse::CopyFrom(const PropsProtectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsProtectionResponse::IsInitialized() const {

  return true;
}

void PropsProtectionResponse::Swap(PropsProtectionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropsProtectionResponse::GetTypeName() const {
  return "main.PropsProtectionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PropsUnProtectionRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

PropsUnProtectionRequest::PropsUnProtectionRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PropsUnProtectionRequest)
}

void PropsUnProtectionRequest::InitAsDefaultInstance() {
}

PropsUnProtectionRequest::PropsUnProtectionRequest(const PropsUnProtectionRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PropsUnProtectionRequest)
}

void PropsUnProtectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsUnProtectionRequest::~PropsUnProtectionRequest() {
  // @@protoc_insertion_point(destructor:main.PropsUnProtectionRequest)
  SharedDtor();
}

void PropsUnProtectionRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropsUnProtectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropsUnProtectionRequest& PropsUnProtectionRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

PropsUnProtectionRequest* PropsUnProtectionRequest::default_instance_ = NULL;

PropsUnProtectionRequest* PropsUnProtectionRequest::New() const {
  return new PropsUnProtectionRequest;
}

void PropsUnProtectionRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropsUnProtectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PropsUnProtectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PropsUnProtectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PropsUnProtectionRequest)
  return false;
#undef DO_
}

void PropsUnProtectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PropsUnProtectionRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PropsUnProtectionRequest)
}

int PropsUnProtectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsUnProtectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropsUnProtectionRequest*>(&from));
}

void PropsUnProtectionRequest::MergeFrom(const PropsUnProtectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropsUnProtectionRequest::CopyFrom(const PropsUnProtectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsUnProtectionRequest::IsInitialized() const {

  return true;
}

void PropsUnProtectionRequest::Swap(PropsUnProtectionRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropsUnProtectionRequest::GetTypeName() const {
  return "main.PropsUnProtectionRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PropsUnProtectionResponse::kStateFieldNumber;
#endif  // !_MSC_VER

PropsUnProtectionResponse::PropsUnProtectionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PropsUnProtectionResponse)
}

void PropsUnProtectionResponse::InitAsDefaultInstance() {
}

PropsUnProtectionResponse::PropsUnProtectionResponse(const PropsUnProtectionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PropsUnProtectionResponse)
}

void PropsUnProtectionResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsUnProtectionResponse::~PropsUnProtectionResponse() {
  // @@protoc_insertion_point(destructor:main.PropsUnProtectionResponse)
  SharedDtor();
}

void PropsUnProtectionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropsUnProtectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropsUnProtectionResponse& PropsUnProtectionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

PropsUnProtectionResponse* PropsUnProtectionResponse::default_instance_ = NULL;

PropsUnProtectionResponse* PropsUnProtectionResponse::New() const {
  return new PropsUnProtectionResponse;
}

void PropsUnProtectionResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PropsUnProtectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PropsUnProtectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PropsUnProtectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PropsUnProtectionResponse)
  return false;
#undef DO_
}

void PropsUnProtectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PropsUnProtectionResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PropsUnProtectionResponse)
}

int PropsUnProtectionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsUnProtectionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropsUnProtectionResponse*>(&from));
}

void PropsUnProtectionResponse::MergeFrom(const PropsUnProtectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PropsUnProtectionResponse::CopyFrom(const PropsUnProtectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsUnProtectionResponse::IsInitialized() const {

  return true;
}

void PropsUnProtectionResponse::Swap(PropsUnProtectionResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PropsUnProtectionResponse::GetTypeName() const {
  return "main.PropsUnProtectionResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CardStatesRequest::CardStatesRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CardStatesRequest)
}

void CardStatesRequest::InitAsDefaultInstance() {
}

CardStatesRequest::CardStatesRequest(const CardStatesRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CardStatesRequest)
}

void CardStatesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardStatesRequest::~CardStatesRequest() {
  // @@protoc_insertion_point(destructor:main.CardStatesRequest)
  SharedDtor();
}

void CardStatesRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardStatesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardStatesRequest& CardStatesRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

CardStatesRequest* CardStatesRequest::default_instance_ = NULL;

CardStatesRequest* CardStatesRequest::New() const {
  return new CardStatesRequest;
}

void CardStatesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CardStatesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CardStatesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.CardStatesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CardStatesRequest)
  return false;
#undef DO_
}

void CardStatesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CardStatesRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CardStatesRequest)
}

int CardStatesRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardStatesRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardStatesRequest*>(&from));
}

void CardStatesRequest::MergeFrom(const CardStatesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CardStatesRequest::CopyFrom(const CardStatesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardStatesRequest::IsInitialized() const {

  return true;
}

void CardStatesRequest::Swap(CardStatesRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardStatesRequest::GetTypeName() const {
  return "main.CardStatesRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CardStatesResponse::kCardsFieldNumber;
#endif  // !_MSC_VER

CardStatesResponse::CardStatesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CardStatesResponse)
}

void CardStatesResponse::InitAsDefaultInstance() {
}

CardStatesResponse::CardStatesResponse(const CardStatesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CardStatesResponse)
}

void CardStatesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardStatesResponse::~CardStatesResponse() {
  // @@protoc_insertion_point(destructor:main.CardStatesResponse)
  SharedDtor();
}

void CardStatesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardStatesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardStatesResponse& CardStatesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

CardStatesResponse* CardStatesResponse::default_instance_ = NULL;

CardStatesResponse* CardStatesResponse::New() const {
  return new CardStatesResponse;
}

void CardStatesResponse::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CardStatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CardStatesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.CardStateMessage cards = 1;
      case 1: {
        if (tag == 10) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CardStatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CardStatesResponse)
  return false;
#undef DO_
}

void CardStatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CardStatesResponse)
  // repeated .main.CardStateMessage cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cards(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CardStatesResponse)
}

int CardStatesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.CardStateMessage cards = 1;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardStatesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardStatesResponse*>(&from));
}

void CardStatesResponse::MergeFrom(const CardStatesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CardStatesResponse::CopyFrom(const CardStatesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardStatesResponse::IsInitialized() const {

  return true;
}

void CardStatesResponse::Swap(CardStatesResponse* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardStatesResponse::GetTypeName() const {
  return "main.CardStatesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CardStateMessage::kItemIdFieldNumber;
const int CardStateMessage::kStateFieldNumber;
#endif  // !_MSC_VER

CardStateMessage::CardStateMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CardStateMessage)
}

void CardStateMessage::InitAsDefaultInstance() {
}

CardStateMessage::CardStateMessage(const CardStateMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CardStateMessage)
}

void CardStateMessage::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardStateMessage::~CardStateMessage() {
  // @@protoc_insertion_point(destructor:main.CardStateMessage)
  SharedDtor();
}

void CardStateMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardStateMessage& CardStateMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

CardStateMessage* CardStateMessage::default_instance_ = NULL;

CardStateMessage* CardStateMessage::New() const {
  return new CardStateMessage;
}

void CardStateMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CardStateMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CardStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CardStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CardStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CardStateMessage)
  return false;
#undef DO_
}

void CardStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CardStateMessage)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CardStateMessage)
}

int CardStateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardStateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardStateMessage*>(&from));
}

void CardStateMessage::MergeFrom(const CardStateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CardStateMessage::CopyFrom(const CardStateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardStateMessage::IsInitialized() const {

  return true;
}

void CardStateMessage::Swap(CardStateMessage* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardStateMessage::GetTypeName() const {
  return "main.CardStateMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCompositeRequest::kSsidFieldNumber;
const int SkillCompositeRequest::kPropsIdFieldNumber;
#endif  // !_MSC_VER

SkillCompositeRequest::SkillCompositeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SkillCompositeRequest)
}

void SkillCompositeRequest::InitAsDefaultInstance() {
}

SkillCompositeRequest::SkillCompositeRequest(const SkillCompositeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SkillCompositeRequest)
}

void SkillCompositeRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCompositeRequest::~SkillCompositeRequest() {
  // @@protoc_insertion_point(destructor:main.SkillCompositeRequest)
  SharedDtor();
}

void SkillCompositeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkillCompositeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkillCompositeRequest& SkillCompositeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SkillCompositeRequest* SkillCompositeRequest::default_instance_ = NULL;

SkillCompositeRequest* SkillCompositeRequest::New() const {
  return new SkillCompositeRequest;
}

void SkillCompositeRequest::Clear() {
  ssid_ = 0;
  propsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SkillCompositeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SkillCompositeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        break;
      }

      // repeated int32 propsId = 2;
      case 2: {
        if (tag == 16) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_propsid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_propsid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SkillCompositeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SkillCompositeRequest)
  return false;
#undef DO_
}

void SkillCompositeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SkillCompositeRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // repeated int32 propsId = 2;
  for (int i = 0; i < this->propsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->propsid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SkillCompositeRequest)
}

int SkillCompositeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  // repeated int32 propsId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->propsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->propsid(i));
    }
    total_size += 1 * this->propsid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCompositeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkillCompositeRequest*>(&from));
}

void SkillCompositeRequest::MergeFrom(const SkillCompositeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  propsid_.MergeFrom(from.propsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SkillCompositeRequest::CopyFrom(const SkillCompositeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCompositeRequest::IsInitialized() const {

  return true;
}

void SkillCompositeRequest::Swap(SkillCompositeRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    propsid_.Swap(&other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkillCompositeRequest::GetTypeName() const {
  return "main.SkillCompositeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCompositeResponse::kStateFieldNumber;
const int SkillCompositeResponse::kSkillIdFieldNumber;
const int SkillCompositeResponse::kSkillExpFieldNumber;
#endif  // !_MSC_VER

SkillCompositeResponse::SkillCompositeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SkillCompositeResponse)
}

void SkillCompositeResponse::InitAsDefaultInstance() {
}

SkillCompositeResponse::SkillCompositeResponse(const SkillCompositeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SkillCompositeResponse)
}

void SkillCompositeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  skillid_ = 0;
  skillexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCompositeResponse::~SkillCompositeResponse() {
  // @@protoc_insertion_point(destructor:main.SkillCompositeResponse)
  SharedDtor();
}

void SkillCompositeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkillCompositeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkillCompositeResponse& SkillCompositeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SkillCompositeResponse* SkillCompositeResponse::default_instance_ = NULL;

SkillCompositeResponse* SkillCompositeResponse::New() const {
  return new SkillCompositeResponse;
}

void SkillCompositeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillCompositeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, skillexp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SkillCompositeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SkillCompositeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 2;
      case 2: {
        if (tag == 16) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillExp;
        break;
      }

      // optional int32 skillExp = 3;
      case 3: {
        if (tag == 24) {
         parse_skillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SkillCompositeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SkillCompositeResponse)
  return false;
#undef DO_
}

void SkillCompositeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SkillCompositeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 skillExp = 3;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillexp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SkillCompositeResponse)
}

int SkillCompositeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skillExp = 3;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCompositeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkillCompositeResponse*>(&from));
}

void SkillCompositeResponse::MergeFrom(const SkillCompositeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SkillCompositeResponse::CopyFrom(const SkillCompositeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCompositeResponse::IsInitialized() const {

  return true;
}

void SkillCompositeResponse::Swap(SkillCompositeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(skillid_, other->skillid_);
    std::swap(skillexp_, other->skillexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkillCompositeResponse::GetTypeName() const {
  return "main.SkillCompositeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SummonCardRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

SummonCardRequest::SummonCardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SummonCardRequest)
}

void SummonCardRequest::InitAsDefaultInstance() {
}

SummonCardRequest::SummonCardRequest(const SummonCardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SummonCardRequest)
}

void SummonCardRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummonCardRequest::~SummonCardRequest() {
  // @@protoc_insertion_point(destructor:main.SummonCardRequest)
  SharedDtor();
}

void SummonCardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SummonCardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SummonCardRequest& SummonCardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SummonCardRequest* SummonCardRequest::default_instance_ = NULL;

SummonCardRequest* SummonCardRequest::New() const {
  return new SummonCardRequest;
}

void SummonCardRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SummonCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SummonCardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SummonCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SummonCardRequest)
  return false;
#undef DO_
}

void SummonCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SummonCardRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SummonCardRequest)
}

int SummonCardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummonCardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SummonCardRequest*>(&from));
}

void SummonCardRequest::MergeFrom(const SummonCardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SummonCardRequest::CopyFrom(const SummonCardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonCardRequest::IsInitialized() const {

  return true;
}

void SummonCardRequest::Swap(SummonCardRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SummonCardRequest::GetTypeName() const {
  return "main.SummonCardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SummonCardResponse::kStateFieldNumber;
const int SummonCardResponse::kSsidFieldNumber;
#endif  // !_MSC_VER

SummonCardResponse::SummonCardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SummonCardResponse)
}

void SummonCardResponse::InitAsDefaultInstance() {
}

SummonCardResponse::SummonCardResponse(const SummonCardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SummonCardResponse)
}

void SummonCardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummonCardResponse::~SummonCardResponse() {
  // @@protoc_insertion_point(destructor:main.SummonCardResponse)
  SharedDtor();
}

void SummonCardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SummonCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SummonCardResponse& SummonCardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

SummonCardResponse* SummonCardResponse::default_instance_ = NULL;

SummonCardResponse* SummonCardResponse::New() const {
  return new SummonCardResponse;
}

void SummonCardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SummonCardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, ssid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SummonCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SummonCardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ssid;
        break;
      }

      // optional int32 ssid = 2;
      case 2: {
        if (tag == 16) {
         parse_ssid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SummonCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SummonCardResponse)
  return false;
#undef DO_
}

void SummonCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SummonCardResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 ssid = 2;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SummonCardResponse)
}

int SummonCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 ssid = 2;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummonCardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SummonCardResponse*>(&from));
}

void SummonCardResponse::MergeFrom(const SummonCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SummonCardResponse::CopyFrom(const SummonCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonCardResponse::IsInitialized() const {

  return true;
}

void SummonCardResponse::Swap(SummonCardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SummonCardResponse::GetTypeName() const {
  return "main.SummonCardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int LordSkillCompositeRequest::kSsidFieldNumber;
const int LordSkillCompositeRequest::kPropsIdFieldNumber;
#endif  // !_MSC_VER

LordSkillCompositeRequest::LordSkillCompositeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LordSkillCompositeRequest)
}

void LordSkillCompositeRequest::InitAsDefaultInstance() {
}

LordSkillCompositeRequest::LordSkillCompositeRequest(const LordSkillCompositeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LordSkillCompositeRequest)
}

void LordSkillCompositeRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordSkillCompositeRequest::~LordSkillCompositeRequest() {
  // @@protoc_insertion_point(destructor:main.LordSkillCompositeRequest)
  SharedDtor();
}

void LordSkillCompositeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LordSkillCompositeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LordSkillCompositeRequest& LordSkillCompositeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

LordSkillCompositeRequest* LordSkillCompositeRequest::default_instance_ = NULL;

LordSkillCompositeRequest* LordSkillCompositeRequest::New() const {
  return new LordSkillCompositeRequest;
}

void LordSkillCompositeRequest::Clear() {
  ssid_ = 0;
  propsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LordSkillCompositeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LordSkillCompositeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        break;
      }

      // repeated int32 propsId = 2;
      case 2: {
        if (tag == 16) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_propsid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_propsid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LordSkillCompositeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LordSkillCompositeRequest)
  return false;
#undef DO_
}

void LordSkillCompositeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LordSkillCompositeRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // repeated int32 propsId = 2;
  for (int i = 0; i < this->propsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->propsid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LordSkillCompositeRequest)
}

int LordSkillCompositeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  // repeated int32 propsId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->propsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->propsid(i));
    }
    total_size += 1 * this->propsid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordSkillCompositeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LordSkillCompositeRequest*>(&from));
}

void LordSkillCompositeRequest::MergeFrom(const LordSkillCompositeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  propsid_.MergeFrom(from.propsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LordSkillCompositeRequest::CopyFrom(const LordSkillCompositeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordSkillCompositeRequest::IsInitialized() const {

  return true;
}

void LordSkillCompositeRequest::Swap(LordSkillCompositeRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    propsid_.Swap(&other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LordSkillCompositeRequest::GetTypeName() const {
  return "main.LordSkillCompositeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LordSkillCompositeResponse::kStateFieldNumber;
const int LordSkillCompositeResponse::kSkillIdFieldNumber;
const int LordSkillCompositeResponse::kSkillExpFieldNumber;
#endif  // !_MSC_VER

LordSkillCompositeResponse::LordSkillCompositeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LordSkillCompositeResponse)
}

void LordSkillCompositeResponse::InitAsDefaultInstance() {
}

LordSkillCompositeResponse::LordSkillCompositeResponse(const LordSkillCompositeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LordSkillCompositeResponse)
}

void LordSkillCompositeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  skillid_ = 0;
  skillexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordSkillCompositeResponse::~LordSkillCompositeResponse() {
  // @@protoc_insertion_point(destructor:main.LordSkillCompositeResponse)
  SharedDtor();
}

void LordSkillCompositeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LordSkillCompositeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LordSkillCompositeResponse& LordSkillCompositeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

LordSkillCompositeResponse* LordSkillCompositeResponse::default_instance_ = NULL;

LordSkillCompositeResponse* LordSkillCompositeResponse::New() const {
  return new LordSkillCompositeResponse;
}

void LordSkillCompositeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LordSkillCompositeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, skillexp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LordSkillCompositeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LordSkillCompositeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 2;
      case 2: {
        if (tag == 16) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillExp;
        break;
      }

      // optional int32 skillExp = 3;
      case 3: {
        if (tag == 24) {
         parse_skillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LordSkillCompositeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LordSkillCompositeResponse)
  return false;
#undef DO_
}

void LordSkillCompositeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LordSkillCompositeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 skillExp = 3;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillexp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LordSkillCompositeResponse)
}

int LordSkillCompositeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skillExp = 3;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordSkillCompositeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LordSkillCompositeResponse*>(&from));
}

void LordSkillCompositeResponse::MergeFrom(const LordSkillCompositeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LordSkillCompositeResponse::CopyFrom(const LordSkillCompositeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordSkillCompositeResponse::IsInitialized() const {

  return true;
}

void LordSkillCompositeResponse::Swap(LordSkillCompositeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(skillid_, other->skillid_);
    std::swap(skillexp_, other->skillexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LordSkillCompositeResponse::GetTypeName() const {
  return "main.LordSkillCompositeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UseConsumableItemRequest::kSsidFieldNumber;
const int UseConsumableItemRequest::kNumFieldNumber;
#endif  // !_MSC_VER

UseConsumableItemRequest::UseConsumableItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UseConsumableItemRequest)
}

void UseConsumableItemRequest::InitAsDefaultInstance() {
}

UseConsumableItemRequest::UseConsumableItemRequest(const UseConsumableItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UseConsumableItemRequest)
}

void UseConsumableItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseConsumableItemRequest::~UseConsumableItemRequest() {
  // @@protoc_insertion_point(destructor:main.UseConsumableItemRequest)
  SharedDtor();
}

void UseConsumableItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UseConsumableItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UseConsumableItemRequest& UseConsumableItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

UseConsumableItemRequest* UseConsumableItemRequest::default_instance_ = NULL;

UseConsumableItemRequest* UseConsumableItemRequest::New() const {
  return new UseConsumableItemRequest;
}

void UseConsumableItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseConsumableItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UseConsumableItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UseConsumableItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UseConsumableItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UseConsumableItemRequest)
  return false;
#undef DO_
}

void UseConsumableItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UseConsumableItemRequest)
  // required int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UseConsumableItemRequest)
}

int UseConsumableItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseConsumableItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UseConsumableItemRequest*>(&from));
}

void UseConsumableItemRequest::MergeFrom(const UseConsumableItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UseConsumableItemRequest::CopyFrom(const UseConsumableItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseConsumableItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UseConsumableItemRequest::Swap(UseConsumableItemRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UseConsumableItemRequest::GetTypeName() const {
  return "main.UseConsumableItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UseConsumableItemResponse::kStateFieldNumber;
const int UseConsumableItemResponse::kMsgFieldNumber;
const int UseConsumableItemResponse::kTypesFieldNumber;
const int UseConsumableItemResponse::kItemIdsFieldNumber;
const int UseConsumableItemResponse::kNumsFieldNumber;
#endif  // !_MSC_VER

UseConsumableItemResponse::UseConsumableItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UseConsumableItemResponse)
}

void UseConsumableItemResponse::InitAsDefaultInstance() {
}

UseConsumableItemResponse::UseConsumableItemResponse(const UseConsumableItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UseConsumableItemResponse)
}

void UseConsumableItemResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseConsumableItemResponse::~UseConsumableItemResponse() {
  // @@protoc_insertion_point(destructor:main.UseConsumableItemResponse)
  SharedDtor();
}

void UseConsumableItemResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UseConsumableItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UseConsumableItemResponse& UseConsumableItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

UseConsumableItemResponse* UseConsumableItemResponse::default_instance_ = NULL;

UseConsumableItemResponse* UseConsumableItemResponse::New() const {
  return new UseConsumableItemResponse;
}

void UseConsumableItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  types_.Clear();
  itemids_.Clear();
  nums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UseConsumableItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UseConsumableItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_types;
        break;
      }

      // repeated int32 types = 3;
      case 3: {
        if (tag == 24) {
         parse_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_types())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_types;
        if (input->ExpectTag(32)) goto parse_itemIds;
        break;
      }

      // repeated int32 itemIds = 4;
      case 4: {
        if (tag == 32) {
         parse_itemIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_itemids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemIds;
        if (input->ExpectTag(40)) goto parse_nums;
        break;
      }

      // repeated int32 nums = 5;
      case 5: {
        if (tag == 40) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_nums())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nums())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nums;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UseConsumableItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UseConsumableItemResponse)
  return false;
#undef DO_
}

void UseConsumableItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UseConsumableItemResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // repeated int32 types = 3;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->types(i), output);
  }

  // repeated int32 itemIds = 4;
  for (int i = 0; i < this->itemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->itemids(i), output);
  }

  // repeated int32 nums = 5;
  for (int i = 0; i < this->nums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->nums(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UseConsumableItemResponse)
}

int UseConsumableItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  // repeated int32 types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->types(i));
    }
    total_size += 1 * this->types_size() + data_size;
  }

  // repeated int32 itemIds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemids(i));
    }
    total_size += 1 * this->itemids_size() + data_size;
  }

  // repeated int32 nums = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->nums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nums(i));
    }
    total_size += 1 * this->nums_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseConsumableItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UseConsumableItemResponse*>(&from));
}

void UseConsumableItemResponse::MergeFrom(const UseConsumableItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  itemids_.MergeFrom(from.itemids_);
  nums_.MergeFrom(from.nums_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UseConsumableItemResponse::CopyFrom(const UseConsumableItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseConsumableItemResponse::IsInitialized() const {

  return true;
}

void UseConsumableItemResponse::Swap(UseConsumableItemResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(msg_, other->msg_);
    types_.Swap(&other->types_);
    itemids_.Swap(&other->itemids_);
    nums_.Swap(&other->nums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UseConsumableItemResponse::GetTypeName() const {
  return "main.UseConsumableItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MergeItemRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

MergeItemRequest::MergeItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MergeItemRequest)
}

void MergeItemRequest::InitAsDefaultInstance() {
}

MergeItemRequest::MergeItemRequest(const MergeItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MergeItemRequest)
}

void MergeItemRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeItemRequest::~MergeItemRequest() {
  // @@protoc_insertion_point(destructor:main.MergeItemRequest)
  SharedDtor();
}

void MergeItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MergeItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MergeItemRequest& MergeItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

MergeItemRequest* MergeItemRequest::default_instance_ = NULL;

MergeItemRequest* MergeItemRequest::New() const {
  return new MergeItemRequest;
}

void MergeItemRequest::Clear() {
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MergeItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MergeItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.MergeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::MergeType_IsValid(value)) {
            set_type(static_cast< ::main::MergeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MergeItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MergeItemRequest)
  return false;
#undef DO_
}

void MergeItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MergeItemRequest)
  // required .main.MergeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MergeItemRequest)
}

int MergeItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.MergeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeItemRequest*>(&from));
}

void MergeItemRequest::MergeFrom(const MergeItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MergeItemRequest::CopyFrom(const MergeItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MergeItemRequest::Swap(MergeItemRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MergeItemRequest::GetTypeName() const {
  return "main.MergeItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int MergeItemResponse::kTypeFieldNumber;
const int MergeItemResponse::kStateFieldNumber;
#endif  // !_MSC_VER

MergeItemResponse::MergeItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MergeItemResponse)
}

void MergeItemResponse::InitAsDefaultInstance() {
}

MergeItemResponse::MergeItemResponse(const MergeItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MergeItemResponse)
}

void MergeItemResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeItemResponse::~MergeItemResponse() {
  // @@protoc_insertion_point(destructor:main.MergeItemResponse)
  SharedDtor();
}

void MergeItemResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MergeItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MergeItemResponse& MergeItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

MergeItemResponse* MergeItemResponse::default_instance_ = NULL;

MergeItemResponse* MergeItemResponse::New() const {
  return new MergeItemResponse;
}

void MergeItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MergeItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MergeItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.MergeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::MergeType_IsValid(value)) {
            set_type(static_cast< ::main::MergeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MergeItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MergeItemResponse)
  return false;
#undef DO_
}

void MergeItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MergeItemResponse)
  // required .main.MergeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MergeItemResponse)
}

int MergeItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.MergeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeItemResponse*>(&from));
}

void MergeItemResponse::MergeFrom(const MergeItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MergeItemResponse::CopyFrom(const MergeItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MergeItemResponse::Swap(MergeItemResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MergeItemResponse::GetTypeName() const {
  return "main.MergeItemResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemDataProto::kItemTypeFieldNumber;
const int ItemDataProto::kItemIdFieldNumber;
const int ItemDataProto::kItemNumFieldNumber;
const int ItemDataProto::kItemLvFieldNumber;
#endif  // !_MSC_VER

ItemDataProto::ItemDataProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ItemDataProto)
}

void ItemDataProto::InitAsDefaultInstance() {
}

ItemDataProto::ItemDataProto(const ItemDataProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ItemDataProto)
}

void ItemDataProto::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  itemlv_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemDataProto::~ItemDataProto() {
  // @@protoc_insertion_point(destructor:main.ItemDataProto)
  SharedDtor();
}

void ItemDataProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemDataProto& ItemDataProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

ItemDataProto* ItemDataProto::default_instance_ = NULL;

ItemDataProto* ItemDataProto::New() const {
  return new ItemDataProto;
}

void ItemDataProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemDataProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(itemtype_, itemnum_);
    itemlv_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ItemDataProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // required int32 itemNum = 3;
      case 3: {
        if (tag == 24) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemLv;
        break;
      }

      // optional int32 itemLv = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_itemLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemlv_)));
          set_has_itemlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ItemDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ItemDataProto)
  return false;
#undef DO_
}

void ItemDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ItemDataProto)
  // required int32 itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // optional int32 itemLv = 4 [default = 1];
  if (has_itemlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemlv(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ItemDataProto)
}

int ItemDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 itemLv = 4 [default = 1];
    if (has_itemlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemlv());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemDataProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemDataProto*>(&from));
}

void ItemDataProto::MergeFrom(const ItemDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_itemlv()) {
      set_itemlv(from.itemlv());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemDataProto::CopyFrom(const ItemDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDataProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ItemDataProto::Swap(ItemDataProto* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(itemlv_, other->itemlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemDataProto::GetTypeName() const {
  return "main.ItemDataProto";
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsDataProto::kItemFieldNumber;
const int GoodsDataProto::kPriceTypeFieldNumber;
const int GoodsDataProto::kPriceValueFieldNumber;
const int GoodsDataProto::kStateFieldNumber;
const int GoodsDataProto::kMarkFieldNumber;
const int GoodsDataProto::kEffectFieldNumber;
#endif  // !_MSC_VER

GoodsDataProto::GoodsDataProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GoodsDataProto)
}

void GoodsDataProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_ = const_cast< ::main::ItemDataProto*>(
      ::main::ItemDataProto::internal_default_instance());
#else
  item_ = const_cast< ::main::ItemDataProto*>(&::main::ItemDataProto::default_instance());
#endif
}

GoodsDataProto::GoodsDataProto(const GoodsDataProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GoodsDataProto)
}

void GoodsDataProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_ = NULL;
  pricetype_ = 0;
  pricevalue_ = 0;
  state_ = 1;
  mark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsDataProto::~GoodsDataProto() {
  // @@protoc_insertion_point(destructor:main.GoodsDataProto)
  SharedDtor();
}

void GoodsDataProto::SharedDtor() {
  if (mark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mark_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete item_;
  }
}

void GoodsDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GoodsDataProto& GoodsDataProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemModule_2eproto();
#endif
  return *default_instance_;
}

GoodsDataProto* GoodsDataProto::default_instance_ = NULL;

GoodsDataProto* GoodsDataProto::New() const {
  return new GoodsDataProto;
}

void GoodsDataProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoodsDataProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(pricetype_, pricevalue_);
    if (has_item()) {
      if (item_ != NULL) item_->::main::ItemDataProto::Clear();
    }
    state_ = 1;
    if (has_mark()) {
      if (mark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mark_->clear();
      }
    }
    effect_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GoodsDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GoodsDataProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.ItemDataProto item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_priceType;
        break;
      }

      // required int32 priceType = 2;
      case 2: {
        if (tag == 16) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priceValue;
        break;
      }

      // required int32 priceValue = 3;
      case 3: {
        if (tag == 24) {
         parse_priceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricevalue_)));
          set_has_pricevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mark;
        break;
      }

      // optional string mark = 5;
      case 5: {
        if (tag == 42) {
         parse_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_effect;
        break;
      }

      // optional int32 effect = 6;
      case 6: {
        if (tag == 48) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GoodsDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GoodsDataProto)
  return false;
#undef DO_
}

void GoodsDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GoodsDataProto)
  // required .main.ItemDataProto item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(), output);
  }

  // required int32 priceType = 2;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pricetype(), output);
  }

  // required int32 priceValue = 3;
  if (has_pricevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pricevalue(), output);
  }

  // required int32 state = 4 [default = 1];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional string mark = 5;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mark(), output);
  }

  // optional int32 effect = 6;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->effect(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GoodsDataProto)
}

int GoodsDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.ItemDataProto item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required int32 priceType = 2;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }

    // required int32 priceValue = 3;
    if (has_pricevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricevalue());
    }

    // required int32 state = 4 [default = 1];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string mark = 5;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark());
    }

    // optional int32 effect = 6;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsDataProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GoodsDataProto*>(&from));
}

void GoodsDataProto::MergeFrom(const GoodsDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::main::ItemDataProto::MergeFrom(from.item());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_pricevalue()) {
      set_pricevalue(from.pricevalue());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GoodsDataProto::CopyFrom(const GoodsDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsDataProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void GoodsDataProto::Swap(GoodsDataProto* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(pricevalue_, other->pricevalue_);
    std::swap(state_, other->state_);
    std::swap(mark_, other->mark_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GoodsDataProto::GetTypeName() const {
  return "main.GoodsDataProto";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
