// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_FriendModule_2eproto() {
  delete AddFriendRequest::default_instance_;
  delete AddFriendResponse::default_instance_;
  delete SearchFriendByNameRequest::default_instance_;
  delete SearchFriendByNameResponse::default_instance_;
  delete SearchFriendByInviteCodeRequest::default_instance_;
  delete SearchFriendByInviteCodeResponse::default_instance_;
  delete FriendInfoRequest::default_instance_;
  delete FriendInfoResponse::default_instance_;
  delete AgreeFriendRequest::default_instance_;
  delete AgreeFriendResponse::default_instance_;
  delete AddBlockRequest::default_instance_;
  delete AddBlockResponse::default_instance_;
  delete UnagreeFriendRequest::default_instance_;
  delete UnagreeFriendResponse::default_instance_;
  delete DeleteBlockRequest::default_instance_;
  delete DeleteBlockResponse::default_instance_;
  delete DeleteFriendRequest::default_instance_;
  delete DeleteFriendResponse::default_instance_;
  delete expandFriendRequest::default_instance_;
  delete expandFriendResponse::default_instance_;
  delete FriendProto::default_instance_;
  delete RoleInfo::default_instance_;
  delete RoleTeamInfo::default_instance_;
  delete TeamOfficerCardItemInfo::default_instance_;
  delete PvpOfficerCardItemInfo::default_instance_;
  delete ReasonInfo::default_instance_;
  delete PowerGiftRequest::default_instance_;
  delete PowerGiftResponse::default_instance_;
  delete AcceptPowerGiftResponse::default_instance_;
  delete GetPowerGiftRequest::default_instance_;
  delete GetPowerGiftResponse::default_instance_;
  delete GetAllPowerGiftRequest::default_instance_;
  delete GetAllPowerGiftResponse::default_instance_;
  delete PowerGiftListResponse::default_instance_;
  delete PowerGiftProto::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_FriendModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_FriendModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  AddFriendRequest::default_instance_ = new AddFriendRequest();
  AddFriendResponse::default_instance_ = new AddFriendResponse();
  SearchFriendByNameRequest::default_instance_ = new SearchFriendByNameRequest();
  SearchFriendByNameResponse::default_instance_ = new SearchFriendByNameResponse();
  SearchFriendByInviteCodeRequest::default_instance_ = new SearchFriendByInviteCodeRequest();
  SearchFriendByInviteCodeResponse::default_instance_ = new SearchFriendByInviteCodeResponse();
  FriendInfoRequest::default_instance_ = new FriendInfoRequest();
  FriendInfoResponse::default_instance_ = new FriendInfoResponse();
  AgreeFriendRequest::default_instance_ = new AgreeFriendRequest();
  AgreeFriendResponse::default_instance_ = new AgreeFriendResponse();
  AddBlockRequest::default_instance_ = new AddBlockRequest();
  AddBlockResponse::default_instance_ = new AddBlockResponse();
  UnagreeFriendRequest::default_instance_ = new UnagreeFriendRequest();
  UnagreeFriendResponse::default_instance_ = new UnagreeFriendResponse();
  DeleteBlockRequest::default_instance_ = new DeleteBlockRequest();
  DeleteBlockResponse::default_instance_ = new DeleteBlockResponse();
  DeleteFriendRequest::default_instance_ = new DeleteFriendRequest();
  DeleteFriendResponse::default_instance_ = new DeleteFriendResponse();
  expandFriendRequest::default_instance_ = new expandFriendRequest();
  expandFriendResponse::default_instance_ = new expandFriendResponse();
  FriendProto::default_instance_ = new FriendProto();
  RoleInfo::default_instance_ = new RoleInfo();
  RoleTeamInfo::default_instance_ = new RoleTeamInfo();
  TeamOfficerCardItemInfo::default_instance_ = new TeamOfficerCardItemInfo();
  PvpOfficerCardItemInfo::default_instance_ = new PvpOfficerCardItemInfo();
  ReasonInfo::default_instance_ = new ReasonInfo();
  PowerGiftRequest::default_instance_ = new PowerGiftRequest();
  PowerGiftResponse::default_instance_ = new PowerGiftResponse();
  AcceptPowerGiftResponse::default_instance_ = new AcceptPowerGiftResponse();
  GetPowerGiftRequest::default_instance_ = new GetPowerGiftRequest();
  GetPowerGiftResponse::default_instance_ = new GetPowerGiftResponse();
  GetAllPowerGiftRequest::default_instance_ = new GetAllPowerGiftRequest();
  GetAllPowerGiftResponse::default_instance_ = new GetAllPowerGiftResponse();
  PowerGiftListResponse::default_instance_ = new PowerGiftListResponse();
  PowerGiftProto::default_instance_ = new PowerGiftProto();
  AddFriendRequest::default_instance_->InitAsDefaultInstance();
  AddFriendResponse::default_instance_->InitAsDefaultInstance();
  SearchFriendByNameRequest::default_instance_->InitAsDefaultInstance();
  SearchFriendByNameResponse::default_instance_->InitAsDefaultInstance();
  SearchFriendByInviteCodeRequest::default_instance_->InitAsDefaultInstance();
  SearchFriendByInviteCodeResponse::default_instance_->InitAsDefaultInstance();
  FriendInfoRequest::default_instance_->InitAsDefaultInstance();
  FriendInfoResponse::default_instance_->InitAsDefaultInstance();
  AgreeFriendRequest::default_instance_->InitAsDefaultInstance();
  AgreeFriendResponse::default_instance_->InitAsDefaultInstance();
  AddBlockRequest::default_instance_->InitAsDefaultInstance();
  AddBlockResponse::default_instance_->InitAsDefaultInstance();
  UnagreeFriendRequest::default_instance_->InitAsDefaultInstance();
  UnagreeFriendResponse::default_instance_->InitAsDefaultInstance();
  DeleteBlockRequest::default_instance_->InitAsDefaultInstance();
  DeleteBlockResponse::default_instance_->InitAsDefaultInstance();
  DeleteFriendRequest::default_instance_->InitAsDefaultInstance();
  DeleteFriendResponse::default_instance_->InitAsDefaultInstance();
  expandFriendRequest::default_instance_->InitAsDefaultInstance();
  expandFriendResponse::default_instance_->InitAsDefaultInstance();
  FriendProto::default_instance_->InitAsDefaultInstance();
  RoleInfo::default_instance_->InitAsDefaultInstance();
  RoleTeamInfo::default_instance_->InitAsDefaultInstance();
  TeamOfficerCardItemInfo::default_instance_->InitAsDefaultInstance();
  PvpOfficerCardItemInfo::default_instance_->InitAsDefaultInstance();
  ReasonInfo::default_instance_->InitAsDefaultInstance();
  PowerGiftRequest::default_instance_->InitAsDefaultInstance();
  PowerGiftResponse::default_instance_->InitAsDefaultInstance();
  AcceptPowerGiftResponse::default_instance_->InitAsDefaultInstance();
  GetPowerGiftRequest::default_instance_->InitAsDefaultInstance();
  GetPowerGiftResponse::default_instance_->InitAsDefaultInstance();
  GetAllPowerGiftRequest::default_instance_->InitAsDefaultInstance();
  GetAllPowerGiftResponse::default_instance_->InitAsDefaultInstance();
  PowerGiftListResponse::default_instance_->InitAsDefaultInstance();
  PowerGiftProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FriendModule_2eproto_once_);
void protobuf_AddDesc_FriendModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FriendModule_2eproto_once_,
                 &protobuf_AddDesc_FriendModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendModule_2eproto {
  StaticDescriptorInitializer_FriendModule_2eproto() {
    protobuf_AddDesc_FriendModule_2eproto();
  }
} static_descriptor_initializer_FriendModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AddFriendRequest::kFriendRoleIdFieldNumber;
#endif  // !_MSC_VER

AddFriendRequest::AddFriendRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AddFriendRequest)
}

void AddFriendRequest::InitAsDefaultInstance() {
}

AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AddFriendRequest)
}

void AddFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:main.AddFriendRequest)
  SharedDtor();
}

void AddFriendRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AddFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddFriendRequest& AddFriendRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

AddFriendRequest* AddFriendRequest::default_instance_ = NULL;

AddFriendRequest* AddFriendRequest::New() const {
  return new AddFriendRequest;
}

void AddFriendRequest::Clear() {
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AddFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AddFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendroleid_)));
          set_has_friendroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AddFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AddFriendRequest)
  return false;
#undef DO_
}

void AddFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AddFriendRequest)
  // optional int32 friendRoleId = 1;
  if (has_friendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AddFriendRequest)
}

int AddFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendRoleId = 1;
    if (has_friendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddFriendRequest*>(&from));
}

void AddFriendRequest::MergeFrom(const AddFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleid()) {
      set_friendroleid(from.friendroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {

  return true;
}

void AddFriendRequest::Swap(AddFriendRequest* other) {
  if (other != this) {
    std::swap(friendroleid_, other->friendroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddFriendRequest::GetTypeName() const {
  return "main.AddFriendRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendResponse::kStateFieldNumber;
const int AddFriendResponse::kFriendProtoFieldNumber;
#endif  // !_MSC_VER

AddFriendResponse::AddFriendResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AddFriendResponse)
}

void AddFriendResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendproto_ = const_cast< ::main::FriendProto*>(
      ::main::FriendProto::internal_default_instance());
#else
  friendproto_ = const_cast< ::main::FriendProto*>(&::main::FriendProto::default_instance());
#endif
}

AddFriendResponse::AddFriendResponse(const AddFriendResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AddFriendResponse)
}

void AddFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  friendproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendResponse::~AddFriendResponse() {
  // @@protoc_insertion_point(destructor:main.AddFriendResponse)
  SharedDtor();
}

void AddFriendResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete friendproto_;
  }
}

void AddFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddFriendResponse& AddFriendResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

AddFriendResponse* AddFriendResponse::default_instance_ = NULL;

AddFriendResponse* AddFriendResponse::New() const {
  return new AddFriendResponse;
}

void AddFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_friendproto()) {
      if (friendproto_ != NULL) friendproto_->::main::FriendProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AddFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendProto;
        break;
      }

      // optional .main.FriendProto friendProto = 2;
      case 2: {
        if (tag == 18) {
         parse_friendProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AddFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AddFriendResponse)
  return false;
#undef DO_
}

void AddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AddFriendResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.FriendProto friendProto = 2;
  if (has_friendproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friendproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AddFriendResponse)
}

int AddFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.FriendProto friendProto = 2;
    if (has_friendproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddFriendResponse*>(&from));
}

void AddFriendResponse::MergeFrom(const AddFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_friendproto()) {
      mutable_friendproto()->::main::FriendProto::MergeFrom(from.friendproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AddFriendResponse::CopyFrom(const AddFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendResponse::IsInitialized() const {

  return true;
}

void AddFriendResponse::Swap(AddFriendResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(friendproto_, other->friendproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddFriendResponse::GetTypeName() const {
  return "main.AddFriendResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchFriendByNameRequest::kNickNameFieldNumber;
const int SearchFriendByNameRequest::kPageNumFieldNumber;
#endif  // !_MSC_VER

SearchFriendByNameRequest::SearchFriendByNameRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SearchFriendByNameRequest)
}

void SearchFriendByNameRequest::InitAsDefaultInstance() {
}

SearchFriendByNameRequest::SearchFriendByNameRequest(const SearchFriendByNameRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SearchFriendByNameRequest)
}

void SearchFriendByNameRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchFriendByNameRequest::~SearchFriendByNameRequest() {
  // @@protoc_insertion_point(destructor:main.SearchFriendByNameRequest)
  SharedDtor();
}

void SearchFriendByNameRequest::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchFriendByNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchFriendByNameRequest& SearchFriendByNameRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

SearchFriendByNameRequest* SearchFriendByNameRequest::default_instance_ = NULL;

SearchFriendByNameRequest* SearchFriendByNameRequest::New() const {
  return new SearchFriendByNameRequest;
}

void SearchFriendByNameRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    pagenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchFriendByNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SearchFriendByNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pageNum;
        break;
      }

      // optional int32 pageNum = 2;
      case 2: {
        if (tag == 16) {
         parse_pageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SearchFriendByNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SearchFriendByNameRequest)
  return false;
#undef DO_
}

void SearchFriendByNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SearchFriendByNameRequest)
  // optional string nickName = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional int32 pageNum = 2;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pagenum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SearchFriendByNameRequest)
}

int SearchFriendByNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nickName = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 pageNum = 2;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagenum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFriendByNameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchFriendByNameRequest*>(&from));
}

void SearchFriendByNameRequest::MergeFrom(const SearchFriendByNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchFriendByNameRequest::CopyFrom(const SearchFriendByNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFriendByNameRequest::IsInitialized() const {

  return true;
}

void SearchFriendByNameRequest::Swap(SearchFriendByNameRequest* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(pagenum_, other->pagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchFriendByNameRequest::GetTypeName() const {
  return "main.SearchFriendByNameRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchFriendByNameResponse::kFriendListFieldNumber;
#endif  // !_MSC_VER

SearchFriendByNameResponse::SearchFriendByNameResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SearchFriendByNameResponse)
}

void SearchFriendByNameResponse::InitAsDefaultInstance() {
}

SearchFriendByNameResponse::SearchFriendByNameResponse(const SearchFriendByNameResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SearchFriendByNameResponse)
}

void SearchFriendByNameResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchFriendByNameResponse::~SearchFriendByNameResponse() {
  // @@protoc_insertion_point(destructor:main.SearchFriendByNameResponse)
  SharedDtor();
}

void SearchFriendByNameResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchFriendByNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchFriendByNameResponse& SearchFriendByNameResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

SearchFriendByNameResponse* SearchFriendByNameResponse::default_instance_ = NULL;

SearchFriendByNameResponse* SearchFriendByNameResponse::New() const {
  return new SearchFriendByNameResponse;
}

void SearchFriendByNameResponse::Clear() {
  friendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchFriendByNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SearchFriendByNameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.FriendProto FriendList = 1;
      case 1: {
        if (tag == 10) {
         parse_FriendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FriendList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SearchFriendByNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SearchFriendByNameResponse)
  return false;
#undef DO_
}

void SearchFriendByNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SearchFriendByNameResponse)
  // repeated .main.FriendProto FriendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friendlist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SearchFriendByNameResponse)
}

int SearchFriendByNameResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.FriendProto FriendList = 1;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFriendByNameResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchFriendByNameResponse*>(&from));
}

void SearchFriendByNameResponse::MergeFrom(const SearchFriendByNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchFriendByNameResponse::CopyFrom(const SearchFriendByNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFriendByNameResponse::IsInitialized() const {

  return true;
}

void SearchFriendByNameResponse::Swap(SearchFriendByNameResponse* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchFriendByNameResponse::GetTypeName() const {
  return "main.SearchFriendByNameResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchFriendByInviteCodeRequest::kInviteCodeFieldNumber;
#endif  // !_MSC_VER

SearchFriendByInviteCodeRequest::SearchFriendByInviteCodeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SearchFriendByInviteCodeRequest)
}

void SearchFriendByInviteCodeRequest::InitAsDefaultInstance() {
}

SearchFriendByInviteCodeRequest::SearchFriendByInviteCodeRequest(const SearchFriendByInviteCodeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SearchFriendByInviteCodeRequest)
}

void SearchFriendByInviteCodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invitecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchFriendByInviteCodeRequest::~SearchFriendByInviteCodeRequest() {
  // @@protoc_insertion_point(destructor:main.SearchFriendByInviteCodeRequest)
  SharedDtor();
}

void SearchFriendByInviteCodeRequest::SharedDtor() {
  if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitecode_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchFriendByInviteCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchFriendByInviteCodeRequest& SearchFriendByInviteCodeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

SearchFriendByInviteCodeRequest* SearchFriendByInviteCodeRequest::default_instance_ = NULL;

SearchFriendByInviteCodeRequest* SearchFriendByInviteCodeRequest::New() const {
  return new SearchFriendByInviteCodeRequest;
}

void SearchFriendByInviteCodeRequest::Clear() {
  if (has_invitecode()) {
    if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      invitecode_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchFriendByInviteCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SearchFriendByInviteCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviteCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitecode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SearchFriendByInviteCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SearchFriendByInviteCodeRequest)
  return false;
#undef DO_
}

void SearchFriendByInviteCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SearchFriendByInviteCodeRequest)
  // optional string inviteCode = 1;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invitecode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SearchFriendByInviteCodeRequest)
}

int SearchFriendByInviteCodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inviteCode = 1;
    if (has_invitecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitecode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFriendByInviteCodeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchFriendByInviteCodeRequest*>(&from));
}

void SearchFriendByInviteCodeRequest::MergeFrom(const SearchFriendByInviteCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitecode()) {
      set_invitecode(from.invitecode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchFriendByInviteCodeRequest::CopyFrom(const SearchFriendByInviteCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFriendByInviteCodeRequest::IsInitialized() const {

  return true;
}

void SearchFriendByInviteCodeRequest::Swap(SearchFriendByInviteCodeRequest* other) {
  if (other != this) {
    std::swap(invitecode_, other->invitecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchFriendByInviteCodeRequest::GetTypeName() const {
  return "main.SearchFriendByInviteCodeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchFriendByInviteCodeResponse::kFriendFieldNumber;
#endif  // !_MSC_VER

SearchFriendByInviteCodeResponse::SearchFriendByInviteCodeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SearchFriendByInviteCodeResponse)
}

void SearchFriendByInviteCodeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend__ = const_cast< ::main::FriendProto*>(
      ::main::FriendProto::internal_default_instance());
#else
  friend__ = const_cast< ::main::FriendProto*>(&::main::FriendProto::default_instance());
#endif
}

SearchFriendByInviteCodeResponse::SearchFriendByInviteCodeResponse(const SearchFriendByInviteCodeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SearchFriendByInviteCodeResponse)
}

void SearchFriendByInviteCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  friend__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchFriendByInviteCodeResponse::~SearchFriendByInviteCodeResponse() {
  // @@protoc_insertion_point(destructor:main.SearchFriendByInviteCodeResponse)
  SharedDtor();
}

void SearchFriendByInviteCodeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete friend__;
  }
}

void SearchFriendByInviteCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchFriendByInviteCodeResponse& SearchFriendByInviteCodeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

SearchFriendByInviteCodeResponse* SearchFriendByInviteCodeResponse::default_instance_ = NULL;

SearchFriendByInviteCodeResponse* SearchFriendByInviteCodeResponse::New() const {
  return new SearchFriendByInviteCodeResponse;
}

void SearchFriendByInviteCodeResponse::Clear() {
  if (has_friend_()) {
    if (friend__ != NULL) friend__->::main::FriendProto::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SearchFriendByInviteCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SearchFriendByInviteCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.FriendProto friend = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SearchFriendByInviteCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SearchFriendByInviteCodeResponse)
  return false;
#undef DO_
}

void SearchFriendByInviteCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SearchFriendByInviteCodeResponse)
  // optional .main.FriendProto friend = 1;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friend_(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SearchFriendByInviteCodeResponse)
}

int SearchFriendByInviteCodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.FriendProto friend = 1;
    if (has_friend_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFriendByInviteCodeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchFriendByInviteCodeResponse*>(&from));
}

void SearchFriendByInviteCodeResponse::MergeFrom(const SearchFriendByInviteCodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_()) {
      mutable_friend_()->::main::FriendProto::MergeFrom(from.friend_());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SearchFriendByInviteCodeResponse::CopyFrom(const SearchFriendByInviteCodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFriendByInviteCodeResponse::IsInitialized() const {

  return true;
}

void SearchFriendByInviteCodeResponse::Swap(SearchFriendByInviteCodeResponse* other) {
  if (other != this) {
    std::swap(friend__, other->friend__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchFriendByInviteCodeResponse::GetTypeName() const {
  return "main.SearchFriendByInviteCodeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfoRequest::kFriendIdFieldNumber;
const int FriendInfoRequest::kTypeFieldNumber;
const int FriendInfoRequest::kOriginFieldNumber;
#endif  // !_MSC_VER

FriendInfoRequest::FriendInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FriendInfoRequest)
}

void FriendInfoRequest::InitAsDefaultInstance() {
}

FriendInfoRequest::FriendInfoRequest(const FriendInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FriendInfoRequest)
}

void FriendInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  type_ = 0;
  origin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfoRequest::~FriendInfoRequest() {
  // @@protoc_insertion_point(destructor:main.FriendInfoRequest)
  SharedDtor();
}

void FriendInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendInfoRequest& FriendInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

FriendInfoRequest* FriendInfoRequest::default_instance_ = NULL;

FriendInfoRequest* FriendInfoRequest::New() const {
  return new FriendInfoRequest;
}

void FriendInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(friendid_, origin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FriendInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_origin;
        break;
      }

      // optional int32 origin = 3;
      case 3: {
        if (tag == 24) {
         parse_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FriendInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FriendInfoRequest)
  return false;
#undef DO_
}

void FriendInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FriendInfoRequest)
  // optional int32 friendId = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->origin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FriendInfoRequest)
}

int FriendInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendId = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendInfoRequest*>(&from));
}

void FriendInfoRequest::MergeFrom(const FriendInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendInfoRequest::CopyFrom(const FriendInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfoRequest::IsInitialized() const {

  return true;
}

void FriendInfoRequest::Swap(FriendInfoRequest* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(type_, other->type_);
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendInfoRequest::GetTypeName() const {
  return "main.FriendInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfoResponse::kRoleFieldNumber;
#endif  // !_MSC_VER

FriendInfoResponse::FriendInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FriendInfoResponse)
}

void FriendInfoResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  role_ = const_cast< ::main::RoleInfo*>(
      ::main::RoleInfo::internal_default_instance());
#else
  role_ = const_cast< ::main::RoleInfo*>(&::main::RoleInfo::default_instance());
#endif
}

FriendInfoResponse::FriendInfoResponse(const FriendInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FriendInfoResponse)
}

void FriendInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfoResponse::~FriendInfoResponse() {
  // @@protoc_insertion_point(destructor:main.FriendInfoResponse)
  SharedDtor();
}

void FriendInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete role_;
  }
}

void FriendInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendInfoResponse& FriendInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

FriendInfoResponse* FriendInfoResponse::default_instance_ = NULL;

FriendInfoResponse* FriendInfoResponse::New() const {
  return new FriendInfoResponse;
}

void FriendInfoResponse::Clear() {
  if (has_role()) {
    if (role_ != NULL) role_->::main::RoleInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FriendInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.RoleInfo role = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FriendInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FriendInfoResponse)
  return false;
#undef DO_
}

void FriendInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FriendInfoResponse)
  // optional .main.RoleInfo role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->role(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FriendInfoResponse)
}

int FriendInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.RoleInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendInfoResponse*>(&from));
}

void FriendInfoResponse::MergeFrom(const FriendInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::main::RoleInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendInfoResponse::CopyFrom(const FriendInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfoResponse::IsInitialized() const {

  return true;
}

void FriendInfoResponse::Swap(FriendInfoResponse* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendInfoResponse::GetTypeName() const {
  return "main.FriendInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int AgreeFriendRequest::kFriendRoleIdFieldNumber;
#endif  // !_MSC_VER

AgreeFriendRequest::AgreeFriendRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AgreeFriendRequest)
}

void AgreeFriendRequest::InitAsDefaultInstance() {
}

AgreeFriendRequest::AgreeFriendRequest(const AgreeFriendRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AgreeFriendRequest)
}

void AgreeFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgreeFriendRequest::~AgreeFriendRequest() {
  // @@protoc_insertion_point(destructor:main.AgreeFriendRequest)
  SharedDtor();
}

void AgreeFriendRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AgreeFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AgreeFriendRequest& AgreeFriendRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

AgreeFriendRequest* AgreeFriendRequest::default_instance_ = NULL;

AgreeFriendRequest* AgreeFriendRequest::New() const {
  return new AgreeFriendRequest;
}

void AgreeFriendRequest::Clear() {
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AgreeFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AgreeFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendroleid_)));
          set_has_friendroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AgreeFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AgreeFriendRequest)
  return false;
#undef DO_
}

void AgreeFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AgreeFriendRequest)
  // optional int32 friendRoleId = 1;
  if (has_friendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AgreeFriendRequest)
}

int AgreeFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendRoleId = 1;
    if (has_friendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgreeFriendRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AgreeFriendRequest*>(&from));
}

void AgreeFriendRequest::MergeFrom(const AgreeFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleid()) {
      set_friendroleid(from.friendroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AgreeFriendRequest::CopyFrom(const AgreeFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreeFriendRequest::IsInitialized() const {

  return true;
}

void AgreeFriendRequest::Swap(AgreeFriendRequest* other) {
  if (other != this) {
    std::swap(friendroleid_, other->friendroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AgreeFriendRequest::GetTypeName() const {
  return "main.AgreeFriendRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AgreeFriendResponse::kStateFieldNumber;
const int AgreeFriendResponse::kFriendProtoFieldNumber;
#endif  // !_MSC_VER

AgreeFriendResponse::AgreeFriendResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AgreeFriendResponse)
}

void AgreeFriendResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendproto_ = const_cast< ::main::FriendProto*>(
      ::main::FriendProto::internal_default_instance());
#else
  friendproto_ = const_cast< ::main::FriendProto*>(&::main::FriendProto::default_instance());
#endif
}

AgreeFriendResponse::AgreeFriendResponse(const AgreeFriendResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AgreeFriendResponse)
}

void AgreeFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  friendproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgreeFriendResponse::~AgreeFriendResponse() {
  // @@protoc_insertion_point(destructor:main.AgreeFriendResponse)
  SharedDtor();
}

void AgreeFriendResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete friendproto_;
  }
}

void AgreeFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AgreeFriendResponse& AgreeFriendResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

AgreeFriendResponse* AgreeFriendResponse::default_instance_ = NULL;

AgreeFriendResponse* AgreeFriendResponse::New() const {
  return new AgreeFriendResponse;
}

void AgreeFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_friendproto()) {
      if (friendproto_ != NULL) friendproto_->::main::FriendProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AgreeFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AgreeFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendProto;
        break;
      }

      // optional .main.FriendProto friendProto = 2;
      case 2: {
        if (tag == 18) {
         parse_friendProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AgreeFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AgreeFriendResponse)
  return false;
#undef DO_
}

void AgreeFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AgreeFriendResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.FriendProto friendProto = 2;
  if (has_friendproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friendproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AgreeFriendResponse)
}

int AgreeFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.FriendProto friendProto = 2;
    if (has_friendproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgreeFriendResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AgreeFriendResponse*>(&from));
}

void AgreeFriendResponse::MergeFrom(const AgreeFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_friendproto()) {
      mutable_friendproto()->::main::FriendProto::MergeFrom(from.friendproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AgreeFriendResponse::CopyFrom(const AgreeFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgreeFriendResponse::IsInitialized() const {

  return true;
}

void AgreeFriendResponse::Swap(AgreeFriendResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(friendproto_, other->friendproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AgreeFriendResponse::GetTypeName() const {
  return "main.AgreeFriendResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlockRequest::kFriendRoleIdFieldNumber;
#endif  // !_MSC_VER

AddBlockRequest::AddBlockRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AddBlockRequest)
}

void AddBlockRequest::InitAsDefaultInstance() {
}

AddBlockRequest::AddBlockRequest(const AddBlockRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AddBlockRequest)
}

void AddBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlockRequest::~AddBlockRequest() {
  // @@protoc_insertion_point(destructor:main.AddBlockRequest)
  SharedDtor();
}

void AddBlockRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AddBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddBlockRequest& AddBlockRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

AddBlockRequest* AddBlockRequest::default_instance_ = NULL;

AddBlockRequest* AddBlockRequest::New() const {
  return new AddBlockRequest;
}

void AddBlockRequest::Clear() {
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AddBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AddBlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendroleid_)));
          set_has_friendroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AddBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AddBlockRequest)
  return false;
#undef DO_
}

void AddBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AddBlockRequest)
  // optional int32 friendRoleId = 1;
  if (has_friendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AddBlockRequest)
}

int AddBlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendRoleId = 1;
    if (has_friendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlockRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddBlockRequest*>(&from));
}

void AddBlockRequest::MergeFrom(const AddBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleid()) {
      set_friendroleid(from.friendroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AddBlockRequest::CopyFrom(const AddBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockRequest::IsInitialized() const {

  return true;
}

void AddBlockRequest::Swap(AddBlockRequest* other) {
  if (other != this) {
    std::swap(friendroleid_, other->friendroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddBlockRequest::GetTypeName() const {
  return "main.AddBlockRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlockResponse::kStateFieldNumber;
const int AddBlockResponse::kFriendProtoFieldNumber;
#endif  // !_MSC_VER

AddBlockResponse::AddBlockResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AddBlockResponse)
}

void AddBlockResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendproto_ = const_cast< ::main::FriendProto*>(
      ::main::FriendProto::internal_default_instance());
#else
  friendproto_ = const_cast< ::main::FriendProto*>(&::main::FriendProto::default_instance());
#endif
}

AddBlockResponse::AddBlockResponse(const AddBlockResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AddBlockResponse)
}

void AddBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  friendproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlockResponse::~AddBlockResponse() {
  // @@protoc_insertion_point(destructor:main.AddBlockResponse)
  SharedDtor();
}

void AddBlockResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete friendproto_;
  }
}

void AddBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddBlockResponse& AddBlockResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

AddBlockResponse* AddBlockResponse::default_instance_ = NULL;

AddBlockResponse* AddBlockResponse::New() const {
  return new AddBlockResponse;
}

void AddBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_friendproto()) {
      if (friendproto_ != NULL) friendproto_->::main::FriendProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AddBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AddBlockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendProto;
        break;
      }

      // optional .main.FriendProto friendProto = 2;
      case 2: {
        if (tag == 18) {
         parse_friendProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AddBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AddBlockResponse)
  return false;
#undef DO_
}

void AddBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AddBlockResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.FriendProto friendProto = 2;
  if (has_friendproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friendproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AddBlockResponse)
}

int AddBlockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.FriendProto friendProto = 2;
    if (has_friendproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlockResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddBlockResponse*>(&from));
}

void AddBlockResponse::MergeFrom(const AddBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_friendproto()) {
      mutable_friendproto()->::main::FriendProto::MergeFrom(from.friendproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AddBlockResponse::CopyFrom(const AddBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockResponse::IsInitialized() const {

  return true;
}

void AddBlockResponse::Swap(AddBlockResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(friendproto_, other->friendproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddBlockResponse::GetTypeName() const {
  return "main.AddBlockResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UnagreeFriendRequest::kFriendRoleIdFieldNumber;
#endif  // !_MSC_VER

UnagreeFriendRequest::UnagreeFriendRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UnagreeFriendRequest)
}

void UnagreeFriendRequest::InitAsDefaultInstance() {
}

UnagreeFriendRequest::UnagreeFriendRequest(const UnagreeFriendRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UnagreeFriendRequest)
}

void UnagreeFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnagreeFriendRequest::~UnagreeFriendRequest() {
  // @@protoc_insertion_point(destructor:main.UnagreeFriendRequest)
  SharedDtor();
}

void UnagreeFriendRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnagreeFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnagreeFriendRequest& UnagreeFriendRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

UnagreeFriendRequest* UnagreeFriendRequest::default_instance_ = NULL;

UnagreeFriendRequest* UnagreeFriendRequest::New() const {
  return new UnagreeFriendRequest;
}

void UnagreeFriendRequest::Clear() {
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UnagreeFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UnagreeFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendroleid_)));
          set_has_friendroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UnagreeFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UnagreeFriendRequest)
  return false;
#undef DO_
}

void UnagreeFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UnagreeFriendRequest)
  // optional int32 friendRoleId = 1;
  if (has_friendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UnagreeFriendRequest)
}

int UnagreeFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendRoleId = 1;
    if (has_friendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnagreeFriendRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnagreeFriendRequest*>(&from));
}

void UnagreeFriendRequest::MergeFrom(const UnagreeFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleid()) {
      set_friendroleid(from.friendroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UnagreeFriendRequest::CopyFrom(const UnagreeFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnagreeFriendRequest::IsInitialized() const {

  return true;
}

void UnagreeFriendRequest::Swap(UnagreeFriendRequest* other) {
  if (other != this) {
    std::swap(friendroleid_, other->friendroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnagreeFriendRequest::GetTypeName() const {
  return "main.UnagreeFriendRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UnagreeFriendResponse::kStateFieldNumber;
#endif  // !_MSC_VER

UnagreeFriendResponse::UnagreeFriendResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UnagreeFriendResponse)
}

void UnagreeFriendResponse::InitAsDefaultInstance() {
}

UnagreeFriendResponse::UnagreeFriendResponse(const UnagreeFriendResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UnagreeFriendResponse)
}

void UnagreeFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnagreeFriendResponse::~UnagreeFriendResponse() {
  // @@protoc_insertion_point(destructor:main.UnagreeFriendResponse)
  SharedDtor();
}

void UnagreeFriendResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnagreeFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnagreeFriendResponse& UnagreeFriendResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

UnagreeFriendResponse* UnagreeFriendResponse::default_instance_ = NULL;

UnagreeFriendResponse* UnagreeFriendResponse::New() const {
  return new UnagreeFriendResponse;
}

void UnagreeFriendResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UnagreeFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UnagreeFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UnagreeFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UnagreeFriendResponse)
  return false;
#undef DO_
}

void UnagreeFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UnagreeFriendResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UnagreeFriendResponse)
}

int UnagreeFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnagreeFriendResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnagreeFriendResponse*>(&from));
}

void UnagreeFriendResponse::MergeFrom(const UnagreeFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UnagreeFriendResponse::CopyFrom(const UnagreeFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnagreeFriendResponse::IsInitialized() const {

  return true;
}

void UnagreeFriendResponse::Swap(UnagreeFriendResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnagreeFriendResponse::GetTypeName() const {
  return "main.UnagreeFriendResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBlockRequest::kFriendRoleIdFieldNumber;
#endif  // !_MSC_VER

DeleteBlockRequest::DeleteBlockRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteBlockRequest)
}

void DeleteBlockRequest::InitAsDefaultInstance() {
}

DeleteBlockRequest::DeleteBlockRequest(const DeleteBlockRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteBlockRequest)
}

void DeleteBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBlockRequest::~DeleteBlockRequest() {
  // @@protoc_insertion_point(destructor:main.DeleteBlockRequest)
  SharedDtor();
}

void DeleteBlockRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteBlockRequest& DeleteBlockRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

DeleteBlockRequest* DeleteBlockRequest::default_instance_ = NULL;

DeleteBlockRequest* DeleteBlockRequest::New() const {
  return new DeleteBlockRequest;
}

void DeleteBlockRequest::Clear() {
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteBlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendroleid_)));
          set_has_friendroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteBlockRequest)
  return false;
#undef DO_
}

void DeleteBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteBlockRequest)
  // optional int32 friendRoleId = 1;
  if (has_friendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteBlockRequest)
}

int DeleteBlockRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendRoleId = 1;
    if (has_friendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBlockRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteBlockRequest*>(&from));
}

void DeleteBlockRequest::MergeFrom(const DeleteBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleid()) {
      set_friendroleid(from.friendroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteBlockRequest::CopyFrom(const DeleteBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBlockRequest::IsInitialized() const {

  return true;
}

void DeleteBlockRequest::Swap(DeleteBlockRequest* other) {
  if (other != this) {
    std::swap(friendroleid_, other->friendroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteBlockRequest::GetTypeName() const {
  return "main.DeleteBlockRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBlockResponse::kStateFieldNumber;
#endif  // !_MSC_VER

DeleteBlockResponse::DeleteBlockResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteBlockResponse)
}

void DeleteBlockResponse::InitAsDefaultInstance() {
}

DeleteBlockResponse::DeleteBlockResponse(const DeleteBlockResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteBlockResponse)
}

void DeleteBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBlockResponse::~DeleteBlockResponse() {
  // @@protoc_insertion_point(destructor:main.DeleteBlockResponse)
  SharedDtor();
}

void DeleteBlockResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteBlockResponse& DeleteBlockResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

DeleteBlockResponse* DeleteBlockResponse::default_instance_ = NULL;

DeleteBlockResponse* DeleteBlockResponse::New() const {
  return new DeleteBlockResponse;
}

void DeleteBlockResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteBlockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteBlockResponse)
  return false;
#undef DO_
}

void DeleteBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteBlockResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteBlockResponse)
}

int DeleteBlockResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBlockResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteBlockResponse*>(&from));
}

void DeleteBlockResponse::MergeFrom(const DeleteBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteBlockResponse::CopyFrom(const DeleteBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBlockResponse::IsInitialized() const {

  return true;
}

void DeleteBlockResponse::Swap(DeleteBlockResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteBlockResponse::GetTypeName() const {
  return "main.DeleteBlockResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendRequest::kFriendRoleIdFieldNumber;
#endif  // !_MSC_VER

DeleteFriendRequest::DeleteFriendRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteFriendRequest)
}

void DeleteFriendRequest::InitAsDefaultInstance() {
}

DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteFriendRequest)
}

void DeleteFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendRequest::~DeleteFriendRequest() {
  // @@protoc_insertion_point(destructor:main.DeleteFriendRequest)
  SharedDtor();
}

void DeleteFriendRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteFriendRequest& DeleteFriendRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

DeleteFriendRequest* DeleteFriendRequest::default_instance_ = NULL;

DeleteFriendRequest* DeleteFriendRequest::New() const {
  return new DeleteFriendRequest;
}

void DeleteFriendRequest::Clear() {
  friendroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendroleid_)));
          set_has_friendroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteFriendRequest)
  return false;
#undef DO_
}

void DeleteFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteFriendRequest)
  // optional int32 friendRoleId = 1;
  if (has_friendroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteFriendRequest)
}

int DeleteFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendRoleId = 1;
    if (has_friendroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteFriendRequest*>(&from));
}

void DeleteFriendRequest::MergeFrom(const DeleteFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendroleid()) {
      set_friendroleid(from.friendroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {

  return true;
}

void DeleteFriendRequest::Swap(DeleteFriendRequest* other) {
  if (other != this) {
    std::swap(friendroleid_, other->friendroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteFriendRequest::GetTypeName() const {
  return "main.DeleteFriendRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendResponse::kStateFieldNumber;
const int DeleteFriendResponse::kFriendProtoFieldNumber;
#endif  // !_MSC_VER

DeleteFriendResponse::DeleteFriendResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteFriendResponse)
}

void DeleteFriendResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendproto_ = const_cast< ::main::FriendProto*>(
      ::main::FriendProto::internal_default_instance());
#else
  friendproto_ = const_cast< ::main::FriendProto*>(&::main::FriendProto::default_instance());
#endif
}

DeleteFriendResponse::DeleteFriendResponse(const DeleteFriendResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteFriendResponse)
}

void DeleteFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  friendproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendResponse::~DeleteFriendResponse() {
  // @@protoc_insertion_point(destructor:main.DeleteFriendResponse)
  SharedDtor();
}

void DeleteFriendResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete friendproto_;
  }
}

void DeleteFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteFriendResponse& DeleteFriendResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

DeleteFriendResponse* DeleteFriendResponse::default_instance_ = NULL;

DeleteFriendResponse* DeleteFriendResponse::New() const {
  return new DeleteFriendResponse;
}

void DeleteFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_friendproto()) {
      if (friendproto_ != NULL) friendproto_->::main::FriendProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendProto;
        break;
      }

      // optional .main.FriendProto friendProto = 2;
      case 2: {
        if (tag == 18) {
         parse_friendProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteFriendResponse)
  return false;
#undef DO_
}

void DeleteFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteFriendResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.FriendProto friendProto = 2;
  if (has_friendproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friendproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteFriendResponse)
}

int DeleteFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.FriendProto friendProto = 2;
    if (has_friendproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteFriendResponse*>(&from));
}

void DeleteFriendResponse::MergeFrom(const DeleteFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_friendproto()) {
      mutable_friendproto()->::main::FriendProto::MergeFrom(from.friendproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteFriendResponse::CopyFrom(const DeleteFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendResponse::IsInitialized() const {

  return true;
}

void DeleteFriendResponse::Swap(DeleteFriendResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(friendproto_, other->friendproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteFriendResponse::GetTypeName() const {
  return "main.DeleteFriendResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

expandFriendRequest::expandFriendRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.expandFriendRequest)
}

void expandFriendRequest::InitAsDefaultInstance() {
}

expandFriendRequest::expandFriendRequest(const expandFriendRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.expandFriendRequest)
}

void expandFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

expandFriendRequest::~expandFriendRequest() {
  // @@protoc_insertion_point(destructor:main.expandFriendRequest)
  SharedDtor();
}

void expandFriendRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void expandFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const expandFriendRequest& expandFriendRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

expandFriendRequest* expandFriendRequest::default_instance_ = NULL;

expandFriendRequest* expandFriendRequest::New() const {
  return new expandFriendRequest;
}

void expandFriendRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool expandFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.expandFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.expandFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.expandFriendRequest)
  return false;
#undef DO_
}

void expandFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.expandFriendRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.expandFriendRequest)
}

int expandFriendRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void expandFriendRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const expandFriendRequest*>(&from));
}

void expandFriendRequest::MergeFrom(const expandFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void expandFriendRequest::CopyFrom(const expandFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool expandFriendRequest::IsInitialized() const {

  return true;
}

void expandFriendRequest::Swap(expandFriendRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string expandFriendRequest::GetTypeName() const {
  return "main.expandFriendRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int expandFriendResponse::kStateFieldNumber;
#endif  // !_MSC_VER

expandFriendResponse::expandFriendResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.expandFriendResponse)
}

void expandFriendResponse::InitAsDefaultInstance() {
}

expandFriendResponse::expandFriendResponse(const expandFriendResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.expandFriendResponse)
}

void expandFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

expandFriendResponse::~expandFriendResponse() {
  // @@protoc_insertion_point(destructor:main.expandFriendResponse)
  SharedDtor();
}

void expandFriendResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void expandFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const expandFriendResponse& expandFriendResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

expandFriendResponse* expandFriendResponse::default_instance_ = NULL;

expandFriendResponse* expandFriendResponse::New() const {
  return new expandFriendResponse;
}

void expandFriendResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool expandFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.expandFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.expandFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.expandFriendResponse)
  return false;
#undef DO_
}

void expandFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.expandFriendResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.expandFriendResponse)
}

int expandFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void expandFriendResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const expandFriendResponse*>(&from));
}

void expandFriendResponse::MergeFrom(const expandFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void expandFriendResponse::CopyFrom(const expandFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool expandFriendResponse::IsInitialized() const {

  return true;
}

void expandFriendResponse::Swap(expandFriendResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string expandFriendResponse::GetTypeName() const {
  return "main.expandFriendResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendProto::kRoleIdFieldNumber;
const int FriendProto::kFriendIdFieldNumber;
const int FriendProto::kFriendNameFieldNumber;
const int FriendProto::kTypeIdFieldNumber;
const int FriendProto::kIsOnlineFieldNumber;
const int FriendProto::kLevelFieldNumber;
const int FriendProto::kTimeFieldNumber;
const int FriendProto::kImageFieldNumber;
const int FriendProto::kIsGiftPowerFieldNumber;
#endif  // !_MSC_VER

FriendProto::FriendProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FriendProto)
}

void FriendProto::InitAsDefaultInstance() {
}

FriendProto::FriendProto(const FriendProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FriendProto)
}

void FriendProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  friendid_ = 0;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typeid__ = 0;
  isonline_ = false;
  level_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  image_ = 0;
  isgiftpower_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendProto::~FriendProto() {
  // @@protoc_insertion_point(destructor:main.FriendProto)
  SharedDtor();
}

void FriendProto::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendProto& FriendProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

FriendProto* FriendProto::default_instance_ = NULL;

FriendProto* FriendProto::New() const {
  return new FriendProto;
}

void FriendProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, friendid_);
    ZR_(typeid__, image_);
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friendname_->clear();
      }
    }
  }
  isgiftpower_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FriendProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FriendProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friendId;
        break;
      }

      // optional int32 friendId = 2;
      case 2: {
        if (tag == 16) {
         parse_friendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friendName;
        break;
      }

      // optional string friendName = 3;
      case 3: {
        if (tag == 26) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_typeId;
        break;
      }

      // optional int32 typeId = 4;
      case 4: {
        if (tag == 32) {
         parse_typeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isOnline;
        break;
      }

      // optional bool isOnline = 5;
      case 5: {
        if (tag == 40) {
         parse_isOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional int64 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_image;
        break;
      }

      // optional int32 image = 8;
      case 8: {
        if (tag == 64) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isGiftPower;
        break;
      }

      // optional int32 isGiftPower = 9;
      case 9: {
        if (tag == 72) {
         parse_isGiftPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isgiftpower_)));
          set_has_isgiftpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FriendProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FriendProto)
  return false;
#undef DO_
}

void FriendProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FriendProto)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 friendId = 2;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friendid(), output);
  }

  // optional string friendName = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->friendname(), output);
  }

  // optional int32 typeId = 4;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->typeid_(), output);
  }

  // optional bool isOnline = 5;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isonline(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int64 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->time(), output);
  }

  // optional int32 image = 8;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->image(), output);
  }

  // optional int32 isGiftPower = 9;
  if (has_isgiftpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isgiftpower(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FriendProto)
}

int FriendProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 friendId = 2;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }

    // optional string friendName = 3;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // optional int32 typeId = 4;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional bool isOnline = 5;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 image = 8;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isGiftPower = 9;
    if (has_isgiftpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isgiftpower());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendProto*>(&from));
}

void FriendProto::MergeFrom(const FriendProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isgiftpower()) {
      set_isgiftpower(from.isgiftpower());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FriendProto::CopyFrom(const FriendProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendProto::IsInitialized() const {

  return true;
}

void FriendProto::Swap(FriendProto* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(friendid_, other->friendid_);
    std::swap(friendname_, other->friendname_);
    std::swap(typeid__, other->typeid__);
    std::swap(isonline_, other->isonline_);
    std::swap(level_, other->level_);
    std::swap(time_, other->time_);
    std::swap(image_, other->image_);
    std::swap(isgiftpower_, other->isgiftpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendProto::GetTypeName() const {
  return "main.FriendProto";
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfo::kRoleIdFieldNumber;
const int RoleInfo::kNameFieldNumber;
const int RoleInfo::kNicknameFieldNumber;
const int RoleInfo::kSsidFieldNumber;
const int RoleInfo::kExpFieldNumber;
const int RoleInfo::kLevelFieldNumber;
const int RoleInfo::kVipLevelFieldNumber;
const int RoleInfo::kCoinsFieldNumber;
const int RoleInfo::kGoldFieldNumber;
const int RoleInfo::kCountryFieldNumber;
const int RoleInfo::kImageFieldNumber;
const int RoleInfo::kPowerFieldNumber;
const int RoleInfo::kCombatValueFieldNumber;
const int RoleInfo::kBagSizeFieldNumber;
const int RoleInfo::kPvpRankNameFieldNumber;
const int RoleInfo::kModifyNickNameCountFieldNumber;
const int RoleInfo::kPrestigeFieldNumber;
const int RoleInfo::kEnterPVPCountFieldNumber;
const int RoleInfo::kPvpWinCountFieldNumber;
const int RoleInfo::kPvpTopFieldNumber;
const int RoleInfo::kGoverningFieldNumber;
const int RoleInfo::kGoverningLimitFieldNumber;
const int RoleInfo::kSpeedFieldNumber;
const int RoleInfo::kHpFieldNumber;
const int RoleInfo::kRoleTeamInfoFieldNumber;
#endif  // !_MSC_VER

RoleInfo::RoleInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RoleInfo)
}

void RoleInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roleteaminfo_ = const_cast< ::main::RoleTeamInfo*>(
      ::main::RoleTeamInfo::internal_default_instance());
#else
  roleteaminfo_ = const_cast< ::main::RoleTeamInfo*>(&::main::RoleTeamInfo::default_instance());
#endif
}

RoleInfo::RoleInfo(const RoleInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RoleInfo)
}

void RoleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_ = 0;
  level_ = 0;
  viplevel_ = 0;
  coins_ = 0;
  gold_ = 0;
  country_ = 0;
  image_ = 0;
  power_ = 0;
  combatvalue_ = 0;
  bagsize_ = 0;
  pvprankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifynicknamecount_ = 0;
  prestige_ = 0;
  enterpvpcount_ = 0;
  pvpwincount_ = 0;
  pvptop_ = 0;
  governing_ = 0;
  governinglimit_ = 0;
  speed_ = 0;
  hp_ = 0;
  roleteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfo::~RoleInfo() {
  // @@protoc_insertion_point(destructor:main.RoleInfo)
  SharedDtor();
}

void RoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (ssid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ssid_;
  }
  if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvprankname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete roleteaminfo_;
  }
}

void RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoleInfo& RoleInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

RoleInfo* RoleInfo::default_instance_ = NULL;

RoleInfo* RoleInfo::New() const {
  return new RoleInfo;
}

void RoleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, exp_);
    ZR_(level_, coins_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_ssid()) {
      if (ssid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ssid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(gold_, combatvalue_);
    ZR_(bagsize_, modifynicknamecount_);
    if (has_pvprankname()) {
      if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pvprankname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(prestige_, hp_);
  }
  if (has_roleteaminfo()) {
    if (roleteaminfo_ != NULL) roleteaminfo_->::main::RoleTeamInfo::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ssid;
        break;
      }

      // optional string ssid = 4;
      case 4: {
        if (tag == 34) {
         parse_ssid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (tag == 40) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coins;
        break;
      }

      // optional int32 coins = 8;
      case 8: {
        if (tag == 64) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gold;
        break;
      }

      // optional int32 gold = 9;
      case 9: {
        if (tag == 72) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_country;
        break;
      }

      // optional int32 country = 10;
      case 10: {
        if (tag == 80) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_image;
        break;
      }

      // optional int32 image = 11;
      case 11: {
        if (tag == 88) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_power;
        break;
      }

      // optional int32 power = 12;
      case 12: {
        if (tag == 96) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_combatValue;
        break;
      }

      // optional int32 combatValue = 13;
      case 13: {
        if (tag == 104) {
         parse_combatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_bagSize;
        break;
      }

      // optional int32 bagSize = 14;
      case 14: {
        if (tag == 112) {
         parse_bagSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagsize_)));
          set_has_bagsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_pvpRankName;
        break;
      }

      // optional string pvpRankName = 15;
      case 15: {
        if (tag == 122) {
         parse_pvpRankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvprankname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_modifyNickNameCount;
        break;
      }

      // optional int32 modifyNickNameCount = 16;
      case 16: {
        if (tag == 128) {
         parse_modifyNickNameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modifynicknamecount_)));
          set_has_modifynicknamecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_prestige;
        break;
      }

      // optional int32 prestige = 17;
      case 17: {
        if (tag == 136) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_enterPVPCount;
        break;
      }

      // optional int32 enterPVPCount = 18;
      case 18: {
        if (tag == 144) {
         parse_enterPVPCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enterpvpcount_)));
          set_has_enterpvpcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_pvpWinCount;
        break;
      }

      // optional int32 pvpWinCount = 19;
      case 19: {
        if (tag == 152) {
         parse_pvpWinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpwincount_)));
          set_has_pvpwincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_pvpTop;
        break;
      }

      // optional int32 pvpTop = 20;
      case 20: {
        if (tag == 160) {
         parse_pvpTop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvptop_)));
          set_has_pvptop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_governing;
        break;
      }

      // optional int32 governing = 21;
      case 21: {
        if (tag == 168) {
         parse_governing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &governing_)));
          set_has_governing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_GoverningLimit;
        break;
      }

      // optional int32 GoverningLimit = 22;
      case 22: {
        if (tag == 176) {
         parse_GoverningLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &governinglimit_)));
          set_has_governinglimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_speed;
        break;
      }

      // optional int32 speed = 23;
      case 23: {
        if (tag == 184) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_hp;
        break;
      }

      // optional int32 hp = 24;
      case 24: {
        if (tag == 192) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_roleTeamInfo;
        break;
      }

      // optional .main.RoleTeamInfo roleTeamInfo = 25;
      case 25: {
        if (tag == 202) {
         parse_roleTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RoleInfo)
  return false;
#undef DO_
}

void RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RoleInfo)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string ssid = 4;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ssid(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 vipLevel = 7;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplevel(), output);
  }

  // optional int32 coins = 8;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coins(), output);
  }

  // optional int32 gold = 9;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gold(), output);
  }

  // optional int32 country = 10;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->country(), output);
  }

  // optional int32 image = 11;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->image(), output);
  }

  // optional int32 power = 12;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->power(), output);
  }

  // optional int32 combatValue = 13;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->combatvalue(), output);
  }

  // optional int32 bagSize = 14;
  if (has_bagsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bagsize(), output);
  }

  // optional string pvpRankName = 15;
  if (has_pvprankname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->pvprankname(), output);
  }

  // optional int32 modifyNickNameCount = 16;
  if (has_modifynicknamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->modifynicknamecount(), output);
  }

  // optional int32 prestige = 17;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->prestige(), output);
  }

  // optional int32 enterPVPCount = 18;
  if (has_enterpvpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->enterpvpcount(), output);
  }

  // optional int32 pvpWinCount = 19;
  if (has_pvpwincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->pvpwincount(), output);
  }

  // optional int32 pvpTop = 20;
  if (has_pvptop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->pvptop(), output);
  }

  // optional int32 governing = 21;
  if (has_governing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->governing(), output);
  }

  // optional int32 GoverningLimit = 22;
  if (has_governinglimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->governinglimit(), output);
  }

  // optional int32 speed = 23;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->speed(), output);
  }

  // optional int32 hp = 24;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->hp(), output);
  }

  // optional .main.RoleTeamInfo roleTeamInfo = 25;
  if (has_roleteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->roleteaminfo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RoleInfo)
}

int RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string ssid = 4;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssid());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 vipLevel = 7;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 coins = 8;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gold = 9;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 country = 10;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 image = 11;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

    // optional int32 power = 12;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 combatValue = 13;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

    // optional int32 bagSize = 14;
    if (has_bagsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagsize());
    }

    // optional string pvpRankName = 15;
    if (has_pvprankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvprankname());
    }

    // optional int32 modifyNickNameCount = 16;
    if (has_modifynicknamecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modifynicknamecount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 prestige = 17;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige());
    }

    // optional int32 enterPVPCount = 18;
    if (has_enterpvpcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enterpvpcount());
    }

    // optional int32 pvpWinCount = 19;
    if (has_pvpwincount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpwincount());
    }

    // optional int32 pvpTop = 20;
    if (has_pvptop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvptop());
    }

    // optional int32 governing = 21;
    if (has_governing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->governing());
    }

    // optional int32 GoverningLimit = 22;
    if (has_governinglimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->governinglimit());
    }

    // optional int32 speed = 23;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 hp = 24;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .main.RoleTeamInfo roleTeamInfo = 25;
    if (has_roleteaminfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleteaminfo());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoleInfo*>(&from));
}

void RoleInfo::MergeFrom(const RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_bagsize()) {
      set_bagsize(from.bagsize());
    }
    if (from.has_pvprankname()) {
      set_pvprankname(from.pvprankname());
    }
    if (from.has_modifynicknamecount()) {
      set_modifynicknamecount(from.modifynicknamecount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_enterpvpcount()) {
      set_enterpvpcount(from.enterpvpcount());
    }
    if (from.has_pvpwincount()) {
      set_pvpwincount(from.pvpwincount());
    }
    if (from.has_pvptop()) {
      set_pvptop(from.pvptop());
    }
    if (from.has_governing()) {
      set_governing(from.governing());
    }
    if (from.has_governinglimit()) {
      set_governinglimit(from.governinglimit());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_roleteaminfo()) {
      mutable_roleteaminfo()->::main::RoleTeamInfo::MergeFrom(from.roleteaminfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {

  return true;
}

void RoleInfo::Swap(RoleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(nickname_, other->nickname_);
    std::swap(ssid_, other->ssid_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(coins_, other->coins_);
    std::swap(gold_, other->gold_);
    std::swap(country_, other->country_);
    std::swap(image_, other->image_);
    std::swap(power_, other->power_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(bagsize_, other->bagsize_);
    std::swap(pvprankname_, other->pvprankname_);
    std::swap(modifynicknamecount_, other->modifynicknamecount_);
    std::swap(prestige_, other->prestige_);
    std::swap(enterpvpcount_, other->enterpvpcount_);
    std::swap(pvpwincount_, other->pvpwincount_);
    std::swap(pvptop_, other->pvptop_);
    std::swap(governing_, other->governing_);
    std::swap(governinglimit_, other->governinglimit_);
    std::swap(speed_, other->speed_);
    std::swap(hp_, other->hp_);
    std::swap(roleteaminfo_, other->roleteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoleInfo::GetTypeName() const {
  return "main.RoleInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RoleTeamInfo::kRedSoldierIdFieldNumber;
const int RoleTeamInfo::kGreenSoldierIdFieldNumber;
const int RoleTeamInfo::kBlueSoldierIdFieldNumber;
const int RoleTeamInfo::kLordOfficerIdFieldNumber;
const int RoleTeamInfo::kSoldierCardItemProtoFieldNumber;
const int RoleTeamInfo::kTeamOfficerCardItemInfoFieldNumber;
const int RoleTeamInfo::kPvpOfficerCardItemInfoFieldNumber;
#endif  // !_MSC_VER

RoleTeamInfo::RoleTeamInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RoleTeamInfo)
}

void RoleTeamInfo::InitAsDefaultInstance() {
}

RoleTeamInfo::RoleTeamInfo(const RoleTeamInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RoleTeamInfo)
}

void RoleTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  redsoldierid_ = 0;
  greensoldierid_ = 0;
  bluesoldierid_ = 0;
  lordofficerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleTeamInfo::~RoleTeamInfo() {
  // @@protoc_insertion_point(destructor:main.RoleTeamInfo)
  SharedDtor();
}

void RoleTeamInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoleTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoleTeamInfo& RoleTeamInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

RoleTeamInfo* RoleTeamInfo::default_instance_ = NULL;

RoleTeamInfo* RoleTeamInfo::New() const {
  return new RoleTeamInfo;
}

void RoleTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(redsoldierid_, lordofficerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  soldiercarditemproto_.Clear();
  teamofficercarditeminfo_.Clear();
  pvpofficercarditeminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RoleTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RoleTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 redSoldierId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redsoldierid_)));
          set_has_redsoldierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_greenSoldierId;
        break;
      }

      // optional int32 greenSoldierId = 2;
      case 2: {
        if (tag == 16) {
         parse_greenSoldierId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &greensoldierid_)));
          set_has_greensoldierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blueSoldierId;
        break;
      }

      // optional int32 blueSoldierId = 3;
      case 3: {
        if (tag == 24) {
         parse_blueSoldierId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluesoldierid_)));
          set_has_bluesoldierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lordOfficerId;
        break;
      }

      // optional int32 lordOfficerId = 4;
      case 4: {
        if (tag == 32) {
         parse_lordOfficerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordofficerid_)));
          set_has_lordofficerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_soldierCardItemProto;
        break;
      }

      // repeated .main.SoldierCardItemProto soldierCardItemProto = 5;
      case 5: {
        if (tag == 42) {
         parse_soldierCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_soldierCardItemProto;
        if (input->ExpectTag(50)) goto parse_teamOfficerCardItemInfo;
        break;
      }

      // repeated .main.TeamOfficerCardItemInfo teamOfficerCardItemInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_teamOfficerCardItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamofficercarditeminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_teamOfficerCardItemInfo;
        if (input->ExpectTag(58)) goto parse_pvpOfficerCardItemInfo;
        break;
      }

      // repeated .main.PvpOfficerCardItemInfo pvpOfficerCardItemInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_pvpOfficerCardItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pvpofficercarditeminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pvpOfficerCardItemInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RoleTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RoleTeamInfo)
  return false;
#undef DO_
}

void RoleTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RoleTeamInfo)
  // optional int32 redSoldierId = 1;
  if (has_redsoldierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->redsoldierid(), output);
  }

  // optional int32 greenSoldierId = 2;
  if (has_greensoldierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->greensoldierid(), output);
  }

  // optional int32 blueSoldierId = 3;
  if (has_bluesoldierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bluesoldierid(), output);
  }

  // optional int32 lordOfficerId = 4;
  if (has_lordofficerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lordofficerid(), output);
  }

  // repeated .main.SoldierCardItemProto soldierCardItemProto = 5;
  for (int i = 0; i < this->soldiercarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->soldiercarditemproto(i), output);
  }

  // repeated .main.TeamOfficerCardItemInfo teamOfficerCardItemInfo = 6;
  for (int i = 0; i < this->teamofficercarditeminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->teamofficercarditeminfo(i), output);
  }

  // repeated .main.PvpOfficerCardItemInfo pvpOfficerCardItemInfo = 7;
  for (int i = 0; i < this->pvpofficercarditeminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->pvpofficercarditeminfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RoleTeamInfo)
}

int RoleTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 redSoldierId = 1;
    if (has_redsoldierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redsoldierid());
    }

    // optional int32 greenSoldierId = 2;
    if (has_greensoldierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->greensoldierid());
    }

    // optional int32 blueSoldierId = 3;
    if (has_bluesoldierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluesoldierid());
    }

    // optional int32 lordOfficerId = 4;
    if (has_lordofficerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordofficerid());
    }

  }
  // repeated .main.SoldierCardItemProto soldierCardItemProto = 5;
  total_size += 1 * this->soldiercarditemproto_size();
  for (int i = 0; i < this->soldiercarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiercarditemproto(i));
  }

  // repeated .main.TeamOfficerCardItemInfo teamOfficerCardItemInfo = 6;
  total_size += 1 * this->teamofficercarditeminfo_size();
  for (int i = 0; i < this->teamofficercarditeminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamofficercarditeminfo(i));
  }

  // repeated .main.PvpOfficerCardItemInfo pvpOfficerCardItemInfo = 7;
  total_size += 1 * this->pvpofficercarditeminfo_size();
  for (int i = 0; i < this->pvpofficercarditeminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvpofficercarditeminfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleTeamInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoleTeamInfo*>(&from));
}

void RoleTeamInfo::MergeFrom(const RoleTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiercarditemproto_.MergeFrom(from.soldiercarditemproto_);
  teamofficercarditeminfo_.MergeFrom(from.teamofficercarditeminfo_);
  pvpofficercarditeminfo_.MergeFrom(from.pvpofficercarditeminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redsoldierid()) {
      set_redsoldierid(from.redsoldierid());
    }
    if (from.has_greensoldierid()) {
      set_greensoldierid(from.greensoldierid());
    }
    if (from.has_bluesoldierid()) {
      set_bluesoldierid(from.bluesoldierid());
    }
    if (from.has_lordofficerid()) {
      set_lordofficerid(from.lordofficerid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoleTeamInfo::CopyFrom(const RoleTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTeamInfo::IsInitialized() const {

  return true;
}

void RoleTeamInfo::Swap(RoleTeamInfo* other) {
  if (other != this) {
    std::swap(redsoldierid_, other->redsoldierid_);
    std::swap(greensoldierid_, other->greensoldierid_);
    std::swap(bluesoldierid_, other->bluesoldierid_);
    std::swap(lordofficerid_, other->lordofficerid_);
    soldiercarditemproto_.Swap(&other->soldiercarditemproto_);
    teamofficercarditeminfo_.Swap(&other->teamofficercarditeminfo_);
    pvpofficercarditeminfo_.Swap(&other->pvpofficercarditeminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RoleTeamInfo::GetTypeName() const {
  return "main.RoleTeamInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TeamOfficerCardItemInfo::kBaseOfficerCardInfoProtoFieldNumber;
const int TeamOfficerCardItemInfo::kBaseEquipmentCardItemProtoFieldNumber;
const int TeamOfficerCardItemInfo::kReasonInfoFieldNumber;
#endif  // !_MSC_VER

TeamOfficerCardItemInfo::TeamOfficerCardItemInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TeamOfficerCardItemInfo)
}

void TeamOfficerCardItemInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baseofficercardinfoproto_ = const_cast< ::main::OfficerCardItemProto*>(
      ::main::OfficerCardItemProto::internal_default_instance());
#else
  baseofficercardinfoproto_ = const_cast< ::main::OfficerCardItemProto*>(&::main::OfficerCardItemProto::default_instance());
#endif
}

TeamOfficerCardItemInfo::TeamOfficerCardItemInfo(const TeamOfficerCardItemInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TeamOfficerCardItemInfo)
}

void TeamOfficerCardItemInfo::SharedCtor() {
  _cached_size_ = 0;
  baseofficercardinfoproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamOfficerCardItemInfo::~TeamOfficerCardItemInfo() {
  // @@protoc_insertion_point(destructor:main.TeamOfficerCardItemInfo)
  SharedDtor();
}

void TeamOfficerCardItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baseofficercardinfoproto_;
  }
}

void TeamOfficerCardItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TeamOfficerCardItemInfo& TeamOfficerCardItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

TeamOfficerCardItemInfo* TeamOfficerCardItemInfo::default_instance_ = NULL;

TeamOfficerCardItemInfo* TeamOfficerCardItemInfo::New() const {
  return new TeamOfficerCardItemInfo;
}

void TeamOfficerCardItemInfo::Clear() {
  if (has_baseofficercardinfoproto()) {
    if (baseofficercardinfoproto_ != NULL) baseofficercardinfoproto_->::main::OfficerCardItemProto::Clear();
  }
  baseequipmentcarditemproto_.Clear();
  reasoninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TeamOfficerCardItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TeamOfficerCardItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.OfficerCardItemProto baseOfficerCardInfoProto = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseofficercardinfoproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_baseEquipmentCardItemProto;
        break;
      }

      // repeated .main.EquipmentCardItemProto baseEquipmentCardItemProto = 2;
      case 2: {
        if (tag == 18) {
         parse_baseEquipmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseequipmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_baseEquipmentCardItemProto;
        if (input->ExpectTag(26)) goto parse_reasonInfo;
        break;
      }

      // repeated .main.ReasonInfo reasonInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_reasonInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reasoninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reasonInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TeamOfficerCardItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TeamOfficerCardItemInfo)
  return false;
#undef DO_
}

void TeamOfficerCardItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TeamOfficerCardItemInfo)
  // optional .main.OfficerCardItemProto baseOfficerCardInfoProto = 1;
  if (has_baseofficercardinfoproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baseofficercardinfoproto(), output);
  }

  // repeated .main.EquipmentCardItemProto baseEquipmentCardItemProto = 2;
  for (int i = 0; i < this->baseequipmentcarditemproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->baseequipmentcarditemproto(i), output);
  }

  // repeated .main.ReasonInfo reasonInfo = 3;
  for (int i = 0; i < this->reasoninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->reasoninfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TeamOfficerCardItemInfo)
}

int TeamOfficerCardItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.OfficerCardItemProto baseOfficerCardInfoProto = 1;
    if (has_baseofficercardinfoproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseofficercardinfoproto());
    }

  }
  // repeated .main.EquipmentCardItemProto baseEquipmentCardItemProto = 2;
  total_size += 1 * this->baseequipmentcarditemproto_size();
  for (int i = 0; i < this->baseequipmentcarditemproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseequipmentcarditemproto(i));
  }

  // repeated .main.ReasonInfo reasonInfo = 3;
  total_size += 1 * this->reasoninfo_size();
  for (int i = 0; i < this->reasoninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reasoninfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamOfficerCardItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TeamOfficerCardItemInfo*>(&from));
}

void TeamOfficerCardItemInfo::MergeFrom(const TeamOfficerCardItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  baseequipmentcarditemproto_.MergeFrom(from.baseequipmentcarditemproto_);
  reasoninfo_.MergeFrom(from.reasoninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseofficercardinfoproto()) {
      mutable_baseofficercardinfoproto()->::main::OfficerCardItemProto::MergeFrom(from.baseofficercardinfoproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TeamOfficerCardItemInfo::CopyFrom(const TeamOfficerCardItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOfficerCardItemInfo::IsInitialized() const {

  return true;
}

void TeamOfficerCardItemInfo::Swap(TeamOfficerCardItemInfo* other) {
  if (other != this) {
    std::swap(baseofficercardinfoproto_, other->baseofficercardinfoproto_);
    baseequipmentcarditemproto_.Swap(&other->baseequipmentcarditemproto_);
    reasoninfo_.Swap(&other->reasoninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TeamOfficerCardItemInfo::GetTypeName() const {
  return "main.TeamOfficerCardItemInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpOfficerCardItemInfo::kItmeIdFieldNumber;
const int PvpOfficerCardItemInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

PvpOfficerCardItemInfo::PvpOfficerCardItemInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpOfficerCardItemInfo)
}

void PvpOfficerCardItemInfo::InitAsDefaultInstance() {
}

PvpOfficerCardItemInfo::PvpOfficerCardItemInfo(const PvpOfficerCardItemInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpOfficerCardItemInfo)
}

void PvpOfficerCardItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itmeid_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpOfficerCardItemInfo::~PvpOfficerCardItemInfo() {
  // @@protoc_insertion_point(destructor:main.PvpOfficerCardItemInfo)
  SharedDtor();
}

void PvpOfficerCardItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpOfficerCardItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpOfficerCardItemInfo& PvpOfficerCardItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

PvpOfficerCardItemInfo* PvpOfficerCardItemInfo::default_instance_ = NULL;

PvpOfficerCardItemInfo* PvpOfficerCardItemInfo::New() const {
  return new PvpOfficerCardItemInfo;
}

void PvpOfficerCardItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpOfficerCardItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itmeid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpOfficerCardItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpOfficerCardItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itmeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itmeid_)));
          set_has_itmeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpOfficerCardItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpOfficerCardItemInfo)
  return false;
#undef DO_
}

void PvpOfficerCardItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpOfficerCardItemInfo)
  // optional int32 itmeId = 1;
  if (has_itmeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itmeid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpOfficerCardItemInfo)
}

int PvpOfficerCardItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itmeId = 1;
    if (has_itmeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itmeid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpOfficerCardItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpOfficerCardItemInfo*>(&from));
}

void PvpOfficerCardItemInfo::MergeFrom(const PvpOfficerCardItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itmeid()) {
      set_itmeid(from.itmeid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpOfficerCardItemInfo::CopyFrom(const PvpOfficerCardItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpOfficerCardItemInfo::IsInitialized() const {

  return true;
}

void PvpOfficerCardItemInfo::Swap(PvpOfficerCardItemInfo* other) {
  if (other != this) {
    std::swap(itmeid_, other->itmeid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpOfficerCardItemInfo::GetTypeName() const {
  return "main.PvpOfficerCardItemInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ReasonInfo::kReasonIdFieldNumber;
const int ReasonInfo::kIsActivateFieldNumber;
#endif  // !_MSC_VER

ReasonInfo::ReasonInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ReasonInfo)
}

void ReasonInfo::InitAsDefaultInstance() {
}

ReasonInfo::ReasonInfo(const ReasonInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ReasonInfo)
}

void ReasonInfo::SharedCtor() {
  _cached_size_ = 0;
  reasonid_ = 0;
  isactivate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReasonInfo::~ReasonInfo() {
  // @@protoc_insertion_point(destructor:main.ReasonInfo)
  SharedDtor();
}

void ReasonInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReasonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReasonInfo& ReasonInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

ReasonInfo* ReasonInfo::default_instance_ = NULL;

ReasonInfo* ReasonInfo::New() const {
  return new ReasonInfo;
}

void ReasonInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReasonInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reasonid_, isactivate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReasonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ReasonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reasonId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reasonid_)));
          set_has_reasonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isActivate;
        break;
      }

      // optional int32 isActivate = 2;
      case 2: {
        if (tag == 16) {
         parse_isActivate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isactivate_)));
          set_has_isactivate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ReasonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ReasonInfo)
  return false;
#undef DO_
}

void ReasonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ReasonInfo)
  // optional int32 reasonId = 1;
  if (has_reasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reasonid(), output);
  }

  // optional int32 isActivate = 2;
  if (has_isactivate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isactivate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ReasonInfo)
}

int ReasonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reasonId = 1;
    if (has_reasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reasonid());
    }

    // optional int32 isActivate = 2;
    if (has_isactivate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isactivate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReasonInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReasonInfo*>(&from));
}

void ReasonInfo::MergeFrom(const ReasonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reasonid()) {
      set_reasonid(from.reasonid());
    }
    if (from.has_isactivate()) {
      set_isactivate(from.isactivate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReasonInfo::CopyFrom(const ReasonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReasonInfo::IsInitialized() const {

  return true;
}

void ReasonInfo::Swap(ReasonInfo* other) {
  if (other != this) {
    std::swap(reasonid_, other->reasonid_);
    std::swap(isactivate_, other->isactivate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReasonInfo::GetTypeName() const {
  return "main.ReasonInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PowerGiftRequest::kFriendIdFieldNumber;
#endif  // !_MSC_VER

PowerGiftRequest::PowerGiftRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PowerGiftRequest)
}

void PowerGiftRequest::InitAsDefaultInstance() {
}

PowerGiftRequest::PowerGiftRequest(const PowerGiftRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PowerGiftRequest)
}

void PowerGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerGiftRequest::~PowerGiftRequest() {
  // @@protoc_insertion_point(destructor:main.PowerGiftRequest)
  SharedDtor();
}

void PowerGiftRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PowerGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerGiftRequest& PowerGiftRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

PowerGiftRequest* PowerGiftRequest::default_instance_ = NULL;

PowerGiftRequest* PowerGiftRequest::New() const {
  return new PowerGiftRequest;
}

void PowerGiftRequest::Clear() {
  friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PowerGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PowerGiftRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PowerGiftRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PowerGiftRequest)
  return false;
#undef DO_
}

void PowerGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PowerGiftRequest)
  // optional int32 friendId = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PowerGiftRequest)
}

int PowerGiftRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendId = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerGiftRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerGiftRequest*>(&from));
}

void PowerGiftRequest::MergeFrom(const PowerGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PowerGiftRequest::CopyFrom(const PowerGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerGiftRequest::IsInitialized() const {

  return true;
}

void PowerGiftRequest::Swap(PowerGiftRequest* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PowerGiftRequest::GetTypeName() const {
  return "main.PowerGiftRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PowerGiftResponse::kStateFieldNumber;
#endif  // !_MSC_VER

PowerGiftResponse::PowerGiftResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PowerGiftResponse)
}

void PowerGiftResponse::InitAsDefaultInstance() {
}

PowerGiftResponse::PowerGiftResponse(const PowerGiftResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PowerGiftResponse)
}

void PowerGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerGiftResponse::~PowerGiftResponse() {
  // @@protoc_insertion_point(destructor:main.PowerGiftResponse)
  SharedDtor();
}

void PowerGiftResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PowerGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerGiftResponse& PowerGiftResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

PowerGiftResponse* PowerGiftResponse::default_instance_ = NULL;

PowerGiftResponse* PowerGiftResponse::New() const {
  return new PowerGiftResponse;
}

void PowerGiftResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PowerGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PowerGiftResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PowerGiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PowerGiftResponse)
  return false;
#undef DO_
}

void PowerGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PowerGiftResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PowerGiftResponse)
}

int PowerGiftResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerGiftResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerGiftResponse*>(&from));
}

void PowerGiftResponse::MergeFrom(const PowerGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PowerGiftResponse::CopyFrom(const PowerGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerGiftResponse::IsInitialized() const {

  return true;
}

void PowerGiftResponse::Swap(PowerGiftResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PowerGiftResponse::GetTypeName() const {
  return "main.PowerGiftResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptPowerGiftResponse::kPowerGiftFieldNumber;
#endif  // !_MSC_VER

AcceptPowerGiftResponse::AcceptPowerGiftResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AcceptPowerGiftResponse)
}

void AcceptPowerGiftResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  powergift_ = const_cast< ::main::PowerGiftProto*>(
      ::main::PowerGiftProto::internal_default_instance());
#else
  powergift_ = const_cast< ::main::PowerGiftProto*>(&::main::PowerGiftProto::default_instance());
#endif
}

AcceptPowerGiftResponse::AcceptPowerGiftResponse(const AcceptPowerGiftResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AcceptPowerGiftResponse)
}

void AcceptPowerGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  powergift_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptPowerGiftResponse::~AcceptPowerGiftResponse() {
  // @@protoc_insertion_point(destructor:main.AcceptPowerGiftResponse)
  SharedDtor();
}

void AcceptPowerGiftResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete powergift_;
  }
}

void AcceptPowerGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AcceptPowerGiftResponse& AcceptPowerGiftResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

AcceptPowerGiftResponse* AcceptPowerGiftResponse::default_instance_ = NULL;

AcceptPowerGiftResponse* AcceptPowerGiftResponse::New() const {
  return new AcceptPowerGiftResponse;
}

void AcceptPowerGiftResponse::Clear() {
  if (has_powergift()) {
    if (powergift_ != NULL) powergift_->::main::PowerGiftProto::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AcceptPowerGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AcceptPowerGiftResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.PowerGiftProto powerGift = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_powergift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AcceptPowerGiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AcceptPowerGiftResponse)
  return false;
#undef DO_
}

void AcceptPowerGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AcceptPowerGiftResponse)
  // optional .main.PowerGiftProto powerGift = 1;
  if (has_powergift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->powergift(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AcceptPowerGiftResponse)
}

int AcceptPowerGiftResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.PowerGiftProto powerGift = 1;
    if (has_powergift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->powergift());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptPowerGiftResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AcceptPowerGiftResponse*>(&from));
}

void AcceptPowerGiftResponse::MergeFrom(const AcceptPowerGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_powergift()) {
      mutable_powergift()->::main::PowerGiftProto::MergeFrom(from.powergift());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AcceptPowerGiftResponse::CopyFrom(const AcceptPowerGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptPowerGiftResponse::IsInitialized() const {

  return true;
}

void AcceptPowerGiftResponse::Swap(AcceptPowerGiftResponse* other) {
  if (other != this) {
    std::swap(powergift_, other->powergift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AcceptPowerGiftResponse::GetTypeName() const {
  return "main.AcceptPowerGiftResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPowerGiftRequest::kGiftIdFieldNumber;
const int GetPowerGiftRequest::kGiftTimeFieldNumber;
#endif  // !_MSC_VER

GetPowerGiftRequest::GetPowerGiftRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GetPowerGiftRequest)
}

void GetPowerGiftRequest::InitAsDefaultInstance() {
}

GetPowerGiftRequest::GetPowerGiftRequest(const GetPowerGiftRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GetPowerGiftRequest)
}

void GetPowerGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = 0;
  gifttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPowerGiftRequest::~GetPowerGiftRequest() {
  // @@protoc_insertion_point(destructor:main.GetPowerGiftRequest)
  SharedDtor();
}

void GetPowerGiftRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPowerGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPowerGiftRequest& GetPowerGiftRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

GetPowerGiftRequest* GetPowerGiftRequest::default_instance_ = NULL;

GetPowerGiftRequest* GetPowerGiftRequest::New() const {
  return new GetPowerGiftRequest;
}

void GetPowerGiftRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetPowerGiftRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gifttime_, giftid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPowerGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GetPowerGiftRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 giftId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_giftTime;
        break;
      }

      // optional int64 giftTime = 2;
      case 2: {
        if (tag == 16) {
         parse_giftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gifttime_)));
          set_has_gifttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GetPowerGiftRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GetPowerGiftRequest)
  return false;
#undef DO_
}

void GetPowerGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GetPowerGiftRequest)
  // optional int32 giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->giftid(), output);
  }

  // optional int64 giftTime = 2;
  if (has_gifttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gifttime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GetPowerGiftRequest)
}

int GetPowerGiftRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

    // optional int64 giftTime = 2;
    if (has_gifttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gifttime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPowerGiftRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPowerGiftRequest*>(&from));
}

void GetPowerGiftRequest::MergeFrom(const GetPowerGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_gifttime()) {
      set_gifttime(from.gifttime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPowerGiftRequest::CopyFrom(const GetPowerGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPowerGiftRequest::IsInitialized() const {

  return true;
}

void GetPowerGiftRequest::Swap(GetPowerGiftRequest* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(gifttime_, other->gifttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPowerGiftRequest::GetTypeName() const {
  return "main.GetPowerGiftRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetPowerGiftResponse::kStateFieldNumber;
#endif  // !_MSC_VER

GetPowerGiftResponse::GetPowerGiftResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GetPowerGiftResponse)
}

void GetPowerGiftResponse::InitAsDefaultInstance() {
}

GetPowerGiftResponse::GetPowerGiftResponse(const GetPowerGiftResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GetPowerGiftResponse)
}

void GetPowerGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPowerGiftResponse::~GetPowerGiftResponse() {
  // @@protoc_insertion_point(destructor:main.GetPowerGiftResponse)
  SharedDtor();
}

void GetPowerGiftResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetPowerGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetPowerGiftResponse& GetPowerGiftResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

GetPowerGiftResponse* GetPowerGiftResponse::default_instance_ = NULL;

GetPowerGiftResponse* GetPowerGiftResponse::New() const {
  return new GetPowerGiftResponse;
}

void GetPowerGiftResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetPowerGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GetPowerGiftResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GetPowerGiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GetPowerGiftResponse)
  return false;
#undef DO_
}

void GetPowerGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GetPowerGiftResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GetPowerGiftResponse)
}

int GetPowerGiftResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPowerGiftResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetPowerGiftResponse*>(&from));
}

void GetPowerGiftResponse::MergeFrom(const GetPowerGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetPowerGiftResponse::CopyFrom(const GetPowerGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPowerGiftResponse::IsInitialized() const {

  return true;
}

void GetPowerGiftResponse::Swap(GetPowerGiftResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetPowerGiftResponse::GetTypeName() const {
  return "main.GetPowerGiftResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllPowerGiftRequest::GetAllPowerGiftRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GetAllPowerGiftRequest)
}

void GetAllPowerGiftRequest::InitAsDefaultInstance() {
}

GetAllPowerGiftRequest::GetAllPowerGiftRequest(const GetAllPowerGiftRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GetAllPowerGiftRequest)
}

void GetAllPowerGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPowerGiftRequest::~GetAllPowerGiftRequest() {
  // @@protoc_insertion_point(destructor:main.GetAllPowerGiftRequest)
  SharedDtor();
}

void GetAllPowerGiftRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAllPowerGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAllPowerGiftRequest& GetAllPowerGiftRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

GetAllPowerGiftRequest* GetAllPowerGiftRequest::default_instance_ = NULL;

GetAllPowerGiftRequest* GetAllPowerGiftRequest::New() const {
  return new GetAllPowerGiftRequest;
}

void GetAllPowerGiftRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAllPowerGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GetAllPowerGiftRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.GetAllPowerGiftRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GetAllPowerGiftRequest)
  return false;
#undef DO_
}

void GetAllPowerGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GetAllPowerGiftRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GetAllPowerGiftRequest)
}

int GetAllPowerGiftRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPowerGiftRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAllPowerGiftRequest*>(&from));
}

void GetAllPowerGiftRequest::MergeFrom(const GetAllPowerGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAllPowerGiftRequest::CopyFrom(const GetAllPowerGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPowerGiftRequest::IsInitialized() const {

  return true;
}

void GetAllPowerGiftRequest::Swap(GetAllPowerGiftRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAllPowerGiftRequest::GetTypeName() const {
  return "main.GetAllPowerGiftRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllPowerGiftResponse::kStateFieldNumber;
const int GetAllPowerGiftResponse::kPowerGiftFieldNumber;
#endif  // !_MSC_VER

GetAllPowerGiftResponse::GetAllPowerGiftResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GetAllPowerGiftResponse)
}

void GetAllPowerGiftResponse::InitAsDefaultInstance() {
}

GetAllPowerGiftResponse::GetAllPowerGiftResponse(const GetAllPowerGiftResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GetAllPowerGiftResponse)
}

void GetAllPowerGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPowerGiftResponse::~GetAllPowerGiftResponse() {
  // @@protoc_insertion_point(destructor:main.GetAllPowerGiftResponse)
  SharedDtor();
}

void GetAllPowerGiftResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAllPowerGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAllPowerGiftResponse& GetAllPowerGiftResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

GetAllPowerGiftResponse* GetAllPowerGiftResponse::default_instance_ = NULL;

GetAllPowerGiftResponse* GetAllPowerGiftResponse::New() const {
  return new GetAllPowerGiftResponse;
}

void GetAllPowerGiftResponse::Clear() {
  state_ = 0;
  powergift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetAllPowerGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GetAllPowerGiftResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_powerGift;
        break;
      }

      // repeated .main.PowerGiftProto powerGift = 2;
      case 2: {
        if (tag == 18) {
         parse_powerGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_powergift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_powerGift;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GetAllPowerGiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GetAllPowerGiftResponse)
  return false;
#undef DO_
}

void GetAllPowerGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GetAllPowerGiftResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated .main.PowerGiftProto powerGift = 2;
  for (int i = 0; i < this->powergift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->powergift(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GetAllPowerGiftResponse)
}

int GetAllPowerGiftResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .main.PowerGiftProto powerGift = 2;
  total_size += 1 * this->powergift_size();
  for (int i = 0; i < this->powergift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->powergift(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPowerGiftResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetAllPowerGiftResponse*>(&from));
}

void GetAllPowerGiftResponse::MergeFrom(const GetAllPowerGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  powergift_.MergeFrom(from.powergift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetAllPowerGiftResponse::CopyFrom(const GetAllPowerGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPowerGiftResponse::IsInitialized() const {

  return true;
}

void GetAllPowerGiftResponse::Swap(GetAllPowerGiftResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    powergift_.Swap(&other->powergift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAllPowerGiftResponse::GetTypeName() const {
  return "main.GetAllPowerGiftResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PowerGiftListResponse::kPowerGiftFieldNumber;
#endif  // !_MSC_VER

PowerGiftListResponse::PowerGiftListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PowerGiftListResponse)
}

void PowerGiftListResponse::InitAsDefaultInstance() {
}

PowerGiftListResponse::PowerGiftListResponse(const PowerGiftListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PowerGiftListResponse)
}

void PowerGiftListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerGiftListResponse::~PowerGiftListResponse() {
  // @@protoc_insertion_point(destructor:main.PowerGiftListResponse)
  SharedDtor();
}

void PowerGiftListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PowerGiftListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerGiftListResponse& PowerGiftListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

PowerGiftListResponse* PowerGiftListResponse::default_instance_ = NULL;

PowerGiftListResponse* PowerGiftListResponse::New() const {
  return new PowerGiftListResponse;
}

void PowerGiftListResponse::Clear() {
  powergift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PowerGiftListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PowerGiftListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.PowerGiftProto powerGift = 1;
      case 1: {
        if (tag == 10) {
         parse_powerGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_powergift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_powerGift;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PowerGiftListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PowerGiftListResponse)
  return false;
#undef DO_
}

void PowerGiftListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PowerGiftListResponse)
  // repeated .main.PowerGiftProto powerGift = 1;
  for (int i = 0; i < this->powergift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->powergift(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PowerGiftListResponse)
}

int PowerGiftListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.PowerGiftProto powerGift = 1;
  total_size += 1 * this->powergift_size();
  for (int i = 0; i < this->powergift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->powergift(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerGiftListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerGiftListResponse*>(&from));
}

void PowerGiftListResponse::MergeFrom(const PowerGiftListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  powergift_.MergeFrom(from.powergift_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PowerGiftListResponse::CopyFrom(const PowerGiftListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerGiftListResponse::IsInitialized() const {

  return true;
}

void PowerGiftListResponse::Swap(PowerGiftListResponse* other) {
  if (other != this) {
    powergift_.Swap(&other->powergift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PowerGiftListResponse::GetTypeName() const {
  return "main.PowerGiftListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PowerGiftProto::kRoleIdFieldNumber;
const int PowerGiftProto::kGiftIdFieldNumber;
const int PowerGiftProto::kGiftTimeFieldNumber;
const int PowerGiftProto::kGiftNameFieldNumber;
const int PowerGiftProto::kGiftLevelFieldNumber;
const int PowerGiftProto::kGiftImageFieldNumber;
#endif  // !_MSC_VER

PowerGiftProto::PowerGiftProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PowerGiftProto)
}

void PowerGiftProto::InitAsDefaultInstance() {
}

PowerGiftProto::PowerGiftProto(const PowerGiftProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PowerGiftProto)
}

void PowerGiftProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  giftid_ = 0;
  gifttime_ = GOOGLE_LONGLONG(0);
  giftname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  giftlevel_ = 0;
  giftimage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerGiftProto::~PowerGiftProto() {
  // @@protoc_insertion_point(destructor:main.PowerGiftProto)
  SharedDtor();
}

void PowerGiftProto::SharedDtor() {
  if (giftname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete giftname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PowerGiftProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerGiftProto& PowerGiftProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FriendModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FriendModule_2eproto();
#endif
  return *default_instance_;
}

PowerGiftProto* PowerGiftProto::default_instance_ = NULL;

PowerGiftProto* PowerGiftProto::New() const {
  return new PowerGiftProto;
}

void PowerGiftProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PowerGiftProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roleid_, gifttime_);
    ZR_(giftlevel_, giftimage_);
    if (has_giftname()) {
      if (giftname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        giftname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PowerGiftProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PowerGiftProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_giftId;
        break;
      }

      // optional int32 giftId = 2;
      case 2: {
        if (tag == 16) {
         parse_giftId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_giftTime;
        break;
      }

      // optional int64 giftTime = 3;
      case 3: {
        if (tag == 24) {
         parse_giftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gifttime_)));
          set_has_gifttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_giftName;
        break;
      }

      // optional string giftName = 4;
      case 4: {
        if (tag == 34) {
         parse_giftName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_giftLevel;
        break;
      }

      // optional int32 giftLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_giftLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftlevel_)));
          set_has_giftlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_giftImage;
        break;
      }

      // optional int32 giftImage = 6;
      case 6: {
        if (tag == 48) {
         parse_giftImage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftimage_)));
          set_has_giftimage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PowerGiftProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PowerGiftProto)
  return false;
#undef DO_
}

void PowerGiftProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PowerGiftProto)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 giftId = 2;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftid(), output);
  }

  // optional int64 giftTime = 3;
  if (has_gifttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gifttime(), output);
  }

  // optional string giftName = 4;
  if (has_giftname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->giftname(), output);
  }

  // optional int32 giftLevel = 5;
  if (has_giftlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->giftlevel(), output);
  }

  // optional int32 giftImage = 6;
  if (has_giftimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->giftimage(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PowerGiftProto)
}

int PowerGiftProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 giftId = 2;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

    // optional int64 giftTime = 3;
    if (has_gifttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gifttime());
    }

    // optional string giftName = 4;
    if (has_giftname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftname());
    }

    // optional int32 giftLevel = 5;
    if (has_giftlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftlevel());
    }

    // optional int32 giftImage = 6;
    if (has_giftimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftimage());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerGiftProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerGiftProto*>(&from));
}

void PowerGiftProto::MergeFrom(const PowerGiftProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_gifttime()) {
      set_gifttime(from.gifttime());
    }
    if (from.has_giftname()) {
      set_giftname(from.giftname());
    }
    if (from.has_giftlevel()) {
      set_giftlevel(from.giftlevel());
    }
    if (from.has_giftimage()) {
      set_giftimage(from.giftimage());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PowerGiftProto::CopyFrom(const PowerGiftProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerGiftProto::IsInitialized() const {

  return true;
}

void PowerGiftProto::Swap(PowerGiftProto* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(giftid_, other->giftid_);
    std::swap(gifttime_, other->gifttime_);
    std::swap(giftname_, other->giftname_);
    std::swap(giftlevel_, other->giftlevel_);
    std::swap(giftimage_, other->giftimage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PowerGiftProto::GetTypeName() const {
  return "main.PowerGiftProto";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
