// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_MessageModule_2eproto() {
  delete SendMessageRequest::default_instance_;
  delete SendMessageResponse::default_instance_;
  delete ShowMessageRequest::default_instance_;
  delete ShowMessageResponse::default_instance_;
  delete ChatProto::default_instance_;
  delete NewComerRecordRequest::default_instance_;
  delete NewComerRecordResponse::default_instance_;
  delete ViewSpectacularItemRequest::default_instance_;
  delete ViewSpectacularItemResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MessageModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MessageModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_FriendModule_2eproto();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  SendMessageResponse::default_instance_ = new SendMessageResponse();
  ShowMessageRequest::default_instance_ = new ShowMessageRequest();
  ShowMessageResponse::default_instance_ = new ShowMessageResponse();
  ChatProto::default_instance_ = new ChatProto();
  NewComerRecordRequest::default_instance_ = new NewComerRecordRequest();
  NewComerRecordResponse::default_instance_ = new NewComerRecordResponse();
  ViewSpectacularItemRequest::default_instance_ = new ViewSpectacularItemRequest();
  ViewSpectacularItemResponse::default_instance_ = new ViewSpectacularItemResponse();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  SendMessageResponse::default_instance_->InitAsDefaultInstance();
  ShowMessageRequest::default_instance_->InitAsDefaultInstance();
  ShowMessageResponse::default_instance_->InitAsDefaultInstance();
  ChatProto::default_instance_->InitAsDefaultInstance();
  NewComerRecordRequest::default_instance_->InitAsDefaultInstance();
  NewComerRecordResponse::default_instance_->InitAsDefaultInstance();
  ViewSpectacularItemRequest::default_instance_->InitAsDefaultInstance();
  ViewSpectacularItemResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MessageModule_2eproto_once_);
void protobuf_AddDesc_MessageModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MessageModule_2eproto_once_,
                 &protobuf_AddDesc_MessageModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageModule_2eproto {
  StaticDescriptorInitializer_MessageModule_2eproto() {
    protobuf_AddDesc_MessageModule_2eproto();
  }
} static_descriptor_initializer_MessageModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SendMessageRequest::kChIdFieldNumber;
const int SendMessageRequest::kContentFieldNumber;
#endif  // !_MSC_VER

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SendMessageRequest)
}

void SendMessageRequest::InitAsDefaultInstance() {
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SendMessageRequest)
}

void SendMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:main.SendMessageRequest)
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendMessageRequest& SendMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New() const {
  return new SendMessageRequest;
}

void SendMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    chid_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SendMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chid_)));
          set_has_chid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SendMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SendMessageRequest)
  return false;
#undef DO_
}

void SendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SendMessageRequest)
  // optional int32 chId = 1;
  if (has_chid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SendMessageRequest)
}

int SendMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chId = 1;
    if (has_chid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendMessageRequest*>(&from));
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chid()) {
      set_chid(from.chid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {

  return true;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other != this) {
    std::swap(chid_, other->chid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendMessageRequest::GetTypeName() const {
  return "main.SendMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageResponse::kSendChatStateFieldNumber;
const int SendMessageResponse::kChatFieldNumber;
#endif  // !_MSC_VER

SendMessageResponse::SendMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SendMessageResponse)
}

void SendMessageResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chat_ = const_cast< ::main::ChatProto*>(
      ::main::ChatProto::internal_default_instance());
#else
  chat_ = const_cast< ::main::ChatProto*>(&::main::ChatProto::default_instance());
#endif
}

SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SendMessageResponse)
}

void SendMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  sendchatstate_ = 0;
  chat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageResponse::~SendMessageResponse() {
  // @@protoc_insertion_point(destructor:main.SendMessageResponse)
  SharedDtor();
}

void SendMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete chat_;
  }
}

void SendMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendMessageResponse& SendMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

SendMessageResponse* SendMessageResponse::default_instance_ = NULL;

SendMessageResponse* SendMessageResponse::New() const {
  return new SendMessageResponse;
}

void SendMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    sendchatstate_ = 0;
    if (has_chat()) {
      if (chat_ != NULL) chat_->::main::ChatProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SendMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 sendChatState = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sendchatstate_)));
          set_has_sendchatstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat;
        break;
      }

      // optional .main.ChatProto chat = 2;
      case 2: {
        if (tag == 18) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SendMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SendMessageResponse)
  return false;
#undef DO_
}

void SendMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SendMessageResponse)
  // optional sint32 sendChatState = 1;
  if (has_sendchatstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->sendchatstate(), output);
  }

  // optional .main.ChatProto chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->chat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SendMessageResponse)
}

int SendMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 sendChatState = 1;
    if (has_sendchatstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sendchatstate());
    }

    // optional .main.ChatProto chat = 2;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendMessageResponse*>(&from));
}

void SendMessageResponse::MergeFrom(const SendMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendchatstate()) {
      set_sendchatstate(from.sendchatstate());
    }
    if (from.has_chat()) {
      mutable_chat()->::main::ChatProto::MergeFrom(from.chat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {

  return true;
}

void SendMessageResponse::Swap(SendMessageResponse* other) {
  if (other != this) {
    std::swap(sendchatstate_, other->sendchatstate_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendMessageResponse::GetTypeName() const {
  return "main.SendMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ShowMessageRequest::kChIdFieldNumber;
#endif  // !_MSC_VER

ShowMessageRequest::ShowMessageRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShowMessageRequest)
}

void ShowMessageRequest::InitAsDefaultInstance() {
}

ShowMessageRequest::ShowMessageRequest(const ShowMessageRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShowMessageRequest)
}

void ShowMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  chid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowMessageRequest::~ShowMessageRequest() {
  // @@protoc_insertion_point(destructor:main.ShowMessageRequest)
  SharedDtor();
}

void ShowMessageRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowMessageRequest& ShowMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

ShowMessageRequest* ShowMessageRequest::default_instance_ = NULL;

ShowMessageRequest* ShowMessageRequest::New() const {
  return new ShowMessageRequest;
}

void ShowMessageRequest::Clear() {
  chid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShowMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShowMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chid_)));
          set_has_chid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShowMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShowMessageRequest)
  return false;
#undef DO_
}

void ShowMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShowMessageRequest)
  // optional int32 chId = 1;
  if (has_chid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShowMessageRequest)
}

int ShowMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chId = 1;
    if (has_chid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowMessageRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowMessageRequest*>(&from));
}

void ShowMessageRequest::MergeFrom(const ShowMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chid()) {
      set_chid(from.chid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShowMessageRequest::CopyFrom(const ShowMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMessageRequest::IsInitialized() const {

  return true;
}

void ShowMessageRequest::Swap(ShowMessageRequest* other) {
  if (other != this) {
    std::swap(chid_, other->chid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShowMessageRequest::GetTypeName() const {
  return "main.ShowMessageRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShowMessageResponse::kChatFieldNumber;
#endif  // !_MSC_VER

ShowMessageResponse::ShowMessageResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShowMessageResponse)
}

void ShowMessageResponse::InitAsDefaultInstance() {
}

ShowMessageResponse::ShowMessageResponse(const ShowMessageResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShowMessageResponse)
}

void ShowMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowMessageResponse::~ShowMessageResponse() {
  // @@protoc_insertion_point(destructor:main.ShowMessageResponse)
  SharedDtor();
}

void ShowMessageResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowMessageResponse& ShowMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

ShowMessageResponse* ShowMessageResponse::default_instance_ = NULL;

ShowMessageResponse* ShowMessageResponse::New() const {
  return new ShowMessageResponse;
}

void ShowMessageResponse::Clear() {
  chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShowMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShowMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.ChatProto chat = 1;
      case 1: {
        if (tag == 10) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_chat;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShowMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShowMessageResponse)
  return false;
#undef DO_
}

void ShowMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShowMessageResponse)
  // repeated .main.ChatProto chat = 1;
  for (int i = 0; i < this->chat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->chat(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShowMessageResponse)
}

int ShowMessageResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.ChatProto chat = 1;
  total_size += 1 * this->chat_size();
  for (int i = 0; i < this->chat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowMessageResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowMessageResponse*>(&from));
}

void ShowMessageResponse::MergeFrom(const ShowMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_.MergeFrom(from.chat_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShowMessageResponse::CopyFrom(const ShowMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMessageResponse::IsInitialized() const {

  return true;
}

void ShowMessageResponse::Swap(ShowMessageResponse* other) {
  if (other != this) {
    chat_.Swap(&other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShowMessageResponse::GetTypeName() const {
  return "main.ShowMessageResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ChatProto::kChIdFieldNumber;
const int ChatProto::kContentFieldNumber;
const int ChatProto::kRoleIdFieldNumber;
const int ChatProto::kImageFieldNumber;
const int ChatProto::kRoleNickNameFieldNumber;
const int ChatProto::kTimeStrFieldNumber;
const int ChatProto::kLordItemIdFieldNumber;
const int ChatProto::kPvpRankNameFieldNumber;
const int ChatProto::kVipLevelFieldNumber;
const int ChatProto::kCombatValueFieldNumber;
#endif  // !_MSC_VER

ChatProto::ChatProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChatProto)
}

void ChatProto::InitAsDefaultInstance() {
}

ChatProto::ChatProto(const ChatProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChatProto)
}

void ChatProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roleid_ = 0;
  image_ = 0;
  rolenickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lorditemid_ = 0;
  pvprankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viplevel_ = 0;
  combatvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatProto::~ChatProto() {
  // @@protoc_insertion_point(destructor:main.ChatProto)
  SharedDtor();
}

void ChatProto::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (rolenickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rolenickname_;
  }
  if (timestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestr_;
  }
  if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvprankname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChatProto& ChatProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

ChatProto* ChatProto::default_instance_ = NULL;

ChatProto* ChatProto::New() const {
  return new ChatProto;
}

void ChatProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(chid_, roleid_);
    ZR_(image_, lorditemid_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_rolenickname()) {
      if (rolenickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rolenickname_->clear();
      }
    }
    if (has_timestr()) {
      if (timestr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestr_->clear();
      }
    }
    if (has_pvprankname()) {
      if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pvprankname_->clear();
      }
    }
  }
  ZR_(viplevel_, combatvalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChatProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chid_)));
          set_has_chid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 3;
      case 3: {
        if (tag == 24) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_image;
        break;
      }

      // optional int32 image = 4;
      case 4: {
        if (tag == 32) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_roleNickName;
        break;
      }

      // optional string roleNickName = 5;
      case 5: {
        if (tag == 42) {
         parse_roleNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolenickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timeStr;
        break;
      }

      // optional string timeStr = 6;
      case 6: {
        if (tag == 50) {
         parse_timeStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lordItemId;
        break;
      }

      // optional int32 lordItemId = 7;
      case 7: {
        if (tag == 56) {
         parse_lordItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lorditemid_)));
          set_has_lorditemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pvpRankName;
        break;
      }

      // optional string pvpRankName = 8;
      case 8: {
        if (tag == 66) {
         parse_pvpRankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvprankname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_combatValue;
        break;
      }

      // optional int32 combatValue = 10;
      case 10: {
        if (tag == 80) {
         parse_combatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChatProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChatProto)
  return false;
#undef DO_
}

void ChatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChatProto)
  // optional int32 chId = 1;
  if (has_chid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional int32 roleId = 3;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roleid(), output);
  }

  // optional int32 image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->image(), output);
  }

  // optional string roleNickName = 5;
  if (has_rolenickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rolenickname(), output);
  }

  // optional string timeStr = 6;
  if (has_timestr()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timestr(), output);
  }

  // optional int32 lordItemId = 7;
  if (has_lorditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lorditemid(), output);
  }

  // optional string pvpRankName = 8;
  if (has_pvprankname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->pvprankname(), output);
  }

  // optional int32 vipLevel = 9;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->viplevel(), output);
  }

  // optional int32 combatValue = 10;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->combatvalue(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChatProto)
}

int ChatProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chId = 1;
    if (has_chid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 roleId = 3;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 image = 4;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

    // optional string roleNickName = 5;
    if (has_rolenickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolenickname());
    }

    // optional string timeStr = 6;
    if (has_timestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestr());
    }

    // optional int32 lordItemId = 7;
    if (has_lorditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lorditemid());
    }

    // optional string pvpRankName = 8;
    if (has_pvprankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvprankname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vipLevel = 9;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 combatValue = 10;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatProto*>(&from));
}

void ChatProto::MergeFrom(const ChatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chid()) {
      set_chid(from.chid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_rolenickname()) {
      set_rolenickname(from.rolenickname());
    }
    if (from.has_timestr()) {
      set_timestr(from.timestr());
    }
    if (from.has_lorditemid()) {
      set_lorditemid(from.lorditemid());
    }
    if (from.has_pvprankname()) {
      set_pvprankname(from.pvprankname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChatProto::CopyFrom(const ChatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatProto::IsInitialized() const {

  return true;
}

void ChatProto::Swap(ChatProto* other) {
  if (other != this) {
    std::swap(chid_, other->chid_);
    std::swap(content_, other->content_);
    std::swap(roleid_, other->roleid_);
    std::swap(image_, other->image_);
    std::swap(rolenickname_, other->rolenickname_);
    std::swap(timestr_, other->timestr_);
    std::swap(lorditemid_, other->lorditemid_);
    std::swap(pvprankname_, other->pvprankname_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChatProto::GetTypeName() const {
  return "main.ChatProto";
}


// ===================================================================

#ifndef _MSC_VER
const int NewComerRecordRequest::kRecordTypeIdFieldNumber;
const int NewComerRecordRequest::kMacFieldNumber;
#endif  // !_MSC_VER

NewComerRecordRequest::NewComerRecordRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.NewComerRecordRequest)
}

void NewComerRecordRequest::InitAsDefaultInstance() {
}

NewComerRecordRequest::NewComerRecordRequest(const NewComerRecordRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.NewComerRecordRequest)
}

void NewComerRecordRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  recordtypeid_ = 0;
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewComerRecordRequest::~NewComerRecordRequest() {
  // @@protoc_insertion_point(destructor:main.NewComerRecordRequest)
  SharedDtor();
}

void NewComerRecordRequest::SharedDtor() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewComerRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewComerRecordRequest& NewComerRecordRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

NewComerRecordRequest* NewComerRecordRequest::default_instance_ = NULL;

NewComerRecordRequest* NewComerRecordRequest::New() const {
  return new NewComerRecordRequest;
}

void NewComerRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    recordtypeid_ = 0;
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewComerRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.NewComerRecordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 recordTypeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordtypeid_)));
          set_has_recordtypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        break;
      }

      // optional string mac = 2;
      case 2: {
        if (tag == 18) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.NewComerRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.NewComerRecordRequest)
  return false;
#undef DO_
}

void NewComerRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.NewComerRecordRequest)
  // optional int32 recordTypeId = 1;
  if (has_recordtypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recordtypeid(), output);
  }

  // optional string mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.NewComerRecordRequest)
}

int NewComerRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 recordTypeId = 1;
    if (has_recordtypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordtypeid());
    }

    // optional string mac = 2;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewComerRecordRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewComerRecordRequest*>(&from));
}

void NewComerRecordRequest::MergeFrom(const NewComerRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordtypeid()) {
      set_recordtypeid(from.recordtypeid());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewComerRecordRequest::CopyFrom(const NewComerRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewComerRecordRequest::IsInitialized() const {

  return true;
}

void NewComerRecordRequest::Swap(NewComerRecordRequest* other) {
  if (other != this) {
    std::swap(recordtypeid_, other->recordtypeid_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewComerRecordRequest::GetTypeName() const {
  return "main.NewComerRecordRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NewComerRecordResponse::NewComerRecordResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.NewComerRecordResponse)
}

void NewComerRecordResponse::InitAsDefaultInstance() {
}

NewComerRecordResponse::NewComerRecordResponse(const NewComerRecordResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.NewComerRecordResponse)
}

void NewComerRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewComerRecordResponse::~NewComerRecordResponse() {
  // @@protoc_insertion_point(destructor:main.NewComerRecordResponse)
  SharedDtor();
}

void NewComerRecordResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewComerRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewComerRecordResponse& NewComerRecordResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

NewComerRecordResponse* NewComerRecordResponse::default_instance_ = NULL;

NewComerRecordResponse* NewComerRecordResponse::New() const {
  return new NewComerRecordResponse;
}

void NewComerRecordResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewComerRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.NewComerRecordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.NewComerRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.NewComerRecordResponse)
  return false;
#undef DO_
}

void NewComerRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.NewComerRecordResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.NewComerRecordResponse)
}

int NewComerRecordResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewComerRecordResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewComerRecordResponse*>(&from));
}

void NewComerRecordResponse::MergeFrom(const NewComerRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewComerRecordResponse::CopyFrom(const NewComerRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewComerRecordResponse::IsInitialized() const {

  return true;
}

void NewComerRecordResponse::Swap(NewComerRecordResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewComerRecordResponse::GetTypeName() const {
  return "main.NewComerRecordResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ViewSpectacularItemRequest::kSsidFieldNumber;
const int ViewSpectacularItemRequest::kRoleIdFieldNumber;
const int ViewSpectacularItemRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

ViewSpectacularItemRequest::ViewSpectacularItemRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ViewSpectacularItemRequest)
}

void ViewSpectacularItemRequest::InitAsDefaultInstance() {
}

ViewSpectacularItemRequest::ViewSpectacularItemRequest(const ViewSpectacularItemRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ViewSpectacularItemRequest)
}

void ViewSpectacularItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  roleid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewSpectacularItemRequest::~ViewSpectacularItemRequest() {
  // @@protoc_insertion_point(destructor:main.ViewSpectacularItemRequest)
  SharedDtor();
}

void ViewSpectacularItemRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ViewSpectacularItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewSpectacularItemRequest& ViewSpectacularItemRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

ViewSpectacularItemRequest* ViewSpectacularItemRequest::default_instance_ = NULL;

ViewSpectacularItemRequest* ViewSpectacularItemRequest::New() const {
  return new ViewSpectacularItemRequest;
}

void ViewSpectacularItemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ViewSpectacularItemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ssid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ViewSpectacularItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ViewSpectacularItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 2;
      case 2: {
        if (tag == 16) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ViewSpectacularItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ViewSpectacularItemRequest)
  return false;
#undef DO_
}

void ViewSpectacularItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ViewSpectacularItemRequest)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 roleId = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ViewSpectacularItemRequest)
}

int ViewSpectacularItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 roleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewSpectacularItemRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewSpectacularItemRequest*>(&from));
}

void ViewSpectacularItemRequest::MergeFrom(const ViewSpectacularItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ViewSpectacularItemRequest::CopyFrom(const ViewSpectacularItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewSpectacularItemRequest::IsInitialized() const {

  return true;
}

void ViewSpectacularItemRequest::Swap(ViewSpectacularItemRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(roleid_, other->roleid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ViewSpectacularItemRequest::GetTypeName() const {
  return "main.ViewSpectacularItemRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ViewSpectacularItemResponse::kTypeFieldNumber;
const int ViewSpectacularItemResponse::kItemIdFieldNumber;
const int ViewSpectacularItemResponse::kCurrStarFieldNumber;
const int ViewSpectacularItemResponse::kSmileStarFieldNumber;
const int ViewSpectacularItemResponse::kCurrLevelFieldNumber;
const int ViewSpectacularItemResponse::kCurrExpFieldNumber;
const int ViewSpectacularItemResponse::kEffectiveFieldNumber;
const int ViewSpectacularItemResponse::kAtkFieldNumber;
const int ViewSpectacularItemResponse::kDefFieldNumber;
const int ViewSpectacularItemResponse::kSpeedFieldNumber;
const int ViewSpectacularItemResponse::kHpFieldNumber;
const int ViewSpectacularItemResponse::kLordSkillIdFieldNumber;
const int ViewSpectacularItemResponse::kLordSkillExpFieldNumber;
const int ViewSpectacularItemResponse::kGeneSkillIdFieldNumber;
const int ViewSpectacularItemResponse::kGeneSkillExpFieldNumber;
const int ViewSpectacularItemResponse::kEquipIdFieldNumber;
const int ViewSpectacularItemResponse::kReasonInfoFieldNumber;
const int ViewSpectacularItemResponse::kGoverningFieldNumber;
#endif  // !_MSC_VER

ViewSpectacularItemResponse::ViewSpectacularItemResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ViewSpectacularItemResponse)
}

void ViewSpectacularItemResponse::InitAsDefaultInstance() {
}

ViewSpectacularItemResponse::ViewSpectacularItemResponse(const ViewSpectacularItemResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ViewSpectacularItemResponse)
}

void ViewSpectacularItemResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  itemid_ = 0;
  currstar_ = 0;
  smilestar_ = 0;
  currlevel_ = 0;
  currexp_ = 0;
  effective_ = 0;
  atk_ = 0;
  def_ = 0;
  speed_ = 0;
  hp_ = 0;
  lordskillid_ = 0;
  lordskillexp_ = 0;
  geneskillid_ = 0;
  geneskillexp_ = 0;
  governing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewSpectacularItemResponse::~ViewSpectacularItemResponse() {
  // @@protoc_insertion_point(destructor:main.ViewSpectacularItemResponse)
  SharedDtor();
}

void ViewSpectacularItemResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ViewSpectacularItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ViewSpectacularItemResponse& ViewSpectacularItemResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModule_2eproto();
#endif
  return *default_instance_;
}

ViewSpectacularItemResponse* ViewSpectacularItemResponse::default_instance_ = NULL;

ViewSpectacularItemResponse* ViewSpectacularItemResponse::New() const {
  return new ViewSpectacularItemResponse;
}

void ViewSpectacularItemResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ViewSpectacularItemResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, atk_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(def_, geneskillid_);
    geneskillexp_ = 0;
  }
  governing_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  equipid_.Clear();
  reasoninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ViewSpectacularItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ViewSpectacularItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currStar;
        break;
      }

      // optional int32 currStar = 3;
      case 3: {
        if (tag == 24) {
         parse_currStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currstar_)));
          set_has_currstar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_smileStar;
        break;
      }

      // optional int32 smileStar = 4;
      case 4: {
        if (tag == 32) {
         parse_smileStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smilestar_)));
          set_has_smilestar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_currLevel;
        break;
      }

      // optional int32 currLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_currLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currlevel_)));
          set_has_currlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currExp;
        break;
      }

      // optional int32 currExp = 6;
      case 6: {
        if (tag == 48) {
         parse_currExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currexp_)));
          set_has_currexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_effective;
        break;
      }

      // optional int32 effective = 7;
      case 7: {
        if (tag == 56) {
         parse_effective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effective_)));
          set_has_effective();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_atk;
        break;
      }

      // optional int32 atk = 8;
      case 8: {
        if (tag == 64) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_def;
        break;
      }

      // optional int32 def = 9;
      case 9: {
        if (tag == 72) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_speed;
        break;
      }

      // optional int32 speed = 10;
      case 10: {
        if (tag == 80) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional int32 hp = 11;
      case 11: {
        if (tag == 88) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lordSkillId;
        break;
      }

      // optional int32 lordSkillId = 12;
      case 12: {
        if (tag == 96) {
         parse_lordSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillid_)));
          set_has_lordskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_lordSkillExp;
        break;
      }

      // optional int32 lordSkillExp = 13;
      case 13: {
        if (tag == 104) {
         parse_lordSkillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillexp_)));
          set_has_lordskillexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_geneSkillId;
        break;
      }

      // optional int32 geneSkillId = 14;
      case 14: {
        if (tag == 112) {
         parse_geneSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geneskillid_)));
          set_has_geneskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_geneSkillExp;
        break;
      }

      // optional int32 geneSkillExp = 15;
      case 15: {
        if (tag == 120) {
         parse_geneSkillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &geneskillexp_)));
          set_has_geneskillexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_equipId;
        break;
      }

      // repeated int32 equipId = 16;
      case 16: {
        if (tag == 128) {
         parse_equipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_equipid())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_equipId;
        if (input->ExpectTag(138)) goto parse_reasonInfo;
        break;
      }

      // repeated .main.ReasonInfo reasonInfo = 17;
      case 17: {
        if (tag == 138) {
         parse_reasonInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reasoninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_reasonInfo;
        if (input->ExpectTag(144)) goto parse_governing;
        break;
      }

      // optional int32 governing = 18;
      case 18: {
        if (tag == 144) {
         parse_governing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &governing_)));
          set_has_governing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ViewSpectacularItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ViewSpectacularItemResponse)
  return false;
#undef DO_
}

void ViewSpectacularItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ViewSpectacularItemResponse)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 currStar = 3;
  if (has_currstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currstar(), output);
  }

  // optional int32 smileStar = 4;
  if (has_smilestar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->smilestar(), output);
  }

  // optional int32 currLevel = 5;
  if (has_currlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currlevel(), output);
  }

  // optional int32 currExp = 6;
  if (has_currexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currexp(), output);
  }

  // optional int32 effective = 7;
  if (has_effective()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->effective(), output);
  }

  // optional int32 atk = 8;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->atk(), output);
  }

  // optional int32 def = 9;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->def(), output);
  }

  // optional int32 speed = 10;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->speed(), output);
  }

  // optional int32 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hp(), output);
  }

  // optional int32 lordSkillId = 12;
  if (has_lordskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lordskillid(), output);
  }

  // optional int32 lordSkillExp = 13;
  if (has_lordskillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lordskillexp(), output);
  }

  // optional int32 geneSkillId = 14;
  if (has_geneskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->geneskillid(), output);
  }

  // optional int32 geneSkillExp = 15;
  if (has_geneskillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->geneskillexp(), output);
  }

  // repeated int32 equipId = 16;
  for (int i = 0; i < this->equipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->equipid(i), output);
  }

  // repeated .main.ReasonInfo reasonInfo = 17;
  for (int i = 0; i < this->reasoninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->reasoninfo(i), output);
  }

  // optional int32 governing = 18;
  if (has_governing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->governing(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ViewSpectacularItemResponse)
}

int ViewSpectacularItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 currStar = 3;
    if (has_currstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currstar());
    }

    // optional int32 smileStar = 4;
    if (has_smilestar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smilestar());
    }

    // optional int32 currLevel = 5;
    if (has_currlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currlevel());
    }

    // optional int32 currExp = 6;
    if (has_currexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currexp());
    }

    // optional int32 effective = 7;
    if (has_effective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effective());
    }

    // optional int32 atk = 8;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 def = 9;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }

    // optional int32 speed = 10;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 lordSkillId = 12;
    if (has_lordskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillid());
    }

    // optional int32 lordSkillExp = 13;
    if (has_lordskillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillexp());
    }

    // optional int32 geneSkillId = 14;
    if (has_geneskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geneskillid());
    }

    // optional int32 geneSkillExp = 15;
    if (has_geneskillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->geneskillexp());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 governing = 18;
    if (has_governing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->governing());
    }

  }
  // repeated int32 equipId = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipid(i));
    }
    total_size += 2 * this->equipid_size() + data_size;
  }

  // repeated .main.ReasonInfo reasonInfo = 17;
  total_size += 2 * this->reasoninfo_size();
  for (int i = 0; i < this->reasoninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reasoninfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewSpectacularItemResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ViewSpectacularItemResponse*>(&from));
}

void ViewSpectacularItemResponse::MergeFrom(const ViewSpectacularItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipid_.MergeFrom(from.equipid_);
  reasoninfo_.MergeFrom(from.reasoninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_currstar()) {
      set_currstar(from.currstar());
    }
    if (from.has_smilestar()) {
      set_smilestar(from.smilestar());
    }
    if (from.has_currlevel()) {
      set_currlevel(from.currlevel());
    }
    if (from.has_currexp()) {
      set_currexp(from.currexp());
    }
    if (from.has_effective()) {
      set_effective(from.effective());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_lordskillid()) {
      set_lordskillid(from.lordskillid());
    }
    if (from.has_lordskillexp()) {
      set_lordskillexp(from.lordskillexp());
    }
    if (from.has_geneskillid()) {
      set_geneskillid(from.geneskillid());
    }
    if (from.has_geneskillexp()) {
      set_geneskillexp(from.geneskillexp());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_governing()) {
      set_governing(from.governing());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ViewSpectacularItemResponse::CopyFrom(const ViewSpectacularItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewSpectacularItemResponse::IsInitialized() const {

  return true;
}

void ViewSpectacularItemResponse::Swap(ViewSpectacularItemResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(currstar_, other->currstar_);
    std::swap(smilestar_, other->smilestar_);
    std::swap(currlevel_, other->currlevel_);
    std::swap(currexp_, other->currexp_);
    std::swap(effective_, other->effective_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(speed_, other->speed_);
    std::swap(hp_, other->hp_);
    std::swap(lordskillid_, other->lordskillid_);
    std::swap(lordskillexp_, other->lordskillexp_);
    std::swap(geneskillid_, other->geneskillid_);
    std::swap(geneskillexp_, other->geneskillexp_);
    equipid_.Swap(&other->equipid_);
    reasoninfo_.Swap(&other->reasoninfo_);
    std::swap(governing_, other->governing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ViewSpectacularItemResponse::GetTypeName() const {
  return "main.ViewSpectacularItemResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
