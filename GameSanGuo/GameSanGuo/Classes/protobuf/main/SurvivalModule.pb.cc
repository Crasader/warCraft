// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SurvivalModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SurvivalModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_SurvivalModule_2eproto() {
  delete SurvivalMainInfoRequest::default_instance_;
  delete SurvivalMainInfoResponse::default_instance_;
  delete SurvivalChallengeRequest::default_instance_;
  delete SurvivalChallengeResponse::default_instance_;
  delete SurvivalBossDumpInfo::default_instance_;
  delete SurvivalStartRequest::default_instance_;
  delete SurvivalStartResponse::default_instance_;
  delete SurvivalRankListRequest::default_instance_;
  delete SurvivalRankListResponse::default_instance_;
  delete SurvivalRankPlayerMessage::default_instance_;
  delete SurvivalFinalStatRequest::default_instance_;
  delete SurvivalFinalStatResponse::default_instance_;
  delete SurvivalDailyRewardResponse::default_instance_;
  delete SurvivalStopRequest::default_instance_;
  delete JunhunInfoRequest::default_instance_;
  delete JunhunInfoResponse::default_instance_;
  delete JunhunInjectRequest::default_instance_;
  delete JunhunInjectResponse::default_instance_;
  delete JunhunRewardRequest::default_instance_;
  delete JunhunRewardResponse::default_instance_;
  delete JunhunRewardModel::default_instance_;
  delete JunhunWithdrawRequest::default_instance_;
  delete JunhunWithdrawResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SurvivalModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SurvivalModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SurvivalMainInfoRequest::default_instance_ = new SurvivalMainInfoRequest();
  SurvivalMainInfoResponse::default_instance_ = new SurvivalMainInfoResponse();
  SurvivalChallengeRequest::default_instance_ = new SurvivalChallengeRequest();
  SurvivalChallengeResponse::default_instance_ = new SurvivalChallengeResponse();
  SurvivalBossDumpInfo::default_instance_ = new SurvivalBossDumpInfo();
  SurvivalStartRequest::default_instance_ = new SurvivalStartRequest();
  SurvivalStartResponse::default_instance_ = new SurvivalStartResponse();
  SurvivalRankListRequest::default_instance_ = new SurvivalRankListRequest();
  SurvivalRankListResponse::default_instance_ = new SurvivalRankListResponse();
  SurvivalRankPlayerMessage::default_instance_ = new SurvivalRankPlayerMessage();
  SurvivalFinalStatRequest::default_instance_ = new SurvivalFinalStatRequest();
  SurvivalFinalStatResponse::default_instance_ = new SurvivalFinalStatResponse();
  SurvivalDailyRewardResponse::default_instance_ = new SurvivalDailyRewardResponse();
  SurvivalStopRequest::default_instance_ = new SurvivalStopRequest();
  JunhunInfoRequest::default_instance_ = new JunhunInfoRequest();
  JunhunInfoResponse::default_instance_ = new JunhunInfoResponse();
  JunhunInjectRequest::default_instance_ = new JunhunInjectRequest();
  JunhunInjectResponse::default_instance_ = new JunhunInjectResponse();
  JunhunRewardRequest::default_instance_ = new JunhunRewardRequest();
  JunhunRewardResponse::default_instance_ = new JunhunRewardResponse();
  JunhunRewardModel::default_instance_ = new JunhunRewardModel();
  JunhunWithdrawRequest::default_instance_ = new JunhunWithdrawRequest();
  JunhunWithdrawResponse::default_instance_ = new JunhunWithdrawResponse();
  SurvivalMainInfoRequest::default_instance_->InitAsDefaultInstance();
  SurvivalMainInfoResponse::default_instance_->InitAsDefaultInstance();
  SurvivalChallengeRequest::default_instance_->InitAsDefaultInstance();
  SurvivalChallengeResponse::default_instance_->InitAsDefaultInstance();
  SurvivalBossDumpInfo::default_instance_->InitAsDefaultInstance();
  SurvivalStartRequest::default_instance_->InitAsDefaultInstance();
  SurvivalStartResponse::default_instance_->InitAsDefaultInstance();
  SurvivalRankListRequest::default_instance_->InitAsDefaultInstance();
  SurvivalRankListResponse::default_instance_->InitAsDefaultInstance();
  SurvivalRankPlayerMessage::default_instance_->InitAsDefaultInstance();
  SurvivalFinalStatRequest::default_instance_->InitAsDefaultInstance();
  SurvivalFinalStatResponse::default_instance_->InitAsDefaultInstance();
  SurvivalDailyRewardResponse::default_instance_->InitAsDefaultInstance();
  SurvivalStopRequest::default_instance_->InitAsDefaultInstance();
  JunhunInfoRequest::default_instance_->InitAsDefaultInstance();
  JunhunInfoResponse::default_instance_->InitAsDefaultInstance();
  JunhunInjectRequest::default_instance_->InitAsDefaultInstance();
  JunhunInjectResponse::default_instance_->InitAsDefaultInstance();
  JunhunRewardRequest::default_instance_->InitAsDefaultInstance();
  JunhunRewardResponse::default_instance_->InitAsDefaultInstance();
  JunhunRewardModel::default_instance_->InitAsDefaultInstance();
  JunhunWithdrawRequest::default_instance_->InitAsDefaultInstance();
  JunhunWithdrawResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SurvivalModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SurvivalModule_2eproto_once_);
void protobuf_AddDesc_SurvivalModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SurvivalModule_2eproto_once_,
                 &protobuf_AddDesc_SurvivalModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SurvivalModule_2eproto {
  StaticDescriptorInitializer_SurvivalModule_2eproto() {
    protobuf_AddDesc_SurvivalModule_2eproto();
  }
} static_descriptor_initializer_SurvivalModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SurvivalMainInfoRequest::SurvivalMainInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalMainInfoRequest)
}

void SurvivalMainInfoRequest::InitAsDefaultInstance() {
}

SurvivalMainInfoRequest::SurvivalMainInfoRequest(const SurvivalMainInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalMainInfoRequest)
}

void SurvivalMainInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalMainInfoRequest::~SurvivalMainInfoRequest() {
  // @@protoc_insertion_point(destructor:main.SurvivalMainInfoRequest)
  SharedDtor();
}

void SurvivalMainInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalMainInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalMainInfoRequest& SurvivalMainInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalMainInfoRequest* SurvivalMainInfoRequest::default_instance_ = NULL;

SurvivalMainInfoRequest* SurvivalMainInfoRequest::New() const {
  return new SurvivalMainInfoRequest;
}

void SurvivalMainInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalMainInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalMainInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalMainInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalMainInfoRequest)
  return false;
#undef DO_
}

void SurvivalMainInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalMainInfoRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalMainInfoRequest)
}

int SurvivalMainInfoRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalMainInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalMainInfoRequest*>(&from));
}

void SurvivalMainInfoRequest::MergeFrom(const SurvivalMainInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalMainInfoRequest::CopyFrom(const SurvivalMainInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalMainInfoRequest::IsInitialized() const {

  return true;
}

void SurvivalMainInfoRequest::Swap(SurvivalMainInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalMainInfoRequest::GetTypeName() const {
  return "main.SurvivalMainInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalMainInfoResponse::kStateFieldNumber;
const int SurvivalMainInfoResponse::kLevelsFieldNumber;
const int SurvivalMainInfoResponse::kFightCountFieldNumber;
const int SurvivalMainInfoResponse::kMaxFightCountFieldNumber;
const int SurvivalMainInfoResponse::kRankFieldNumber;
const int SurvivalMainInfoResponse::kMaxDamageFieldNumber;
const int SurvivalMainInfoResponse::kMaxCanBuyCountFieldNumber;
const int SurvivalMainInfoResponse::kBuyCountFieldNumber;
const int SurvivalMainInfoResponse::kPriceFieldNumber;
#endif  // !_MSC_VER

SurvivalMainInfoResponse::SurvivalMainInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalMainInfoResponse)
}

void SurvivalMainInfoResponse::InitAsDefaultInstance() {
}

SurvivalMainInfoResponse::SurvivalMainInfoResponse(const SurvivalMainInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalMainInfoResponse)
}

void SurvivalMainInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  levels_ = 0;
  fightcount_ = 1;
  maxfightcount_ = 1;
  rank_ = 0;
  maxdamage_ = GOOGLE_ULONGLONG(0);
  maxcanbuycount_ = 0;
  buycount_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalMainInfoResponse::~SurvivalMainInfoResponse() {
  // @@protoc_insertion_point(destructor:main.SurvivalMainInfoResponse)
  SharedDtor();
}

void SurvivalMainInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalMainInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalMainInfoResponse& SurvivalMainInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalMainInfoResponse* SurvivalMainInfoResponse::default_instance_ = NULL;

SurvivalMainInfoResponse* SurvivalMainInfoResponse::New() const {
  return new SurvivalMainInfoResponse;
}

void SurvivalMainInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalMainInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, levels_);
    ZR_(maxdamage_, buycount_);
    fightcount_ = 1;
    maxfightcount_ = 1;
  }
  price_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalMainInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalMainInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_levels;
        break;
      }

      // required int32 levels = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levels_)));
          set_has_levels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fightCount;
        break;
      }

      // required int32 fightCount = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_fightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcount_)));
          set_has_fightcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxFightCount;
        break;
      }

      // required int32 maxFightCount = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_maxFightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfightcount_)));
          set_has_maxfightcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // required int32 rank = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxDamage;
        break;
      }

      // required uint64 maxDamage = 6;
      case 6: {
        if (tag == 48) {
         parse_maxDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxdamage_)));
          set_has_maxdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxCanBuyCount;
        break;
      }

      // optional int32 maxCanBuyCount = 7;
      case 7: {
        if (tag == 56) {
         parse_maxCanBuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcanbuycount_)));
          set_has_maxcanbuycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_buyCount;
        break;
      }

      // optional int32 buyCount = 8;
      case 8: {
        if (tag == 64) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_price;
        break;
      }

      // optional int32 price = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalMainInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalMainInfoResponse)
  return false;
#undef DO_
}

void SurvivalMainInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalMainInfoResponse)
  // required int32 state = 1 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 levels = 2 [default = 0];
  if (has_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levels(), output);
  }

  // required int32 fightCount = 3 [default = 1];
  if (has_fightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightcount(), output);
  }

  // required int32 maxFightCount = 4 [default = 1];
  if (has_maxfightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxfightcount(), output);
  }

  // required int32 rank = 5 [default = 0];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  // required uint64 maxDamage = 6;
  if (has_maxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->maxdamage(), output);
  }

  // optional int32 maxCanBuyCount = 7;
  if (has_maxcanbuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxcanbuycount(), output);
  }

  // optional int32 buyCount = 8;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buycount(), output);
  }

  // optional int32 price = 9 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->price(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalMainInfoResponse)
}

int SurvivalMainInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 levels = 2 [default = 0];
    if (has_levels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levels());
    }

    // required int32 fightCount = 3 [default = 1];
    if (has_fightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcount());
    }

    // required int32 maxFightCount = 4 [default = 1];
    if (has_maxfightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfightcount());
    }

    // required int32 rank = 5 [default = 0];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required uint64 maxDamage = 6;
    if (has_maxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxdamage());
    }

    // optional int32 maxCanBuyCount = 7;
    if (has_maxcanbuycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcanbuycount());
    }

    // optional int32 buyCount = 8;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 price = 9 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalMainInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalMainInfoResponse*>(&from));
}

void SurvivalMainInfoResponse::MergeFrom(const SurvivalMainInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_levels()) {
      set_levels(from.levels());
    }
    if (from.has_fightcount()) {
      set_fightcount(from.fightcount());
    }
    if (from.has_maxfightcount()) {
      set_maxfightcount(from.maxfightcount());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_maxdamage()) {
      set_maxdamage(from.maxdamage());
    }
    if (from.has_maxcanbuycount()) {
      set_maxcanbuycount(from.maxcanbuycount());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalMainInfoResponse::CopyFrom(const SurvivalMainInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalMainInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SurvivalMainInfoResponse::Swap(SurvivalMainInfoResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(levels_, other->levels_);
    std::swap(fightcount_, other->fightcount_);
    std::swap(maxfightcount_, other->maxfightcount_);
    std::swap(rank_, other->rank_);
    std::swap(maxdamage_, other->maxdamage_);
    std::swap(maxcanbuycount_, other->maxcanbuycount_);
    std::swap(buycount_, other->buycount_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalMainInfoResponse::GetTypeName() const {
  return "main.SurvivalMainInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SurvivalChallengeRequest::SurvivalChallengeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalChallengeRequest)
}

void SurvivalChallengeRequest::InitAsDefaultInstance() {
}

SurvivalChallengeRequest::SurvivalChallengeRequest(const SurvivalChallengeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalChallengeRequest)
}

void SurvivalChallengeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalChallengeRequest::~SurvivalChallengeRequest() {
  // @@protoc_insertion_point(destructor:main.SurvivalChallengeRequest)
  SharedDtor();
}

void SurvivalChallengeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalChallengeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalChallengeRequest& SurvivalChallengeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalChallengeRequest* SurvivalChallengeRequest::default_instance_ = NULL;

SurvivalChallengeRequest* SurvivalChallengeRequest::New() const {
  return new SurvivalChallengeRequest;
}

void SurvivalChallengeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalChallengeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalChallengeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalChallengeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalChallengeRequest)
  return false;
#undef DO_
}

void SurvivalChallengeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalChallengeRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalChallengeRequest)
}

int SurvivalChallengeRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalChallengeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalChallengeRequest*>(&from));
}

void SurvivalChallengeRequest::MergeFrom(const SurvivalChallengeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalChallengeRequest::CopyFrom(const SurvivalChallengeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalChallengeRequest::IsInitialized() const {

  return true;
}

void SurvivalChallengeRequest::Swap(SurvivalChallengeRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalChallengeRequest::GetTypeName() const {
  return "main.SurvivalChallengeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalChallengeResponse::kStateFieldNumber;
const int SurvivalChallengeResponse::kSurvivalBossDumpInfoFieldNumber;
const int SurvivalChallengeResponse::kNeedRmbFieldNumber;
const int SurvivalChallengeResponse::kWillAddCountFieldNumber;
#endif  // !_MSC_VER

SurvivalChallengeResponse::SurvivalChallengeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalChallengeResponse)
}

void SurvivalChallengeResponse::InitAsDefaultInstance() {
}

SurvivalChallengeResponse::SurvivalChallengeResponse(const SurvivalChallengeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalChallengeResponse)
}

void SurvivalChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  needrmb_ = 0;
  willaddcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalChallengeResponse::~SurvivalChallengeResponse() {
  // @@protoc_insertion_point(destructor:main.SurvivalChallengeResponse)
  SharedDtor();
}

void SurvivalChallengeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalChallengeResponse& SurvivalChallengeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalChallengeResponse* SurvivalChallengeResponse::default_instance_ = NULL;

SurvivalChallengeResponse* SurvivalChallengeResponse::New() const {
  return new SurvivalChallengeResponse;
}

void SurvivalChallengeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalChallengeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, willaddcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  survivalbossdumpinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalChallengeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_survivalBossDumpInfo;
        break;
      }

      // repeated .main.SurvivalBossDumpInfo survivalBossDumpInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_survivalBossDumpInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_survivalbossdumpinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_survivalBossDumpInfo;
        if (input->ExpectTag(24)) goto parse_needRmb;
        break;
      }

      // optional sint32 needRmb = 3;
      case 3: {
        if (tag == 24) {
         parse_needRmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &needrmb_)));
          set_has_needrmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_willAddCount;
        break;
      }

      // optional sint32 willAddCount = 4;
      case 4: {
        if (tag == 32) {
         parse_willAddCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &willaddcount_)));
          set_has_willaddcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalChallengeResponse)
  return false;
#undef DO_
}

void SurvivalChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalChallengeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated .main.SurvivalBossDumpInfo survivalBossDumpInfo = 2;
  for (int i = 0; i < this->survivalbossdumpinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->survivalbossdumpinfo(i), output);
  }

  // optional sint32 needRmb = 3;
  if (has_needrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->needrmb(), output);
  }

  // optional sint32 willAddCount = 4;
  if (has_willaddcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->willaddcount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalChallengeResponse)
}

int SurvivalChallengeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional sint32 needRmb = 3;
    if (has_needrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->needrmb());
    }

    // optional sint32 willAddCount = 4;
    if (has_willaddcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->willaddcount());
    }

  }
  // repeated .main.SurvivalBossDumpInfo survivalBossDumpInfo = 2;
  total_size += 1 * this->survivalbossdumpinfo_size();
  for (int i = 0; i < this->survivalbossdumpinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->survivalbossdumpinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalChallengeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalChallengeResponse*>(&from));
}

void SurvivalChallengeResponse::MergeFrom(const SurvivalChallengeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  survivalbossdumpinfo_.MergeFrom(from.survivalbossdumpinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_needrmb()) {
      set_needrmb(from.needrmb());
    }
    if (from.has_willaddcount()) {
      set_willaddcount(from.willaddcount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalChallengeResponse::CopyFrom(const SurvivalChallengeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalChallengeResponse::IsInitialized() const {

  return true;
}

void SurvivalChallengeResponse::Swap(SurvivalChallengeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    survivalbossdumpinfo_.Swap(&other->survivalbossdumpinfo_);
    std::swap(needrmb_, other->needrmb_);
    std::swap(willaddcount_, other->willaddcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalChallengeResponse::GetTypeName() const {
  return "main.SurvivalChallengeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalBossDumpInfo::kIndexFieldNumber;
const int SurvivalBossDumpInfo::kDamageFieldNumber;
const int SurvivalBossDumpInfo::kCoinsFieldNumber;
#endif  // !_MSC_VER

SurvivalBossDumpInfo::SurvivalBossDumpInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalBossDumpInfo)
}

void SurvivalBossDumpInfo::InitAsDefaultInstance() {
}

SurvivalBossDumpInfo::SurvivalBossDumpInfo(const SurvivalBossDumpInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalBossDumpInfo)
}

void SurvivalBossDumpInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  damage_ = 0;
  coins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalBossDumpInfo::~SurvivalBossDumpInfo() {
  // @@protoc_insertion_point(destructor:main.SurvivalBossDumpInfo)
  SharedDtor();
}

void SurvivalBossDumpInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalBossDumpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalBossDumpInfo& SurvivalBossDumpInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalBossDumpInfo* SurvivalBossDumpInfo::default_instance_ = NULL;

SurvivalBossDumpInfo* SurvivalBossDumpInfo::New() const {
  return new SurvivalBossDumpInfo;
}

void SurvivalBossDumpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalBossDumpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, coins_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalBossDumpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalBossDumpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional int32 damage = 2;
      case 2: {
        if (tag == 16) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coins;
        break;
      }

      // optional int32 coins = 3;
      case 3: {
        if (tag == 24) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalBossDumpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalBossDumpInfo)
  return false;
#undef DO_
}

void SurvivalBossDumpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalBossDumpInfo)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  // optional int32 coins = 3;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coins(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalBossDumpInfo)
}

int SurvivalBossDumpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 coins = 3;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalBossDumpInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalBossDumpInfo*>(&from));
}

void SurvivalBossDumpInfo::MergeFrom(const SurvivalBossDumpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalBossDumpInfo::CopyFrom(const SurvivalBossDumpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalBossDumpInfo::IsInitialized() const {

  return true;
}

void SurvivalBossDumpInfo::Swap(SurvivalBossDumpInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(damage_, other->damage_);
    std::swap(coins_, other->coins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalBossDumpInfo::GetTypeName() const {
  return "main.SurvivalBossDumpInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalStartRequest::kIsJumpFieldNumber;
const int SurvivalStartRequest::kLevelsFieldNumber;
#endif  // !_MSC_VER

SurvivalStartRequest::SurvivalStartRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalStartRequest)
}

void SurvivalStartRequest::InitAsDefaultInstance() {
}

SurvivalStartRequest::SurvivalStartRequest(const SurvivalStartRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalStartRequest)
}

void SurvivalStartRequest::SharedCtor() {
  _cached_size_ = 0;
  isjump_ = 0;
  levels_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalStartRequest::~SurvivalStartRequest() {
  // @@protoc_insertion_point(destructor:main.SurvivalStartRequest)
  SharedDtor();
}

void SurvivalStartRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalStartRequest& SurvivalStartRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalStartRequest* SurvivalStartRequest::default_instance_ = NULL;

SurvivalStartRequest* SurvivalStartRequest::New() const {
  return new SurvivalStartRequest;
}

void SurvivalStartRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalStartRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(isjump_, levels_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalStartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isJump = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isjump_)));
          set_has_isjump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_levels;
        break;
      }

      // optional int32 levels = 2;
      case 2: {
        if (tag == 16) {
         parse_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levels_)));
          set_has_levels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalStartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalStartRequest)
  return false;
#undef DO_
}

void SurvivalStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalStartRequest)
  // required int32 isJump = 1 [default = 0];
  if (has_isjump()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isjump(), output);
  }

  // optional int32 levels = 2;
  if (has_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->levels(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalStartRequest)
}

int SurvivalStartRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isJump = 1 [default = 0];
    if (has_isjump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isjump());
    }

    // optional int32 levels = 2;
    if (has_levels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levels());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalStartRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalStartRequest*>(&from));
}

void SurvivalStartRequest::MergeFrom(const SurvivalStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isjump()) {
      set_isjump(from.isjump());
    }
    if (from.has_levels()) {
      set_levels(from.levels());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalStartRequest::CopyFrom(const SurvivalStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalStartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SurvivalStartRequest::Swap(SurvivalStartRequest* other) {
  if (other != this) {
    std::swap(isjump_, other->isjump_);
    std::swap(levels_, other->levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalStartRequest::GetTypeName() const {
  return "main.SurvivalStartRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalStartResponse::kStateFieldNumber;
const int SurvivalStartResponse::kErrMsgFieldNumber;
#endif  // !_MSC_VER

SurvivalStartResponse::SurvivalStartResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalStartResponse)
}

void SurvivalStartResponse::InitAsDefaultInstance() {
}

SurvivalStartResponse::SurvivalStartResponse(const SurvivalStartResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalStartResponse)
}

void SurvivalStartResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalStartResponse::~SurvivalStartResponse() {
  // @@protoc_insertion_point(destructor:main.SurvivalStartResponse)
  SharedDtor();
}

void SurvivalStartResponse::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalStartResponse& SurvivalStartResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalStartResponse* SurvivalStartResponse::default_instance_ = NULL;

SurvivalStartResponse* SurvivalStartResponse::New() const {
  return new SurvivalStartResponse;
}

void SurvivalStartResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalStartResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalStartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalStartResponse)
  return false;
#undef DO_
}

void SurvivalStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalStartResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string errMsg = 2 [default = ""];
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalStartResponse)
}

int SurvivalStartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string errMsg = 2 [default = ""];
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalStartResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalStartResponse*>(&from));
}

void SurvivalStartResponse::MergeFrom(const SurvivalStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalStartResponse::CopyFrom(const SurvivalStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalStartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SurvivalStartResponse::Swap(SurvivalStartResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalStartResponse::GetTypeName() const {
  return "main.SurvivalStartResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalRankListRequest::kPageFieldNumber;
#endif  // !_MSC_VER

SurvivalRankListRequest::SurvivalRankListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalRankListRequest)
}

void SurvivalRankListRequest::InitAsDefaultInstance() {
}

SurvivalRankListRequest::SurvivalRankListRequest(const SurvivalRankListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalRankListRequest)
}

void SurvivalRankListRequest::SharedCtor() {
  _cached_size_ = 0;
  page_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalRankListRequest::~SurvivalRankListRequest() {
  // @@protoc_insertion_point(destructor:main.SurvivalRankListRequest)
  SharedDtor();
}

void SurvivalRankListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalRankListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalRankListRequest& SurvivalRankListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalRankListRequest* SurvivalRankListRequest::default_instance_ = NULL;

SurvivalRankListRequest* SurvivalRankListRequest::New() const {
  return new SurvivalRankListRequest;
}

void SurvivalRankListRequest::Clear() {
  page_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalRankListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalRankListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 page = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalRankListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalRankListRequest)
  return false;
#undef DO_
}

void SurvivalRankListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalRankListRequest)
  // required int32 page = 1 [default = 1];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalRankListRequest)
}

int SurvivalRankListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 page = 1 [default = 1];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalRankListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalRankListRequest*>(&from));
}

void SurvivalRankListRequest::MergeFrom(const SurvivalRankListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalRankListRequest::CopyFrom(const SurvivalRankListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalRankListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SurvivalRankListRequest::Swap(SurvivalRankListRequest* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalRankListRequest::GetTypeName() const {
  return "main.SurvivalRankListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalRankListResponse::kTotalItemsNumFieldNumber;
const int SurvivalRankListResponse::kNowRankFieldNumber;
const int SurvivalRankListResponse::kRewardCoinsFieldNumber;
const int SurvivalRankListResponse::kRankPlayersFieldNumber;
const int SurvivalRankListResponse::kPageItemsNumFieldNumber;
const int SurvivalRankListResponse::kRewardNumFieldNumber;
const int SurvivalRankListResponse::kResidueTimeFieldNumber;
#endif  // !_MSC_VER

SurvivalRankListResponse::SurvivalRankListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalRankListResponse)
}

void SurvivalRankListResponse::InitAsDefaultInstance() {
}

SurvivalRankListResponse::SurvivalRankListResponse(const SurvivalRankListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalRankListResponse)
}

void SurvivalRankListResponse::SharedCtor() {
  _cached_size_ = 0;
  totalitemsnum_ = 0;
  nowrank_ = 0;
  rewardcoins_ = 0;
  pageitemsnum_ = 0;
  rewardnum_ = 0;
  residuetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalRankListResponse::~SurvivalRankListResponse() {
  // @@protoc_insertion_point(destructor:main.SurvivalRankListResponse)
  SharedDtor();
}

void SurvivalRankListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalRankListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalRankListResponse& SurvivalRankListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalRankListResponse* SurvivalRankListResponse::default_instance_ = NULL;

SurvivalRankListResponse* SurvivalRankListResponse::New() const {
  return new SurvivalRankListResponse;
}

void SurvivalRankListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalRankListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(totalitemsnum_, nowrank_);
    ZR_(rewardcoins_, rewardnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalRankListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalRankListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 totalItemsNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalitemsnum_)));
          set_has_totalitemsnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nowRank;
        break;
      }

      // required int32 nowRank = 2;
      case 2: {
        if (tag == 16) {
         parse_nowRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowrank_)));
          set_has_nowrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rewardCoins;
        break;
      }

      // required int32 rewardCoins = 3;
      case 3: {
        if (tag == 24) {
         parse_rewardCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardcoins_)));
          set_has_rewardcoins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rankPlayers;
        break;
      }

      // repeated .main.SurvivalRankPlayerMessage rankPlayers = 4;
      case 4: {
        if (tag == 34) {
         parse_rankPlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankplayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rankPlayers;
        if (input->ExpectTag(40)) goto parse_pageItemsNum;
        break;
      }

      // optional int32 pageItemsNum = 5;
      case 5: {
        if (tag == 40) {
         parse_pageItemsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageitemsnum_)));
          set_has_pageitemsnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rewardNum;
        break;
      }

      // optional sint32 rewardNum = 6;
      case 6: {
        if (tag == 48) {
         parse_rewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_residueTime;
        break;
      }

      // optional sint64 residueTime = 7;
      case 7: {
        if (tag == 56) {
         parse_residueTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &residuetime_)));
          set_has_residuetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalRankListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalRankListResponse)
  return false;
#undef DO_
}

void SurvivalRankListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalRankListResponse)
  // required int32 totalItemsNum = 1;
  if (has_totalitemsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalitemsnum(), output);
  }

  // required int32 nowRank = 2;
  if (has_nowrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nowrank(), output);
  }

  // required int32 rewardCoins = 3;
  if (has_rewardcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardcoins(), output);
  }

  // repeated .main.SurvivalRankPlayerMessage rankPlayers = 4;
  for (int i = 0; i < this->rankplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rankplayers(i), output);
  }

  // optional int32 pageItemsNum = 5;
  if (has_pageitemsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pageitemsnum(), output);
  }

  // optional sint32 rewardNum = 6;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->rewardnum(), output);
  }

  // optional sint64 residueTime = 7;
  if (has_residuetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->residuetime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalRankListResponse)
}

int SurvivalRankListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 totalItemsNum = 1;
    if (has_totalitemsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalitemsnum());
    }

    // required int32 nowRank = 2;
    if (has_nowrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowrank());
    }

    // required int32 rewardCoins = 3;
    if (has_rewardcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardcoins());
    }

    // optional int32 pageItemsNum = 5;
    if (has_pageitemsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pageitemsnum());
    }

    // optional sint32 rewardNum = 6;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rewardnum());
    }

    // optional sint64 residueTime = 7;
    if (has_residuetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->residuetime());
    }

  }
  // repeated .main.SurvivalRankPlayerMessage rankPlayers = 4;
  total_size += 1 * this->rankplayers_size();
  for (int i = 0; i < this->rankplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankplayers(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalRankListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalRankListResponse*>(&from));
}

void SurvivalRankListResponse::MergeFrom(const SurvivalRankListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankplayers_.MergeFrom(from.rankplayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalitemsnum()) {
      set_totalitemsnum(from.totalitemsnum());
    }
    if (from.has_nowrank()) {
      set_nowrank(from.nowrank());
    }
    if (from.has_rewardcoins()) {
      set_rewardcoins(from.rewardcoins());
    }
    if (from.has_pageitemsnum()) {
      set_pageitemsnum(from.pageitemsnum());
    }
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
    if (from.has_residuetime()) {
      set_residuetime(from.residuetime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalRankListResponse::CopyFrom(const SurvivalRankListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalRankListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rankplayers())) return false;
  return true;
}

void SurvivalRankListResponse::Swap(SurvivalRankListResponse* other) {
  if (other != this) {
    std::swap(totalitemsnum_, other->totalitemsnum_);
    std::swap(nowrank_, other->nowrank_);
    std::swap(rewardcoins_, other->rewardcoins_);
    rankplayers_.Swap(&other->rankplayers_);
    std::swap(pageitemsnum_, other->pageitemsnum_);
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(residuetime_, other->residuetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalRankListResponse::GetTypeName() const {
  return "main.SurvivalRankListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalRankPlayerMessage::kPlayerIdFieldNumber;
const int SurvivalRankPlayerMessage::kIconIdFieldNumber;
const int SurvivalRankPlayerMessage::kNickNameFieldNumber;
const int SurvivalRankPlayerMessage::kRankCountFieldNumber;
const int SurvivalRankPlayerMessage::kSurvivalLevelFieldNumber;
const int SurvivalRankPlayerMessage::kMaxDamageFieldNumber;
const int SurvivalRankPlayerMessage::kAcquireGoldFieldNumber;
#endif  // !_MSC_VER

SurvivalRankPlayerMessage::SurvivalRankPlayerMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalRankPlayerMessage)
}

void SurvivalRankPlayerMessage::InitAsDefaultInstance() {
}

SurvivalRankPlayerMessage::SurvivalRankPlayerMessage(const SurvivalRankPlayerMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalRankPlayerMessage)
}

void SurvivalRankPlayerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = 0;
  iconid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rankcount_ = 0;
  survivallevel_ = 0;
  maxdamage_ = GOOGLE_ULONGLONG(0);
  acquiregold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalRankPlayerMessage::~SurvivalRankPlayerMessage() {
  // @@protoc_insertion_point(destructor:main.SurvivalRankPlayerMessage)
  SharedDtor();
}

void SurvivalRankPlayerMessage::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalRankPlayerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalRankPlayerMessage& SurvivalRankPlayerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalRankPlayerMessage* SurvivalRankPlayerMessage::default_instance_ = NULL;

SurvivalRankPlayerMessage* SurvivalRankPlayerMessage::New() const {
  return new SurvivalRankPlayerMessage;
}

void SurvivalRankPlayerMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalRankPlayerMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(playerid_, iconid_);
    ZR_(rankcount_, acquiregold_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalRankPlayerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalRankPlayerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iconId;
        break;
      }

      // required int32 iconId = 2;
      case 2: {
        if (tag == 16) {
         parse_iconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // required string nickName = 3;
      case 3: {
        if (tag == 26) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rankCount;
        break;
      }

      // required int32 rankCount = 4;
      case 4: {
        if (tag == 32) {
         parse_rankCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankcount_)));
          set_has_rankcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_survivalLevel;
        break;
      }

      // required int32 survivalLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_survivalLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &survivallevel_)));
          set_has_survivallevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxDamage;
        break;
      }

      // required uint64 maxDamage = 6;
      case 6: {
        if (tag == 48) {
         parse_maxDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxdamage_)));
          set_has_maxdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_acquireGold;
        break;
      }

      // optional sint32 acquireGold = 7;
      case 7: {
        if (tag == 56) {
         parse_acquireGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &acquiregold_)));
          set_has_acquiregold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalRankPlayerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalRankPlayerMessage)
  return false;
#undef DO_
}

void SurvivalRankPlayerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalRankPlayerMessage)
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 iconId = 2;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iconid(), output);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // required int32 rankCount = 4;
  if (has_rankcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankcount(), output);
  }

  // required int32 survivalLevel = 5;
  if (has_survivallevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->survivallevel(), output);
  }

  // required uint64 maxDamage = 6;
  if (has_maxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->maxdamage(), output);
  }

  // optional sint32 acquireGold = 7;
  if (has_acquiregold()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->acquiregold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalRankPlayerMessage)
}

int SurvivalRankPlayerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 iconId = 2;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 rankCount = 4;
    if (has_rankcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankcount());
    }

    // required int32 survivalLevel = 5;
    if (has_survivallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->survivallevel());
    }

    // required uint64 maxDamage = 6;
    if (has_maxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxdamage());
    }

    // optional sint32 acquireGold = 7;
    if (has_acquiregold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->acquiregold());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalRankPlayerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalRankPlayerMessage*>(&from));
}

void SurvivalRankPlayerMessage::MergeFrom(const SurvivalRankPlayerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_rankcount()) {
      set_rankcount(from.rankcount());
    }
    if (from.has_survivallevel()) {
      set_survivallevel(from.survivallevel());
    }
    if (from.has_maxdamage()) {
      set_maxdamage(from.maxdamage());
    }
    if (from.has_acquiregold()) {
      set_acquiregold(from.acquiregold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalRankPlayerMessage::CopyFrom(const SurvivalRankPlayerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalRankPlayerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SurvivalRankPlayerMessage::Swap(SurvivalRankPlayerMessage* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(iconid_, other->iconid_);
    std::swap(nickname_, other->nickname_);
    std::swap(rankcount_, other->rankcount_);
    std::swap(survivallevel_, other->survivallevel_);
    std::swap(maxdamage_, other->maxdamage_);
    std::swap(acquiregold_, other->acquiregold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalRankPlayerMessage::GetTypeName() const {
  return "main.SurvivalRankPlayerMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SurvivalFinalStatRequest::SurvivalFinalStatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalFinalStatRequest)
}

void SurvivalFinalStatRequest::InitAsDefaultInstance() {
}

SurvivalFinalStatRequest::SurvivalFinalStatRequest(const SurvivalFinalStatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalFinalStatRequest)
}

void SurvivalFinalStatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalFinalStatRequest::~SurvivalFinalStatRequest() {
  // @@protoc_insertion_point(destructor:main.SurvivalFinalStatRequest)
  SharedDtor();
}

void SurvivalFinalStatRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalFinalStatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalFinalStatRequest& SurvivalFinalStatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalFinalStatRequest* SurvivalFinalStatRequest::default_instance_ = NULL;

SurvivalFinalStatRequest* SurvivalFinalStatRequest::New() const {
  return new SurvivalFinalStatRequest;
}

void SurvivalFinalStatRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalFinalStatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalFinalStatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalFinalStatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalFinalStatRequest)
  return false;
#undef DO_
}

void SurvivalFinalStatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalFinalStatRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalFinalStatRequest)
}

int SurvivalFinalStatRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalFinalStatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalFinalStatRequest*>(&from));
}

void SurvivalFinalStatRequest::MergeFrom(const SurvivalFinalStatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalFinalStatRequest::CopyFrom(const SurvivalFinalStatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalFinalStatRequest::IsInitialized() const {

  return true;
}

void SurvivalFinalStatRequest::Swap(SurvivalFinalStatRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalFinalStatRequest::GetTypeName() const {
  return "main.SurvivalFinalStatRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalFinalStatResponse::kMoraleNumFieldNumber;
const int SurvivalFinalStatResponse::kSoulNumFieldNumber;
#endif  // !_MSC_VER

SurvivalFinalStatResponse::SurvivalFinalStatResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalFinalStatResponse)
}

void SurvivalFinalStatResponse::InitAsDefaultInstance() {
}

SurvivalFinalStatResponse::SurvivalFinalStatResponse(const SurvivalFinalStatResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalFinalStatResponse)
}

void SurvivalFinalStatResponse::SharedCtor() {
  _cached_size_ = 0;
  moralenum_ = 0;
  soulnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalFinalStatResponse::~SurvivalFinalStatResponse() {
  // @@protoc_insertion_point(destructor:main.SurvivalFinalStatResponse)
  SharedDtor();
}

void SurvivalFinalStatResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalFinalStatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalFinalStatResponse& SurvivalFinalStatResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalFinalStatResponse* SurvivalFinalStatResponse::default_instance_ = NULL;

SurvivalFinalStatResponse* SurvivalFinalStatResponse::New() const {
  return new SurvivalFinalStatResponse;
}

void SurvivalFinalStatResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalFinalStatResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(moralenum_, soulnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalFinalStatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalFinalStatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 moraleNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moralenum_)));
          set_has_moralenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_soulNum;
        break;
      }

      // required int32 soulNum = 2;
      case 2: {
        if (tag == 16) {
         parse_soulNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulnum_)));
          set_has_soulnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalFinalStatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalFinalStatResponse)
  return false;
#undef DO_
}

void SurvivalFinalStatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalFinalStatResponse)
  // required int32 moraleNum = 1;
  if (has_moralenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->moralenum(), output);
  }

  // required int32 soulNum = 2;
  if (has_soulnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soulnum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalFinalStatResponse)
}

int SurvivalFinalStatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 moraleNum = 1;
    if (has_moralenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moralenum());
    }

    // required int32 soulNum = 2;
    if (has_soulnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulnum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalFinalStatResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalFinalStatResponse*>(&from));
}

void SurvivalFinalStatResponse::MergeFrom(const SurvivalFinalStatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moralenum()) {
      set_moralenum(from.moralenum());
    }
    if (from.has_soulnum()) {
      set_soulnum(from.soulnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalFinalStatResponse::CopyFrom(const SurvivalFinalStatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalFinalStatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SurvivalFinalStatResponse::Swap(SurvivalFinalStatResponse* other) {
  if (other != this) {
    std::swap(moralenum_, other->moralenum_);
    std::swap(soulnum_, other->soulnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalFinalStatResponse::GetTypeName() const {
  return "main.SurvivalFinalStatResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int SurvivalDailyRewardResponse::kRankFieldNumber;
const int SurvivalDailyRewardResponse::kRewardGoldFieldNumber;
#endif  // !_MSC_VER

SurvivalDailyRewardResponse::SurvivalDailyRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalDailyRewardResponse)
}

void SurvivalDailyRewardResponse::InitAsDefaultInstance() {
}

SurvivalDailyRewardResponse::SurvivalDailyRewardResponse(const SurvivalDailyRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalDailyRewardResponse)
}

void SurvivalDailyRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  rewardgold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalDailyRewardResponse::~SurvivalDailyRewardResponse() {
  // @@protoc_insertion_point(destructor:main.SurvivalDailyRewardResponse)
  SharedDtor();
}

void SurvivalDailyRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalDailyRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalDailyRewardResponse& SurvivalDailyRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalDailyRewardResponse* SurvivalDailyRewardResponse::default_instance_ = NULL;

SurvivalDailyRewardResponse* SurvivalDailyRewardResponse::New() const {
  return new SurvivalDailyRewardResponse;
}

void SurvivalDailyRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurvivalDailyRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rank_, rewardgold_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalDailyRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalDailyRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewardGold;
        break;
      }

      // required int32 rewardGold = 2;
      case 2: {
        if (tag == 16) {
         parse_rewardGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardgold_)));
          set_has_rewardgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalDailyRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalDailyRewardResponse)
  return false;
#undef DO_
}

void SurvivalDailyRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalDailyRewardResponse)
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // required int32 rewardGold = 2;
  if (has_rewardgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardgold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalDailyRewardResponse)
}

int SurvivalDailyRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 rewardGold = 2;
    if (has_rewardgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardgold());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalDailyRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalDailyRewardResponse*>(&from));
}

void SurvivalDailyRewardResponse::MergeFrom(const SurvivalDailyRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rewardgold()) {
      set_rewardgold(from.rewardgold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalDailyRewardResponse::CopyFrom(const SurvivalDailyRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalDailyRewardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SurvivalDailyRewardResponse::Swap(SurvivalDailyRewardResponse* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(rewardgold_, other->rewardgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalDailyRewardResponse::GetTypeName() const {
  return "main.SurvivalDailyRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SurvivalStopRequest::SurvivalStopRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SurvivalStopRequest)
}

void SurvivalStopRequest::InitAsDefaultInstance() {
}

SurvivalStopRequest::SurvivalStopRequest(const SurvivalStopRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SurvivalStopRequest)
}

void SurvivalStopRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurvivalStopRequest::~SurvivalStopRequest() {
  // @@protoc_insertion_point(destructor:main.SurvivalStopRequest)
  SharedDtor();
}

void SurvivalStopRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SurvivalStopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurvivalStopRequest& SurvivalStopRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

SurvivalStopRequest* SurvivalStopRequest::default_instance_ = NULL;

SurvivalStopRequest* SurvivalStopRequest::New() const {
  return new SurvivalStopRequest;
}

void SurvivalStopRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SurvivalStopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SurvivalStopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.SurvivalStopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SurvivalStopRequest)
  return false;
#undef DO_
}

void SurvivalStopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SurvivalStopRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SurvivalStopRequest)
}

int SurvivalStopRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurvivalStopRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurvivalStopRequest*>(&from));
}

void SurvivalStopRequest::MergeFrom(const SurvivalStopRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SurvivalStopRequest::CopyFrom(const SurvivalStopRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurvivalStopRequest::IsInitialized() const {

  return true;
}

void SurvivalStopRequest::Swap(SurvivalStopRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SurvivalStopRequest::GetTypeName() const {
  return "main.SurvivalStopRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

JunhunInfoRequest::JunhunInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunInfoRequest)
}

void JunhunInfoRequest::InitAsDefaultInstance() {
}

JunhunInfoRequest::JunhunInfoRequest(const JunhunInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunInfoRequest)
}

void JunhunInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunInfoRequest::~JunhunInfoRequest() {
  // @@protoc_insertion_point(destructor:main.JunhunInfoRequest)
  SharedDtor();
}

void JunhunInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunInfoRequest& JunhunInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunInfoRequest* JunhunInfoRequest::default_instance_ = NULL;

JunhunInfoRequest* JunhunInfoRequest::New() const {
  return new JunhunInfoRequest;
}

void JunhunInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunInfoRequest)
  return false;
#undef DO_
}

void JunhunInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunInfoRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunInfoRequest)
}

int JunhunInfoRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunInfoRequest*>(&from));
}

void JunhunInfoRequest::MergeFrom(const JunhunInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunInfoRequest::CopyFrom(const JunhunInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunInfoRequest::IsInitialized() const {

  return true;
}

void JunhunInfoRequest::Swap(JunhunInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunInfoRequest::GetTypeName() const {
  return "main.JunhunInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int JunhunInfoResponse::kJunhunFieldNumber;
const int JunhunInfoResponse::kIndex1FieldNumber;
const int JunhunInfoResponse::kIndex2FieldNumber;
const int JunhunInfoResponse::kIndex3FieldNumber;
const int JunhunInfoResponse::kIndex1MaxFieldNumber;
const int JunhunInfoResponse::kIndex2MaxFieldNumber;
const int JunhunInfoResponse::kIndex3MaxFieldNumber;
#endif  // !_MSC_VER

JunhunInfoResponse::JunhunInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunInfoResponse)
}

void JunhunInfoResponse::InitAsDefaultInstance() {
}

JunhunInfoResponse::JunhunInfoResponse(const JunhunInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunInfoResponse)
}

void JunhunInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  junhun_ = 0;
  index1_ = 0;
  index2_ = 0;
  index3_ = 0;
  index1max_ = 0;
  index2max_ = 0;
  index3max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunInfoResponse::~JunhunInfoResponse() {
  // @@protoc_insertion_point(destructor:main.JunhunInfoResponse)
  SharedDtor();
}

void JunhunInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunInfoResponse& JunhunInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunInfoResponse* JunhunInfoResponse::default_instance_ = NULL;

JunhunInfoResponse* JunhunInfoResponse::New() const {
  return new JunhunInfoResponse;
}

void JunhunInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JunhunInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(junhun_, index3max_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 junhun = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &junhun_)));
          set_has_junhun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index1;
        break;
      }

      // optional int32 index1 = 2;
      case 2: {
        if (tag == 16) {
         parse_index1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index1_)));
          set_has_index1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index2;
        break;
      }

      // optional int32 index2 = 3;
      case 3: {
        if (tag == 24) {
         parse_index2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index2_)));
          set_has_index2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index3;
        break;
      }

      // optional int32 index3 = 4;
      case 4: {
        if (tag == 32) {
         parse_index3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index3_)));
          set_has_index3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index1Max;
        break;
      }

      // optional int32 index1Max = 5;
      case 5: {
        if (tag == 40) {
         parse_index1Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index1max_)));
          set_has_index1max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index2Max;
        break;
      }

      // optional int32 index2Max = 6;
      case 6: {
        if (tag == 48) {
         parse_index2Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index2max_)));
          set_has_index2max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_index3Max;
        break;
      }

      // optional int32 index3Max = 7;
      case 7: {
        if (tag == 56) {
         parse_index3Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index3max_)));
          set_has_index3max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunInfoResponse)
  return false;
#undef DO_
}

void JunhunInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunInfoResponse)
  // optional int32 junhun = 1;
  if (has_junhun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->junhun(), output);
  }

  // optional int32 index1 = 2;
  if (has_index1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index1(), output);
  }

  // optional int32 index2 = 3;
  if (has_index2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index2(), output);
  }

  // optional int32 index3 = 4;
  if (has_index3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index3(), output);
  }

  // optional int32 index1Max = 5;
  if (has_index1max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index1max(), output);
  }

  // optional int32 index2Max = 6;
  if (has_index2max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->index2max(), output);
  }

  // optional int32 index3Max = 7;
  if (has_index3max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->index3max(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunInfoResponse)
}

int JunhunInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 junhun = 1;
    if (has_junhun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->junhun());
    }

    // optional int32 index1 = 2;
    if (has_index1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index1());
    }

    // optional int32 index2 = 3;
    if (has_index2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index2());
    }

    // optional int32 index3 = 4;
    if (has_index3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index3());
    }

    // optional int32 index1Max = 5;
    if (has_index1max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index1max());
    }

    // optional int32 index2Max = 6;
    if (has_index2max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index2max());
    }

    // optional int32 index3Max = 7;
    if (has_index3max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index3max());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunInfoResponse*>(&from));
}

void JunhunInfoResponse::MergeFrom(const JunhunInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_junhun()) {
      set_junhun(from.junhun());
    }
    if (from.has_index1()) {
      set_index1(from.index1());
    }
    if (from.has_index2()) {
      set_index2(from.index2());
    }
    if (from.has_index3()) {
      set_index3(from.index3());
    }
    if (from.has_index1max()) {
      set_index1max(from.index1max());
    }
    if (from.has_index2max()) {
      set_index2max(from.index2max());
    }
    if (from.has_index3max()) {
      set_index3max(from.index3max());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunInfoResponse::CopyFrom(const JunhunInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunInfoResponse::IsInitialized() const {

  return true;
}

void JunhunInfoResponse::Swap(JunhunInfoResponse* other) {
  if (other != this) {
    std::swap(junhun_, other->junhun_);
    std::swap(index1_, other->index1_);
    std::swap(index2_, other->index2_);
    std::swap(index3_, other->index3_);
    std::swap(index1max_, other->index1max_);
    std::swap(index2max_, other->index2max_);
    std::swap(index3max_, other->index3max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunInfoResponse::GetTypeName() const {
  return "main.JunhunInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int JunhunInjectRequest::kIndexFieldNumber;
const int JunhunInjectRequest::kCountFieldNumber;
#endif  // !_MSC_VER

JunhunInjectRequest::JunhunInjectRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunInjectRequest)
}

void JunhunInjectRequest::InitAsDefaultInstance() {
}

JunhunInjectRequest::JunhunInjectRequest(const JunhunInjectRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunInjectRequest)
}

void JunhunInjectRequest::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunInjectRequest::~JunhunInjectRequest() {
  // @@protoc_insertion_point(destructor:main.JunhunInjectRequest)
  SharedDtor();
}

void JunhunInjectRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunInjectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunInjectRequest& JunhunInjectRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunInjectRequest* JunhunInjectRequest::default_instance_ = NULL;

JunhunInjectRequest* JunhunInjectRequest::New() const {
  return new JunhunInjectRequest;
}

void JunhunInjectRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JunhunInjectRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunInjectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunInjectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunInjectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunInjectRequest)
  return false;
#undef DO_
}

void JunhunInjectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunInjectRequest)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunInjectRequest)
}

int JunhunInjectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunInjectRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunInjectRequest*>(&from));
}

void JunhunInjectRequest::MergeFrom(const JunhunInjectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunInjectRequest::CopyFrom(const JunhunInjectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunInjectRequest::IsInitialized() const {

  return true;
}

void JunhunInjectRequest::Swap(JunhunInjectRequest* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunInjectRequest::GetTypeName() const {
  return "main.JunhunInjectRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int JunhunInjectResponse::kStateFieldNumber;
#endif  // !_MSC_VER

JunhunInjectResponse::JunhunInjectResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunInjectResponse)
}

void JunhunInjectResponse::InitAsDefaultInstance() {
}

JunhunInjectResponse::JunhunInjectResponse(const JunhunInjectResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunInjectResponse)
}

void JunhunInjectResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunInjectResponse::~JunhunInjectResponse() {
  // @@protoc_insertion_point(destructor:main.JunhunInjectResponse)
  SharedDtor();
}

void JunhunInjectResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunInjectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunInjectResponse& JunhunInjectResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunInjectResponse* JunhunInjectResponse::default_instance_ = NULL;

JunhunInjectResponse* JunhunInjectResponse::New() const {
  return new JunhunInjectResponse;
}

void JunhunInjectResponse::Clear() {
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunInjectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunInjectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunInjectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunInjectResponse)
  return false;
#undef DO_
}

void JunhunInjectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunInjectResponse)
  // optional bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunInjectResponse)
}

int JunhunInjectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunInjectResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunInjectResponse*>(&from));
}

void JunhunInjectResponse::MergeFrom(const JunhunInjectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunInjectResponse::CopyFrom(const JunhunInjectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunInjectResponse::IsInitialized() const {

  return true;
}

void JunhunInjectResponse::Swap(JunhunInjectResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunInjectResponse::GetTypeName() const {
  return "main.JunhunInjectResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int JunhunRewardRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

JunhunRewardRequest::JunhunRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunRewardRequest)
}

void JunhunRewardRequest::InitAsDefaultInstance() {
}

JunhunRewardRequest::JunhunRewardRequest(const JunhunRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunRewardRequest)
}

void JunhunRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunRewardRequest::~JunhunRewardRequest() {
  // @@protoc_insertion_point(destructor:main.JunhunRewardRequest)
  SharedDtor();
}

void JunhunRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunRewardRequest& JunhunRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunRewardRequest* JunhunRewardRequest::default_instance_ = NULL;

JunhunRewardRequest* JunhunRewardRequest::New() const {
  return new JunhunRewardRequest;
}

void JunhunRewardRequest::Clear() {
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunRewardRequest)
  return false;
#undef DO_
}

void JunhunRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunRewardRequest)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunRewardRequest)
}

int JunhunRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunRewardRequest*>(&from));
}

void JunhunRewardRequest::MergeFrom(const JunhunRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunRewardRequest::CopyFrom(const JunhunRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunRewardRequest::IsInitialized() const {

  return true;
}

void JunhunRewardRequest::Swap(JunhunRewardRequest* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunRewardRequest::GetTypeName() const {
  return "main.JunhunRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int JunhunRewardResponse::kStateFieldNumber;
const int JunhunRewardResponse::kItemListFieldNumber;
#endif  // !_MSC_VER

JunhunRewardResponse::JunhunRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunRewardResponse)
}

void JunhunRewardResponse::InitAsDefaultInstance() {
}

JunhunRewardResponse::JunhunRewardResponse(const JunhunRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunRewardResponse)
}

void JunhunRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunRewardResponse::~JunhunRewardResponse() {
  // @@protoc_insertion_point(destructor:main.JunhunRewardResponse)
  SharedDtor();
}

void JunhunRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunRewardResponse& JunhunRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunRewardResponse* JunhunRewardResponse::default_instance_ = NULL;

JunhunRewardResponse* JunhunRewardResponse::New() const {
  return new JunhunRewardResponse;
}

void JunhunRewardResponse::Clear() {
  state_ = false;
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemList;
        break;
      }

      // repeated .main.JunhunRewardModel itemList = 2;
      case 2: {
        if (tag == 18) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunRewardResponse)
  return false;
#undef DO_
}

void JunhunRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunRewardResponse)
  // optional bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  // repeated .main.JunhunRewardModel itemList = 2;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->itemlist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunRewardResponse)
}

int JunhunRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated .main.JunhunRewardModel itemList = 2;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunRewardResponse*>(&from));
}

void JunhunRewardResponse::MergeFrom(const JunhunRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunRewardResponse::CopyFrom(const JunhunRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunRewardResponse::IsInitialized() const {

  return true;
}

void JunhunRewardResponse::Swap(JunhunRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunRewardResponse::GetTypeName() const {
  return "main.JunhunRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int JunhunRewardModel::kItemidFieldNumber;
const int JunhunRewardModel::kItemTypeFieldNumber;
#endif  // !_MSC_VER

JunhunRewardModel::JunhunRewardModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunRewardModel)
}

void JunhunRewardModel::InitAsDefaultInstance() {
}

JunhunRewardModel::JunhunRewardModel(const JunhunRewardModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunRewardModel)
}

void JunhunRewardModel::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunRewardModel::~JunhunRewardModel() {
  // @@protoc_insertion_point(destructor:main.JunhunRewardModel)
  SharedDtor();
}

void JunhunRewardModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunRewardModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunRewardModel& JunhunRewardModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunRewardModel* JunhunRewardModel::default_instance_ = NULL;

JunhunRewardModel* JunhunRewardModel::New() const {
  return new JunhunRewardModel;
}

void JunhunRewardModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JunhunRewardModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, itemtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunRewardModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunRewardModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // optional int32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunRewardModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunRewardModel)
  return false;
#undef DO_
}

void JunhunRewardModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunRewardModel)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunRewardModel)
}

int JunhunRewardModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunRewardModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunRewardModel*>(&from));
}

void JunhunRewardModel::MergeFrom(const JunhunRewardModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunRewardModel::CopyFrom(const JunhunRewardModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunRewardModel::IsInitialized() const {

  return true;
}

void JunhunRewardModel::Swap(JunhunRewardModel* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunRewardModel::GetTypeName() const {
  return "main.JunhunRewardModel";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

JunhunWithdrawRequest::JunhunWithdrawRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunWithdrawRequest)
}

void JunhunWithdrawRequest::InitAsDefaultInstance() {
}

JunhunWithdrawRequest::JunhunWithdrawRequest(const JunhunWithdrawRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunWithdrawRequest)
}

void JunhunWithdrawRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunWithdrawRequest::~JunhunWithdrawRequest() {
  // @@protoc_insertion_point(destructor:main.JunhunWithdrawRequest)
  SharedDtor();
}

void JunhunWithdrawRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunWithdrawRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunWithdrawRequest& JunhunWithdrawRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunWithdrawRequest* JunhunWithdrawRequest::default_instance_ = NULL;

JunhunWithdrawRequest* JunhunWithdrawRequest::New() const {
  return new JunhunWithdrawRequest;
}

void JunhunWithdrawRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunWithdrawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunWithdrawRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunWithdrawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunWithdrawRequest)
  return false;
#undef DO_
}

void JunhunWithdrawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunWithdrawRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunWithdrawRequest)
}

int JunhunWithdrawRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunWithdrawRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunWithdrawRequest*>(&from));
}

void JunhunWithdrawRequest::MergeFrom(const JunhunWithdrawRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunWithdrawRequest::CopyFrom(const JunhunWithdrawRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunWithdrawRequest::IsInitialized() const {

  return true;
}

void JunhunWithdrawRequest::Swap(JunhunWithdrawRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunWithdrawRequest::GetTypeName() const {
  return "main.JunhunWithdrawRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int JunhunWithdrawResponse::kStateFieldNumber;
#endif  // !_MSC_VER

JunhunWithdrawResponse::JunhunWithdrawResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.JunhunWithdrawResponse)
}

void JunhunWithdrawResponse::InitAsDefaultInstance() {
}

JunhunWithdrawResponse::JunhunWithdrawResponse(const JunhunWithdrawResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.JunhunWithdrawResponse)
}

void JunhunWithdrawResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JunhunWithdrawResponse::~JunhunWithdrawResponse() {
  // @@protoc_insertion_point(destructor:main.JunhunWithdrawResponse)
  SharedDtor();
}

void JunhunWithdrawResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JunhunWithdrawResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JunhunWithdrawResponse& JunhunWithdrawResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SurvivalModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SurvivalModule_2eproto();
#endif
  return *default_instance_;
}

JunhunWithdrawResponse* JunhunWithdrawResponse::default_instance_ = NULL;

JunhunWithdrawResponse* JunhunWithdrawResponse::New() const {
  return new JunhunWithdrawResponse;
}

void JunhunWithdrawResponse::Clear() {
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool JunhunWithdrawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.JunhunWithdrawResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.JunhunWithdrawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.JunhunWithdrawResponse)
  return false;
#undef DO_
}

void JunhunWithdrawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.JunhunWithdrawResponse)
  // required bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.JunhunWithdrawResponse)
}

int JunhunWithdrawResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunhunWithdrawResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JunhunWithdrawResponse*>(&from));
}

void JunhunWithdrawResponse::MergeFrom(const JunhunWithdrawResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JunhunWithdrawResponse::CopyFrom(const JunhunWithdrawResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunhunWithdrawResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JunhunWithdrawResponse::Swap(JunhunWithdrawResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JunhunWithdrawResponse::GetTypeName() const {
  return "main.JunhunWithdrawResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
