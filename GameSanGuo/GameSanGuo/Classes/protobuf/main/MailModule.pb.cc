// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MailModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MailModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_MailModule_2eproto() {
  delete SendMailRequest::default_instance_;
  delete SendMailResponse::default_instance_;
  delete DeleteMailRequest::default_instance_;
  delete DeleteMailResponse::default_instance_;
  delete ShowMailRequest::default_instance_;
  delete ShowMailResponse::default_instance_;
  delete ShowSystemMailRequest::default_instance_;
  delete ShowSystemMailResponse::default_instance_;
  delete ReceiveAttachmentRequest::default_instance_;
  delete ReceiveAttachmentResponse::default_instance_;
  delete DeleteSystemMailRequest::default_instance_;
  delete DeleteSystemMailResponse::default_instance_;
  delete MailProto::default_instance_;
  delete MailDetailsProto::default_instance_;
  delete SystemMailProto::default_instance_;
  delete AttachmentProto::default_instance_;
  delete UpdateRoleMailResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MailModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MailModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  SendMailRequest::default_instance_ = new SendMailRequest();
  SendMailResponse::default_instance_ = new SendMailResponse();
  DeleteMailRequest::default_instance_ = new DeleteMailRequest();
  DeleteMailResponse::default_instance_ = new DeleteMailResponse();
  ShowMailRequest::default_instance_ = new ShowMailRequest();
  ShowMailResponse::default_instance_ = new ShowMailResponse();
  ShowSystemMailRequest::default_instance_ = new ShowSystemMailRequest();
  ShowSystemMailResponse::default_instance_ = new ShowSystemMailResponse();
  ReceiveAttachmentRequest::default_instance_ = new ReceiveAttachmentRequest();
  ReceiveAttachmentResponse::default_instance_ = new ReceiveAttachmentResponse();
  DeleteSystemMailRequest::default_instance_ = new DeleteSystemMailRequest();
  DeleteSystemMailResponse::default_instance_ = new DeleteSystemMailResponse();
  MailProto::default_instance_ = new MailProto();
  MailDetailsProto::default_instance_ = new MailDetailsProto();
  SystemMailProto::default_instance_ = new SystemMailProto();
  AttachmentProto::default_instance_ = new AttachmentProto();
  UpdateRoleMailResponse::default_instance_ = new UpdateRoleMailResponse();
  SendMailRequest::default_instance_->InitAsDefaultInstance();
  SendMailResponse::default_instance_->InitAsDefaultInstance();
  DeleteMailRequest::default_instance_->InitAsDefaultInstance();
  DeleteMailResponse::default_instance_->InitAsDefaultInstance();
  ShowMailRequest::default_instance_->InitAsDefaultInstance();
  ShowMailResponse::default_instance_->InitAsDefaultInstance();
  ShowSystemMailRequest::default_instance_->InitAsDefaultInstance();
  ShowSystemMailResponse::default_instance_->InitAsDefaultInstance();
  ReceiveAttachmentRequest::default_instance_->InitAsDefaultInstance();
  ReceiveAttachmentResponse::default_instance_->InitAsDefaultInstance();
  DeleteSystemMailRequest::default_instance_->InitAsDefaultInstance();
  DeleteSystemMailResponse::default_instance_->InitAsDefaultInstance();
  MailProto::default_instance_->InitAsDefaultInstance();
  MailDetailsProto::default_instance_->InitAsDefaultInstance();
  SystemMailProto::default_instance_->InitAsDefaultInstance();
  AttachmentProto::default_instance_->InitAsDefaultInstance();
  UpdateRoleMailResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MailModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MailModule_2eproto_once_);
void protobuf_AddDesc_MailModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MailModule_2eproto_once_,
                 &protobuf_AddDesc_MailModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MailModule_2eproto {
  StaticDescriptorInitializer_MailModule_2eproto() {
    protobuf_AddDesc_MailModule_2eproto();
  }
} static_descriptor_initializer_MailModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SendMailRequest::kReceiverIdFieldNumber;
const int SendMailRequest::kTypeFieldNumber;
const int SendMailRequest::kContentFieldNumber;
#endif  // !_MSC_VER

SendMailRequest::SendMailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SendMailRequest)
}

void SendMailRequest::InitAsDefaultInstance() {
}

SendMailRequest::SendMailRequest(const SendMailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SendMailRequest)
}

void SendMailRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  receiverid_ = 0;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailRequest::~SendMailRequest() {
  // @@protoc_insertion_point(destructor:main.SendMailRequest)
  SharedDtor();
}

void SendMailRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendMailRequest& SendMailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

SendMailRequest* SendMailRequest::default_instance_ = NULL;

SendMailRequest* SendMailRequest::New() const {
  return new SendMailRequest;
}

void SendMailRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendMailRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(receiverid_, type_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SendMailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 receiverId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SendMailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SendMailRequest)
  return false;
#undef DO_
}

void SendMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SendMailRequest)
  // optional int32 receiverId = 1;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->receiverid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SendMailRequest)
}

int SendMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 receiverId = 1;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendMailRequest*>(&from));
}

void SendMailRequest::MergeFrom(const SendMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendMailRequest::CopyFrom(const SendMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailRequest::IsInitialized() const {

  return true;
}

void SendMailRequest::Swap(SendMailRequest* other) {
  if (other != this) {
    std::swap(receiverid_, other->receiverid_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendMailRequest::GetTypeName() const {
  return "main.SendMailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int SendMailResponse::kMailProtoFieldNumber;
#endif  // !_MSC_VER

SendMailResponse::SendMailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SendMailResponse)
}

void SendMailResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mailproto_ = const_cast< ::main::MailProto*>(
      ::main::MailProto::internal_default_instance());
#else
  mailproto_ = const_cast< ::main::MailProto*>(&::main::MailProto::default_instance());
#endif
}

SendMailResponse::SendMailResponse(const SendMailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SendMailResponse)
}

void SendMailResponse::SharedCtor() {
  _cached_size_ = 0;
  mailproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailResponse::~SendMailResponse() {
  // @@protoc_insertion_point(destructor:main.SendMailResponse)
  SharedDtor();
}

void SendMailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete mailproto_;
  }
}

void SendMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendMailResponse& SendMailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

SendMailResponse* SendMailResponse::default_instance_ = NULL;

SendMailResponse* SendMailResponse::New() const {
  return new SendMailResponse;
}

void SendMailResponse::Clear() {
  if (has_mailproto()) {
    if (mailproto_ != NULL) mailproto_->::main::MailProto::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SendMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SendMailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.MailProto mailProto = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SendMailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SendMailResponse)
  return false;
#undef DO_
}

void SendMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SendMailResponse)
  // optional .main.MailProto mailProto = 1;
  if (has_mailproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mailproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SendMailResponse)
}

int SendMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.MailProto mailProto = 1;
    if (has_mailproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SendMailResponse*>(&from));
}

void SendMailResponse::MergeFrom(const SendMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailproto()) {
      mutable_mailproto()->::main::MailProto::MergeFrom(from.mailproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendMailResponse::CopyFrom(const SendMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailResponse::IsInitialized() const {

  return true;
}

void SendMailResponse::Swap(SendMailResponse* other) {
  if (other != this) {
    std::swap(mailproto_, other->mailproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SendMailResponse::GetTypeName() const {
  return "main.SendMailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMailRequest::kMailIdFieldNumber;
#endif  // !_MSC_VER

DeleteMailRequest::DeleteMailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteMailRequest)
}

void DeleteMailRequest::InitAsDefaultInstance() {
}

DeleteMailRequest::DeleteMailRequest(const DeleteMailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteMailRequest)
}

void DeleteMailRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMailRequest::~DeleteMailRequest() {
  // @@protoc_insertion_point(destructor:main.DeleteMailRequest)
  SharedDtor();
}

void DeleteMailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteMailRequest& DeleteMailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

DeleteMailRequest* DeleteMailRequest::default_instance_ = NULL;

DeleteMailRequest* DeleteMailRequest::New() const {
  return new DeleteMailRequest;
}

void DeleteMailRequest::Clear() {
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteMailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteMailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteMailRequest)
  return false;
#undef DO_
}

void DeleteMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteMailRequest)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteMailRequest)
}

int DeleteMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteMailRequest*>(&from));
}

void DeleteMailRequest::MergeFrom(const DeleteMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteMailRequest::CopyFrom(const DeleteMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMailRequest::IsInitialized() const {

  return true;
}

void DeleteMailRequest::Swap(DeleteMailRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteMailRequest::GetTypeName() const {
  return "main.DeleteMailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMailResponse::kStateFieldNumber;
#endif  // !_MSC_VER

DeleteMailResponse::DeleteMailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteMailResponse)
}

void DeleteMailResponse::InitAsDefaultInstance() {
}

DeleteMailResponse::DeleteMailResponse(const DeleteMailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteMailResponse)
}

void DeleteMailResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMailResponse::~DeleteMailResponse() {
  // @@protoc_insertion_point(destructor:main.DeleteMailResponse)
  SharedDtor();
}

void DeleteMailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteMailResponse& DeleteMailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

DeleteMailResponse* DeleteMailResponse::default_instance_ = NULL;

DeleteMailResponse* DeleteMailResponse::New() const {
  return new DeleteMailResponse;
}

void DeleteMailResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteMailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteMailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteMailResponse)
  return false;
#undef DO_
}

void DeleteMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteMailResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteMailResponse)
}

int DeleteMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteMailResponse*>(&from));
}

void DeleteMailResponse::MergeFrom(const DeleteMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteMailResponse::CopyFrom(const DeleteMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMailResponse::IsInitialized() const {

  return true;
}

void DeleteMailResponse::Swap(DeleteMailResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteMailResponse::GetTypeName() const {
  return "main.DeleteMailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ShowMailRequest::kMailIdFieldNumber;
#endif  // !_MSC_VER

ShowMailRequest::ShowMailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShowMailRequest)
}

void ShowMailRequest::InitAsDefaultInstance() {
}

ShowMailRequest::ShowMailRequest(const ShowMailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShowMailRequest)
}

void ShowMailRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowMailRequest::~ShowMailRequest() {
  // @@protoc_insertion_point(destructor:main.ShowMailRequest)
  SharedDtor();
}

void ShowMailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowMailRequest& ShowMailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

ShowMailRequest* ShowMailRequest::default_instance_ = NULL;

ShowMailRequest* ShowMailRequest::New() const {
  return new ShowMailRequest;
}

void ShowMailRequest::Clear() {
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShowMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShowMailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShowMailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShowMailRequest)
  return false;
#undef DO_
}

void ShowMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShowMailRequest)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShowMailRequest)
}

int ShowMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowMailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowMailRequest*>(&from));
}

void ShowMailRequest::MergeFrom(const ShowMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShowMailRequest::CopyFrom(const ShowMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMailRequest::IsInitialized() const {

  return true;
}

void ShowMailRequest::Swap(ShowMailRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShowMailRequest::GetTypeName() const {
  return "main.ShowMailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShowMailResponse::kStateFieldNumber;
#endif  // !_MSC_VER

ShowMailResponse::ShowMailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShowMailResponse)
}

void ShowMailResponse::InitAsDefaultInstance() {
}

ShowMailResponse::ShowMailResponse(const ShowMailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShowMailResponse)
}

void ShowMailResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowMailResponse::~ShowMailResponse() {
  // @@protoc_insertion_point(destructor:main.ShowMailResponse)
  SharedDtor();
}

void ShowMailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowMailResponse& ShowMailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

ShowMailResponse* ShowMailResponse::default_instance_ = NULL;

ShowMailResponse* ShowMailResponse::New() const {
  return new ShowMailResponse;
}

void ShowMailResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShowMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShowMailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShowMailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShowMailResponse)
  return false;
#undef DO_
}

void ShowMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShowMailResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShowMailResponse)
}

int ShowMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowMailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowMailResponse*>(&from));
}

void ShowMailResponse::MergeFrom(const ShowMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShowMailResponse::CopyFrom(const ShowMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMailResponse::IsInitialized() const {

  return true;
}

void ShowMailResponse::Swap(ShowMailResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShowMailResponse::GetTypeName() const {
  return "main.ShowMailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ShowSystemMailRequest::kMailIdFieldNumber;
#endif  // !_MSC_VER

ShowSystemMailRequest::ShowSystemMailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShowSystemMailRequest)
}

void ShowSystemMailRequest::InitAsDefaultInstance() {
}

ShowSystemMailRequest::ShowSystemMailRequest(const ShowSystemMailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShowSystemMailRequest)
}

void ShowSystemMailRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowSystemMailRequest::~ShowSystemMailRequest() {
  // @@protoc_insertion_point(destructor:main.ShowSystemMailRequest)
  SharedDtor();
}

void ShowSystemMailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowSystemMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowSystemMailRequest& ShowSystemMailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

ShowSystemMailRequest* ShowSystemMailRequest::default_instance_ = NULL;

ShowSystemMailRequest* ShowSystemMailRequest::New() const {
  return new ShowSystemMailRequest;
}

void ShowSystemMailRequest::Clear() {
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShowSystemMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShowSystemMailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShowSystemMailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShowSystemMailRequest)
  return false;
#undef DO_
}

void ShowSystemMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShowSystemMailRequest)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShowSystemMailRequest)
}

int ShowSystemMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowSystemMailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowSystemMailRequest*>(&from));
}

void ShowSystemMailRequest::MergeFrom(const ShowSystemMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShowSystemMailRequest::CopyFrom(const ShowSystemMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSystemMailRequest::IsInitialized() const {

  return true;
}

void ShowSystemMailRequest::Swap(ShowSystemMailRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShowSystemMailRequest::GetTypeName() const {
  return "main.ShowSystemMailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShowSystemMailResponse::kStateFieldNumber;
#endif  // !_MSC_VER

ShowSystemMailResponse::ShowSystemMailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShowSystemMailResponse)
}

void ShowSystemMailResponse::InitAsDefaultInstance() {
}

ShowSystemMailResponse::ShowSystemMailResponse(const ShowSystemMailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShowSystemMailResponse)
}

void ShowSystemMailResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowSystemMailResponse::~ShowSystemMailResponse() {
  // @@protoc_insertion_point(destructor:main.ShowSystemMailResponse)
  SharedDtor();
}

void ShowSystemMailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowSystemMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowSystemMailResponse& ShowSystemMailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

ShowSystemMailResponse* ShowSystemMailResponse::default_instance_ = NULL;

ShowSystemMailResponse* ShowSystemMailResponse::New() const {
  return new ShowSystemMailResponse;
}

void ShowSystemMailResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShowSystemMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShowSystemMailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShowSystemMailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShowSystemMailResponse)
  return false;
#undef DO_
}

void ShowSystemMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShowSystemMailResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShowSystemMailResponse)
}

int ShowSystemMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowSystemMailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowSystemMailResponse*>(&from));
}

void ShowSystemMailResponse::MergeFrom(const ShowSystemMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShowSystemMailResponse::CopyFrom(const ShowSystemMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSystemMailResponse::IsInitialized() const {

  return true;
}

void ShowSystemMailResponse::Swap(ShowSystemMailResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShowSystemMailResponse::GetTypeName() const {
  return "main.ShowSystemMailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveAttachmentRequest::kMailIdFieldNumber;
#endif  // !_MSC_VER

ReceiveAttachmentRequest::ReceiveAttachmentRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ReceiveAttachmentRequest)
}

void ReceiveAttachmentRequest::InitAsDefaultInstance() {
}

ReceiveAttachmentRequest::ReceiveAttachmentRequest(const ReceiveAttachmentRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ReceiveAttachmentRequest)
}

void ReceiveAttachmentRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveAttachmentRequest::~ReceiveAttachmentRequest() {
  // @@protoc_insertion_point(destructor:main.ReceiveAttachmentRequest)
  SharedDtor();
}

void ReceiveAttachmentRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReceiveAttachmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReceiveAttachmentRequest& ReceiveAttachmentRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

ReceiveAttachmentRequest* ReceiveAttachmentRequest::default_instance_ = NULL;

ReceiveAttachmentRequest* ReceiveAttachmentRequest::New() const {
  return new ReceiveAttachmentRequest;
}

void ReceiveAttachmentRequest::Clear() {
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReceiveAttachmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ReceiveAttachmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ReceiveAttachmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ReceiveAttachmentRequest)
  return false;
#undef DO_
}

void ReceiveAttachmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ReceiveAttachmentRequest)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ReceiveAttachmentRequest)
}

int ReceiveAttachmentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveAttachmentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReceiveAttachmentRequest*>(&from));
}

void ReceiveAttachmentRequest::MergeFrom(const ReceiveAttachmentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReceiveAttachmentRequest::CopyFrom(const ReceiveAttachmentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveAttachmentRequest::IsInitialized() const {

  return true;
}

void ReceiveAttachmentRequest::Swap(ReceiveAttachmentRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReceiveAttachmentRequest::GetTypeName() const {
  return "main.ReceiveAttachmentRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveAttachmentResponse::kStateFieldNumber;
#endif  // !_MSC_VER

ReceiveAttachmentResponse::ReceiveAttachmentResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ReceiveAttachmentResponse)
}

void ReceiveAttachmentResponse::InitAsDefaultInstance() {
}

ReceiveAttachmentResponse::ReceiveAttachmentResponse(const ReceiveAttachmentResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ReceiveAttachmentResponse)
}

void ReceiveAttachmentResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveAttachmentResponse::~ReceiveAttachmentResponse() {
  // @@protoc_insertion_point(destructor:main.ReceiveAttachmentResponse)
  SharedDtor();
}

void ReceiveAttachmentResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReceiveAttachmentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReceiveAttachmentResponse& ReceiveAttachmentResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

ReceiveAttachmentResponse* ReceiveAttachmentResponse::default_instance_ = NULL;

ReceiveAttachmentResponse* ReceiveAttachmentResponse::New() const {
  return new ReceiveAttachmentResponse;
}

void ReceiveAttachmentResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReceiveAttachmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ReceiveAttachmentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ReceiveAttachmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ReceiveAttachmentResponse)
  return false;
#undef DO_
}

void ReceiveAttachmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ReceiveAttachmentResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ReceiveAttachmentResponse)
}

int ReceiveAttachmentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveAttachmentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReceiveAttachmentResponse*>(&from));
}

void ReceiveAttachmentResponse::MergeFrom(const ReceiveAttachmentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReceiveAttachmentResponse::CopyFrom(const ReceiveAttachmentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveAttachmentResponse::IsInitialized() const {

  return true;
}

void ReceiveAttachmentResponse::Swap(ReceiveAttachmentResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReceiveAttachmentResponse::GetTypeName() const {
  return "main.ReceiveAttachmentResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSystemMailRequest::kMailIdFieldNumber;
#endif  // !_MSC_VER

DeleteSystemMailRequest::DeleteSystemMailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteSystemMailRequest)
}

void DeleteSystemMailRequest::InitAsDefaultInstance() {
}

DeleteSystemMailRequest::DeleteSystemMailRequest(const DeleteSystemMailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteSystemMailRequest)
}

void DeleteSystemMailRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSystemMailRequest::~DeleteSystemMailRequest() {
  // @@protoc_insertion_point(destructor:main.DeleteSystemMailRequest)
  SharedDtor();
}

void DeleteSystemMailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteSystemMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteSystemMailRequest& DeleteSystemMailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

DeleteSystemMailRequest* DeleteSystemMailRequest::default_instance_ = NULL;

DeleteSystemMailRequest* DeleteSystemMailRequest::New() const {
  return new DeleteSystemMailRequest;
}

void DeleteSystemMailRequest::Clear() {
  mailid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteSystemMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteSystemMailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteSystemMailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteSystemMailRequest)
  return false;
#undef DO_
}

void DeleteSystemMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteSystemMailRequest)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteSystemMailRequest)
}

int DeleteSystemMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSystemMailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteSystemMailRequest*>(&from));
}

void DeleteSystemMailRequest::MergeFrom(const DeleteSystemMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteSystemMailRequest::CopyFrom(const DeleteSystemMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSystemMailRequest::IsInitialized() const {

  return true;
}

void DeleteSystemMailRequest::Swap(DeleteSystemMailRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteSystemMailRequest::GetTypeName() const {
  return "main.DeleteSystemMailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSystemMailResponse::kStateFieldNumber;
const int DeleteSystemMailResponse::kAttachmentProtoFieldNumber;
#endif  // !_MSC_VER

DeleteSystemMailResponse::DeleteSystemMailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.DeleteSystemMailResponse)
}

void DeleteSystemMailResponse::InitAsDefaultInstance() {
}

DeleteSystemMailResponse::DeleteSystemMailResponse(const DeleteSystemMailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.DeleteSystemMailResponse)
}

void DeleteSystemMailResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSystemMailResponse::~DeleteSystemMailResponse() {
  // @@protoc_insertion_point(destructor:main.DeleteSystemMailResponse)
  SharedDtor();
}

void DeleteSystemMailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteSystemMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteSystemMailResponse& DeleteSystemMailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

DeleteSystemMailResponse* DeleteSystemMailResponse::default_instance_ = NULL;

DeleteSystemMailResponse* DeleteSystemMailResponse::New() const {
  return new DeleteSystemMailResponse;
}

void DeleteSystemMailResponse::Clear() {
  state_ = 0;
  attachmentproto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteSystemMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.DeleteSystemMailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attachmentProto;
        break;
      }

      // repeated .main.AttachmentProto attachmentProto = 2;
      case 2: {
        if (tag == 18) {
         parse_attachmentProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachmentproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attachmentProto;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.DeleteSystemMailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.DeleteSystemMailResponse)
  return false;
#undef DO_
}

void DeleteSystemMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.DeleteSystemMailResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated .main.AttachmentProto attachmentProto = 2;
  for (int i = 0; i < this->attachmentproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->attachmentproto(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.DeleteSystemMailResponse)
}

int DeleteSystemMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .main.AttachmentProto attachmentProto = 2;
  total_size += 1 * this->attachmentproto_size();
  for (int i = 0; i < this->attachmentproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachmentproto(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSystemMailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteSystemMailResponse*>(&from));
}

void DeleteSystemMailResponse::MergeFrom(const DeleteSystemMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachmentproto_.MergeFrom(from.attachmentproto_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteSystemMailResponse::CopyFrom(const DeleteSystemMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSystemMailResponse::IsInitialized() const {

  return true;
}

void DeleteSystemMailResponse::Swap(DeleteSystemMailResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    attachmentproto_.Swap(&other->attachmentproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteSystemMailResponse::GetTypeName() const {
  return "main.DeleteSystemMailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MailProto::kSsidFieldNumber;
const int MailProto::kOneselfIdFieldNumber;
const int MailProto::kOneselfNicknameFieldNumber;
const int MailProto::kOtherIdFieldNumber;
const int MailProto::kOtherNicknameFieldNumber;
const int MailProto::kTypeFieldNumber;
const int MailProto::kIsReadFieldNumber;
const int MailProto::kMailDetailsProtoFieldNumber;
const int MailProto::kImageFieldNumber;
#endif  // !_MSC_VER

MailProto::MailProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MailProto)
}

void MailProto::InitAsDefaultInstance() {
}

MailProto::MailProto(const MailProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MailProto)
}

void MailProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ssid_ = 0;
  oneselfid_ = 0;
  oneselfnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherid_ = 0;
  othernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  isread_ = false;
  image_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailProto::~MailProto() {
  // @@protoc_insertion_point(destructor:main.MailProto)
  SharedDtor();
}

void MailProto::SharedDtor() {
  if (oneselfnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oneselfnickname_;
  }
  if (othernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othernickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MailProto& MailProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

MailProto* MailProto::default_instance_ = NULL;

MailProto* MailProto::New() const {
  return new MailProto;
}

void MailProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ssid_, oneselfid_);
    ZR_(otherid_, type_);
    if (has_oneselfnickname()) {
      if (oneselfnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oneselfnickname_->clear();
      }
    }
    if (has_othernickname()) {
      if (othernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othernickname_->clear();
      }
    }
    isread_ = false;
  }
  image_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  maildetailsproto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MailProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oneselfId;
        break;
      }

      // optional int32 oneselfId = 2;
      case 2: {
        if (tag == 16) {
         parse_oneselfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oneselfid_)));
          set_has_oneselfid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_oneselfNickname;
        break;
      }

      // optional string oneselfNickname = 3;
      case 3: {
        if (tag == 26) {
         parse_oneselfNickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oneselfnickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_otherId;
        break;
      }

      // optional int32 otherId = 4;
      case 4: {
        if (tag == 32) {
         parse_otherId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_otherNickname;
        break;
      }

      // optional string otherNickname = 5;
      case 5: {
        if (tag == 42) {
         parse_otherNickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othernickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isRead;
        break;
      }

      // optional bool isRead = 7;
      case 7: {
        if (tag == 56) {
         parse_isRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mailDetailsProto;
        break;
      }

      // repeated .main.MailDetailsProto mailDetailsProto = 8;
      case 8: {
        if (tag == 66) {
         parse_mailDetailsProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maildetailsproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mailDetailsProto;
        if (input->ExpectTag(72)) goto parse_image;
        break;
      }

      // optional int32 image = 9;
      case 9: {
        if (tag == 72) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MailProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MailProto)
  return false;
#undef DO_
}

void MailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MailProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 oneselfId = 2;
  if (has_oneselfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oneselfid(), output);
  }

  // optional string oneselfNickname = 3;
  if (has_oneselfnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->oneselfnickname(), output);
  }

  // optional int32 otherId = 4;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->otherid(), output);
  }

  // optional string otherNickname = 5;
  if (has_othernickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->othernickname(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional bool isRead = 7;
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isread(), output);
  }

  // repeated .main.MailDetailsProto mailDetailsProto = 8;
  for (int i = 0; i < this->maildetailsproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->maildetailsproto(i), output);
  }

  // optional int32 image = 9;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->image(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MailProto)
}

int MailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 oneselfId = 2;
    if (has_oneselfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oneselfid());
    }

    // optional string oneselfNickname = 3;
    if (has_oneselfnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oneselfnickname());
    }

    // optional int32 otherId = 4;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherid());
    }

    // optional string otherNickname = 5;
    if (has_othernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othernickname());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool isRead = 7;
    if (has_isread()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 image = 9;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

  }
  // repeated .main.MailDetailsProto mailDetailsProto = 8;
  total_size += 1 * this->maildetailsproto_size();
  for (int i = 0; i < this->maildetailsproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maildetailsproto(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MailProto*>(&from));
}

void MailProto::MergeFrom(const MailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  maildetailsproto_.MergeFrom(from.maildetailsproto_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_oneselfid()) {
      set_oneselfid(from.oneselfid());
    }
    if (from.has_oneselfnickname()) {
      set_oneselfnickname(from.oneselfnickname());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_othernickname()) {
      set_othernickname(from.othernickname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MailProto::CopyFrom(const MailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailProto::IsInitialized() const {

  return true;
}

void MailProto::Swap(MailProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(oneselfid_, other->oneselfid_);
    std::swap(oneselfnickname_, other->oneselfnickname_);
    std::swap(otherid_, other->otherid_);
    std::swap(othernickname_, other->othernickname_);
    std::swap(type_, other->type_);
    std::swap(isread_, other->isread_);
    maildetailsproto_.Swap(&other->maildetailsproto_);
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MailProto::GetTypeName() const {
  return "main.MailProto";
}


// ===================================================================

#ifndef _MSC_VER
const int MailDetailsProto::kMailIdFieldNumber;
const int MailDetailsProto::kReceiverIdFieldNumber;
const int MailDetailsProto::kReceiverNickNameFieldNumber;
const int MailDetailsProto::kSenderIdFieldNumber;
const int MailDetailsProto::kSenderNickNameFieldNumber;
const int MailDetailsProto::kContentFieldNumber;
const int MailDetailsProto::kSendDateFieldNumber;
#endif  // !_MSC_VER

MailDetailsProto::MailDetailsProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MailDetailsProto)
}

void MailDetailsProto::InitAsDefaultInstance() {
}

MailDetailsProto::MailDetailsProto(const MailDetailsProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MailDetailsProto)
}

void MailDetailsProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mailid_ = 0;
  receiverid_ = 0;
  receivernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderid_ = 0;
  sendernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senddate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailDetailsProto::~MailDetailsProto() {
  // @@protoc_insertion_point(destructor:main.MailDetailsProto)
  SharedDtor();
}

void MailDetailsProto::SharedDtor() {
  if (receivernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivernickname_;
  }
  if (sendernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendernickname_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MailDetailsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MailDetailsProto& MailDetailsProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

MailDetailsProto* MailDetailsProto::default_instance_ = NULL;

MailDetailsProto* MailDetailsProto::New() const {
  return new MailDetailsProto;
}

void MailDetailsProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailDetailsProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(mailid_, receiverid_);
    ZR_(senddate_, senderid_);
    if (has_receivernickname()) {
      if (receivernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receivernickname_->clear();
      }
    }
    if (has_sendernickname()) {
      if (sendernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendernickname_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MailDetailsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MailDetailsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mailId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_receiverId;
        break;
      }

      // optional int32 receiverId = 2;
      case 2: {
        if (tag == 16) {
         parse_receiverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiverid_)));
          set_has_receiverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receiverNickName;
        break;
      }

      // optional string receiverNickName = 3;
      case 3: {
        if (tag == 26) {
         parse_receiverNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivernickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_senderId;
        break;
      }

      // optional int32 senderId = 4;
      case 4: {
        if (tag == 32) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_senderNickName;
        break;
      }

      // optional string senderNickName = 5;
      case 5: {
        if (tag == 42) {
         parse_senderNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendernickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sendDate;
        break;
      }

      // optional int64 sendDate = 7;
      case 7: {
        if (tag == 56) {
         parse_sendDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senddate_)));
          set_has_senddate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MailDetailsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MailDetailsProto)
  return false;
#undef DO_
}

void MailDetailsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MailDetailsProto)
  // optional int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  // optional int32 receiverId = 2;
  if (has_receiverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receiverid(), output);
  }

  // optional string receiverNickName = 3;
  if (has_receivernickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->receivernickname(), output);
  }

  // optional int32 senderId = 4;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->senderid(), output);
  }

  // optional string senderNickName = 5;
  if (has_sendernickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sendernickname(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional int64 sendDate = 7;
  if (has_senddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->senddate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MailDetailsProto)
}

int MailDetailsProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional int32 receiverId = 2;
    if (has_receiverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiverid());
    }

    // optional string receiverNickName = 3;
    if (has_receivernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivernickname());
    }

    // optional int32 senderId = 4;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // optional string senderNickName = 5;
    if (has_sendernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendernickname());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int64 sendDate = 7;
    if (has_senddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senddate());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailDetailsProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MailDetailsProto*>(&from));
}

void MailDetailsProto::MergeFrom(const MailDetailsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_receiverid()) {
      set_receiverid(from.receiverid());
    }
    if (from.has_receivernickname()) {
      set_receivernickname(from.receivernickname());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_sendernickname()) {
      set_sendernickname(from.sendernickname());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_senddate()) {
      set_senddate(from.senddate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MailDetailsProto::CopyFrom(const MailDetailsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailDetailsProto::IsInitialized() const {

  return true;
}

void MailDetailsProto::Swap(MailDetailsProto* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(receiverid_, other->receiverid_);
    std::swap(receivernickname_, other->receivernickname_);
    std::swap(senderid_, other->senderid_);
    std::swap(sendernickname_, other->sendernickname_);
    std::swap(content_, other->content_);
    std::swap(senddate_, other->senddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MailDetailsProto::GetTypeName() const {
  return "main.MailDetailsProto";
}


// ===================================================================

#ifndef _MSC_VER
const int SystemMailProto::kSsidFieldNumber;
const int SystemMailProto::kRoleIdFieldNumber;
const int SystemMailProto::kContentFieldNumber;
const int SystemMailProto::kIsReadFieldNumber;
const int SystemMailProto::kIsReceiveFieldNumber;
const int SystemMailProto::kSendDateFieldNumber;
const int SystemMailProto::kAttachmentProtoFieldNumber;
#endif  // !_MSC_VER

SystemMailProto::SystemMailProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.SystemMailProto)
}

void SystemMailProto::InitAsDefaultInstance() {
}

SystemMailProto::SystemMailProto(const SystemMailProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.SystemMailProto)
}

void SystemMailProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ssid_ = 0;
  roleid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isread_ = 0;
  isreceive_ = 0;
  senddate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemMailProto::~SystemMailProto() {
  // @@protoc_insertion_point(destructor:main.SystemMailProto)
  SharedDtor();
}

void SystemMailProto::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SystemMailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemMailProto& SystemMailProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

SystemMailProto* SystemMailProto::default_instance_ = NULL;

SystemMailProto* SystemMailProto::New() const {
  return new SystemMailProto;
}

void SystemMailProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SystemMailProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ssid_, roleid_);
    ZR_(isread_, senddate_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attachmentproto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SystemMailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.SystemMailProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 2;
      case 2: {
        if (tag == 16) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isRead;
        break;
      }

      // optional int32 isRead = 4;
      case 4: {
        if (tag == 32) {
         parse_isRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isReceive;
        break;
      }

      // optional int32 isReceive = 5;
      case 5: {
        if (tag == 40) {
         parse_isReceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isreceive_)));
          set_has_isreceive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sendDate;
        break;
      }

      // optional int64 sendDate = 6;
      case 6: {
        if (tag == 48) {
         parse_sendDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senddate_)));
          set_has_senddate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_attachmentProto;
        break;
      }

      // repeated .main.AttachmentProto attachmentProto = 7;
      case 7: {
        if (tag == 58) {
         parse_attachmentProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachmentproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_attachmentProto;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.SystemMailProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.SystemMailProto)
  return false;
#undef DO_
}

void SystemMailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.SystemMailProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 roleId = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional int32 isRead = 4;
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isread(), output);
  }

  // optional int32 isReceive = 5;
  if (has_isreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isreceive(), output);
  }

  // optional int64 sendDate = 6;
  if (has_senddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->senddate(), output);
  }

  // repeated .main.AttachmentProto attachmentProto = 7;
  for (int i = 0; i < this->attachmentproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->attachmentproto(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.SystemMailProto)
}

int SystemMailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 roleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 isRead = 4;
    if (has_isread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isread());
    }

    // optional int32 isReceive = 5;
    if (has_isreceive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isreceive());
    }

    // optional int64 sendDate = 6;
    if (has_senddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senddate());
    }

  }
  // repeated .main.AttachmentProto attachmentProto = 7;
  total_size += 1 * this->attachmentproto_size();
  for (int i = 0; i < this->attachmentproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachmentproto(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemMailProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemMailProto*>(&from));
}

void SystemMailProto::MergeFrom(const SystemMailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachmentproto_.MergeFrom(from.attachmentproto_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
    if (from.has_isreceive()) {
      set_isreceive(from.isreceive());
    }
    if (from.has_senddate()) {
      set_senddate(from.senddate());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SystemMailProto::CopyFrom(const SystemMailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemMailProto::IsInitialized() const {

  return true;
}

void SystemMailProto::Swap(SystemMailProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(roleid_, other->roleid_);
    std::swap(content_, other->content_);
    std::swap(isread_, other->isread_);
    std::swap(isreceive_, other->isreceive_);
    std::swap(senddate_, other->senddate_);
    attachmentproto_.Swap(&other->attachmentproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SystemMailProto::GetTypeName() const {
  return "main.SystemMailProto";
}


// ===================================================================

#ifndef _MSC_VER
const int AttachmentProto::kSsidFieldNumber;
const int AttachmentProto::kSystemMailIdFieldNumber;
const int AttachmentProto::kItemIdFieldNumber;
const int AttachmentProto::kCountFieldNumber;
const int AttachmentProto::kLevelFieldNumber;
const int AttachmentProto::kTypeFieldNumber;
const int AttachmentProto::kOfficerCardItemProtoFieldNumber;
const int AttachmentProto::kEquipmentCardItemProtoFieldNumber;
const int AttachmentProto::kSoldierCardItemProtoFieldNumber;
const int AttachmentProto::kPropsCardItemProtoFieldNumber;
#endif  // !_MSC_VER

AttachmentProto::AttachmentProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AttachmentProto)
}

void AttachmentProto::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officercarditemproto_ = const_cast< ::main::OfficerCardItemProto*>(
      ::main::OfficerCardItemProto::internal_default_instance());
#else
  officercarditemproto_ = const_cast< ::main::OfficerCardItemProto*>(&::main::OfficerCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipmentcarditemproto_ = const_cast< ::main::EquipmentCardItemProto*>(
      ::main::EquipmentCardItemProto::internal_default_instance());
#else
  equipmentcarditemproto_ = const_cast< ::main::EquipmentCardItemProto*>(&::main::EquipmentCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  soldiercarditemproto_ = const_cast< ::main::SoldierCardItemProto*>(
      ::main::SoldierCardItemProto::internal_default_instance());
#else
  soldiercarditemproto_ = const_cast< ::main::SoldierCardItemProto*>(&::main::SoldierCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  propscarditemproto_ = const_cast< ::main::PropsCardItemProto*>(
      ::main::PropsCardItemProto::internal_default_instance());
#else
  propscarditemproto_ = const_cast< ::main::PropsCardItemProto*>(&::main::PropsCardItemProto::default_instance());
#endif
}

AttachmentProto::AttachmentProto(const AttachmentProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AttachmentProto)
}

void AttachmentProto::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  systemmailid_ = 0;
  itemid_ = 0;
  count_ = 0;
  level_ = 0;
  type_ = 0;
  officercarditemproto_ = NULL;
  equipmentcarditemproto_ = NULL;
  soldiercarditemproto_ = NULL;
  propscarditemproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachmentProto::~AttachmentProto() {
  // @@protoc_insertion_point(destructor:main.AttachmentProto)
  SharedDtor();
}

void AttachmentProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete officercarditemproto_;
    delete equipmentcarditemproto_;
    delete soldiercarditemproto_;
    delete propscarditemproto_;
  }
}

void AttachmentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttachmentProto& AttachmentProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

AttachmentProto* AttachmentProto::default_instance_ = NULL;

AttachmentProto* AttachmentProto::New() const {
  return new AttachmentProto;
}

void AttachmentProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AttachmentProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ssid_, type_);
    if (has_officercarditemproto()) {
      if (officercarditemproto_ != NULL) officercarditemproto_->::main::OfficerCardItemProto::Clear();
    }
    if (has_equipmentcarditemproto()) {
      if (equipmentcarditemproto_ != NULL) equipmentcarditemproto_->::main::EquipmentCardItemProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_soldiercarditemproto()) {
      if (soldiercarditemproto_ != NULL) soldiercarditemproto_->::main::SoldierCardItemProto::Clear();
    }
    if (has_propscarditemproto()) {
      if (propscarditemproto_ != NULL) propscarditemproto_->::main::PropsCardItemProto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AttachmentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AttachmentProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_systemMailId;
        break;
      }

      // optional int32 systemMailId = 2;
      case 2: {
        if (tag == 16) {
         parse_systemMailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemmailid_)));
          set_has_systemmailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (tag == 24) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_officerCardItemProto;
        break;
      }

      // optional .main.OfficerCardItemProto officerCardItemProto = 7;
      case 7: {
        if (tag == 58) {
         parse_officerCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_equipmentCardItemProto;
        break;
      }

      // optional .main.EquipmentCardItemProto equipmentCardItemProto = 8;
      case 8: {
        if (tag == 66) {
         parse_equipmentCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentcarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_soldierCardItemProto;
        break;
      }

      // optional .main.SoldierCardItemProto soldierCardItemProto = 9;
      case 9: {
        if (tag == 74) {
         parse_soldierCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soldiercarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_propsCardItemProto;
        break;
      }

      // optional .main.PropsCardItemProto propsCardItemProto = 10;
      case 10: {
        if (tag == 82) {
         parse_propsCardItemProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propscarditemproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AttachmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AttachmentProto)
  return false;
#undef DO_
}

void AttachmentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AttachmentProto)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional int32 systemMailId = 2;
  if (has_systemmailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->systemmailid(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional .main.OfficerCardItemProto officerCardItemProto = 7;
  if (has_officercarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->officercarditemproto(), output);
  }

  // optional .main.EquipmentCardItemProto equipmentCardItemProto = 8;
  if (has_equipmentcarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->equipmentcarditemproto(), output);
  }

  // optional .main.SoldierCardItemProto soldierCardItemProto = 9;
  if (has_soldiercarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->soldiercarditemproto(), output);
  }

  // optional .main.PropsCardItemProto propsCardItemProto = 10;
  if (has_propscarditemproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->propscarditemproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AttachmentProto)
}

int AttachmentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional int32 systemMailId = 2;
    if (has_systemmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systemmailid());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .main.OfficerCardItemProto officerCardItemProto = 7;
    if (has_officercarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officercarditemproto());
    }

    // optional .main.EquipmentCardItemProto equipmentCardItemProto = 8;
    if (has_equipmentcarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentcarditemproto());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .main.SoldierCardItemProto soldierCardItemProto = 9;
    if (has_soldiercarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soldiercarditemproto());
    }

    // optional .main.PropsCardItemProto propsCardItemProto = 10;
    if (has_propscarditemproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propscarditemproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachmentProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AttachmentProto*>(&from));
}

void AttachmentProto::MergeFrom(const AttachmentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_systemmailid()) {
      set_systemmailid(from.systemmailid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_officercarditemproto()) {
      mutable_officercarditemproto()->::main::OfficerCardItemProto::MergeFrom(from.officercarditemproto());
    }
    if (from.has_equipmentcarditemproto()) {
      mutable_equipmentcarditemproto()->::main::EquipmentCardItemProto::MergeFrom(from.equipmentcarditemproto());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_soldiercarditemproto()) {
      mutable_soldiercarditemproto()->::main::SoldierCardItemProto::MergeFrom(from.soldiercarditemproto());
    }
    if (from.has_propscarditemproto()) {
      mutable_propscarditemproto()->::main::PropsCardItemProto::MergeFrom(from.propscarditemproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AttachmentProto::CopyFrom(const AttachmentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentProto::IsInitialized() const {

  return true;
}

void AttachmentProto::Swap(AttachmentProto* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(systemmailid_, other->systemmailid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(officercarditemproto_, other->officercarditemproto_);
    std::swap(equipmentcarditemproto_, other->equipmentcarditemproto_);
    std::swap(soldiercarditemproto_, other->soldiercarditemproto_);
    std::swap(propscarditemproto_, other->propscarditemproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AttachmentProto::GetTypeName() const {
  return "main.AttachmentProto";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRoleMailResponse::kMainMailsFieldNumber;
const int UpdateRoleMailResponse::kSystemMailsFieldNumber;
const int UpdateRoleMailResponse::kGmMailsFieldNumber;
#endif  // !_MSC_VER

UpdateRoleMailResponse::UpdateRoleMailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.UpdateRoleMailResponse)
}

void UpdateRoleMailResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mainmails_ = const_cast< ::main::MailProto*>(
      ::main::MailProto::internal_default_instance());
#else
  mainmails_ = const_cast< ::main::MailProto*>(&::main::MailProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  systemmails_ = const_cast< ::main::SystemMailProto*>(
      ::main::SystemMailProto::internal_default_instance());
#else
  systemmails_ = const_cast< ::main::SystemMailProto*>(&::main::SystemMailProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gmmails_ = const_cast< ::main::MailProto*>(
      ::main::MailProto::internal_default_instance());
#else
  gmmails_ = const_cast< ::main::MailProto*>(&::main::MailProto::default_instance());
#endif
}

UpdateRoleMailResponse::UpdateRoleMailResponse(const UpdateRoleMailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.UpdateRoleMailResponse)
}

void UpdateRoleMailResponse::SharedCtor() {
  _cached_size_ = 0;
  mainmails_ = NULL;
  systemmails_ = NULL;
  gmmails_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRoleMailResponse::~UpdateRoleMailResponse() {
  // @@protoc_insertion_point(destructor:main.UpdateRoleMailResponse)
  SharedDtor();
}

void UpdateRoleMailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete mainmails_;
    delete systemmails_;
    delete gmmails_;
  }
}

void UpdateRoleMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateRoleMailResponse& UpdateRoleMailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MailModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MailModule_2eproto();
#endif
  return *default_instance_;
}

UpdateRoleMailResponse* UpdateRoleMailResponse::default_instance_ = NULL;

UpdateRoleMailResponse* UpdateRoleMailResponse::New() const {
  return new UpdateRoleMailResponse;
}

void UpdateRoleMailResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_mainmails()) {
      if (mainmails_ != NULL) mainmails_->::main::MailProto::Clear();
    }
    if (has_systemmails()) {
      if (systemmails_ != NULL) systemmails_->::main::SystemMailProto::Clear();
    }
    if (has_gmmails()) {
      if (gmmails_ != NULL) gmmails_->::main::MailProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateRoleMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.UpdateRoleMailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.MailProto mainMails = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainmails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_systemMails;
        break;
      }

      // optional .main.SystemMailProto systemMails = 2;
      case 2: {
        if (tag == 18) {
         parse_systemMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemmails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gmMails;
        break;
      }

      // optional .main.MailProto gmMails = 3;
      case 3: {
        if (tag == 26) {
         parse_gmMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gmmails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.UpdateRoleMailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.UpdateRoleMailResponse)
  return false;
#undef DO_
}

void UpdateRoleMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.UpdateRoleMailResponse)
  // optional .main.MailProto mainMails = 1;
  if (has_mainmails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mainmails(), output);
  }

  // optional .main.SystemMailProto systemMails = 2;
  if (has_systemmails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->systemmails(), output);
  }

  // optional .main.MailProto gmMails = 3;
  if (has_gmmails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gmmails(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.UpdateRoleMailResponse)
}

int UpdateRoleMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.MailProto mainMails = 1;
    if (has_mainmails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mainmails());
    }

    // optional .main.SystemMailProto systemMails = 2;
    if (has_systemmails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemmails());
    }

    // optional .main.MailProto gmMails = 3;
    if (has_gmmails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gmmails());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoleMailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateRoleMailResponse*>(&from));
}

void UpdateRoleMailResponse::MergeFrom(const UpdateRoleMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mainmails()) {
      mutable_mainmails()->::main::MailProto::MergeFrom(from.mainmails());
    }
    if (from.has_systemmails()) {
      mutable_systemmails()->::main::SystemMailProto::MergeFrom(from.systemmails());
    }
    if (from.has_gmmails()) {
      mutable_gmmails()->::main::MailProto::MergeFrom(from.gmmails());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateRoleMailResponse::CopyFrom(const UpdateRoleMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoleMailResponse::IsInitialized() const {

  return true;
}

void UpdateRoleMailResponse::Swap(UpdateRoleMailResponse* other) {
  if (other != this) {
    std::swap(mainmails_, other->mainmails_);
    std::swap(systemmails_, other->systemmails_);
    std::swap(gmmails_, other->gmmails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateRoleMailResponse::GetTypeName() const {
  return "main.UpdateRoleMailResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
