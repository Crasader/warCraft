// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpFight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PvpFight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_PvpFight_2eproto() {
  delete PvpEntryRequest::default_instance_;
  delete PvpEntryResponse::default_instance_;
  delete PvpTopRequest::default_instance_;
  delete PvpTopResponse::default_instance_;
  delete PvpTopMyLocalRequest::default_instance_;
  delete PvpTopMyLocalResponse::default_instance_;
  delete TopPlayerMessage::default_instance_;
  delete PvpApplyRequest::default_instance_;
  delete PvpApplyResponse::default_instance_;
  delete CheckReadyResponse::default_instance_;
  delete PvpExitApplyRequest::default_instance_;
  delete PvpExitApplyResponse::default_instance_;
  delete PvpGetReadyRequest::default_instance_;
  delete PvpGetReadyResponse::default_instance_;
  delete PvpMatchingResponse::default_instance_;
  delete PvpOfficerConfig::default_instance_;
  delete PvpShopListRequest::default_instance_;
  delete PvpShopListResponse::default_instance_;
  delete PvpShopItem::default_instance_;
  delete PvpShopPurchRequest::default_instance_;
  delete PvpShopPurchResponse::default_instance_;
  delete PvPDayAwardGiftEntryRequest::default_instance_;
  delete PvPDayAwardGiftEntryResponse::default_instance_;
  delete PvPDayAwardGiftBag::default_instance_;
  delete PvPDayAwardGiftItem::default_instance_;
  delete PvPSeasonAwardGiftEntryRequest::default_instance_;
  delete PvPSeasonAwardGiftEntryResponse::default_instance_;
  delete PvPDayAwardGiftGetRequest::default_instance_;
  delete PvPDayAwardGiftGetResponse::default_instance_;
  delete PvPSeasonAwardGiftGetRequest::default_instance_;
  delete PvPSeasonAwardGiftGetResponse::default_instance_;
  delete PvPEntryMapRequest::default_instance_;
  delete PvPActionReadyResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PvpFight_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PvpFight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  PvpEntryRequest::default_instance_ = new PvpEntryRequest();
  PvpEntryResponse::default_instance_ = new PvpEntryResponse();
  PvpTopRequest::default_instance_ = new PvpTopRequest();
  PvpTopResponse::default_instance_ = new PvpTopResponse();
  PvpTopMyLocalRequest::default_instance_ = new PvpTopMyLocalRequest();
  PvpTopMyLocalResponse::default_instance_ = new PvpTopMyLocalResponse();
  TopPlayerMessage::default_instance_ = new TopPlayerMessage();
  PvpApplyRequest::default_instance_ = new PvpApplyRequest();
  PvpApplyResponse::default_instance_ = new PvpApplyResponse();
  CheckReadyResponse::default_instance_ = new CheckReadyResponse();
  PvpExitApplyRequest::default_instance_ = new PvpExitApplyRequest();
  PvpExitApplyResponse::default_instance_ = new PvpExitApplyResponse();
  PvpGetReadyRequest::default_instance_ = new PvpGetReadyRequest();
  PvpGetReadyResponse::default_instance_ = new PvpGetReadyResponse();
  PvpMatchingResponse::default_instance_ = new PvpMatchingResponse();
  PvpOfficerConfig::default_instance_ = new PvpOfficerConfig();
  PvpShopListRequest::default_instance_ = new PvpShopListRequest();
  PvpShopListResponse::default_instance_ = new PvpShopListResponse();
  PvpShopItem::default_instance_ = new PvpShopItem();
  PvpShopPurchRequest::default_instance_ = new PvpShopPurchRequest();
  PvpShopPurchResponse::default_instance_ = new PvpShopPurchResponse();
  PvPDayAwardGiftEntryRequest::default_instance_ = new PvPDayAwardGiftEntryRequest();
  PvPDayAwardGiftEntryResponse::default_instance_ = new PvPDayAwardGiftEntryResponse();
  PvPDayAwardGiftBag::default_instance_ = new PvPDayAwardGiftBag();
  PvPDayAwardGiftItem::default_instance_ = new PvPDayAwardGiftItem();
  PvPSeasonAwardGiftEntryRequest::default_instance_ = new PvPSeasonAwardGiftEntryRequest();
  PvPSeasonAwardGiftEntryResponse::default_instance_ = new PvPSeasonAwardGiftEntryResponse();
  PvPDayAwardGiftGetRequest::default_instance_ = new PvPDayAwardGiftGetRequest();
  PvPDayAwardGiftGetResponse::default_instance_ = new PvPDayAwardGiftGetResponse();
  PvPSeasonAwardGiftGetRequest::default_instance_ = new PvPSeasonAwardGiftGetRequest();
  PvPSeasonAwardGiftGetResponse::default_instance_ = new PvPSeasonAwardGiftGetResponse();
  PvPEntryMapRequest::default_instance_ = new PvPEntryMapRequest();
  PvPActionReadyResponse::default_instance_ = new PvPActionReadyResponse();
  PvpEntryRequest::default_instance_->InitAsDefaultInstance();
  PvpEntryResponse::default_instance_->InitAsDefaultInstance();
  PvpTopRequest::default_instance_->InitAsDefaultInstance();
  PvpTopResponse::default_instance_->InitAsDefaultInstance();
  PvpTopMyLocalRequest::default_instance_->InitAsDefaultInstance();
  PvpTopMyLocalResponse::default_instance_->InitAsDefaultInstance();
  TopPlayerMessage::default_instance_->InitAsDefaultInstance();
  PvpApplyRequest::default_instance_->InitAsDefaultInstance();
  PvpApplyResponse::default_instance_->InitAsDefaultInstance();
  CheckReadyResponse::default_instance_->InitAsDefaultInstance();
  PvpExitApplyRequest::default_instance_->InitAsDefaultInstance();
  PvpExitApplyResponse::default_instance_->InitAsDefaultInstance();
  PvpGetReadyRequest::default_instance_->InitAsDefaultInstance();
  PvpGetReadyResponse::default_instance_->InitAsDefaultInstance();
  PvpMatchingResponse::default_instance_->InitAsDefaultInstance();
  PvpOfficerConfig::default_instance_->InitAsDefaultInstance();
  PvpShopListRequest::default_instance_->InitAsDefaultInstance();
  PvpShopListResponse::default_instance_->InitAsDefaultInstance();
  PvpShopItem::default_instance_->InitAsDefaultInstance();
  PvpShopPurchRequest::default_instance_->InitAsDefaultInstance();
  PvpShopPurchResponse::default_instance_->InitAsDefaultInstance();
  PvPDayAwardGiftEntryRequest::default_instance_->InitAsDefaultInstance();
  PvPDayAwardGiftEntryResponse::default_instance_->InitAsDefaultInstance();
  PvPDayAwardGiftBag::default_instance_->InitAsDefaultInstance();
  PvPDayAwardGiftItem::default_instance_->InitAsDefaultInstance();
  PvPSeasonAwardGiftEntryRequest::default_instance_->InitAsDefaultInstance();
  PvPSeasonAwardGiftEntryResponse::default_instance_->InitAsDefaultInstance();
  PvPDayAwardGiftGetRequest::default_instance_->InitAsDefaultInstance();
  PvPDayAwardGiftGetResponse::default_instance_->InitAsDefaultInstance();
  PvPSeasonAwardGiftGetRequest::default_instance_->InitAsDefaultInstance();
  PvPSeasonAwardGiftGetResponse::default_instance_->InitAsDefaultInstance();
  PvPEntryMapRequest::default_instance_->InitAsDefaultInstance();
  PvPActionReadyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PvpFight_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PvpFight_2eproto_once_);
void protobuf_AddDesc_PvpFight_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PvpFight_2eproto_once_,
                 &protobuf_AddDesc_PvpFight_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PvpFight_2eproto {
  StaticDescriptorInitializer_PvpFight_2eproto() {
    protobuf_AddDesc_PvpFight_2eproto();
  }
} static_descriptor_initializer_PvpFight_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpEntryRequest::PvpEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpEntryRequest)
}

void PvpEntryRequest::InitAsDefaultInstance() {
}

PvpEntryRequest::PvpEntryRequest(const PvpEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpEntryRequest)
}

void PvpEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpEntryRequest::~PvpEntryRequest() {
  // @@protoc_insertion_point(destructor:main.PvpEntryRequest)
  SharedDtor();
}

void PvpEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpEntryRequest& PvpEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpEntryRequest* PvpEntryRequest::default_instance_ = NULL;

PvpEntryRequest* PvpEntryRequest::New() const {
  return new PvpEntryRequest;
}

void PvpEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpEntryRequest)
  return false;
#undef DO_
}

void PvpEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpEntryRequest)
}

int PvpEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpEntryRequest*>(&from));
}

void PvpEntryRequest::MergeFrom(const PvpEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpEntryRequest::CopyFrom(const PvpEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpEntryRequest::IsInitialized() const {

  return true;
}

void PvpEntryRequest::Swap(PvpEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpEntryRequest::GetTypeName() const {
  return "main.PvpEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpEntryResponse::kWinRatioFieldNumber;
const int PvpEntryResponse::kPrestigeFieldNumber;
const int PvpEntryResponse::kContinuousWinFieldNumber;
const int PvpEntryResponse::kMaxContinuousWinFieldNumber;
const int PvpEntryResponse::kAwardScoreFieldNumber;
const int PvpEntryResponse::kPrestigeRankFieldNumber;
const int PvpEntryResponse::kPvpRankNameFieldNumber;
const int PvpEntryResponse::kPvpCountFieldNumber;
const int PvpEntryResponse::kPvpEndDateFieldNumber;
const int PvpEntryResponse::kPvpRankFieldNumber;
const int PvpEntryResponse::kPvpScoreFieldNumber;
const int PvpEntryResponse::kPvpFightCountFieldNumber;
const int PvpEntryResponse::kHasDayRewardFieldNumber;
const int PvpEntryResponse::kHasSeasonRewardFieldNumber;
const int PvpEntryResponse::kSpecStartTimeFieldNumber;
const int PvpEntryResponse::kSpecEndTimeFieldNumber;
#endif  // !_MSC_VER

PvpEntryResponse::PvpEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpEntryResponse)
}

void PvpEntryResponse::InitAsDefaultInstance() {
}

PvpEntryResponse::PvpEntryResponse(const PvpEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpEntryResponse)
}

void PvpEntryResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  winratio_ = 0;
  prestige_ = 0;
  continuouswin_ = 0;
  maxcontinuouswin_ = 0;
  awardscore_ = 0;
  prestigerank_ = 0;
  pvprankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pvpcount_ = 0;
  pvpenddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pvprank_ = 0;
  pvpscore_ = 0;
  pvpfightcount_ = 0;
  hasdayreward_ = false;
  hasseasonreward_ = false;
  specstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  specendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpEntryResponse::~PvpEntryResponse() {
  // @@protoc_insertion_point(destructor:main.PvpEntryResponse)
  SharedDtor();
}

void PvpEntryResponse::SharedDtor() {
  if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvprankname_;
  }
  if (pvpenddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvpenddate_;
  }
  if (specstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specstarttime_;
  }
  if (specendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specendtime_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpEntryResponse& PvpEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpEntryResponse* PvpEntryResponse::default_instance_ = NULL;

PvpEntryResponse* PvpEntryResponse::New() const {
  return new PvpEntryResponse;
}

void PvpEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(winratio_, prestigerank_);
    if (has_pvprankname()) {
      if (pvprankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pvprankname_->clear();
      }
    }
    pvpcount_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(pvprank_, pvpfightcount_);
    ZR_(hasdayreward_, hasseasonreward_);
    if (has_pvpenddate()) {
      if (pvpenddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pvpenddate_->clear();
      }
    }
    if (has_specstarttime()) {
      if (specstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        specstarttime_->clear();
      }
    }
    if (has_specendtime()) {
      if (specendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        specendtime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float winRatio = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winratio_)));
          set_has_winratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prestige;
        break;
      }

      // optional int32 prestige = 2;
      case 2: {
        if (tag == 16) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_continuousWin;
        break;
      }

      // optional int32 continuousWin = 3;
      case 3: {
        if (tag == 24) {
         parse_continuousWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuouswin_)));
          set_has_continuouswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxContinuousWin;
        break;
      }

      // optional int32 maxContinuousWin = 4;
      case 4: {
        if (tag == 32) {
         parse_maxContinuousWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcontinuouswin_)));
          set_has_maxcontinuouswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 5;
      case 5: {
        if (tag == 40) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prestigeRank;
        break;
      }

      // optional int32 prestigeRank = 6;
      case 6: {
        if (tag == 48) {
         parse_prestigeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestigerank_)));
          set_has_prestigerank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pvpRankName;
        break;
      }

      // optional string pvpRankName = 7;
      case 7: {
        if (tag == 58) {
         parse_pvpRankName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvprankname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pvpCount;
        break;
      }

      // optional int32 pvpCount = 8;
      case 8: {
        if (tag == 64) {
         parse_pvpCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpcount_)));
          set_has_pvpcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pvpEndDate;
        break;
      }

      // optional string pvpEndDate = 9;
      case 9: {
        if (tag == 74) {
         parse_pvpEndDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvpenddate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pvpRank;
        break;
      }

      // optional int32 pvpRank = 10;
      case 10: {
        if (tag == 80) {
         parse_pvpRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvprank_)));
          set_has_pvprank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pvpScore;
        break;
      }

      // optional int32 pvpScore = 11;
      case 11: {
        if (tag == 88) {
         parse_pvpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpscore_)));
          set_has_pvpscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_pvpFightCount;
        break;
      }

      // optional int32 pvpFightCount = 12;
      case 12: {
        if (tag == 96) {
         parse_pvpFightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpfightcount_)));
          set_has_pvpfightcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hasDayReward;
        break;
      }

      // optional bool hasDayReward = 13;
      case 13: {
        if (tag == 104) {
         parse_hasDayReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasdayreward_)));
          set_has_hasdayreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hasSeasonReward;
        break;
      }

      // optional bool hasSeasonReward = 14;
      case 14: {
        if (tag == 112) {
         parse_hasSeasonReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasseasonreward_)));
          set_has_hasseasonreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_specStartTime;
        break;
      }

      // optional string specStartTime = 15;
      case 15: {
        if (tag == 122) {
         parse_specStartTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specstarttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_specEndTime;
        break;
      }

      // optional string specEndTime = 16;
      case 16: {
        if (tag == 130) {
         parse_specEndTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specendtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpEntryResponse)
  return false;
#undef DO_
}

void PvpEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpEntryResponse)
  // optional float winRatio = 1;
  if (has_winratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->winratio(), output);
  }

  // optional int32 prestige = 2;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prestige(), output);
  }

  // optional int32 continuousWin = 3;
  if (has_continuouswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->continuouswin(), output);
  }

  // optional int32 maxContinuousWin = 4;
  if (has_maxcontinuouswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxcontinuouswin(), output);
  }

  // optional int32 awardScore = 5;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->awardscore(), output);
  }

  // optional int32 prestigeRank = 6;
  if (has_prestigerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prestigerank(), output);
  }

  // optional string pvpRankName = 7;
  if (has_pvprankname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pvprankname(), output);
  }

  // optional int32 pvpCount = 8;
  if (has_pvpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pvpcount(), output);
  }

  // optional string pvpEndDate = 9;
  if (has_pvpenddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pvpenddate(), output);
  }

  // optional int32 pvpRank = 10;
  if (has_pvprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pvprank(), output);
  }

  // optional int32 pvpScore = 11;
  if (has_pvpscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pvpscore(), output);
  }

  // optional int32 pvpFightCount = 12;
  if (has_pvpfightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pvpfightcount(), output);
  }

  // optional bool hasDayReward = 13;
  if (has_hasdayreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->hasdayreward(), output);
  }

  // optional bool hasSeasonReward = 14;
  if (has_hasseasonreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->hasseasonreward(), output);
  }

  // optional string specStartTime = 15;
  if (has_specstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->specstarttime(), output);
  }

  // optional string specEndTime = 16;
  if (has_specendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->specendtime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpEntryResponse)
}

int PvpEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float winRatio = 1;
    if (has_winratio()) {
      total_size += 1 + 4;
    }

    // optional int32 prestige = 2;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige());
    }

    // optional int32 continuousWin = 3;
    if (has_continuouswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuouswin());
    }

    // optional int32 maxContinuousWin = 4;
    if (has_maxcontinuouswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcontinuouswin());
    }

    // optional int32 awardScore = 5;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

    // optional int32 prestigeRank = 6;
    if (has_prestigerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestigerank());
    }

    // optional string pvpRankName = 7;
    if (has_pvprankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvprankname());
    }

    // optional int32 pvpCount = 8;
    if (has_pvpcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string pvpEndDate = 9;
    if (has_pvpenddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvpenddate());
    }

    // optional int32 pvpRank = 10;
    if (has_pvprank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvprank());
    }

    // optional int32 pvpScore = 11;
    if (has_pvpscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpscore());
    }

    // optional int32 pvpFightCount = 12;
    if (has_pvpfightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpfightcount());
    }

    // optional bool hasDayReward = 13;
    if (has_hasdayreward()) {
      total_size += 1 + 1;
    }

    // optional bool hasSeasonReward = 14;
    if (has_hasseasonreward()) {
      total_size += 1 + 1;
    }

    // optional string specStartTime = 15;
    if (has_specstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specstarttime());
    }

    // optional string specEndTime = 16;
    if (has_specendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specendtime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpEntryResponse*>(&from));
}

void PvpEntryResponse::MergeFrom(const PvpEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winratio()) {
      set_winratio(from.winratio());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_continuouswin()) {
      set_continuouswin(from.continuouswin());
    }
    if (from.has_maxcontinuouswin()) {
      set_maxcontinuouswin(from.maxcontinuouswin());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
    if (from.has_prestigerank()) {
      set_prestigerank(from.prestigerank());
    }
    if (from.has_pvprankname()) {
      set_pvprankname(from.pvprankname());
    }
    if (from.has_pvpcount()) {
      set_pvpcount(from.pvpcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pvpenddate()) {
      set_pvpenddate(from.pvpenddate());
    }
    if (from.has_pvprank()) {
      set_pvprank(from.pvprank());
    }
    if (from.has_pvpscore()) {
      set_pvpscore(from.pvpscore());
    }
    if (from.has_pvpfightcount()) {
      set_pvpfightcount(from.pvpfightcount());
    }
    if (from.has_hasdayreward()) {
      set_hasdayreward(from.hasdayreward());
    }
    if (from.has_hasseasonreward()) {
      set_hasseasonreward(from.hasseasonreward());
    }
    if (from.has_specstarttime()) {
      set_specstarttime(from.specstarttime());
    }
    if (from.has_specendtime()) {
      set_specendtime(from.specendtime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpEntryResponse::CopyFrom(const PvpEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpEntryResponse::IsInitialized() const {

  return true;
}

void PvpEntryResponse::Swap(PvpEntryResponse* other) {
  if (other != this) {
    std::swap(winratio_, other->winratio_);
    std::swap(prestige_, other->prestige_);
    std::swap(continuouswin_, other->continuouswin_);
    std::swap(maxcontinuouswin_, other->maxcontinuouswin_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(prestigerank_, other->prestigerank_);
    std::swap(pvprankname_, other->pvprankname_);
    std::swap(pvpcount_, other->pvpcount_);
    std::swap(pvpenddate_, other->pvpenddate_);
    std::swap(pvprank_, other->pvprank_);
    std::swap(pvpscore_, other->pvpscore_);
    std::swap(pvpfightcount_, other->pvpfightcount_);
    std::swap(hasdayreward_, other->hasdayreward_);
    std::swap(hasseasonreward_, other->hasseasonreward_);
    std::swap(specstarttime_, other->specstarttime_);
    std::swap(specendtime_, other->specendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpEntryResponse::GetTypeName() const {
  return "main.PvpEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpTopRequest::kTypeFieldNumber;
const int PvpTopRequest::kPageFieldNumber;
#endif  // !_MSC_VER

PvpTopRequest::PvpTopRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpTopRequest)
}

void PvpTopRequest::InitAsDefaultInstance() {
}

PvpTopRequest::PvpTopRequest(const PvpTopRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpTopRequest)
}

void PvpTopRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpTopRequest::~PvpTopRequest() {
  // @@protoc_insertion_point(destructor:main.PvpTopRequest)
  SharedDtor();
}

void PvpTopRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpTopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpTopRequest& PvpTopRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpTopRequest* PvpTopRequest::default_instance_ = NULL;

PvpTopRequest* PvpTopRequest::New() const {
  return new PvpTopRequest;
}

void PvpTopRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpTopRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, page_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpTopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpTopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // required int32 page = 2;
      case 2: {
        if (tag == 16) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpTopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpTopRequest)
  return false;
#undef DO_
}

void PvpTopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpTopRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpTopRequest)
}

int PvpTopRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpTopRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpTopRequest*>(&from));
}

void PvpTopRequest::MergeFrom(const PvpTopRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpTopRequest::CopyFrom(const PvpTopRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTopRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PvpTopRequest::Swap(PvpTopRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpTopRequest::GetTypeName() const {
  return "main.PvpTopRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpTopResponse::kAllCountFieldNumber;
const int PvpTopResponse::kTypeFieldNumber;
const int PvpTopResponse::kPlayersFieldNumber;
#endif  // !_MSC_VER

PvpTopResponse::PvpTopResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpTopResponse)
}

void PvpTopResponse::InitAsDefaultInstance() {
}

PvpTopResponse::PvpTopResponse(const PvpTopResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpTopResponse)
}

void PvpTopResponse::SharedCtor() {
  _cached_size_ = 0;
  allcount_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpTopResponse::~PvpTopResponse() {
  // @@protoc_insertion_point(destructor:main.PvpTopResponse)
  SharedDtor();
}

void PvpTopResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpTopResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpTopResponse& PvpTopResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpTopResponse* PvpTopResponse::default_instance_ = NULL;

PvpTopResponse* PvpTopResponse::New() const {
  return new PvpTopResponse;
}

void PvpTopResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpTopResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(allcount_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpTopResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpTopResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 allCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allcount_)));
          set_has_allcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }

      // repeated .main.TopPlayerMessage players = 3;
      case 3: {
        if (tag == 26) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpTopResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpTopResponse)
  return false;
#undef DO_
}

void PvpTopResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpTopResponse)
  // optional int32 allCount = 1;
  if (has_allcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allcount(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .main.TopPlayerMessage players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->players(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpTopResponse)
}

int PvpTopResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 allCount = 1;
    if (has_allcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allcount());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .main.TopPlayerMessage players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpTopResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpTopResponse*>(&from));
}

void PvpTopResponse::MergeFrom(const PvpTopResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allcount()) {
      set_allcount(from.allcount());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpTopResponse::CopyFrom(const PvpTopResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTopResponse::IsInitialized() const {

  return true;
}

void PvpTopResponse::Swap(PvpTopResponse* other) {
  if (other != this) {
    std::swap(allcount_, other->allcount_);
    std::swap(type_, other->type_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpTopResponse::GetTypeName() const {
  return "main.PvpTopResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpTopMyLocalRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

PvpTopMyLocalRequest::PvpTopMyLocalRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpTopMyLocalRequest)
}

void PvpTopMyLocalRequest::InitAsDefaultInstance() {
}

PvpTopMyLocalRequest::PvpTopMyLocalRequest(const PvpTopMyLocalRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpTopMyLocalRequest)
}

void PvpTopMyLocalRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpTopMyLocalRequest::~PvpTopMyLocalRequest() {
  // @@protoc_insertion_point(destructor:main.PvpTopMyLocalRequest)
  SharedDtor();
}

void PvpTopMyLocalRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpTopMyLocalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpTopMyLocalRequest& PvpTopMyLocalRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpTopMyLocalRequest* PvpTopMyLocalRequest::default_instance_ = NULL;

PvpTopMyLocalRequest* PvpTopMyLocalRequest::New() const {
  return new PvpTopMyLocalRequest;
}

void PvpTopMyLocalRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpTopMyLocalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpTopMyLocalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpTopMyLocalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpTopMyLocalRequest)
  return false;
#undef DO_
}

void PvpTopMyLocalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpTopMyLocalRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpTopMyLocalRequest)
}

int PvpTopMyLocalRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpTopMyLocalRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpTopMyLocalRequest*>(&from));
}

void PvpTopMyLocalRequest::MergeFrom(const PvpTopMyLocalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpTopMyLocalRequest::CopyFrom(const PvpTopMyLocalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTopMyLocalRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PvpTopMyLocalRequest::Swap(PvpTopMyLocalRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpTopMyLocalRequest::GetTypeName() const {
  return "main.PvpTopMyLocalRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpTopMyLocalResponse::kPlayersFieldNumber;
#endif  // !_MSC_VER

PvpTopMyLocalResponse::PvpTopMyLocalResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpTopMyLocalResponse)
}

void PvpTopMyLocalResponse::InitAsDefaultInstance() {
}

PvpTopMyLocalResponse::PvpTopMyLocalResponse(const PvpTopMyLocalResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpTopMyLocalResponse)
}

void PvpTopMyLocalResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpTopMyLocalResponse::~PvpTopMyLocalResponse() {
  // @@protoc_insertion_point(destructor:main.PvpTopMyLocalResponse)
  SharedDtor();
}

void PvpTopMyLocalResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpTopMyLocalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpTopMyLocalResponse& PvpTopMyLocalResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpTopMyLocalResponse* PvpTopMyLocalResponse::default_instance_ = NULL;

PvpTopMyLocalResponse* PvpTopMyLocalResponse::New() const {
  return new PvpTopMyLocalResponse;
}

void PvpTopMyLocalResponse::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpTopMyLocalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpTopMyLocalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.TopPlayerMessage players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpTopMyLocalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpTopMyLocalResponse)
  return false;
#undef DO_
}

void PvpTopMyLocalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpTopMyLocalResponse)
  // repeated .main.TopPlayerMessage players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->players(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpTopMyLocalResponse)
}

int PvpTopMyLocalResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.TopPlayerMessage players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpTopMyLocalResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpTopMyLocalResponse*>(&from));
}

void PvpTopMyLocalResponse::MergeFrom(const PvpTopMyLocalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpTopMyLocalResponse::CopyFrom(const PvpTopMyLocalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTopMyLocalResponse::IsInitialized() const {

  return true;
}

void PvpTopMyLocalResponse::Swap(PvpTopMyLocalResponse* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpTopMyLocalResponse::GetTypeName() const {
  return "main.PvpTopMyLocalResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int TopPlayerMessage::kHeadIdFieldNumber;
const int TopPlayerMessage::kNameFieldNumber;
const int TopPlayerMessage::kTopPosFieldNumber;
const int TopPlayerMessage::kTopLevelFieldNumber;
const int TopPlayerMessage::kFightTimesFieldNumber;
const int TopPlayerMessage::kWinRatioFieldNumber;
#endif  // !_MSC_VER

TopPlayerMessage::TopPlayerMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.TopPlayerMessage)
}

void TopPlayerMessage::InitAsDefaultInstance() {
}

TopPlayerMessage::TopPlayerMessage(const TopPlayerMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.TopPlayerMessage)
}

void TopPlayerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  headid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toppos_ = 0;
  toplevel_ = 0;
  fighttimes_ = 0;
  winratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopPlayerMessage::~TopPlayerMessage() {
  // @@protoc_insertion_point(destructor:main.TopPlayerMessage)
  SharedDtor();
}

void TopPlayerMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TopPlayerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TopPlayerMessage& TopPlayerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

TopPlayerMessage* TopPlayerMessage::default_instance_ = NULL;

TopPlayerMessage* TopPlayerMessage::New() const {
  return new TopPlayerMessage;
}

void TopPlayerMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TopPlayerMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(headid_, winratio_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TopPlayerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.TopPlayerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 headId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_topPos;
        break;
      }

      // optional int32 topPos = 3;
      case 3: {
        if (tag == 24) {
         parse_topPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toppos_)));
          set_has_toppos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_topLevel;
        break;
      }

      // optional int32 topLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_topLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toplevel_)));
          set_has_toplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fightTimes;
        break;
      }

      // optional int32 fightTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_fightTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighttimes_)));
          set_has_fighttimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_winRatio;
        break;
      }

      // optional float winRatio = 6;
      case 6: {
        if (tag == 53) {
         parse_winRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winratio_)));
          set_has_winratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.TopPlayerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.TopPlayerMessage)
  return false;
#undef DO_
}

void TopPlayerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.TopPlayerMessage)
  // optional int32 headId = 1;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->headid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 topPos = 3;
  if (has_toppos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toppos(), output);
  }

  // optional int32 topLevel = 4;
  if (has_toplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->toplevel(), output);
  }

  // optional int32 fightTimes = 5;
  if (has_fighttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fighttimes(), output);
  }

  // optional float winRatio = 6;
  if (has_winratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->winratio(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.TopPlayerMessage)
}

int TopPlayerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 headId = 1;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 topPos = 3;
    if (has_toppos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toppos());
    }

    // optional int32 topLevel = 4;
    if (has_toplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toplevel());
    }

    // optional int32 fightTimes = 5;
    if (has_fighttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighttimes());
    }

    // optional float winRatio = 6;
    if (has_winratio()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopPlayerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TopPlayerMessage*>(&from));
}

void TopPlayerMessage::MergeFrom(const TopPlayerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_toppos()) {
      set_toppos(from.toppos());
    }
    if (from.has_toplevel()) {
      set_toplevel(from.toplevel());
    }
    if (from.has_fighttimes()) {
      set_fighttimes(from.fighttimes());
    }
    if (from.has_winratio()) {
      set_winratio(from.winratio());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TopPlayerMessage::CopyFrom(const TopPlayerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopPlayerMessage::IsInitialized() const {

  return true;
}

void TopPlayerMessage::Swap(TopPlayerMessage* other) {
  if (other != this) {
    std::swap(headid_, other->headid_);
    std::swap(name_, other->name_);
    std::swap(toppos_, other->toppos_);
    std::swap(toplevel_, other->toplevel_);
    std::swap(fighttimes_, other->fighttimes_);
    std::swap(winratio_, other->winratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TopPlayerMessage::GetTypeName() const {
  return "main.TopPlayerMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpApplyRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

PvpApplyRequest::PvpApplyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpApplyRequest)
}

void PvpApplyRequest::InitAsDefaultInstance() {
}

PvpApplyRequest::PvpApplyRequest(const PvpApplyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpApplyRequest)
}

void PvpApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpApplyRequest::~PvpApplyRequest() {
  // @@protoc_insertion_point(destructor:main.PvpApplyRequest)
  SharedDtor();
}

void PvpApplyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpApplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpApplyRequest& PvpApplyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpApplyRequest* PvpApplyRequest::default_instance_ = NULL;

PvpApplyRequest* PvpApplyRequest::New() const {
  return new PvpApplyRequest;
}

void PvpApplyRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpApplyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpApplyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpApplyRequest)
  return false;
#undef DO_
}

void PvpApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpApplyRequest)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpApplyRequest)
}

int PvpApplyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpApplyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpApplyRequest*>(&from));
}

void PvpApplyRequest::MergeFrom(const PvpApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpApplyRequest::CopyFrom(const PvpApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpApplyRequest::IsInitialized() const {

  return true;
}

void PvpApplyRequest::Swap(PvpApplyRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpApplyRequest::GetTypeName() const {
  return "main.PvpApplyRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpApplyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

PvpApplyResponse::PvpApplyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpApplyResponse)
}

void PvpApplyResponse::InitAsDefaultInstance() {
}

PvpApplyResponse::PvpApplyResponse(const PvpApplyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpApplyResponse)
}

void PvpApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpApplyResponse::~PvpApplyResponse() {
  // @@protoc_insertion_point(destructor:main.PvpApplyResponse)
  SharedDtor();
}

void PvpApplyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpApplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpApplyResponse& PvpApplyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpApplyResponse* PvpApplyResponse::default_instance_ = NULL;

PvpApplyResponse* PvpApplyResponse::New() const {
  return new PvpApplyResponse;
}

void PvpApplyResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpApplyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpApplyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpApplyResponse)
  return false;
#undef DO_
}

void PvpApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpApplyResponse)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpApplyResponse)
}

int PvpApplyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpApplyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpApplyResponse*>(&from));
}

void PvpApplyResponse::MergeFrom(const PvpApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpApplyResponse::CopyFrom(const PvpApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpApplyResponse::IsInitialized() const {

  return true;
}

void PvpApplyResponse::Swap(PvpApplyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpApplyResponse::GetTypeName() const {
  return "main.PvpApplyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CheckReadyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CheckReadyResponse::CheckReadyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CheckReadyResponse)
}

void CheckReadyResponse::InitAsDefaultInstance() {
}

CheckReadyResponse::CheckReadyResponse(const CheckReadyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CheckReadyResponse)
}

void CheckReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckReadyResponse::~CheckReadyResponse() {
  // @@protoc_insertion_point(destructor:main.CheckReadyResponse)
  SharedDtor();
}

void CheckReadyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CheckReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckReadyResponse& CheckReadyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

CheckReadyResponse* CheckReadyResponse::default_instance_ = NULL;

CheckReadyResponse* CheckReadyResponse::New() const {
  return new CheckReadyResponse;
}

void CheckReadyResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CheckReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CheckReadyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CheckReadyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CheckReadyResponse)
  return false;
#undef DO_
}

void CheckReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CheckReadyResponse)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CheckReadyResponse)
}

int CheckReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckReadyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckReadyResponse*>(&from));
}

void CheckReadyResponse::MergeFrom(const CheckReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CheckReadyResponse::CopyFrom(const CheckReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckReadyResponse::IsInitialized() const {

  return true;
}

void CheckReadyResponse::Swap(CheckReadyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CheckReadyResponse::GetTypeName() const {
  return "main.CheckReadyResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpExitApplyRequest::PvpExitApplyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpExitApplyRequest)
}

void PvpExitApplyRequest::InitAsDefaultInstance() {
}

PvpExitApplyRequest::PvpExitApplyRequest(const PvpExitApplyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpExitApplyRequest)
}

void PvpExitApplyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpExitApplyRequest::~PvpExitApplyRequest() {
  // @@protoc_insertion_point(destructor:main.PvpExitApplyRequest)
  SharedDtor();
}

void PvpExitApplyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpExitApplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpExitApplyRequest& PvpExitApplyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpExitApplyRequest* PvpExitApplyRequest::default_instance_ = NULL;

PvpExitApplyRequest* PvpExitApplyRequest::New() const {
  return new PvpExitApplyRequest;
}

void PvpExitApplyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpExitApplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpExitApplyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpExitApplyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpExitApplyRequest)
  return false;
#undef DO_
}

void PvpExitApplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpExitApplyRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpExitApplyRequest)
}

int PvpExitApplyRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpExitApplyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpExitApplyRequest*>(&from));
}

void PvpExitApplyRequest::MergeFrom(const PvpExitApplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpExitApplyRequest::CopyFrom(const PvpExitApplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpExitApplyRequest::IsInitialized() const {

  return true;
}

void PvpExitApplyRequest::Swap(PvpExitApplyRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpExitApplyRequest::GetTypeName() const {
  return "main.PvpExitApplyRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpExitApplyResponse::PvpExitApplyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpExitApplyResponse)
}

void PvpExitApplyResponse::InitAsDefaultInstance() {
}

PvpExitApplyResponse::PvpExitApplyResponse(const PvpExitApplyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpExitApplyResponse)
}

void PvpExitApplyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpExitApplyResponse::~PvpExitApplyResponse() {
  // @@protoc_insertion_point(destructor:main.PvpExitApplyResponse)
  SharedDtor();
}

void PvpExitApplyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpExitApplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpExitApplyResponse& PvpExitApplyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpExitApplyResponse* PvpExitApplyResponse::default_instance_ = NULL;

PvpExitApplyResponse* PvpExitApplyResponse::New() const {
  return new PvpExitApplyResponse;
}

void PvpExitApplyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpExitApplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpExitApplyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpExitApplyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpExitApplyResponse)
  return false;
#undef DO_
}

void PvpExitApplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpExitApplyResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpExitApplyResponse)
}

int PvpExitApplyResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpExitApplyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpExitApplyResponse*>(&from));
}

void PvpExitApplyResponse::MergeFrom(const PvpExitApplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpExitApplyResponse::CopyFrom(const PvpExitApplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpExitApplyResponse::IsInitialized() const {

  return true;
}

void PvpExitApplyResponse::Swap(PvpExitApplyResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpExitApplyResponse::GetTypeName() const {
  return "main.PvpExitApplyResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpGetReadyRequest::PvpGetReadyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpGetReadyRequest)
}

void PvpGetReadyRequest::InitAsDefaultInstance() {
}

PvpGetReadyRequest::PvpGetReadyRequest(const PvpGetReadyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpGetReadyRequest)
}

void PvpGetReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpGetReadyRequest::~PvpGetReadyRequest() {
  // @@protoc_insertion_point(destructor:main.PvpGetReadyRequest)
  SharedDtor();
}

void PvpGetReadyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpGetReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpGetReadyRequest& PvpGetReadyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpGetReadyRequest* PvpGetReadyRequest::default_instance_ = NULL;

PvpGetReadyRequest* PvpGetReadyRequest::New() const {
  return new PvpGetReadyRequest;
}

void PvpGetReadyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpGetReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpGetReadyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpGetReadyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpGetReadyRequest)
  return false;
#undef DO_
}

void PvpGetReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpGetReadyRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpGetReadyRequest)
}

int PvpGetReadyRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpGetReadyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpGetReadyRequest*>(&from));
}

void PvpGetReadyRequest::MergeFrom(const PvpGetReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpGetReadyRequest::CopyFrom(const PvpGetReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpGetReadyRequest::IsInitialized() const {

  return true;
}

void PvpGetReadyRequest::Swap(PvpGetReadyRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpGetReadyRequest::GetTypeName() const {
  return "main.PvpGetReadyRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvpGetReadyResponse::PvpGetReadyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpGetReadyResponse)
}

void PvpGetReadyResponse::InitAsDefaultInstance() {
}

PvpGetReadyResponse::PvpGetReadyResponse(const PvpGetReadyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpGetReadyResponse)
}

void PvpGetReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpGetReadyResponse::~PvpGetReadyResponse() {
  // @@protoc_insertion_point(destructor:main.PvpGetReadyResponse)
  SharedDtor();
}

void PvpGetReadyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpGetReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpGetReadyResponse& PvpGetReadyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpGetReadyResponse* PvpGetReadyResponse::default_instance_ = NULL;

PvpGetReadyResponse* PvpGetReadyResponse::New() const {
  return new PvpGetReadyResponse;
}

void PvpGetReadyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpGetReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpGetReadyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpGetReadyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpGetReadyResponse)
  return false;
#undef DO_
}

void PvpGetReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpGetReadyResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpGetReadyResponse)
}

int PvpGetReadyResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpGetReadyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpGetReadyResponse*>(&from));
}

void PvpGetReadyResponse::MergeFrom(const PvpGetReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpGetReadyResponse::CopyFrom(const PvpGetReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpGetReadyResponse::IsInitialized() const {

  return true;
}

void PvpGetReadyResponse::Swap(PvpGetReadyResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpGetReadyResponse::GetTypeName() const {
  return "main.PvpGetReadyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpMatchingResponse::kResultFieldNumber;
const int PvpMatchingResponse::kFightIdFieldNumber;
const int PvpMatchingResponse::kIpFieldNumber;
const int PvpMatchingResponse::kPortFieldNumber;
const int PvpMatchingResponse::kIconFieldNumber;
const int PvpMatchingResponse::kNameFieldNumber;
const int PvpMatchingResponse::kPosFieldNumber;
const int PvpMatchingResponse::kLevelFieldNumber;
const int PvpMatchingResponse::kFightCounterFieldNumber;
const int PvpMatchingResponse::kWinRatioFieldNumber;
const int PvpMatchingResponse::kServerIdFieldNumber;
const int PvpMatchingResponse::kServerNameFieldNumber;
#endif  // !_MSC_VER

PvpMatchingResponse::PvpMatchingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpMatchingResponse)
}

void PvpMatchingResponse::InitAsDefaultInstance() {
}

PvpMatchingResponse::PvpMatchingResponse(const PvpMatchingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpMatchingResponse)
}

void PvpMatchingResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  fightid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  icon_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
  level_ = 0;
  fightcounter_ = 0;
  winratio_ = 0;
  serverid_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpMatchingResponse::~PvpMatchingResponse() {
  // @@protoc_insertion_point(destructor:main.PvpMatchingResponse)
  SharedDtor();
}

void PvpMatchingResponse::SharedDtor() {
  if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fightid_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpMatchingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpMatchingResponse& PvpMatchingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpMatchingResponse* PvpMatchingResponse::default_instance_ = NULL;

PvpMatchingResponse* PvpMatchingResponse::New() const {
  return new PvpMatchingResponse;
}

void PvpMatchingResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpMatchingResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(result_, port_);
    ZR_(icon_, level_);
    if (has_fightid()) {
      if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fightid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(fightcounter_, serverid_);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpMatchingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpMatchingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fightId;
        break;
      }

      // optional string fightId = 2;
      case 2: {
        if (tag == 18) {
         parse_fightId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fightid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_icon;
        break;
      }

      // optional int32 icon = 5;
      case 5: {
        if (tag == 40) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pos;
        break;
      }

      // optional int32 pos = 7;
      case 7: {
        if (tag == 56) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional int32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fightCounter;
        break;
      }

      // optional int32 fightCounter = 9;
      case 9: {
        if (tag == 72) {
         parse_fightCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcounter_)));
          set_has_fightcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_winRatio;
        break;
      }

      // optional float winRatio = 10;
      case 10: {
        if (tag == 85) {
         parse_winRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winratio_)));
          set_has_winratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 11;
      case 11: {
        if (tag == 88) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_serverName;
        break;
      }

      // optional string serverName = 12;
      case 12: {
        if (tag == 98) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpMatchingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpMatchingResponse)
  return false;
#undef DO_
}

void PvpMatchingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpMatchingResponse)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string fightId = 2;
  if (has_fightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fightid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional int32 icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->icon(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 pos = 7;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos(), output);
  }

  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // optional int32 fightCounter = 9;
  if (has_fightcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fightcounter(), output);
  }

  // optional float winRatio = 10;
  if (has_winratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->winratio(), output);
  }

  // optional int32 serverId = 11;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->serverid(), output);
  }

  // optional string serverName = 12;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->servername(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpMatchingResponse)
}

int PvpMatchingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string fightId = 2;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fightid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 pos = 7;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fightCounter = 9;
    if (has_fightcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcounter());
    }

    // optional float winRatio = 10;
    if (has_winratio()) {
      total_size += 1 + 4;
    }

    // optional int32 serverId = 11;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional string serverName = 12;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpMatchingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpMatchingResponse*>(&from));
}

void PvpMatchingResponse::MergeFrom(const PvpMatchingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fightid()) {
      set_fightid(from.fightid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightcounter()) {
      set_fightcounter(from.fightcounter());
    }
    if (from.has_winratio()) {
      set_winratio(from.winratio());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpMatchingResponse::CopyFrom(const PvpMatchingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpMatchingResponse::IsInitialized() const {

  return true;
}

void PvpMatchingResponse::Swap(PvpMatchingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fightid_, other->fightid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(icon_, other->icon_);
    std::swap(name_, other->name_);
    std::swap(pos_, other->pos_);
    std::swap(level_, other->level_);
    std::swap(fightcounter_, other->fightcounter_);
    std::swap(winratio_, other->winratio_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpMatchingResponse::GetTypeName() const {
  return "main.PvpMatchingResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpOfficerConfig::kMyLordFieldNumber;
const int PvpOfficerConfig::kMyCardsFieldNumber;
const int PvpOfficerConfig::kEnemyLordFieldNumber;
const int PvpOfficerConfig::kEnemyCardsFieldNumber;
#endif  // !_MSC_VER

PvpOfficerConfig::PvpOfficerConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpOfficerConfig)
}

void PvpOfficerConfig::InitAsDefaultInstance() {
}

PvpOfficerConfig::PvpOfficerConfig(const PvpOfficerConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpOfficerConfig)
}

void PvpOfficerConfig::SharedCtor() {
  _cached_size_ = 0;
  mylord_ = 0;
  enemylord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpOfficerConfig::~PvpOfficerConfig() {
  // @@protoc_insertion_point(destructor:main.PvpOfficerConfig)
  SharedDtor();
}

void PvpOfficerConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpOfficerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpOfficerConfig& PvpOfficerConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpOfficerConfig* PvpOfficerConfig::default_instance_ = NULL;

PvpOfficerConfig* PvpOfficerConfig::New() const {
  return new PvpOfficerConfig;
}

void PvpOfficerConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpOfficerConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mylord_, enemylord_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mycards_.Clear();
  enemycards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpOfficerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpOfficerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 myLord = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mylord_)));
          set_has_mylord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myCards;
        break;
      }

      // repeated int32 myCards = 2;
      case 2: {
        if (tag == 16) {
         parse_myCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mycards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mycards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myCards;
        if (input->ExpectTag(24)) goto parse_enemyLord;
        break;
      }

      // optional int32 enemyLord = 3;
      case 3: {
        if (tag == 24) {
         parse_enemyLord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemylord_)));
          set_has_enemylord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enemyCards;
        break;
      }

      // repeated int32 enemyCards = 4;
      case 4: {
        if (tag == 32) {
         parse_enemyCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_enemycards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemycards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enemyCards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpOfficerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpOfficerConfig)
  return false;
#undef DO_
}

void PvpOfficerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpOfficerConfig)
  // optional int32 myLord = 1;
  if (has_mylord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mylord(), output);
  }

  // repeated int32 myCards = 2;
  for (int i = 0; i < this->mycards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mycards(i), output);
  }

  // optional int32 enemyLord = 3;
  if (has_enemylord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enemylord(), output);
  }

  // repeated int32 enemyCards = 4;
  for (int i = 0; i < this->enemycards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->enemycards(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpOfficerConfig)
}

int PvpOfficerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 myLord = 1;
    if (has_mylord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mylord());
    }

    // optional int32 enemyLord = 3;
    if (has_enemylord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemylord());
    }

  }
  // repeated int32 myCards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mycards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mycards(i));
    }
    total_size += 1 * this->mycards_size() + data_size;
  }

  // repeated int32 enemyCards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemycards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemycards(i));
    }
    total_size += 1 * this->enemycards_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpOfficerConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpOfficerConfig*>(&from));
}

void PvpOfficerConfig::MergeFrom(const PvpOfficerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  mycards_.MergeFrom(from.mycards_);
  enemycards_.MergeFrom(from.enemycards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mylord()) {
      set_mylord(from.mylord());
    }
    if (from.has_enemylord()) {
      set_enemylord(from.enemylord());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpOfficerConfig::CopyFrom(const PvpOfficerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpOfficerConfig::IsInitialized() const {

  return true;
}

void PvpOfficerConfig::Swap(PvpOfficerConfig* other) {
  if (other != this) {
    std::swap(mylord_, other->mylord_);
    mycards_.Swap(&other->mycards_);
    std::swap(enemylord_, other->enemylord_);
    enemycards_.Swap(&other->enemycards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpOfficerConfig::GetTypeName() const {
  return "main.PvpOfficerConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpShopListRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

PvpShopListRequest::PvpShopListRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpShopListRequest)
}

void PvpShopListRequest::InitAsDefaultInstance() {
}

PvpShopListRequest::PvpShopListRequest(const PvpShopListRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpShopListRequest)
}

void PvpShopListRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpShopListRequest::~PvpShopListRequest() {
  // @@protoc_insertion_point(destructor:main.PvpShopListRequest)
  SharedDtor();
}

void PvpShopListRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpShopListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpShopListRequest& PvpShopListRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpShopListRequest* PvpShopListRequest::default_instance_ = NULL;

PvpShopListRequest* PvpShopListRequest::New() const {
  return new PvpShopListRequest;
}

void PvpShopListRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpShopListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpShopListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpShopListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpShopListRequest)
  return false;
#undef DO_
}

void PvpShopListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpShopListRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpShopListRequest)
}

int PvpShopListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpShopListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpShopListRequest*>(&from));
}

void PvpShopListRequest::MergeFrom(const PvpShopListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpShopListRequest::CopyFrom(const PvpShopListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpShopListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PvpShopListRequest::Swap(PvpShopListRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpShopListRequest::GetTypeName() const {
  return "main.PvpShopListRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpShopListResponse::kAwardScoreFieldNumber;
const int PvpShopListResponse::kItemsFieldNumber;
#endif  // !_MSC_VER

PvpShopListResponse::PvpShopListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpShopListResponse)
}

void PvpShopListResponse::InitAsDefaultInstance() {
}

PvpShopListResponse::PvpShopListResponse(const PvpShopListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpShopListResponse)
}

void PvpShopListResponse::SharedCtor() {
  _cached_size_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpShopListResponse::~PvpShopListResponse() {
  // @@protoc_insertion_point(destructor:main.PvpShopListResponse)
  SharedDtor();
}

void PvpShopListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpShopListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpShopListResponse& PvpShopListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpShopListResponse* PvpShopListResponse::default_instance_ = NULL;

PvpShopListResponse* PvpShopListResponse::New() const {
  return new PvpShopListResponse;
}

void PvpShopListResponse::Clear() {
  awardscore_ = 0;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpShopListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpShopListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 awardScore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .main.PvpShopItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpShopListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpShopListResponse)
  return false;
#undef DO_
}

void PvpShopListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpShopListResponse)
  // optional int32 awardScore = 1;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awardscore(), output);
  }

  // repeated .main.PvpShopItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->items(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpShopListResponse)
}

int PvpShopListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 awardScore = 1;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated .main.PvpShopItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpShopListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpShopListResponse*>(&from));
}

void PvpShopListResponse::MergeFrom(const PvpShopListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpShopListResponse::CopyFrom(const PvpShopListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpShopListResponse::IsInitialized() const {

  return true;
}

void PvpShopListResponse::Swap(PvpShopListResponse* other) {
  if (other != this) {
    std::swap(awardscore_, other->awardscore_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpShopListResponse::GetTypeName() const {
  return "main.PvpShopListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpShopItem::kUidFieldNumber;
const int PvpShopItem::kItemIdFieldNumber;
const int PvpShopItem::kItemTypeFieldNumber;
const int PvpShopItem::kItemCountFieldNumber;
const int PvpShopItem::kItemLevelFieldNumber;
const int PvpShopItem::kCostScoreFieldNumber;
const int PvpShopItem::kPvpLevelMinFieldNumber;
const int PvpShopItem::kCurrentCountFieldNumber;
const int PvpShopItem::kMaxCountFieldNumber;
const int PvpShopItem::kDiscountCostScoreFieldNumber;
#endif  // !_MSC_VER

PvpShopItem::PvpShopItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpShopItem)
}

void PvpShopItem::InitAsDefaultInstance() {
}

PvpShopItem::PvpShopItem(const PvpShopItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpShopItem)
}

void PvpShopItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  itemid_ = 0;
  itemtype_ = 0;
  itemcount_ = 0;
  itemlevel_ = 0;
  costscore_ = 0;
  pvplevelmin_ = 0;
  currentcount_ = 0;
  maxcount_ = 0;
  discountcostscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpShopItem::~PvpShopItem() {
  // @@protoc_insertion_point(destructor:main.PvpShopItem)
  SharedDtor();
}

void PvpShopItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpShopItem& PvpShopItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpShopItem* PvpShopItem::default_instance_ = NULL;

PvpShopItem* PvpShopItem::New() const {
  return new PvpShopItem;
}

void PvpShopItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpShopItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, currentcount_);
  }
  ZR_(maxcount_, discountcostscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemType;
        break;
      }

      // optional sint32 itemType = 3;
      case 3: {
        if (tag == 24) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemCount;
        break;
      }

      // optional sint32 itemCount = 4;
      case 4: {
        if (tag == 32) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemLevel;
        break;
      }

      // optional sint32 itemLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_itemLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemlevel_)));
          set_has_itemlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_costScore;
        break;
      }

      // optional int32 costScore = 6;
      case 6: {
        if (tag == 48) {
         parse_costScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costscore_)));
          set_has_costscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pvpLevelMin;
        break;
      }

      // optional int32 pvpLevelMin = 7;
      case 7: {
        if (tag == 56) {
         parse_pvpLevelMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvplevelmin_)));
          set_has_pvplevelmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_currentCount;
        break;
      }

      // optional int32 currentCount = 8;
      case 8: {
        if (tag == 64) {
         parse_currentCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcount_)));
          set_has_currentcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maxCount;
        break;
      }

      // optional int32 maxCount = 9;
      case 9: {
        if (tag == 72) {
         parse_maxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_discountCostScore;
        break;
      }

      // optional int32 discountCostScore = 10;
      case 10: {
        if (tag == 80) {
         parse_discountCostScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discountcostscore_)));
          set_has_discountcostscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpShopItem)
  return false;
#undef DO_
}

void PvpShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpShopItem)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional sint32 itemType = 3;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->itemtype(), output);
  }

  // optional sint32 itemCount = 4;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->itemcount(), output);
  }

  // optional sint32 itemLevel = 5;
  if (has_itemlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->itemlevel(), output);
  }

  // optional int32 costScore = 6;
  if (has_costscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->costscore(), output);
  }

  // optional int32 pvpLevelMin = 7;
  if (has_pvplevelmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pvplevelmin(), output);
  }

  // optional int32 currentCount = 8;
  if (has_currentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currentcount(), output);
  }

  // optional int32 maxCount = 9;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxcount(), output);
  }

  // optional int32 discountCostScore = 10;
  if (has_discountcostscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->discountcostscore(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpShopItem)
}

int PvpShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional sint32 itemType = 3;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemtype());
    }

    // optional sint32 itemCount = 4;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemcount());
    }

    // optional sint32 itemLevel = 5;
    if (has_itemlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemlevel());
    }

    // optional int32 costScore = 6;
    if (has_costscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costscore());
    }

    // optional int32 pvpLevelMin = 7;
    if (has_pvplevelmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvplevelmin());
    }

    // optional int32 currentCount = 8;
    if (has_currentcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 maxCount = 9;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

    // optional int32 discountCostScore = 10;
    if (has_discountcostscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discountcostscore());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpShopItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpShopItem*>(&from));
}

void PvpShopItem::MergeFrom(const PvpShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
    if (from.has_itemlevel()) {
      set_itemlevel(from.itemlevel());
    }
    if (from.has_costscore()) {
      set_costscore(from.costscore());
    }
    if (from.has_pvplevelmin()) {
      set_pvplevelmin(from.pvplevelmin());
    }
    if (from.has_currentcount()) {
      set_currentcount(from.currentcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_discountcostscore()) {
      set_discountcostscore(from.discountcostscore());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpShopItem::CopyFrom(const PvpShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpShopItem::IsInitialized() const {

  return true;
}

void PvpShopItem::Swap(PvpShopItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(itemlevel_, other->itemlevel_);
    std::swap(costscore_, other->costscore_);
    std::swap(pvplevelmin_, other->pvplevelmin_);
    std::swap(currentcount_, other->currentcount_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(discountcostscore_, other->discountcostscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpShopItem::GetTypeName() const {
  return "main.PvpShopItem";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpShopPurchRequest::kUidFieldNumber;
#endif  // !_MSC_VER

PvpShopPurchRequest::PvpShopPurchRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpShopPurchRequest)
}

void PvpShopPurchRequest::InitAsDefaultInstance() {
}

PvpShopPurchRequest::PvpShopPurchRequest(const PvpShopPurchRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpShopPurchRequest)
}

void PvpShopPurchRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpShopPurchRequest::~PvpShopPurchRequest() {
  // @@protoc_insertion_point(destructor:main.PvpShopPurchRequest)
  SharedDtor();
}

void PvpShopPurchRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpShopPurchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpShopPurchRequest& PvpShopPurchRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpShopPurchRequest* PvpShopPurchRequest::default_instance_ = NULL;

PvpShopPurchRequest* PvpShopPurchRequest::New() const {
  return new PvpShopPurchRequest;
}

void PvpShopPurchRequest::Clear() {
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpShopPurchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpShopPurchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpShopPurchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpShopPurchRequest)
  return false;
#undef DO_
}

void PvpShopPurchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpShopPurchRequest)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpShopPurchRequest)
}

int PvpShopPurchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpShopPurchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpShopPurchRequest*>(&from));
}

void PvpShopPurchRequest::MergeFrom(const PvpShopPurchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpShopPurchRequest::CopyFrom(const PvpShopPurchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpShopPurchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PvpShopPurchRequest::Swap(PvpShopPurchRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpShopPurchRequest::GetTypeName() const {
  return "main.PvpShopPurchRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvpShopPurchResponse::kResultFieldNumber;
#endif  // !_MSC_VER

PvpShopPurchResponse::PvpShopPurchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvpShopPurchResponse)
}

void PvpShopPurchResponse::InitAsDefaultInstance() {
}

PvpShopPurchResponse::PvpShopPurchResponse(const PvpShopPurchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvpShopPurchResponse)
}

void PvpShopPurchResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpShopPurchResponse::~PvpShopPurchResponse() {
  // @@protoc_insertion_point(destructor:main.PvpShopPurchResponse)
  SharedDtor();
}

void PvpShopPurchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvpShopPurchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvpShopPurchResponse& PvpShopPurchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvpShopPurchResponse* PvpShopPurchResponse::default_instance_ = NULL;

PvpShopPurchResponse* PvpShopPurchResponse::New() const {
  return new PvpShopPurchResponse;
}

void PvpShopPurchResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvpShopPurchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvpShopPurchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvpShopPurchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvpShopPurchResponse)
  return false;
#undef DO_
}

void PvpShopPurchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvpShopPurchResponse)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvpShopPurchResponse)
}

int PvpShopPurchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpShopPurchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvpShopPurchResponse*>(&from));
}

void PvpShopPurchResponse::MergeFrom(const PvpShopPurchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvpShopPurchResponse::CopyFrom(const PvpShopPurchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpShopPurchResponse::IsInitialized() const {

  return true;
}

void PvpShopPurchResponse::Swap(PvpShopPurchResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvpShopPurchResponse::GetTypeName() const {
  return "main.PvpShopPurchResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvPDayAwardGiftEntryRequest::PvPDayAwardGiftEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPDayAwardGiftEntryRequest)
}

void PvPDayAwardGiftEntryRequest::InitAsDefaultInstance() {
}

PvPDayAwardGiftEntryRequest::PvPDayAwardGiftEntryRequest(const PvPDayAwardGiftEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPDayAwardGiftEntryRequest)
}

void PvPDayAwardGiftEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPDayAwardGiftEntryRequest::~PvPDayAwardGiftEntryRequest() {
  // @@protoc_insertion_point(destructor:main.PvPDayAwardGiftEntryRequest)
  SharedDtor();
}

void PvPDayAwardGiftEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPDayAwardGiftEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPDayAwardGiftEntryRequest& PvPDayAwardGiftEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPDayAwardGiftEntryRequest* PvPDayAwardGiftEntryRequest::default_instance_ = NULL;

PvPDayAwardGiftEntryRequest* PvPDayAwardGiftEntryRequest::New() const {
  return new PvPDayAwardGiftEntryRequest;
}

void PvPDayAwardGiftEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPDayAwardGiftEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPDayAwardGiftEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPDayAwardGiftEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPDayAwardGiftEntryRequest)
  return false;
#undef DO_
}

void PvPDayAwardGiftEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPDayAwardGiftEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPDayAwardGiftEntryRequest)
}

int PvPDayAwardGiftEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPDayAwardGiftEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPDayAwardGiftEntryRequest*>(&from));
}

void PvPDayAwardGiftEntryRequest::MergeFrom(const PvPDayAwardGiftEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPDayAwardGiftEntryRequest::CopyFrom(const PvPDayAwardGiftEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPDayAwardGiftEntryRequest::IsInitialized() const {

  return true;
}

void PvPDayAwardGiftEntryRequest::Swap(PvPDayAwardGiftEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPDayAwardGiftEntryRequest::GetTypeName() const {
  return "main.PvPDayAwardGiftEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPDayAwardGiftEntryResponse::kFightCounterFieldNumber;
const int PvPDayAwardGiftEntryResponse::kListFieldNumber;
#endif  // !_MSC_VER

PvPDayAwardGiftEntryResponse::PvPDayAwardGiftEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPDayAwardGiftEntryResponse)
}

void PvPDayAwardGiftEntryResponse::InitAsDefaultInstance() {
}

PvPDayAwardGiftEntryResponse::PvPDayAwardGiftEntryResponse(const PvPDayAwardGiftEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPDayAwardGiftEntryResponse)
}

void PvPDayAwardGiftEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  fightcounter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPDayAwardGiftEntryResponse::~PvPDayAwardGiftEntryResponse() {
  // @@protoc_insertion_point(destructor:main.PvPDayAwardGiftEntryResponse)
  SharedDtor();
}

void PvPDayAwardGiftEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPDayAwardGiftEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPDayAwardGiftEntryResponse& PvPDayAwardGiftEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPDayAwardGiftEntryResponse* PvPDayAwardGiftEntryResponse::default_instance_ = NULL;

PvPDayAwardGiftEntryResponse* PvPDayAwardGiftEntryResponse::New() const {
  return new PvPDayAwardGiftEntryResponse;
}

void PvPDayAwardGiftEntryResponse::Clear() {
  fightcounter_ = 0;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPDayAwardGiftEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPDayAwardGiftEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fightCounter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcounter_)));
          set_has_fightcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .main.PvPDayAwardGiftBag list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPDayAwardGiftEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPDayAwardGiftEntryResponse)
  return false;
#undef DO_
}

void PvPDayAwardGiftEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPDayAwardGiftEntryResponse)
  // optional int32 fightCounter = 1;
  if (has_fightcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fightcounter(), output);
  }

  // repeated .main.PvPDayAwardGiftBag list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPDayAwardGiftEntryResponse)
}

int PvPDayAwardGiftEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fightCounter = 1;
    if (has_fightcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcounter());
    }

  }
  // repeated .main.PvPDayAwardGiftBag list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPDayAwardGiftEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPDayAwardGiftEntryResponse*>(&from));
}

void PvPDayAwardGiftEntryResponse::MergeFrom(const PvPDayAwardGiftEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightcounter()) {
      set_fightcounter(from.fightcounter());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPDayAwardGiftEntryResponse::CopyFrom(const PvPDayAwardGiftEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPDayAwardGiftEntryResponse::IsInitialized() const {

  return true;
}

void PvPDayAwardGiftEntryResponse::Swap(PvPDayAwardGiftEntryResponse* other) {
  if (other != this) {
    std::swap(fightcounter_, other->fightcounter_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPDayAwardGiftEntryResponse::GetTypeName() const {
  return "main.PvPDayAwardGiftEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPDayAwardGiftBag::kLevelFieldNumber;
const int PvPDayAwardGiftBag::kNameFieldNumber;
const int PvPDayAwardGiftBag::kInfoFieldNumber;
const int PvPDayAwardGiftBag::kCountFieldNumber;
const int PvPDayAwardGiftBag::kGiftCoinFieldNumber;
const int PvPDayAwardGiftBag::kGiftAwardFieldNumber;
const int PvPDayAwardGiftBag::kSpeakerFieldNumber;
const int PvPDayAwardGiftBag::kLiandanFieldNumber;
const int PvPDayAwardGiftBag::kIsBuyFieldNumber;
const int PvPDayAwardGiftBag::kListFieldNumber;
const int PvPDayAwardGiftBag::kGiftCostDiscountFieldNumber;
const int PvPDayAwardGiftBag::kCustomFieldNumber;
#endif  // !_MSC_VER

PvPDayAwardGiftBag::PvPDayAwardGiftBag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPDayAwardGiftBag)
}

void PvPDayAwardGiftBag::InitAsDefaultInstance() {
}

PvPDayAwardGiftBag::PvPDayAwardGiftBag(const PvPDayAwardGiftBag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPDayAwardGiftBag)
}

void PvPDayAwardGiftBag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  giftcoin_ = 0;
  giftaward_ = 0;
  speaker_ = 0;
  liandan_ = 0;
  isbuy_ = 0;
  giftcostdiscount_ = 0;
  custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPDayAwardGiftBag::~PvPDayAwardGiftBag() {
  // @@protoc_insertion_point(destructor:main.PvPDayAwardGiftBag)
  SharedDtor();
}

void PvPDayAwardGiftBag::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPDayAwardGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPDayAwardGiftBag& PvPDayAwardGiftBag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPDayAwardGiftBag* PvPDayAwardGiftBag::default_instance_ = NULL;

PvPDayAwardGiftBag* PvPDayAwardGiftBag::New() const {
  return new PvPDayAwardGiftBag;
}

void PvPDayAwardGiftBag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvPDayAwardGiftBag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, count_);
    ZR_(giftcoin_, liandan_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3328) {
    ZR_(isbuy_, giftcostdiscount_);
    if (has_custom()) {
      if (custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPDayAwardGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPDayAwardGiftBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional string info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_giftCoin;
        break;
      }

      // optional int32 giftCoin = 5;
      case 5: {
        if (tag == 40) {
         parse_giftCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftcoin_)));
          set_has_giftcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_giftAward;
        break;
      }

      // optional int32 giftAward = 6;
      case 6: {
        if (tag == 48) {
         parse_giftAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftaward_)));
          set_has_giftaward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_speaker;
        break;
      }

      // optional int32 speaker = 7;
      case 7: {
        if (tag == 56) {
         parse_speaker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speaker_)));
          set_has_speaker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_liandan;
        break;
      }

      // optional int32 liandan = 8;
      case 8: {
        if (tag == 64) {
         parse_liandan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liandan_)));
          set_has_liandan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isBuy;
        break;
      }

      // optional int32 isBuy = 9;
      case 9: {
        if (tag == 72) {
         parse_isBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbuy_)));
          set_has_isbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_list;
        break;
      }

      // repeated .main.PvPDayAwardGiftItem list = 10;
      case 10: {
        if (tag == 82) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_list;
        if (input->ExpectTag(88)) goto parse_giftCostDiscount;
        break;
      }

      // optional int32 giftCostDiscount = 11;
      case 11: {
        if (tag == 88) {
         parse_giftCostDiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftcostdiscount_)));
          set_has_giftcostdiscount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_custom;
        break;
      }

      // optional string custom = 12;
      case 12: {
        if (tag == 98) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPDayAwardGiftBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPDayAwardGiftBag)
  return false;
#undef DO_
}

void PvPDayAwardGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPDayAwardGiftBag)
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 giftCoin = 5;
  if (has_giftcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->giftcoin(), output);
  }

  // optional int32 giftAward = 6;
  if (has_giftaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->giftaward(), output);
  }

  // optional int32 speaker = 7;
  if (has_speaker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->speaker(), output);
  }

  // optional int32 liandan = 8;
  if (has_liandan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->liandan(), output);
  }

  // optional int32 isBuy = 9;
  if (has_isbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isbuy(), output);
  }

  // repeated .main.PvPDayAwardGiftItem list = 10;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->list(i), output);
  }

  // optional int32 giftCostDiscount = 11;
  if (has_giftcostdiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->giftcostdiscount(), output);
  }

  // optional string custom = 12;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->custom(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPDayAwardGiftBag)
}

int PvPDayAwardGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 giftCoin = 5;
    if (has_giftcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftcoin());
    }

    // optional int32 giftAward = 6;
    if (has_giftaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftaward());
    }

    // optional int32 speaker = 7;
    if (has_speaker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speaker());
    }

    // optional int32 liandan = 8;
    if (has_liandan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liandan());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isBuy = 9;
    if (has_isbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbuy());
    }

    // optional int32 giftCostDiscount = 11;
    if (has_giftcostdiscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftcostdiscount());
    }

    // optional string custom = 12;
    if (has_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
    }

  }
  // repeated .main.PvPDayAwardGiftItem list = 10;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPDayAwardGiftBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPDayAwardGiftBag*>(&from));
}

void PvPDayAwardGiftBag::MergeFrom(const PvPDayAwardGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_giftcoin()) {
      set_giftcoin(from.giftcoin());
    }
    if (from.has_giftaward()) {
      set_giftaward(from.giftaward());
    }
    if (from.has_speaker()) {
      set_speaker(from.speaker());
    }
    if (from.has_liandan()) {
      set_liandan(from.liandan());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isbuy()) {
      set_isbuy(from.isbuy());
    }
    if (from.has_giftcostdiscount()) {
      set_giftcostdiscount(from.giftcostdiscount());
    }
    if (from.has_custom()) {
      set_custom(from.custom());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPDayAwardGiftBag::CopyFrom(const PvPDayAwardGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPDayAwardGiftBag::IsInitialized() const {

  return true;
}

void PvPDayAwardGiftBag::Swap(PvPDayAwardGiftBag* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(count_, other->count_);
    std::swap(giftcoin_, other->giftcoin_);
    std::swap(giftaward_, other->giftaward_);
    std::swap(speaker_, other->speaker_);
    std::swap(liandan_, other->liandan_);
    std::swap(isbuy_, other->isbuy_);
    list_.Swap(&other->list_);
    std::swap(giftcostdiscount_, other->giftcostdiscount_);
    std::swap(custom_, other->custom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPDayAwardGiftBag::GetTypeName() const {
  return "main.PvPDayAwardGiftBag";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPDayAwardGiftItem::kItemTypeFieldNumber;
const int PvPDayAwardGiftItem::kItemIdFieldNumber;
const int PvPDayAwardGiftItem::kNumFieldNumber;
const int PvPDayAwardGiftItem::kNameFieldNumber;
const int PvPDayAwardGiftItem::kStarFieldNumber;
const int PvPDayAwardGiftItem::kSmillStarsFieldNumber;
#endif  // !_MSC_VER

PvPDayAwardGiftItem::PvPDayAwardGiftItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPDayAwardGiftItem)
}

void PvPDayAwardGiftItem::InitAsDefaultInstance() {
}

PvPDayAwardGiftItem::PvPDayAwardGiftItem(const PvPDayAwardGiftItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPDayAwardGiftItem)
}

void PvPDayAwardGiftItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  num_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_ = 0;
  smillstars_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPDayAwardGiftItem::~PvPDayAwardGiftItem() {
  // @@protoc_insertion_point(destructor:main.PvPDayAwardGiftItem)
  SharedDtor();
}

void PvPDayAwardGiftItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPDayAwardGiftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPDayAwardGiftItem& PvPDayAwardGiftItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPDayAwardGiftItem* PvPDayAwardGiftItem::default_instance_ = NULL;

PvPDayAwardGiftItem* PvPDayAwardGiftItem::New() const {
  return new PvPDayAwardGiftItem;
}

void PvPDayAwardGiftItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvPDayAwardGiftItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(itemtype_, itemid_);
    ZR_(num_, smillstars_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPDayAwardGiftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPDayAwardGiftItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (tag == 40) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_smillStars;
        break;
      }

      // optional int32 smillStars = 6;
      case 6: {
        if (tag == 48) {
         parse_smillStars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smillstars_)));
          set_has_smillstars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPDayAwardGiftItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPDayAwardGiftItem)
  return false;
#undef DO_
}

void PvPDayAwardGiftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPDayAwardGiftItem)
  // optional int32 itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // optional int32 smillStars = 6;
  if (has_smillstars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->smillstars(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPDayAwardGiftItem)
}

int PvPDayAwardGiftItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 smillStars = 6;
    if (has_smillstars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smillstars());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPDayAwardGiftItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPDayAwardGiftItem*>(&from));
}

void PvPDayAwardGiftItem::MergeFrom(const PvPDayAwardGiftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_smillstars()) {
      set_smillstars(from.smillstars());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPDayAwardGiftItem::CopyFrom(const PvPDayAwardGiftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPDayAwardGiftItem::IsInitialized() const {

  return true;
}

void PvPDayAwardGiftItem::Swap(PvPDayAwardGiftItem* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(star_, other->star_);
    std::swap(smillstars_, other->smillstars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPDayAwardGiftItem::GetTypeName() const {
  return "main.PvPDayAwardGiftItem";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvPSeasonAwardGiftEntryRequest::PvPSeasonAwardGiftEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPSeasonAwardGiftEntryRequest)
}

void PvPSeasonAwardGiftEntryRequest::InitAsDefaultInstance() {
}

PvPSeasonAwardGiftEntryRequest::PvPSeasonAwardGiftEntryRequest(const PvPSeasonAwardGiftEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPSeasonAwardGiftEntryRequest)
}

void PvPSeasonAwardGiftEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPSeasonAwardGiftEntryRequest::~PvPSeasonAwardGiftEntryRequest() {
  // @@protoc_insertion_point(destructor:main.PvPSeasonAwardGiftEntryRequest)
  SharedDtor();
}

void PvPSeasonAwardGiftEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPSeasonAwardGiftEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPSeasonAwardGiftEntryRequest& PvPSeasonAwardGiftEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPSeasonAwardGiftEntryRequest* PvPSeasonAwardGiftEntryRequest::default_instance_ = NULL;

PvPSeasonAwardGiftEntryRequest* PvPSeasonAwardGiftEntryRequest::New() const {
  return new PvPSeasonAwardGiftEntryRequest;
}

void PvPSeasonAwardGiftEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPSeasonAwardGiftEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPSeasonAwardGiftEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPSeasonAwardGiftEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPSeasonAwardGiftEntryRequest)
  return false;
#undef DO_
}

void PvPSeasonAwardGiftEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPSeasonAwardGiftEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPSeasonAwardGiftEntryRequest)
}

int PvPSeasonAwardGiftEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPSeasonAwardGiftEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPSeasonAwardGiftEntryRequest*>(&from));
}

void PvPSeasonAwardGiftEntryRequest::MergeFrom(const PvPSeasonAwardGiftEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPSeasonAwardGiftEntryRequest::CopyFrom(const PvPSeasonAwardGiftEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPSeasonAwardGiftEntryRequest::IsInitialized() const {

  return true;
}

void PvPSeasonAwardGiftEntryRequest::Swap(PvPSeasonAwardGiftEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPSeasonAwardGiftEntryRequest::GetTypeName() const {
  return "main.PvPSeasonAwardGiftEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPSeasonAwardGiftEntryResponse::kSeasonCountFieldNumber;
const int PvPSeasonAwardGiftEntryResponse::kListFieldNumber;
#endif  // !_MSC_VER

PvPSeasonAwardGiftEntryResponse::PvPSeasonAwardGiftEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPSeasonAwardGiftEntryResponse)
}

void PvPSeasonAwardGiftEntryResponse::InitAsDefaultInstance() {
}

PvPSeasonAwardGiftEntryResponse::PvPSeasonAwardGiftEntryResponse(const PvPSeasonAwardGiftEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPSeasonAwardGiftEntryResponse)
}

void PvPSeasonAwardGiftEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  seasoncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPSeasonAwardGiftEntryResponse::~PvPSeasonAwardGiftEntryResponse() {
  // @@protoc_insertion_point(destructor:main.PvPSeasonAwardGiftEntryResponse)
  SharedDtor();
}

void PvPSeasonAwardGiftEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPSeasonAwardGiftEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPSeasonAwardGiftEntryResponse& PvPSeasonAwardGiftEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPSeasonAwardGiftEntryResponse* PvPSeasonAwardGiftEntryResponse::default_instance_ = NULL;

PvPSeasonAwardGiftEntryResponse* PvPSeasonAwardGiftEntryResponse::New() const {
  return new PvPSeasonAwardGiftEntryResponse;
}

void PvPSeasonAwardGiftEntryResponse::Clear() {
  seasoncount_ = 0;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPSeasonAwardGiftEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPSeasonAwardGiftEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seasonCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seasoncount_)));
          set_has_seasoncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .main.PvPDayAwardGiftBag list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPSeasonAwardGiftEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPSeasonAwardGiftEntryResponse)
  return false;
#undef DO_
}

void PvPSeasonAwardGiftEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPSeasonAwardGiftEntryResponse)
  // optional int32 seasonCount = 1;
  if (has_seasoncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seasoncount(), output);
  }

  // repeated .main.PvPDayAwardGiftBag list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPSeasonAwardGiftEntryResponse)
}

int PvPSeasonAwardGiftEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seasonCount = 1;
    if (has_seasoncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seasoncount());
    }

  }
  // repeated .main.PvPDayAwardGiftBag list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPSeasonAwardGiftEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPSeasonAwardGiftEntryResponse*>(&from));
}

void PvPSeasonAwardGiftEntryResponse::MergeFrom(const PvPSeasonAwardGiftEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasoncount()) {
      set_seasoncount(from.seasoncount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPSeasonAwardGiftEntryResponse::CopyFrom(const PvPSeasonAwardGiftEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPSeasonAwardGiftEntryResponse::IsInitialized() const {

  return true;
}

void PvPSeasonAwardGiftEntryResponse::Swap(PvPSeasonAwardGiftEntryResponse* other) {
  if (other != this) {
    std::swap(seasoncount_, other->seasoncount_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPSeasonAwardGiftEntryResponse::GetTypeName() const {
  return "main.PvPSeasonAwardGiftEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPDayAwardGiftGetRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

PvPDayAwardGiftGetRequest::PvPDayAwardGiftGetRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPDayAwardGiftGetRequest)
}

void PvPDayAwardGiftGetRequest::InitAsDefaultInstance() {
}

PvPDayAwardGiftGetRequest::PvPDayAwardGiftGetRequest(const PvPDayAwardGiftGetRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPDayAwardGiftGetRequest)
}

void PvPDayAwardGiftGetRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPDayAwardGiftGetRequest::~PvPDayAwardGiftGetRequest() {
  // @@protoc_insertion_point(destructor:main.PvPDayAwardGiftGetRequest)
  SharedDtor();
}

void PvPDayAwardGiftGetRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPDayAwardGiftGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPDayAwardGiftGetRequest& PvPDayAwardGiftGetRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPDayAwardGiftGetRequest* PvPDayAwardGiftGetRequest::default_instance_ = NULL;

PvPDayAwardGiftGetRequest* PvPDayAwardGiftGetRequest::New() const {
  return new PvPDayAwardGiftGetRequest;
}

void PvPDayAwardGiftGetRequest::Clear() {
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPDayAwardGiftGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPDayAwardGiftGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPDayAwardGiftGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPDayAwardGiftGetRequest)
  return false;
#undef DO_
}

void PvPDayAwardGiftGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPDayAwardGiftGetRequest)
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPDayAwardGiftGetRequest)
}

int PvPDayAwardGiftGetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPDayAwardGiftGetRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPDayAwardGiftGetRequest*>(&from));
}

void PvPDayAwardGiftGetRequest::MergeFrom(const PvPDayAwardGiftGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPDayAwardGiftGetRequest::CopyFrom(const PvPDayAwardGiftGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPDayAwardGiftGetRequest::IsInitialized() const {

  return true;
}

void PvPDayAwardGiftGetRequest::Swap(PvPDayAwardGiftGetRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPDayAwardGiftGetRequest::GetTypeName() const {
  return "main.PvPDayAwardGiftGetRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPDayAwardGiftGetResponse::kStateFieldNumber;
const int PvPDayAwardGiftGetResponse::kCoutFieldNumber;
#endif  // !_MSC_VER

PvPDayAwardGiftGetResponse::PvPDayAwardGiftGetResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPDayAwardGiftGetResponse)
}

void PvPDayAwardGiftGetResponse::InitAsDefaultInstance() {
}

PvPDayAwardGiftGetResponse::PvPDayAwardGiftGetResponse(const PvPDayAwardGiftGetResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPDayAwardGiftGetResponse)
}

void PvPDayAwardGiftGetResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  cout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPDayAwardGiftGetResponse::~PvPDayAwardGiftGetResponse() {
  // @@protoc_insertion_point(destructor:main.PvPDayAwardGiftGetResponse)
  SharedDtor();
}

void PvPDayAwardGiftGetResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPDayAwardGiftGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPDayAwardGiftGetResponse& PvPDayAwardGiftGetResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPDayAwardGiftGetResponse* PvPDayAwardGiftGetResponse::default_instance_ = NULL;

PvPDayAwardGiftGetResponse* PvPDayAwardGiftGetResponse::New() const {
  return new PvPDayAwardGiftGetResponse;
}

void PvPDayAwardGiftGetResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvPDayAwardGiftGetResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, cout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPDayAwardGiftGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPDayAwardGiftGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cout;
        break;
      }

      // optional int32 cout = 2;
      case 2: {
        if (tag == 16) {
         parse_cout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cout_)));
          set_has_cout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPDayAwardGiftGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPDayAwardGiftGetResponse)
  return false;
#undef DO_
}

void PvPDayAwardGiftGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPDayAwardGiftGetResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 cout = 2;
  if (has_cout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cout(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPDayAwardGiftGetResponse)
}

int PvPDayAwardGiftGetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 cout = 2;
    if (has_cout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cout());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPDayAwardGiftGetResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPDayAwardGiftGetResponse*>(&from));
}

void PvPDayAwardGiftGetResponse::MergeFrom(const PvPDayAwardGiftGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cout()) {
      set_cout(from.cout());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPDayAwardGiftGetResponse::CopyFrom(const PvPDayAwardGiftGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPDayAwardGiftGetResponse::IsInitialized() const {

  return true;
}

void PvPDayAwardGiftGetResponse::Swap(PvPDayAwardGiftGetResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(cout_, other->cout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPDayAwardGiftGetResponse::GetTypeName() const {
  return "main.PvPDayAwardGiftGetResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPSeasonAwardGiftGetRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

PvPSeasonAwardGiftGetRequest::PvPSeasonAwardGiftGetRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPSeasonAwardGiftGetRequest)
}

void PvPSeasonAwardGiftGetRequest::InitAsDefaultInstance() {
}

PvPSeasonAwardGiftGetRequest::PvPSeasonAwardGiftGetRequest(const PvPSeasonAwardGiftGetRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPSeasonAwardGiftGetRequest)
}

void PvPSeasonAwardGiftGetRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPSeasonAwardGiftGetRequest::~PvPSeasonAwardGiftGetRequest() {
  // @@protoc_insertion_point(destructor:main.PvPSeasonAwardGiftGetRequest)
  SharedDtor();
}

void PvPSeasonAwardGiftGetRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPSeasonAwardGiftGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPSeasonAwardGiftGetRequest& PvPSeasonAwardGiftGetRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPSeasonAwardGiftGetRequest* PvPSeasonAwardGiftGetRequest::default_instance_ = NULL;

PvPSeasonAwardGiftGetRequest* PvPSeasonAwardGiftGetRequest::New() const {
  return new PvPSeasonAwardGiftGetRequest;
}

void PvPSeasonAwardGiftGetRequest::Clear() {
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPSeasonAwardGiftGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPSeasonAwardGiftGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPSeasonAwardGiftGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPSeasonAwardGiftGetRequest)
  return false;
#undef DO_
}

void PvPSeasonAwardGiftGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPSeasonAwardGiftGetRequest)
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPSeasonAwardGiftGetRequest)
}

int PvPSeasonAwardGiftGetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPSeasonAwardGiftGetRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPSeasonAwardGiftGetRequest*>(&from));
}

void PvPSeasonAwardGiftGetRequest::MergeFrom(const PvPSeasonAwardGiftGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPSeasonAwardGiftGetRequest::CopyFrom(const PvPSeasonAwardGiftGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPSeasonAwardGiftGetRequest::IsInitialized() const {

  return true;
}

void PvPSeasonAwardGiftGetRequest::Swap(PvPSeasonAwardGiftGetRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPSeasonAwardGiftGetRequest::GetTypeName() const {
  return "main.PvPSeasonAwardGiftGetRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPSeasonAwardGiftGetResponse::kStateFieldNumber;
const int PvPSeasonAwardGiftGetResponse::kCoutFieldNumber;
#endif  // !_MSC_VER

PvPSeasonAwardGiftGetResponse::PvPSeasonAwardGiftGetResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPSeasonAwardGiftGetResponse)
}

void PvPSeasonAwardGiftGetResponse::InitAsDefaultInstance() {
}

PvPSeasonAwardGiftGetResponse::PvPSeasonAwardGiftGetResponse(const PvPSeasonAwardGiftGetResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPSeasonAwardGiftGetResponse)
}

void PvPSeasonAwardGiftGetResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  cout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPSeasonAwardGiftGetResponse::~PvPSeasonAwardGiftGetResponse() {
  // @@protoc_insertion_point(destructor:main.PvPSeasonAwardGiftGetResponse)
  SharedDtor();
}

void PvPSeasonAwardGiftGetResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPSeasonAwardGiftGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPSeasonAwardGiftGetResponse& PvPSeasonAwardGiftGetResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPSeasonAwardGiftGetResponse* PvPSeasonAwardGiftGetResponse::default_instance_ = NULL;

PvPSeasonAwardGiftGetResponse* PvPSeasonAwardGiftGetResponse::New() const {
  return new PvPSeasonAwardGiftGetResponse;
}

void PvPSeasonAwardGiftGetResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvPSeasonAwardGiftGetResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, cout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPSeasonAwardGiftGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPSeasonAwardGiftGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cout;
        break;
      }

      // optional int32 cout = 2;
      case 2: {
        if (tag == 16) {
         parse_cout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cout_)));
          set_has_cout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPSeasonAwardGiftGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPSeasonAwardGiftGetResponse)
  return false;
#undef DO_
}

void PvPSeasonAwardGiftGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPSeasonAwardGiftGetResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 cout = 2;
  if (has_cout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cout(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPSeasonAwardGiftGetResponse)
}

int PvPSeasonAwardGiftGetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 cout = 2;
    if (has_cout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cout());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPSeasonAwardGiftGetResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPSeasonAwardGiftGetResponse*>(&from));
}

void PvPSeasonAwardGiftGetResponse::MergeFrom(const PvPSeasonAwardGiftGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cout()) {
      set_cout(from.cout());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPSeasonAwardGiftGetResponse::CopyFrom(const PvPSeasonAwardGiftGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPSeasonAwardGiftGetResponse::IsInitialized() const {

  return true;
}

void PvPSeasonAwardGiftGetResponse::Swap(PvPSeasonAwardGiftGetResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(cout_, other->cout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPSeasonAwardGiftGetResponse::GetTypeName() const {
  return "main.PvPSeasonAwardGiftGetResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvPEntryMapRequest::PvPEntryMapRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPEntryMapRequest)
}

void PvPEntryMapRequest::InitAsDefaultInstance() {
}

PvPEntryMapRequest::PvPEntryMapRequest(const PvPEntryMapRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPEntryMapRequest)
}

void PvPEntryMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPEntryMapRequest::~PvPEntryMapRequest() {
  // @@protoc_insertion_point(destructor:main.PvPEntryMapRequest)
  SharedDtor();
}

void PvPEntryMapRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPEntryMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPEntryMapRequest& PvPEntryMapRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPEntryMapRequest* PvPEntryMapRequest::default_instance_ = NULL;

PvPEntryMapRequest* PvPEntryMapRequest::New() const {
  return new PvPEntryMapRequest;
}

void PvPEntryMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPEntryMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPEntryMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPEntryMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPEntryMapRequest)
  return false;
#undef DO_
}

void PvPEntryMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPEntryMapRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPEntryMapRequest)
}

int PvPEntryMapRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPEntryMapRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPEntryMapRequest*>(&from));
}

void PvPEntryMapRequest::MergeFrom(const PvPEntryMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPEntryMapRequest::CopyFrom(const PvPEntryMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPEntryMapRequest::IsInitialized() const {

  return true;
}

void PvPEntryMapRequest::Swap(PvPEntryMapRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPEntryMapRequest::GetTypeName() const {
  return "main.PvPEntryMapRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PvPActionReadyResponse::PvPActionReadyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPActionReadyResponse)
}

void PvPActionReadyResponse::InitAsDefaultInstance() {
}

PvPActionReadyResponse::PvPActionReadyResponse(const PvPActionReadyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPActionReadyResponse)
}

void PvPActionReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPActionReadyResponse::~PvPActionReadyResponse() {
  // @@protoc_insertion_point(destructor:main.PvPActionReadyResponse)
  SharedDtor();
}

void PvPActionReadyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPActionReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPActionReadyResponse& PvPActionReadyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PvpFight_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PvpFight_2eproto();
#endif
  return *default_instance_;
}

PvPActionReadyResponse* PvPActionReadyResponse::default_instance_ = NULL;

PvPActionReadyResponse* PvPActionReadyResponse::New() const {
  return new PvPActionReadyResponse;
}

void PvPActionReadyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPActionReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPActionReadyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPActionReadyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPActionReadyResponse)
  return false;
#undef DO_
}

void PvPActionReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPActionReadyResponse)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPActionReadyResponse)
}

int PvPActionReadyResponse::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPActionReadyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPActionReadyResponse*>(&from));
}

void PvPActionReadyResponse::MergeFrom(const PvPActionReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPActionReadyResponse::CopyFrom(const PvPActionReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPActionReadyResponse::IsInitialized() const {

  return true;
}

void PvPActionReadyResponse::Swap(PvPActionReadyResponse* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPActionReadyResponse::GetTypeName() const {
  return "main.PvPActionReadyResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
