// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShopModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ShopModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_ShopModule_2eproto() {
  delete ShopChargeEntryRequest::default_instance_;
  delete ShopChargeEntryResponse::default_instance_;
  delete VIPInfo::default_instance_;
  delete ChargeItem::default_instance_;
  delete ShopChargeRequest::default_instance_;
  delete ShopChargeResponse::default_instance_;
  delete ShopExchangeCoinEntryRequest::default_instance_;
  delete ShopExchangeCoinEntryResponse::default_instance_;
  delete ShopExchangeCoinRequest::default_instance_;
  delete ShopExchangeCoinResponse::default_instance_;
  delete ShopVipGiftBagEntryRequest::default_instance_;
  delete GiftItem::default_instance_;
  delete VipGiftBag::default_instance_;
  delete ShopVipGiftBagEntryResponse::default_instance_;
  delete ShopVipGiftBagPurchRequest::default_instance_;
  delete ShopVipGiftBagPurchResponse::default_instance_;
  delete ShopPurchPvEPowerEntryRequest::default_instance_;
  delete ShopPurchPvEPowerEntryResponse::default_instance_;
  delete ShopPurchPvEPowerRequest::default_instance_;
  delete ShopPurchPvEPowerResponse::default_instance_;
  delete ShopPurchPvPPowerEntryRequest::default_instance_;
  delete ShopPurchPvPPowerEntryResponse::default_instance_;
  delete ShopPurchPvPPowerRequest::default_instance_;
  delete ShopPurchPvPPowerResponse::default_instance_;
  delete ShopGrowPlanRequest::default_instance_;
  delete ShopGrowPlanResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ShopModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ShopModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  ShopChargeEntryRequest::default_instance_ = new ShopChargeEntryRequest();
  ShopChargeEntryResponse::default_instance_ = new ShopChargeEntryResponse();
  VIPInfo::default_instance_ = new VIPInfo();
  ChargeItem::default_instance_ = new ChargeItem();
  ShopChargeRequest::default_instance_ = new ShopChargeRequest();
  ShopChargeResponse::default_instance_ = new ShopChargeResponse();
  ShopExchangeCoinEntryRequest::default_instance_ = new ShopExchangeCoinEntryRequest();
  ShopExchangeCoinEntryResponse::default_instance_ = new ShopExchangeCoinEntryResponse();
  ShopExchangeCoinRequest::default_instance_ = new ShopExchangeCoinRequest();
  ShopExchangeCoinResponse::default_instance_ = new ShopExchangeCoinResponse();
  ShopVipGiftBagEntryRequest::default_instance_ = new ShopVipGiftBagEntryRequest();
  GiftItem::default_instance_ = new GiftItem();
  VipGiftBag::default_instance_ = new VipGiftBag();
  ShopVipGiftBagEntryResponse::default_instance_ = new ShopVipGiftBagEntryResponse();
  ShopVipGiftBagPurchRequest::default_instance_ = new ShopVipGiftBagPurchRequest();
  ShopVipGiftBagPurchResponse::default_instance_ = new ShopVipGiftBagPurchResponse();
  ShopPurchPvEPowerEntryRequest::default_instance_ = new ShopPurchPvEPowerEntryRequest();
  ShopPurchPvEPowerEntryResponse::default_instance_ = new ShopPurchPvEPowerEntryResponse();
  ShopPurchPvEPowerRequest::default_instance_ = new ShopPurchPvEPowerRequest();
  ShopPurchPvEPowerResponse::default_instance_ = new ShopPurchPvEPowerResponse();
  ShopPurchPvPPowerEntryRequest::default_instance_ = new ShopPurchPvPPowerEntryRequest();
  ShopPurchPvPPowerEntryResponse::default_instance_ = new ShopPurchPvPPowerEntryResponse();
  ShopPurchPvPPowerRequest::default_instance_ = new ShopPurchPvPPowerRequest();
  ShopPurchPvPPowerResponse::default_instance_ = new ShopPurchPvPPowerResponse();
  ShopGrowPlanRequest::default_instance_ = new ShopGrowPlanRequest();
  ShopGrowPlanResponse::default_instance_ = new ShopGrowPlanResponse();
  ShopChargeEntryRequest::default_instance_->InitAsDefaultInstance();
  ShopChargeEntryResponse::default_instance_->InitAsDefaultInstance();
  VIPInfo::default_instance_->InitAsDefaultInstance();
  ChargeItem::default_instance_->InitAsDefaultInstance();
  ShopChargeRequest::default_instance_->InitAsDefaultInstance();
  ShopChargeResponse::default_instance_->InitAsDefaultInstance();
  ShopExchangeCoinEntryRequest::default_instance_->InitAsDefaultInstance();
  ShopExchangeCoinEntryResponse::default_instance_->InitAsDefaultInstance();
  ShopExchangeCoinRequest::default_instance_->InitAsDefaultInstance();
  ShopExchangeCoinResponse::default_instance_->InitAsDefaultInstance();
  ShopVipGiftBagEntryRequest::default_instance_->InitAsDefaultInstance();
  GiftItem::default_instance_->InitAsDefaultInstance();
  VipGiftBag::default_instance_->InitAsDefaultInstance();
  ShopVipGiftBagEntryResponse::default_instance_->InitAsDefaultInstance();
  ShopVipGiftBagPurchRequest::default_instance_->InitAsDefaultInstance();
  ShopVipGiftBagPurchResponse::default_instance_->InitAsDefaultInstance();
  ShopPurchPvEPowerEntryRequest::default_instance_->InitAsDefaultInstance();
  ShopPurchPvEPowerEntryResponse::default_instance_->InitAsDefaultInstance();
  ShopPurchPvEPowerRequest::default_instance_->InitAsDefaultInstance();
  ShopPurchPvEPowerResponse::default_instance_->InitAsDefaultInstance();
  ShopPurchPvPPowerEntryRequest::default_instance_->InitAsDefaultInstance();
  ShopPurchPvPPowerEntryResponse::default_instance_->InitAsDefaultInstance();
  ShopPurchPvPPowerRequest::default_instance_->InitAsDefaultInstance();
  ShopPurchPvPPowerResponse::default_instance_->InitAsDefaultInstance();
  ShopGrowPlanRequest::default_instance_->InitAsDefaultInstance();
  ShopGrowPlanResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShopModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ShopModule_2eproto_once_);
void protobuf_AddDesc_ShopModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ShopModule_2eproto_once_,
                 &protobuf_AddDesc_ShopModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShopModule_2eproto {
  StaticDescriptorInitializer_ShopModule_2eproto() {
    protobuf_AddDesc_ShopModule_2eproto();
  }
} static_descriptor_initializer_ShopModule_2eproto_;
#endif
bool ShowType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ChargeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopChargeEntryRequest::ShopChargeEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopChargeEntryRequest)
}

void ShopChargeEntryRequest::InitAsDefaultInstance() {
}

ShopChargeEntryRequest::ShopChargeEntryRequest(const ShopChargeEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopChargeEntryRequest)
}

void ShopChargeEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopChargeEntryRequest::~ShopChargeEntryRequest() {
  // @@protoc_insertion_point(destructor:main.ShopChargeEntryRequest)
  SharedDtor();
}

void ShopChargeEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopChargeEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopChargeEntryRequest& ShopChargeEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopChargeEntryRequest* ShopChargeEntryRequest::default_instance_ = NULL;

ShopChargeEntryRequest* ShopChargeEntryRequest::New() const {
  return new ShopChargeEntryRequest;
}

void ShopChargeEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopChargeEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopChargeEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopChargeEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopChargeEntryRequest)
  return false;
#undef DO_
}

void ShopChargeEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopChargeEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopChargeEntryRequest)
}

int ShopChargeEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopChargeEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopChargeEntryRequest*>(&from));
}

void ShopChargeEntryRequest::MergeFrom(const ShopChargeEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopChargeEntryRequest::CopyFrom(const ShopChargeEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopChargeEntryRequest::IsInitialized() const {

  return true;
}

void ShopChargeEntryRequest::Swap(ShopChargeEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopChargeEntryRequest::GetTypeName() const {
  return "main.ShopChargeEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopChargeEntryResponse::kVipInfoFieldNumber;
const int ShopChargeEntryResponse::kChargeItemsFieldNumber;
#endif  // !_MSC_VER

ShopChargeEntryResponse::ShopChargeEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopChargeEntryResponse)
}

void ShopChargeEntryResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vipinfo_ = const_cast< ::main::VIPInfo*>(
      ::main::VIPInfo::internal_default_instance());
#else
  vipinfo_ = const_cast< ::main::VIPInfo*>(&::main::VIPInfo::default_instance());
#endif
}

ShopChargeEntryResponse::ShopChargeEntryResponse(const ShopChargeEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopChargeEntryResponse)
}

void ShopChargeEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  vipinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopChargeEntryResponse::~ShopChargeEntryResponse() {
  // @@protoc_insertion_point(destructor:main.ShopChargeEntryResponse)
  SharedDtor();
}

void ShopChargeEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete vipinfo_;
  }
}

void ShopChargeEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopChargeEntryResponse& ShopChargeEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopChargeEntryResponse* ShopChargeEntryResponse::default_instance_ = NULL;

ShopChargeEntryResponse* ShopChargeEntryResponse::New() const {
  return new ShopChargeEntryResponse;
}

void ShopChargeEntryResponse::Clear() {
  if (has_vipinfo()) {
    if (vipinfo_ != NULL) vipinfo_->::main::VIPInfo::Clear();
  }
  chargeitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopChargeEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopChargeEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.VIPInfo vipInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chargeItems;
        break;
      }

      // repeated .main.ChargeItem chargeItems = 2;
      case 2: {
        if (tag == 18) {
         parse_chargeItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargeitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chargeItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopChargeEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopChargeEntryResponse)
  return false;
#undef DO_
}

void ShopChargeEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopChargeEntryResponse)
  // optional .main.VIPInfo vipInfo = 1;
  if (has_vipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->vipinfo(), output);
  }

  // repeated .main.ChargeItem chargeItems = 2;
  for (int i = 0; i < this->chargeitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->chargeitems(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopChargeEntryResponse)
}

int ShopChargeEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.VIPInfo vipInfo = 1;
    if (has_vipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipinfo());
    }

  }
  // repeated .main.ChargeItem chargeItems = 2;
  total_size += 1 * this->chargeitems_size();
  for (int i = 0; i < this->chargeitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargeitems(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopChargeEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopChargeEntryResponse*>(&from));
}

void ShopChargeEntryResponse::MergeFrom(const ShopChargeEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  chargeitems_.MergeFrom(from.chargeitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipinfo()) {
      mutable_vipinfo()->::main::VIPInfo::MergeFrom(from.vipinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopChargeEntryResponse::CopyFrom(const ShopChargeEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopChargeEntryResponse::IsInitialized() const {

  return true;
}

void ShopChargeEntryResponse::Swap(ShopChargeEntryResponse* other) {
  if (other != this) {
    std::swap(vipinfo_, other->vipinfo_);
    chargeitems_.Swap(&other->chargeitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopChargeEntryResponse::GetTypeName() const {
  return "main.ShopChargeEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int VIPInfo::kCurrentVipLevelFieldNumber;
const int VIPInfo::kNextVipLevelFieldNumber;
const int VIPInfo::kCurrentRmbFieldNumber;
const int VIPInfo::kMaxRmbFieldNumber;
const int VIPInfo::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

VIPInfo::VIPInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.VIPInfo)
}

void VIPInfo::InitAsDefaultInstance() {
}

VIPInfo::VIPInfo(const VIPInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.VIPInfo)
}

void VIPInfo::SharedCtor() {
  _cached_size_ = 0;
  currentviplevel_ = 0;
  nextviplevel_ = 0;
  currentrmb_ = 0;
  maxrmb_ = 0;
  playergold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPInfo::~VIPInfo() {
  // @@protoc_insertion_point(destructor:main.VIPInfo)
  SharedDtor();
}

void VIPInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VIPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VIPInfo& VIPInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

VIPInfo* VIPInfo::default_instance_ = NULL;

VIPInfo* VIPInfo::New() const {
  return new VIPInfo;
}

void VIPInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VIPInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(currentviplevel_, playergold_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VIPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.VIPInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 currentVipLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentviplevel_)));
          set_has_currentviplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextVipLevel;
        break;
      }

      // optional int32 nextVipLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_nextVipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextviplevel_)));
          set_has_nextviplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currentRmb;
        break;
      }

      // optional int32 currentRmb = 3;
      case 3: {
        if (tag == 24) {
         parse_currentRmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentrmb_)));
          set_has_currentrmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxRmb;
        break;
      }

      // optional int32 maxRmb = 4;
      case 4: {
        if (tag == 32) {
         parse_maxRmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrmb_)));
          set_has_maxrmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_playerGold;
        break;
      }

      // optional int32 playerGold = 5;
      case 5: {
        if (tag == 40) {
         parse_playerGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playergold_)));
          set_has_playergold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.VIPInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.VIPInfo)
  return false;
#undef DO_
}

void VIPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.VIPInfo)
  // optional int32 currentVipLevel = 1;
  if (has_currentviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currentviplevel(), output);
  }

  // optional int32 nextVipLevel = 2;
  if (has_nextviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextviplevel(), output);
  }

  // optional int32 currentRmb = 3;
  if (has_currentrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentrmb(), output);
  }

  // optional int32 maxRmb = 4;
  if (has_maxrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxrmb(), output);
  }

  // optional int32 playerGold = 5;
  if (has_playergold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playergold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.VIPInfo)
}

int VIPInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 currentVipLevel = 1;
    if (has_currentviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentviplevel());
    }

    // optional int32 nextVipLevel = 2;
    if (has_nextviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextviplevel());
    }

    // optional int32 currentRmb = 3;
    if (has_currentrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentrmb());
    }

    // optional int32 maxRmb = 4;
    if (has_maxrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrmb());
    }

    // optional int32 playerGold = 5;
    if (has_playergold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playergold());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VIPInfo*>(&from));
}

void VIPInfo::MergeFrom(const VIPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentviplevel()) {
      set_currentviplevel(from.currentviplevel());
    }
    if (from.has_nextviplevel()) {
      set_nextviplevel(from.nextviplevel());
    }
    if (from.has_currentrmb()) {
      set_currentrmb(from.currentrmb());
    }
    if (from.has_maxrmb()) {
      set_maxrmb(from.maxrmb());
    }
    if (from.has_playergold()) {
      set_playergold(from.playergold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VIPInfo::CopyFrom(const VIPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPInfo::IsInitialized() const {

  return true;
}

void VIPInfo::Swap(VIPInfo* other) {
  if (other != this) {
    std::swap(currentviplevel_, other->currentviplevel_);
    std::swap(nextviplevel_, other->nextviplevel_);
    std::swap(currentrmb_, other->currentrmb_);
    std::swap(maxrmb_, other->maxrmb_);
    std::swap(playergold_, other->playergold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VIPInfo::GetTypeName() const {
  return "main.VIPInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeItem::kShowTypeFieldNumber;
const int ChargeItem::kChargeTypeFieldNumber;
const int ChargeItem::kDiscountFieldNumber;
const int ChargeItem::kGoldFieldNumber;
const int ChargeItem::kRmbFieldNumber;
const int ChargeItem::kCodeFieldNumber;
const int ChargeItem::kGoldPerDayFieldNumber;
const int ChargeItem::kRewardDayFieldNumber;
const int ChargeItem::kLeftDayFieldNumber;
#endif  // !_MSC_VER

ChargeItem::ChargeItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ChargeItem)
}

void ChargeItem::InitAsDefaultInstance() {
}

ChargeItem::ChargeItem(const ChargeItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ChargeItem)
}

void ChargeItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  showtype_ = 0;
  chargetype_ = 0;
  discount_ = 0;
  gold_ = 0;
  rmb_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goldperday_ = 0;
  rewardday_ = 0;
  leftday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeItem::~ChargeItem() {
  // @@protoc_insertion_point(destructor:main.ChargeItem)
  SharedDtor();
}

void ChargeItem::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChargeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChargeItem& ChargeItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ChargeItem* ChargeItem::default_instance_ = NULL;

ChargeItem* ChargeItem::New() const {
  return new ChargeItem;
}

void ChargeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(showtype_, gold_);
    ZR_(rmb_, rewardday_);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  leftday_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChargeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ChargeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.ShowType showType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::ShowType_IsValid(value)) {
            set_showtype(static_cast< ::main::ShowType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chargeType;
        break;
      }

      // optional .main.ChargeType chargeType = 2;
      case 2: {
        if (tag == 16) {
         parse_chargeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::main::ChargeType_IsValid(value)) {
            set_chargetype(static_cast< ::main::ChargeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_discount;
        break;
      }

      // optional int32 discount = 3;
      case 3: {
        if (tag == 24) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rmb;
        break;
      }

      // optional int32 rmb = 5;
      case 5: {
        if (tag == 40) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_code;
        break;
      }

      // optional string code = 6;
      case 6: {
        if (tag == 50) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_goldPerDay;
        break;
      }

      // optional int32 goldPerDay = 7;
      case 7: {
        if (tag == 56) {
         parse_goldPerDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldperday_)));
          set_has_goldperday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rewardDay;
        break;
      }

      // optional int32 rewardDay = 8;
      case 8: {
        if (tag == 64) {
         parse_rewardDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardday_)));
          set_has_rewardday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_leftDay;
        break;
      }

      // optional int32 leftDay = 9;
      case 9: {
        if (tag == 72) {
         parse_leftDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftday_)));
          set_has_leftday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ChargeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ChargeItem)
  return false;
#undef DO_
}

void ChargeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ChargeItem)
  // optional .main.ShowType showType = 1;
  if (has_showtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->showtype(), output);
  }

  // optional .main.ChargeType chargeType = 2;
  if (has_chargetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chargetype(), output);
  }

  // optional int32 discount = 3;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->discount(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 rmb = 5;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rmb(), output);
  }

  // optional string code = 6;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // optional int32 goldPerDay = 7;
  if (has_goldperday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->goldperday(), output);
  }

  // optional int32 rewardDay = 8;
  if (has_rewardday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rewardday(), output);
  }

  // optional int32 leftDay = 9;
  if (has_leftday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->leftday(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ChargeItem)
}

int ChargeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.ShowType showType = 1;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->showtype());
    }

    // optional .main.ChargeType chargeType = 2;
    if (has_chargetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chargetype());
    }

    // optional int32 discount = 3;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 rmb = 5;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

    // optional string code = 6;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional int32 goldPerDay = 7;
    if (has_goldperday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldperday());
    }

    // optional int32 rewardDay = 8;
    if (has_rewardday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardday());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 leftDay = 9;
    if (has_leftday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftday());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChargeItem*>(&from));
}

void ChargeItem::MergeFrom(const ChargeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showtype()) {
      set_showtype(from.showtype());
    }
    if (from.has_chargetype()) {
      set_chargetype(from.chargetype());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_goldperday()) {
      set_goldperday(from.goldperday());
    }
    if (from.has_rewardday()) {
      set_rewardday(from.rewardday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leftday()) {
      set_leftday(from.leftday());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChargeItem::CopyFrom(const ChargeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeItem::IsInitialized() const {

  return true;
}

void ChargeItem::Swap(ChargeItem* other) {
  if (other != this) {
    std::swap(showtype_, other->showtype_);
    std::swap(chargetype_, other->chargetype_);
    std::swap(discount_, other->discount_);
    std::swap(gold_, other->gold_);
    std::swap(rmb_, other->rmb_);
    std::swap(code_, other->code_);
    std::swap(goldperday_, other->goldperday_);
    std::swap(rewardday_, other->rewardday_);
    std::swap(leftday_, other->leftday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChargeItem::GetTypeName() const {
  return "main.ChargeItem";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopChargeRequest::kIsAppFieldNumber;
const int ShopChargeRequest::kChannelIdFieldNumber;
const int ShopChargeRequest::kAreaIdFieldNumber;
const int ShopChargeRequest::kRoleIdFieldNumber;
const int ShopChargeRequest::kAccountIdFieldNumber;
const int ShopChargeRequest::kGameIdFieldNumber;
const int ShopChargeRequest::kReceiptFieldNumber;
#endif  // !_MSC_VER

ShopChargeRequest::ShopChargeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopChargeRequest)
}

void ShopChargeRequest::InitAsDefaultInstance() {
}

ShopChargeRequest::ShopChargeRequest(const ShopChargeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopChargeRequest)
}

void ShopChargeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isapp_ = 0;
  channelid_ = 0;
  areaid_ = 0;
  roleid_ = 0;
  accountid_ = 0;
  gameid_ = 0;
  receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopChargeRequest::~ShopChargeRequest() {
  // @@protoc_insertion_point(destructor:main.ShopChargeRequest)
  SharedDtor();
}

void ShopChargeRequest::SharedDtor() {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receipt_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopChargeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopChargeRequest& ShopChargeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopChargeRequest* ShopChargeRequest::default_instance_ = NULL;

ShopChargeRequest* ShopChargeRequest::New() const {
  return new ShopChargeRequest;
}

void ShopChargeRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopChargeRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(isapp_, gameid_);
    if (has_receipt()) {
      if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receipt_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopChargeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopChargeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isApp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isapp_)));
          set_has_isapp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channelId;
        break;
      }

      // optional int32 channelId = 2;
      case 2: {
        if (tag == 16) {
         parse_channelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_areaId;
        break;
      }

      // optional int32 areaId = 3;
      case 3: {
        if (tag == 24) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 4;
      case 4: {
        if (tag == 32) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_accountId;
        break;
      }

      // optional int32 accountId = 5;
      case 5: {
        if (tag == 40) {
         parse_accountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 6;
      case 6: {
        if (tag == 48) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_receipt;
        break;
      }

      // optional string receipt = 7;
      case 7: {
        if (tag == 58) {
         parse_receipt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receipt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopChargeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopChargeRequest)
  return false;
#undef DO_
}

void ShopChargeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopChargeRequest)
  // optional int32 isApp = 1;
  if (has_isapp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isapp(), output);
  }

  // optional int32 channelId = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channelid(), output);
  }

  // optional int32 areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaid(), output);
  }

  // optional int32 roleId = 4;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roleid(), output);
  }

  // optional int32 accountId = 5;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->accountid(), output);
  }

  // optional int32 gameId = 6;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gameid(), output);
  }

  // optional string receipt = 7;
  if (has_receipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->receipt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopChargeRequest)
}

int ShopChargeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isApp = 1;
    if (has_isapp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isapp());
    }

    // optional int32 channelId = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

    // optional int32 areaId = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 roleId = 4;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 accountId = 5;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }

    // optional int32 gameId = 6;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional string receipt = 7;
    if (has_receipt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receipt());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopChargeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopChargeRequest*>(&from));
}

void ShopChargeRequest::MergeFrom(const ShopChargeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isapp()) {
      set_isapp(from.isapp());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_receipt()) {
      set_receipt(from.receipt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopChargeRequest::CopyFrom(const ShopChargeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopChargeRequest::IsInitialized() const {

  return true;
}

void ShopChargeRequest::Swap(ShopChargeRequest* other) {
  if (other != this) {
    std::swap(isapp_, other->isapp_);
    std::swap(channelid_, other->channelid_);
    std::swap(areaid_, other->areaid_);
    std::swap(roleid_, other->roleid_);
    std::swap(accountid_, other->accountid_);
    std::swap(gameid_, other->gameid_);
    std::swap(receipt_, other->receipt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopChargeRequest::GetTypeName() const {
  return "main.ShopChargeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopChargeResponse::kStateFieldNumber;
const int ShopChargeResponse::kMonthlyCardDayFieldNumber;
#endif  // !_MSC_VER

ShopChargeResponse::ShopChargeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopChargeResponse)
}

void ShopChargeResponse::InitAsDefaultInstance() {
}

ShopChargeResponse::ShopChargeResponse(const ShopChargeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopChargeResponse)
}

void ShopChargeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  monthlycardday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopChargeResponse::~ShopChargeResponse() {
  // @@protoc_insertion_point(destructor:main.ShopChargeResponse)
  SharedDtor();
}

void ShopChargeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopChargeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopChargeResponse& ShopChargeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopChargeResponse* ShopChargeResponse::default_instance_ = NULL;

ShopChargeResponse* ShopChargeResponse::New() const {
  return new ShopChargeResponse;
}

void ShopChargeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopChargeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, monthlycardday_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopChargeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopChargeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_monthlyCardDay;
        break;
      }

      // optional int32 monthlyCardDay = 2;
      case 2: {
        if (tag == 16) {
         parse_monthlyCardDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthlycardday_)));
          set_has_monthlycardday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopChargeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopChargeResponse)
  return false;
#undef DO_
}

void ShopChargeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopChargeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 monthlyCardDay = 2;
  if (has_monthlycardday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monthlycardday(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopChargeResponse)
}

int ShopChargeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 monthlyCardDay = 2;
    if (has_monthlycardday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthlycardday());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopChargeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopChargeResponse*>(&from));
}

void ShopChargeResponse::MergeFrom(const ShopChargeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_monthlycardday()) {
      set_monthlycardday(from.monthlycardday());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopChargeResponse::CopyFrom(const ShopChargeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopChargeResponse::IsInitialized() const {

  return true;
}

void ShopChargeResponse::Swap(ShopChargeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(monthlycardday_, other->monthlycardday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopChargeResponse::GetTypeName() const {
  return "main.ShopChargeResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopExchangeCoinEntryRequest::ShopExchangeCoinEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopExchangeCoinEntryRequest)
}

void ShopExchangeCoinEntryRequest::InitAsDefaultInstance() {
}

ShopExchangeCoinEntryRequest::ShopExchangeCoinEntryRequest(const ShopExchangeCoinEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopExchangeCoinEntryRequest)
}

void ShopExchangeCoinEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopExchangeCoinEntryRequest::~ShopExchangeCoinEntryRequest() {
  // @@protoc_insertion_point(destructor:main.ShopExchangeCoinEntryRequest)
  SharedDtor();
}

void ShopExchangeCoinEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopExchangeCoinEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopExchangeCoinEntryRequest& ShopExchangeCoinEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopExchangeCoinEntryRequest* ShopExchangeCoinEntryRequest::default_instance_ = NULL;

ShopExchangeCoinEntryRequest* ShopExchangeCoinEntryRequest::New() const {
  return new ShopExchangeCoinEntryRequest;
}

void ShopExchangeCoinEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopExchangeCoinEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopExchangeCoinEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopExchangeCoinEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopExchangeCoinEntryRequest)
  return false;
#undef DO_
}

void ShopExchangeCoinEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopExchangeCoinEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopExchangeCoinEntryRequest)
}

int ShopExchangeCoinEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopExchangeCoinEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopExchangeCoinEntryRequest*>(&from));
}

void ShopExchangeCoinEntryRequest::MergeFrom(const ShopExchangeCoinEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopExchangeCoinEntryRequest::CopyFrom(const ShopExchangeCoinEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopExchangeCoinEntryRequest::IsInitialized() const {

  return true;
}

void ShopExchangeCoinEntryRequest::Swap(ShopExchangeCoinEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopExchangeCoinEntryRequest::GetTypeName() const {
  return "main.ShopExchangeCoinEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopExchangeCoinEntryResponse::kVipLevelFieldNumber;
const int ShopExchangeCoinEntryResponse::kUsedChanceFieldNumber;
const int ShopExchangeCoinEntryResponse::kMaxChanceFieldNumber;
const int ShopExchangeCoinEntryResponse::kGoldFieldNumber;
const int ShopExchangeCoinEntryResponse::kCoinFieldNumber;
#endif  // !_MSC_VER

ShopExchangeCoinEntryResponse::ShopExchangeCoinEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopExchangeCoinEntryResponse)
}

void ShopExchangeCoinEntryResponse::InitAsDefaultInstance() {
}

ShopExchangeCoinEntryResponse::ShopExchangeCoinEntryResponse(const ShopExchangeCoinEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopExchangeCoinEntryResponse)
}

void ShopExchangeCoinEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = 0;
  usedchance_ = 0;
  maxchance_ = 0;
  gold_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopExchangeCoinEntryResponse::~ShopExchangeCoinEntryResponse() {
  // @@protoc_insertion_point(destructor:main.ShopExchangeCoinEntryResponse)
  SharedDtor();
}

void ShopExchangeCoinEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopExchangeCoinEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopExchangeCoinEntryResponse& ShopExchangeCoinEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopExchangeCoinEntryResponse* ShopExchangeCoinEntryResponse::default_instance_ = NULL;

ShopExchangeCoinEntryResponse* ShopExchangeCoinEntryResponse::New() const {
  return new ShopExchangeCoinEntryResponse;
}

void ShopExchangeCoinEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopExchangeCoinEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(viplevel_, coin_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopExchangeCoinEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopExchangeCoinEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vipLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_usedChance;
        break;
      }

      // optional int32 usedChance = 2;
      case 2: {
        if (tag == 16) {
         parse_usedChance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usedchance_)));
          set_has_usedchance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxChance;
        break;
      }

      // optional int32 maxChance = 3;
      case 3: {
        if (tag == 24) {
         parse_maxChance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxchance_)));
          set_has_maxchance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // optional int32 coin = 5;
      case 5: {
        if (tag == 40) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopExchangeCoinEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopExchangeCoinEntryResponse)
  return false;
#undef DO_
}

void ShopExchangeCoinEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopExchangeCoinEntryResponse)
  // optional int32 vipLevel = 1;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viplevel(), output);
  }

  // optional int32 usedChance = 2;
  if (has_usedchance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usedchance(), output);
  }

  // optional int32 maxChance = 3;
  if (has_maxchance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxchance(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->coin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopExchangeCoinEntryResponse)
}

int ShopExchangeCoinEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vipLevel = 1;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 usedChance = 2;
    if (has_usedchance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usedchance());
    }

    // optional int32 maxChance = 3;
    if (has_maxchance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxchance());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopExchangeCoinEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopExchangeCoinEntryResponse*>(&from));
}

void ShopExchangeCoinEntryResponse::MergeFrom(const ShopExchangeCoinEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_usedchance()) {
      set_usedchance(from.usedchance());
    }
    if (from.has_maxchance()) {
      set_maxchance(from.maxchance());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopExchangeCoinEntryResponse::CopyFrom(const ShopExchangeCoinEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopExchangeCoinEntryResponse::IsInitialized() const {

  return true;
}

void ShopExchangeCoinEntryResponse::Swap(ShopExchangeCoinEntryResponse* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(usedchance_, other->usedchance_);
    std::swap(maxchance_, other->maxchance_);
    std::swap(gold_, other->gold_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopExchangeCoinEntryResponse::GetTypeName() const {
  return "main.ShopExchangeCoinEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopExchangeCoinRequest::ShopExchangeCoinRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopExchangeCoinRequest)
}

void ShopExchangeCoinRequest::InitAsDefaultInstance() {
}

ShopExchangeCoinRequest::ShopExchangeCoinRequest(const ShopExchangeCoinRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopExchangeCoinRequest)
}

void ShopExchangeCoinRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopExchangeCoinRequest::~ShopExchangeCoinRequest() {
  // @@protoc_insertion_point(destructor:main.ShopExchangeCoinRequest)
  SharedDtor();
}

void ShopExchangeCoinRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopExchangeCoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopExchangeCoinRequest& ShopExchangeCoinRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopExchangeCoinRequest* ShopExchangeCoinRequest::default_instance_ = NULL;

ShopExchangeCoinRequest* ShopExchangeCoinRequest::New() const {
  return new ShopExchangeCoinRequest;
}

void ShopExchangeCoinRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopExchangeCoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopExchangeCoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopExchangeCoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopExchangeCoinRequest)
  return false;
#undef DO_
}

void ShopExchangeCoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopExchangeCoinRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopExchangeCoinRequest)
}

int ShopExchangeCoinRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopExchangeCoinRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopExchangeCoinRequest*>(&from));
}

void ShopExchangeCoinRequest::MergeFrom(const ShopExchangeCoinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopExchangeCoinRequest::CopyFrom(const ShopExchangeCoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopExchangeCoinRequest::IsInitialized() const {

  return true;
}

void ShopExchangeCoinRequest::Swap(ShopExchangeCoinRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopExchangeCoinRequest::GetTypeName() const {
  return "main.ShopExchangeCoinRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopExchangeCoinResponse::kStateFieldNumber;
const int ShopExchangeCoinResponse::kNextTimeCostGoldFieldNumber;
#endif  // !_MSC_VER

ShopExchangeCoinResponse::ShopExchangeCoinResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopExchangeCoinResponse)
}

void ShopExchangeCoinResponse::InitAsDefaultInstance() {
}

ShopExchangeCoinResponse::ShopExchangeCoinResponse(const ShopExchangeCoinResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopExchangeCoinResponse)
}

void ShopExchangeCoinResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  nexttimecostgold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopExchangeCoinResponse::~ShopExchangeCoinResponse() {
  // @@protoc_insertion_point(destructor:main.ShopExchangeCoinResponse)
  SharedDtor();
}

void ShopExchangeCoinResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopExchangeCoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopExchangeCoinResponse& ShopExchangeCoinResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopExchangeCoinResponse* ShopExchangeCoinResponse::default_instance_ = NULL;

ShopExchangeCoinResponse* ShopExchangeCoinResponse::New() const {
  return new ShopExchangeCoinResponse;
}

void ShopExchangeCoinResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopExchangeCoinResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, nexttimecostgold_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopExchangeCoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopExchangeCoinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextTimeCostGold;
        break;
      }

      // optional int32 nextTimeCostGold = 2;
      case 2: {
        if (tag == 16) {
         parse_nextTimeCostGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nexttimecostgold_)));
          set_has_nexttimecostgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopExchangeCoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopExchangeCoinResponse)
  return false;
#undef DO_
}

void ShopExchangeCoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopExchangeCoinResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 nextTimeCostGold = 2;
  if (has_nexttimecostgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nexttimecostgold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopExchangeCoinResponse)
}

int ShopExchangeCoinResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 nextTimeCostGold = 2;
    if (has_nexttimecostgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexttimecostgold());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopExchangeCoinResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopExchangeCoinResponse*>(&from));
}

void ShopExchangeCoinResponse::MergeFrom(const ShopExchangeCoinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_nexttimecostgold()) {
      set_nexttimecostgold(from.nexttimecostgold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopExchangeCoinResponse::CopyFrom(const ShopExchangeCoinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopExchangeCoinResponse::IsInitialized() const {

  return true;
}

void ShopExchangeCoinResponse::Swap(ShopExchangeCoinResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(nexttimecostgold_, other->nexttimecostgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopExchangeCoinResponse::GetTypeName() const {
  return "main.ShopExchangeCoinResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopVipGiftBagEntryRequest::ShopVipGiftBagEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopVipGiftBagEntryRequest)
}

void ShopVipGiftBagEntryRequest::InitAsDefaultInstance() {
}

ShopVipGiftBagEntryRequest::ShopVipGiftBagEntryRequest(const ShopVipGiftBagEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopVipGiftBagEntryRequest)
}

void ShopVipGiftBagEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopVipGiftBagEntryRequest::~ShopVipGiftBagEntryRequest() {
  // @@protoc_insertion_point(destructor:main.ShopVipGiftBagEntryRequest)
  SharedDtor();
}

void ShopVipGiftBagEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopVipGiftBagEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopVipGiftBagEntryRequest& ShopVipGiftBagEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopVipGiftBagEntryRequest* ShopVipGiftBagEntryRequest::default_instance_ = NULL;

ShopVipGiftBagEntryRequest* ShopVipGiftBagEntryRequest::New() const {
  return new ShopVipGiftBagEntryRequest;
}

void ShopVipGiftBagEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopVipGiftBagEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopVipGiftBagEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopVipGiftBagEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopVipGiftBagEntryRequest)
  return false;
#undef DO_
}

void ShopVipGiftBagEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopVipGiftBagEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopVipGiftBagEntryRequest)
}

int ShopVipGiftBagEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopVipGiftBagEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopVipGiftBagEntryRequest*>(&from));
}

void ShopVipGiftBagEntryRequest::MergeFrom(const ShopVipGiftBagEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopVipGiftBagEntryRequest::CopyFrom(const ShopVipGiftBagEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopVipGiftBagEntryRequest::IsInitialized() const {

  return true;
}

void ShopVipGiftBagEntryRequest::Swap(ShopVipGiftBagEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopVipGiftBagEntryRequest::GetTypeName() const {
  return "main.ShopVipGiftBagEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GiftItem::kItemTypeFieldNumber;
const int GiftItem::kItemIdFieldNumber;
const int GiftItem::kNumFieldNumber;
#endif  // !_MSC_VER

GiftItem::GiftItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GiftItem)
}

void GiftItem::InitAsDefaultInstance() {
}

GiftItem::GiftItem(const GiftItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GiftItem)
}

void GiftItem::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftItem::~GiftItem() {
  // @@protoc_insertion_point(destructor:main.GiftItem)
  SharedDtor();
}

void GiftItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftItem& GiftItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

GiftItem* GiftItem::default_instance_ = NULL;

GiftItem* GiftItem::New() const {
  return new GiftItem;
}

void GiftItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GiftItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemtype_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GiftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GiftItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GiftItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GiftItem)
  return false;
#undef DO_
}

void GiftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GiftItem)
  // optional int32 itemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemtype(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GiftItem)
}

int GiftItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftItem*>(&from));
}

void GiftItem::MergeFrom(const GiftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GiftItem::CopyFrom(const GiftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftItem::IsInitialized() const {

  return true;
}

void GiftItem::Swap(GiftItem* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftItem::GetTypeName() const {
  return "main.GiftItem";
}


// ===================================================================

#ifndef _MSC_VER
const int VipGiftBag::kSsidFieldNumber;
const int VipGiftBag::kNameFieldNumber;
const int VipGiftBag::kInfoFieldNumber;
const int VipGiftBag::kCostFieldNumber;
const int VipGiftBag::kDiscountFieldNumber;
const int VipGiftBag::kVipLevelFieldNumber;
const int VipGiftBag::kIsBuyFieldNumber;
const int VipGiftBag::kListFieldNumber;
#endif  // !_MSC_VER

VipGiftBag::VipGiftBag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.VipGiftBag)
}

void VipGiftBag::InitAsDefaultInstance() {
}

VipGiftBag::VipGiftBag(const VipGiftBag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.VipGiftBag)
}

void VipGiftBag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ssid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_ = 0;
  discount_ = 0;
  viplevel_ = 0;
  isbuy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipGiftBag::~VipGiftBag() {
  // @@protoc_insertion_point(destructor:main.VipGiftBag)
  SharedDtor();
}

void VipGiftBag::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VipGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VipGiftBag& VipGiftBag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

VipGiftBag* VipGiftBag::default_instance_ = NULL;

VipGiftBag* VipGiftBag::New() const {
  return new VipGiftBag;
}

void VipGiftBag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VipGiftBag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ssid_, cost_);
    ZR_(discount_, viplevel_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
    isbuy_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VipGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.VipGiftBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional string info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cost;
        break;
      }

      // optional int32 cost = 4;
      case 4: {
        if (tag == 32) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_discount;
        break;
      }

      // optional int32 discount = 5;
      case 5: {
        if (tag == 40) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isBuy;
        break;
      }

      // optional int32 isBuy = 7;
      case 7: {
        if (tag == 56) {
         parse_isBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbuy_)));
          set_has_isbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_list;
        break;
      }

      // repeated .main.GiftItem list = 8;
      case 8: {
        if (tag == 66) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.VipGiftBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.VipGiftBag)
  return false;
#undef DO_
}

void VipGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.VipGiftBag)
  // optional int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info(), output);
  }

  // optional int32 cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost(), output);
  }

  // optional int32 discount = 5;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->discount(), output);
  }

  // optional int32 vipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplevel(), output);
  }

  // optional int32 isBuy = 7;
  if (has_isbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isbuy(), output);
  }

  // repeated .main.GiftItem list = 8;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.VipGiftBag)
}

int VipGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional int32 cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 discount = 5;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

    // optional int32 vipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 isBuy = 7;
    if (has_isbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbuy());
    }

  }
  // repeated .main.GiftItem list = 8;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipGiftBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VipGiftBag*>(&from));
}

void VipGiftBag::MergeFrom(const VipGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_isbuy()) {
      set_isbuy(from.isbuy());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VipGiftBag::CopyFrom(const VipGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipGiftBag::IsInitialized() const {

  return true;
}

void VipGiftBag::Swap(VipGiftBag* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(cost_, other->cost_);
    std::swap(discount_, other->discount_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(isbuy_, other->isbuy_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VipGiftBag::GetTypeName() const {
  return "main.VipGiftBag";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopVipGiftBagEntryResponse::kVipLevelFieldNumber;
const int ShopVipGiftBagEntryResponse::kCurrentRmbFieldNumber;
const int ShopVipGiftBagEntryResponse::kMaxRmbFieldNumber;
const int ShopVipGiftBagEntryResponse::kListFieldNumber;
#endif  // !_MSC_VER

ShopVipGiftBagEntryResponse::ShopVipGiftBagEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopVipGiftBagEntryResponse)
}

void ShopVipGiftBagEntryResponse::InitAsDefaultInstance() {
}

ShopVipGiftBagEntryResponse::ShopVipGiftBagEntryResponse(const ShopVipGiftBagEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopVipGiftBagEntryResponse)
}

void ShopVipGiftBagEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = 0;
  currentrmb_ = 0;
  maxrmb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopVipGiftBagEntryResponse::~ShopVipGiftBagEntryResponse() {
  // @@protoc_insertion_point(destructor:main.ShopVipGiftBagEntryResponse)
  SharedDtor();
}

void ShopVipGiftBagEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopVipGiftBagEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopVipGiftBagEntryResponse& ShopVipGiftBagEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopVipGiftBagEntryResponse* ShopVipGiftBagEntryResponse::default_instance_ = NULL;

ShopVipGiftBagEntryResponse* ShopVipGiftBagEntryResponse::New() const {
  return new ShopVipGiftBagEntryResponse;
}

void ShopVipGiftBagEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopVipGiftBagEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(viplevel_, currentrmb_);
    maxrmb_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopVipGiftBagEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopVipGiftBagEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vipLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currentRmb;
        break;
      }

      // optional int32 currentRmb = 2;
      case 2: {
        if (tag == 16) {
         parse_currentRmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentrmb_)));
          set_has_currentrmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxRmb;
        break;
      }

      // optional int32 maxRmb = 3;
      case 3: {
        if (tag == 24) {
         parse_maxRmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrmb_)));
          set_has_maxrmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list;
        break;
      }

      // repeated .main.VipGiftBag list = 4;
      case 4: {
        if (tag == 34) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopVipGiftBagEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopVipGiftBagEntryResponse)
  return false;
#undef DO_
}

void ShopVipGiftBagEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopVipGiftBagEntryResponse)
  // optional int32 vipLevel = 1;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viplevel(), output);
  }

  // optional int32 currentRmb = 2;
  if (has_currentrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentrmb(), output);
  }

  // optional int32 maxRmb = 3;
  if (has_maxrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxrmb(), output);
  }

  // repeated .main.VipGiftBag list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopVipGiftBagEntryResponse)
}

int ShopVipGiftBagEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vipLevel = 1;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 currentRmb = 2;
    if (has_currentrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentrmb());
    }

    // optional int32 maxRmb = 3;
    if (has_maxrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrmb());
    }

  }
  // repeated .main.VipGiftBag list = 4;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopVipGiftBagEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopVipGiftBagEntryResponse*>(&from));
}

void ShopVipGiftBagEntryResponse::MergeFrom(const ShopVipGiftBagEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_currentrmb()) {
      set_currentrmb(from.currentrmb());
    }
    if (from.has_maxrmb()) {
      set_maxrmb(from.maxrmb());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopVipGiftBagEntryResponse::CopyFrom(const ShopVipGiftBagEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopVipGiftBagEntryResponse::IsInitialized() const {

  return true;
}

void ShopVipGiftBagEntryResponse::Swap(ShopVipGiftBagEntryResponse* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(currentrmb_, other->currentrmb_);
    std::swap(maxrmb_, other->maxrmb_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopVipGiftBagEntryResponse::GetTypeName() const {
  return "main.ShopVipGiftBagEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopVipGiftBagPurchRequest::kSsidFieldNumber;
#endif  // !_MSC_VER

ShopVipGiftBagPurchRequest::ShopVipGiftBagPurchRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopVipGiftBagPurchRequest)
}

void ShopVipGiftBagPurchRequest::InitAsDefaultInstance() {
}

ShopVipGiftBagPurchRequest::ShopVipGiftBagPurchRequest(const ShopVipGiftBagPurchRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopVipGiftBagPurchRequest)
}

void ShopVipGiftBagPurchRequest::SharedCtor() {
  _cached_size_ = 0;
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopVipGiftBagPurchRequest::~ShopVipGiftBagPurchRequest() {
  // @@protoc_insertion_point(destructor:main.ShopVipGiftBagPurchRequest)
  SharedDtor();
}

void ShopVipGiftBagPurchRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopVipGiftBagPurchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopVipGiftBagPurchRequest& ShopVipGiftBagPurchRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopVipGiftBagPurchRequest* ShopVipGiftBagPurchRequest::default_instance_ = NULL;

ShopVipGiftBagPurchRequest* ShopVipGiftBagPurchRequest::New() const {
  return new ShopVipGiftBagPurchRequest;
}

void ShopVipGiftBagPurchRequest::Clear() {
  ssid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopVipGiftBagPurchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopVipGiftBagPurchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ssid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssid_)));
          set_has_ssid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopVipGiftBagPurchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopVipGiftBagPurchRequest)
  return false;
#undef DO_
}

void ShopVipGiftBagPurchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopVipGiftBagPurchRequest)
  // required int32 ssid = 1;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ssid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopVipGiftBagPurchRequest)
}

int ShopVipGiftBagPurchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ssid = 1;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopVipGiftBagPurchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopVipGiftBagPurchRequest*>(&from));
}

void ShopVipGiftBagPurchRequest::MergeFrom(const ShopVipGiftBagPurchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopVipGiftBagPurchRequest::CopyFrom(const ShopVipGiftBagPurchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopVipGiftBagPurchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShopVipGiftBagPurchRequest::Swap(ShopVipGiftBagPurchRequest* other) {
  if (other != this) {
    std::swap(ssid_, other->ssid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopVipGiftBagPurchRequest::GetTypeName() const {
  return "main.ShopVipGiftBagPurchRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopVipGiftBagPurchResponse::kStateFieldNumber;
const int ShopVipGiftBagPurchResponse::kOfficerCardsFieldNumber;
const int ShopVipGiftBagPurchResponse::kEquipmentCardsFieldNumber;
const int ShopVipGiftBagPurchResponse::kPropsCardsFieldNumber;
#endif  // !_MSC_VER

ShopVipGiftBagPurchResponse::ShopVipGiftBagPurchResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopVipGiftBagPurchResponse)
}

void ShopVipGiftBagPurchResponse::InitAsDefaultInstance() {
}

ShopVipGiftBagPurchResponse::ShopVipGiftBagPurchResponse(const ShopVipGiftBagPurchResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopVipGiftBagPurchResponse)
}

void ShopVipGiftBagPurchResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopVipGiftBagPurchResponse::~ShopVipGiftBagPurchResponse() {
  // @@protoc_insertion_point(destructor:main.ShopVipGiftBagPurchResponse)
  SharedDtor();
}

void ShopVipGiftBagPurchResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopVipGiftBagPurchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopVipGiftBagPurchResponse& ShopVipGiftBagPurchResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopVipGiftBagPurchResponse* ShopVipGiftBagPurchResponse::default_instance_ = NULL;

ShopVipGiftBagPurchResponse* ShopVipGiftBagPurchResponse::New() const {
  return new ShopVipGiftBagPurchResponse;
}

void ShopVipGiftBagPurchResponse::Clear() {
  state_ = 0;
  officercards_.Clear();
  equipmentcards_.Clear();
  propscards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopVipGiftBagPurchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopVipGiftBagPurchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_officerCards;
        break;
      }

      // repeated .main.OfficerCardItemProto officerCards = 2;
      case 2: {
        if (tag == 18) {
         parse_officerCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_officercards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_officerCards;
        if (input->ExpectTag(26)) goto parse_equipmentCards;
        break;
      }

      // repeated .main.EquipmentCardItemProto equipmentCards = 3;
      case 3: {
        if (tag == 26) {
         parse_equipmentCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equipmentCards;
        if (input->ExpectTag(34)) goto parse_propsCards;
        break;
      }

      // repeated .main.PropsCardItemProto propsCards = 4;
      case 4: {
        if (tag == 34) {
         parse_propsCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propscards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_propsCards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopVipGiftBagPurchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopVipGiftBagPurchResponse)
  return false;
#undef DO_
}

void ShopVipGiftBagPurchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopVipGiftBagPurchResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated .main.OfficerCardItemProto officerCards = 2;
  for (int i = 0; i < this->officercards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->officercards(i), output);
  }

  // repeated .main.EquipmentCardItemProto equipmentCards = 3;
  for (int i = 0; i < this->equipmentcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equipmentcards(i), output);
  }

  // repeated .main.PropsCardItemProto propsCards = 4;
  for (int i = 0; i < this->propscards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->propscards(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopVipGiftBagPurchResponse)
}

int ShopVipGiftBagPurchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .main.OfficerCardItemProto officerCards = 2;
  total_size += 1 * this->officercards_size();
  for (int i = 0; i < this->officercards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->officercards(i));
  }

  // repeated .main.EquipmentCardItemProto equipmentCards = 3;
  total_size += 1 * this->equipmentcards_size();
  for (int i = 0; i < this->equipmentcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentcards(i));
  }

  // repeated .main.PropsCardItemProto propsCards = 4;
  total_size += 1 * this->propscards_size();
  for (int i = 0; i < this->propscards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propscards(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopVipGiftBagPurchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopVipGiftBagPurchResponse*>(&from));
}

void ShopVipGiftBagPurchResponse::MergeFrom(const ShopVipGiftBagPurchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  officercards_.MergeFrom(from.officercards_);
  equipmentcards_.MergeFrom(from.equipmentcards_);
  propscards_.MergeFrom(from.propscards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopVipGiftBagPurchResponse::CopyFrom(const ShopVipGiftBagPurchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopVipGiftBagPurchResponse::IsInitialized() const {

  return true;
}

void ShopVipGiftBagPurchResponse::Swap(ShopVipGiftBagPurchResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    officercards_.Swap(&other->officercards_);
    equipmentcards_.Swap(&other->equipmentcards_);
    propscards_.Swap(&other->propscards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopVipGiftBagPurchResponse::GetTypeName() const {
  return "main.ShopVipGiftBagPurchResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopPurchPvEPowerEntryRequest::ShopPurchPvEPowerEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvEPowerEntryRequest)
}

void ShopPurchPvEPowerEntryRequest::InitAsDefaultInstance() {
}

ShopPurchPvEPowerEntryRequest::ShopPurchPvEPowerEntryRequest(const ShopPurchPvEPowerEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvEPowerEntryRequest)
}

void ShopPurchPvEPowerEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvEPowerEntryRequest::~ShopPurchPvEPowerEntryRequest() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvEPowerEntryRequest)
  SharedDtor();
}

void ShopPurchPvEPowerEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvEPowerEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvEPowerEntryRequest& ShopPurchPvEPowerEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvEPowerEntryRequest* ShopPurchPvEPowerEntryRequest::default_instance_ = NULL;

ShopPurchPvEPowerEntryRequest* ShopPurchPvEPowerEntryRequest::New() const {
  return new ShopPurchPvEPowerEntryRequest;
}

void ShopPurchPvEPowerEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvEPowerEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvEPowerEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvEPowerEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvEPowerEntryRequest)
  return false;
#undef DO_
}

void ShopPurchPvEPowerEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvEPowerEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvEPowerEntryRequest)
}

int ShopPurchPvEPowerEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvEPowerEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvEPowerEntryRequest*>(&from));
}

void ShopPurchPvEPowerEntryRequest::MergeFrom(const ShopPurchPvEPowerEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvEPowerEntryRequest::CopyFrom(const ShopPurchPvEPowerEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvEPowerEntryRequest::IsInitialized() const {

  return true;
}

void ShopPurchPvEPowerEntryRequest::Swap(ShopPurchPvEPowerEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvEPowerEntryRequest::GetTypeName() const {
  return "main.ShopPurchPvEPowerEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopPurchPvEPowerEntryResponse::kLeftCounterFieldNumber;
const int ShopPurchPvEPowerEntryResponse::kCounterMaxFieldNumber;
const int ShopPurchPvEPowerEntryResponse::kCostFieldNumber;
const int ShopPurchPvEPowerEntryResponse::kDayCounterFieldNumber;
const int ShopPurchPvEPowerEntryResponse::kPowerFieldNumber;
#endif  // !_MSC_VER

ShopPurchPvEPowerEntryResponse::ShopPurchPvEPowerEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvEPowerEntryResponse)
}

void ShopPurchPvEPowerEntryResponse::InitAsDefaultInstance() {
}

ShopPurchPvEPowerEntryResponse::ShopPurchPvEPowerEntryResponse(const ShopPurchPvEPowerEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvEPowerEntryResponse)
}

void ShopPurchPvEPowerEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  leftcounter_ = 0;
  countermax_ = 0;
  cost_ = 0;
  daycounter_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvEPowerEntryResponse::~ShopPurchPvEPowerEntryResponse() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvEPowerEntryResponse)
  SharedDtor();
}

void ShopPurchPvEPowerEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvEPowerEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvEPowerEntryResponse& ShopPurchPvEPowerEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvEPowerEntryResponse* ShopPurchPvEPowerEntryResponse::default_instance_ = NULL;

ShopPurchPvEPowerEntryResponse* ShopPurchPvEPowerEntryResponse::New() const {
  return new ShopPurchPvEPowerEntryResponse;
}

void ShopPurchPvEPowerEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopPurchPvEPowerEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(leftcounter_, power_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvEPowerEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvEPowerEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leftCounter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcounter_)));
          set_has_leftcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_counterMax;
        break;
      }

      // optional int32 counterMax = 2;
      case 2: {
        if (tag == 16) {
         parse_counterMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countermax_)));
          set_has_countermax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional int32 cost = 3;
      case 3: {
        if (tag == 24) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dayCounter;
        break;
      }

      // optional int32 dayCounter = 4;
      case 4: {
        if (tag == 32) {
         parse_dayCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daycounter_)));
          set_has_daycounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional int32 power = 5;
      case 5: {
        if (tag == 40) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvEPowerEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvEPowerEntryResponse)
  return false;
#undef DO_
}

void ShopPurchPvEPowerEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvEPowerEntryResponse)
  // optional int32 leftCounter = 1;
  if (has_leftcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leftcounter(), output);
  }

  // optional int32 counterMax = 2;
  if (has_countermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countermax(), output);
  }

  // optional int32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost(), output);
  }

  // optional int32 dayCounter = 4;
  if (has_daycounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->daycounter(), output);
  }

  // optional int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvEPowerEntryResponse)
}

int ShopPurchPvEPowerEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leftCounter = 1;
    if (has_leftcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcounter());
    }

    // optional int32 counterMax = 2;
    if (has_countermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countermax());
    }

    // optional int32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 dayCounter = 4;
    if (has_daycounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daycounter());
    }

    // optional int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvEPowerEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvEPowerEntryResponse*>(&from));
}

void ShopPurchPvEPowerEntryResponse::MergeFrom(const ShopPurchPvEPowerEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftcounter()) {
      set_leftcounter(from.leftcounter());
    }
    if (from.has_countermax()) {
      set_countermax(from.countermax());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_daycounter()) {
      set_daycounter(from.daycounter());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvEPowerEntryResponse::CopyFrom(const ShopPurchPvEPowerEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvEPowerEntryResponse::IsInitialized() const {

  return true;
}

void ShopPurchPvEPowerEntryResponse::Swap(ShopPurchPvEPowerEntryResponse* other) {
  if (other != this) {
    std::swap(leftcounter_, other->leftcounter_);
    std::swap(countermax_, other->countermax_);
    std::swap(cost_, other->cost_);
    std::swap(daycounter_, other->daycounter_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvEPowerEntryResponse::GetTypeName() const {
  return "main.ShopPurchPvEPowerEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopPurchPvEPowerRequest::ShopPurchPvEPowerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvEPowerRequest)
}

void ShopPurchPvEPowerRequest::InitAsDefaultInstance() {
}

ShopPurchPvEPowerRequest::ShopPurchPvEPowerRequest(const ShopPurchPvEPowerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvEPowerRequest)
}

void ShopPurchPvEPowerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvEPowerRequest::~ShopPurchPvEPowerRequest() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvEPowerRequest)
  SharedDtor();
}

void ShopPurchPvEPowerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvEPowerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvEPowerRequest& ShopPurchPvEPowerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvEPowerRequest* ShopPurchPvEPowerRequest::default_instance_ = NULL;

ShopPurchPvEPowerRequest* ShopPurchPvEPowerRequest::New() const {
  return new ShopPurchPvEPowerRequest;
}

void ShopPurchPvEPowerRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvEPowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvEPowerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvEPowerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvEPowerRequest)
  return false;
#undef DO_
}

void ShopPurchPvEPowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvEPowerRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvEPowerRequest)
}

int ShopPurchPvEPowerRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvEPowerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvEPowerRequest*>(&from));
}

void ShopPurchPvEPowerRequest::MergeFrom(const ShopPurchPvEPowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvEPowerRequest::CopyFrom(const ShopPurchPvEPowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvEPowerRequest::IsInitialized() const {

  return true;
}

void ShopPurchPvEPowerRequest::Swap(ShopPurchPvEPowerRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvEPowerRequest::GetTypeName() const {
  return "main.ShopPurchPvEPowerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopPurchPvEPowerResponse::kSuccFieldNumber;
#endif  // !_MSC_VER

ShopPurchPvEPowerResponse::ShopPurchPvEPowerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvEPowerResponse)
}

void ShopPurchPvEPowerResponse::InitAsDefaultInstance() {
}

ShopPurchPvEPowerResponse::ShopPurchPvEPowerResponse(const ShopPurchPvEPowerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvEPowerResponse)
}

void ShopPurchPvEPowerResponse::SharedCtor() {
  _cached_size_ = 0;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvEPowerResponse::~ShopPurchPvEPowerResponse() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvEPowerResponse)
  SharedDtor();
}

void ShopPurchPvEPowerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvEPowerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvEPowerResponse& ShopPurchPvEPowerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvEPowerResponse* ShopPurchPvEPowerResponse::default_instance_ = NULL;

ShopPurchPvEPowerResponse* ShopPurchPvEPowerResponse::New() const {
  return new ShopPurchPvEPowerResponse;
}

void ShopPurchPvEPowerResponse::Clear() {
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvEPowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvEPowerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 succ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvEPowerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvEPowerResponse)
  return false;
#undef DO_
}

void ShopPurchPvEPowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvEPowerResponse)
  // optional int32 succ = 1;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->succ(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvEPowerResponse)
}

int ShopPurchPvEPowerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 succ = 1;
    if (has_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succ());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvEPowerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvEPowerResponse*>(&from));
}

void ShopPurchPvEPowerResponse::MergeFrom(const ShopPurchPvEPowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvEPowerResponse::CopyFrom(const ShopPurchPvEPowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvEPowerResponse::IsInitialized() const {

  return true;
}

void ShopPurchPvEPowerResponse::Swap(ShopPurchPvEPowerResponse* other) {
  if (other != this) {
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvEPowerResponse::GetTypeName() const {
  return "main.ShopPurchPvEPowerResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopPurchPvPPowerEntryRequest::ShopPurchPvPPowerEntryRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvPPowerEntryRequest)
}

void ShopPurchPvPPowerEntryRequest::InitAsDefaultInstance() {
}

ShopPurchPvPPowerEntryRequest::ShopPurchPvPPowerEntryRequest(const ShopPurchPvPPowerEntryRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvPPowerEntryRequest)
}

void ShopPurchPvPPowerEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvPPowerEntryRequest::~ShopPurchPvPPowerEntryRequest() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvPPowerEntryRequest)
  SharedDtor();
}

void ShopPurchPvPPowerEntryRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvPPowerEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvPPowerEntryRequest& ShopPurchPvPPowerEntryRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvPPowerEntryRequest* ShopPurchPvPPowerEntryRequest::default_instance_ = NULL;

ShopPurchPvPPowerEntryRequest* ShopPurchPvPPowerEntryRequest::New() const {
  return new ShopPurchPvPPowerEntryRequest;
}

void ShopPurchPvPPowerEntryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvPPowerEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvPPowerEntryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvPPowerEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvPPowerEntryRequest)
  return false;
#undef DO_
}

void ShopPurchPvPPowerEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvPPowerEntryRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvPPowerEntryRequest)
}

int ShopPurchPvPPowerEntryRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvPPowerEntryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvPPowerEntryRequest*>(&from));
}

void ShopPurchPvPPowerEntryRequest::MergeFrom(const ShopPurchPvPPowerEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvPPowerEntryRequest::CopyFrom(const ShopPurchPvPPowerEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvPPowerEntryRequest::IsInitialized() const {

  return true;
}

void ShopPurchPvPPowerEntryRequest::Swap(ShopPurchPvPPowerEntryRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvPPowerEntryRequest::GetTypeName() const {
  return "main.ShopPurchPvPPowerEntryRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopPurchPvPPowerEntryResponse::kLeftCounterFieldNumber;
const int ShopPurchPvPPowerEntryResponse::kCounterMaxFieldNumber;
const int ShopPurchPvPPowerEntryResponse::kCostFieldNumber;
const int ShopPurchPvPPowerEntryResponse::kPowerFieldNumber;
#endif  // !_MSC_VER

ShopPurchPvPPowerEntryResponse::ShopPurchPvPPowerEntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvPPowerEntryResponse)
}

void ShopPurchPvPPowerEntryResponse::InitAsDefaultInstance() {
}

ShopPurchPvPPowerEntryResponse::ShopPurchPvPPowerEntryResponse(const ShopPurchPvPPowerEntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvPPowerEntryResponse)
}

void ShopPurchPvPPowerEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  leftcounter_ = 0;
  countermax_ = 0;
  cost_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvPPowerEntryResponse::~ShopPurchPvPPowerEntryResponse() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvPPowerEntryResponse)
  SharedDtor();
}

void ShopPurchPvPPowerEntryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvPPowerEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvPPowerEntryResponse& ShopPurchPvPPowerEntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvPPowerEntryResponse* ShopPurchPvPPowerEntryResponse::default_instance_ = NULL;

ShopPurchPvPPowerEntryResponse* ShopPurchPvPPowerEntryResponse::New() const {
  return new ShopPurchPvPPowerEntryResponse;
}

void ShopPurchPvPPowerEntryResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopPurchPvPPowerEntryResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(leftcounter_, power_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvPPowerEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvPPowerEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leftCounter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcounter_)));
          set_has_leftcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_counterMax;
        break;
      }

      // optional int32 counterMax = 2;
      case 2: {
        if (tag == 16) {
         parse_counterMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countermax_)));
          set_has_countermax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional int32 cost = 3;
      case 3: {
        if (tag == 24) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }

      // optional int32 power = 4;
      case 4: {
        if (tag == 32) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvPPowerEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvPPowerEntryResponse)
  return false;
#undef DO_
}

void ShopPurchPvPPowerEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvPPowerEntryResponse)
  // optional int32 leftCounter = 1;
  if (has_leftcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leftcounter(), output);
  }

  // optional int32 counterMax = 2;
  if (has_countermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countermax(), output);
  }

  // optional int32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost(), output);
  }

  // optional int32 power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->power(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvPPowerEntryResponse)
}

int ShopPurchPvPPowerEntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leftCounter = 1;
    if (has_leftcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcounter());
    }

    // optional int32 counterMax = 2;
    if (has_countermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countermax());
    }

    // optional int32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvPPowerEntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvPPowerEntryResponse*>(&from));
}

void ShopPurchPvPPowerEntryResponse::MergeFrom(const ShopPurchPvPPowerEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftcounter()) {
      set_leftcounter(from.leftcounter());
    }
    if (from.has_countermax()) {
      set_countermax(from.countermax());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvPPowerEntryResponse::CopyFrom(const ShopPurchPvPPowerEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvPPowerEntryResponse::IsInitialized() const {

  return true;
}

void ShopPurchPvPPowerEntryResponse::Swap(ShopPurchPvPPowerEntryResponse* other) {
  if (other != this) {
    std::swap(leftcounter_, other->leftcounter_);
    std::swap(countermax_, other->countermax_);
    std::swap(cost_, other->cost_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvPPowerEntryResponse::GetTypeName() const {
  return "main.ShopPurchPvPPowerEntryResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopPurchPvPPowerRequest::ShopPurchPvPPowerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvPPowerRequest)
}

void ShopPurchPvPPowerRequest::InitAsDefaultInstance() {
}

ShopPurchPvPPowerRequest::ShopPurchPvPPowerRequest(const ShopPurchPvPPowerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvPPowerRequest)
}

void ShopPurchPvPPowerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvPPowerRequest::~ShopPurchPvPPowerRequest() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvPPowerRequest)
  SharedDtor();
}

void ShopPurchPvPPowerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvPPowerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvPPowerRequest& ShopPurchPvPPowerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvPPowerRequest* ShopPurchPvPPowerRequest::default_instance_ = NULL;

ShopPurchPvPPowerRequest* ShopPurchPvPPowerRequest::New() const {
  return new ShopPurchPvPPowerRequest;
}

void ShopPurchPvPPowerRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvPPowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvPPowerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvPPowerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvPPowerRequest)
  return false;
#undef DO_
}

void ShopPurchPvPPowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvPPowerRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvPPowerRequest)
}

int ShopPurchPvPPowerRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvPPowerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvPPowerRequest*>(&from));
}

void ShopPurchPvPPowerRequest::MergeFrom(const ShopPurchPvPPowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvPPowerRequest::CopyFrom(const ShopPurchPvPPowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvPPowerRequest::IsInitialized() const {

  return true;
}

void ShopPurchPvPPowerRequest::Swap(ShopPurchPvPPowerRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvPPowerRequest::GetTypeName() const {
  return "main.ShopPurchPvPPowerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopPurchPvPPowerResponse::kSuccFieldNumber;
#endif  // !_MSC_VER

ShopPurchPvPPowerResponse::ShopPurchPvPPowerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopPurchPvPPowerResponse)
}

void ShopPurchPvPPowerResponse::InitAsDefaultInstance() {
}

ShopPurchPvPPowerResponse::ShopPurchPvPPowerResponse(const ShopPurchPvPPowerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopPurchPvPPowerResponse)
}

void ShopPurchPvPPowerResponse::SharedCtor() {
  _cached_size_ = 0;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopPurchPvPPowerResponse::~ShopPurchPvPPowerResponse() {
  // @@protoc_insertion_point(destructor:main.ShopPurchPvPPowerResponse)
  SharedDtor();
}

void ShopPurchPvPPowerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopPurchPvPPowerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopPurchPvPPowerResponse& ShopPurchPvPPowerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopPurchPvPPowerResponse* ShopPurchPvPPowerResponse::default_instance_ = NULL;

ShopPurchPvPPowerResponse* ShopPurchPvPPowerResponse::New() const {
  return new ShopPurchPvPPowerResponse;
}

void ShopPurchPvPPowerResponse::Clear() {
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopPurchPvPPowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopPurchPvPPowerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 succ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopPurchPvPPowerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopPurchPvPPowerResponse)
  return false;
#undef DO_
}

void ShopPurchPvPPowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopPurchPvPPowerResponse)
  // optional int32 succ = 1;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->succ(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopPurchPvPPowerResponse)
}

int ShopPurchPvPPowerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 succ = 1;
    if (has_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succ());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopPurchPvPPowerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopPurchPvPPowerResponse*>(&from));
}

void ShopPurchPvPPowerResponse::MergeFrom(const ShopPurchPvPPowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopPurchPvPPowerResponse::CopyFrom(const ShopPurchPvPPowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopPurchPvPPowerResponse::IsInitialized() const {

  return true;
}

void ShopPurchPvPPowerResponse::Swap(ShopPurchPvPPowerResponse* other) {
  if (other != this) {
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopPurchPvPPowerResponse::GetTypeName() const {
  return "main.ShopPurchPvPPowerResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopGrowPlanRequest::ShopGrowPlanRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopGrowPlanRequest)
}

void ShopGrowPlanRequest::InitAsDefaultInstance() {
}

ShopGrowPlanRequest::ShopGrowPlanRequest(const ShopGrowPlanRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopGrowPlanRequest)
}

void ShopGrowPlanRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopGrowPlanRequest::~ShopGrowPlanRequest() {
  // @@protoc_insertion_point(destructor:main.ShopGrowPlanRequest)
  SharedDtor();
}

void ShopGrowPlanRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopGrowPlanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopGrowPlanRequest& ShopGrowPlanRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopGrowPlanRequest* ShopGrowPlanRequest::default_instance_ = NULL;

ShopGrowPlanRequest* ShopGrowPlanRequest::New() const {
  return new ShopGrowPlanRequest;
}

void ShopGrowPlanRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopGrowPlanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopGrowPlanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopGrowPlanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopGrowPlanRequest)
  return false;
#undef DO_
}

void ShopGrowPlanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopGrowPlanRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopGrowPlanRequest)
}

int ShopGrowPlanRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopGrowPlanRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopGrowPlanRequest*>(&from));
}

void ShopGrowPlanRequest::MergeFrom(const ShopGrowPlanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopGrowPlanRequest::CopyFrom(const ShopGrowPlanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopGrowPlanRequest::IsInitialized() const {

  return true;
}

void ShopGrowPlanRequest::Swap(ShopGrowPlanRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopGrowPlanRequest::GetTypeName() const {
  return "main.ShopGrowPlanRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopGrowPlanResponse::kSuccFieldNumber;
#endif  // !_MSC_VER

ShopGrowPlanResponse::ShopGrowPlanResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShopGrowPlanResponse)
}

void ShopGrowPlanResponse::InitAsDefaultInstance() {
}

ShopGrowPlanResponse::ShopGrowPlanResponse(const ShopGrowPlanResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShopGrowPlanResponse)
}

void ShopGrowPlanResponse::SharedCtor() {
  _cached_size_ = 0;
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopGrowPlanResponse::~ShopGrowPlanResponse() {
  // @@protoc_insertion_point(destructor:main.ShopGrowPlanResponse)
  SharedDtor();
}

void ShopGrowPlanResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopGrowPlanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopGrowPlanResponse& ShopGrowPlanResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ShopModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ShopModule_2eproto();
#endif
  return *default_instance_;
}

ShopGrowPlanResponse* ShopGrowPlanResponse::default_instance_ = NULL;

ShopGrowPlanResponse* ShopGrowPlanResponse::New() const {
  return new ShopGrowPlanResponse;
}

void ShopGrowPlanResponse::Clear() {
  succ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShopGrowPlanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShopGrowPlanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 succ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShopGrowPlanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShopGrowPlanResponse)
  return false;
#undef DO_
}

void ShopGrowPlanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShopGrowPlanResponse)
  // optional int32 succ = 1;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->succ(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShopGrowPlanResponse)
}

int ShopGrowPlanResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 succ = 1;
    if (has_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->succ());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopGrowPlanResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopGrowPlanResponse*>(&from));
}

void ShopGrowPlanResponse::MergeFrom(const ShopGrowPlanResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succ()) {
      set_succ(from.succ());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShopGrowPlanResponse::CopyFrom(const ShopGrowPlanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopGrowPlanResponse::IsInitialized() const {

  return true;
}

void ShopGrowPlanResponse::Swap(ShopGrowPlanResponse* other) {
  if (other != this) {
    std::swap(succ_, other->succ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopGrowPlanResponse::GetTypeName() const {
  return "main.ShopGrowPlanResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
