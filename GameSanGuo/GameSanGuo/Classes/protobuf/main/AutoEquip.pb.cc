// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AutoEquip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AutoEquip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_AutoEquip_2eproto() {
  delete AutoAllEquipRequest::default_instance_;
  delete AutoAllEquipResponse::default_instance_;
  delete AutoEquipRequest::default_instance_;
  delete AutoEquipResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_AutoEquip_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_AutoEquip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  AutoAllEquipRequest::default_instance_ = new AutoAllEquipRequest();
  AutoAllEquipResponse::default_instance_ = new AutoAllEquipResponse();
  AutoEquipRequest::default_instance_ = new AutoEquipRequest();
  AutoEquipResponse::default_instance_ = new AutoEquipResponse();
  AutoAllEquipRequest::default_instance_->InitAsDefaultInstance();
  AutoAllEquipResponse::default_instance_->InitAsDefaultInstance();
  AutoEquipRequest::default_instance_->InitAsDefaultInstance();
  AutoEquipResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AutoEquip_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_AutoEquip_2eproto_once_);
void protobuf_AddDesc_AutoEquip_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_AutoEquip_2eproto_once_,
                 &protobuf_AddDesc_AutoEquip_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AutoEquip_2eproto {
  StaticDescriptorInitializer_AutoEquip_2eproto() {
    protobuf_AddDesc_AutoEquip_2eproto();
  }
} static_descriptor_initializer_AutoEquip_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AutoAllEquipRequest::AutoAllEquipRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AutoAllEquipRequest)
}

void AutoAllEquipRequest::InitAsDefaultInstance() {
}

AutoAllEquipRequest::AutoAllEquipRequest(const AutoAllEquipRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AutoAllEquipRequest)
}

void AutoAllEquipRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoAllEquipRequest::~AutoAllEquipRequest() {
  // @@protoc_insertion_point(destructor:main.AutoAllEquipRequest)
  SharedDtor();
}

void AutoAllEquipRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AutoAllEquipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutoAllEquipRequest& AutoAllEquipRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AutoEquip_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AutoEquip_2eproto();
#endif
  return *default_instance_;
}

AutoAllEquipRequest* AutoAllEquipRequest::default_instance_ = NULL;

AutoAllEquipRequest* AutoAllEquipRequest::New() const {
  return new AutoAllEquipRequest;
}

void AutoAllEquipRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AutoAllEquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AutoAllEquipRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.AutoAllEquipRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AutoAllEquipRequest)
  return false;
#undef DO_
}

void AutoAllEquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AutoAllEquipRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AutoAllEquipRequest)
}

int AutoAllEquipRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAllEquipRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutoAllEquipRequest*>(&from));
}

void AutoAllEquipRequest::MergeFrom(const AutoAllEquipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AutoAllEquipRequest::CopyFrom(const AutoAllEquipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAllEquipRequest::IsInitialized() const {

  return true;
}

void AutoAllEquipRequest::Swap(AutoAllEquipRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutoAllEquipRequest::GetTypeName() const {
  return "main.AutoAllEquipRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AutoAllEquipResponse::kStateFieldNumber;
#endif  // !_MSC_VER

AutoAllEquipResponse::AutoAllEquipResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AutoAllEquipResponse)
}

void AutoAllEquipResponse::InitAsDefaultInstance() {
}

AutoAllEquipResponse::AutoAllEquipResponse(const AutoAllEquipResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AutoAllEquipResponse)
}

void AutoAllEquipResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoAllEquipResponse::~AutoAllEquipResponse() {
  // @@protoc_insertion_point(destructor:main.AutoAllEquipResponse)
  SharedDtor();
}

void AutoAllEquipResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AutoAllEquipResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutoAllEquipResponse& AutoAllEquipResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AutoEquip_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AutoEquip_2eproto();
#endif
  return *default_instance_;
}

AutoAllEquipResponse* AutoAllEquipResponse::default_instance_ = NULL;

AutoAllEquipResponse* AutoAllEquipResponse::New() const {
  return new AutoAllEquipResponse;
}

void AutoAllEquipResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AutoAllEquipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AutoAllEquipResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AutoAllEquipResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AutoAllEquipResponse)
  return false;
#undef DO_
}

void AutoAllEquipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AutoAllEquipResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AutoAllEquipResponse)
}

int AutoAllEquipResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAllEquipResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutoAllEquipResponse*>(&from));
}

void AutoAllEquipResponse::MergeFrom(const AutoAllEquipResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AutoAllEquipResponse::CopyFrom(const AutoAllEquipResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAllEquipResponse::IsInitialized() const {

  return true;
}

void AutoAllEquipResponse::Swap(AutoAllEquipResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutoAllEquipResponse::GetTypeName() const {
  return "main.AutoAllEquipResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int AutoEquipRequest::kOfficerIdFieldNumber;
#endif  // !_MSC_VER

AutoEquipRequest::AutoEquipRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AutoEquipRequest)
}

void AutoEquipRequest::InitAsDefaultInstance() {
}

AutoEquipRequest::AutoEquipRequest(const AutoEquipRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AutoEquipRequest)
}

void AutoEquipRequest::SharedCtor() {
  _cached_size_ = 0;
  officerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoEquipRequest::~AutoEquipRequest() {
  // @@protoc_insertion_point(destructor:main.AutoEquipRequest)
  SharedDtor();
}

void AutoEquipRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AutoEquipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutoEquipRequest& AutoEquipRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AutoEquip_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AutoEquip_2eproto();
#endif
  return *default_instance_;
}

AutoEquipRequest* AutoEquipRequest::default_instance_ = NULL;

AutoEquipRequest* AutoEquipRequest::New() const {
  return new AutoEquipRequest;
}

void AutoEquipRequest::Clear() {
  officerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AutoEquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AutoEquipRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 officerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officerid_)));
          set_has_officerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AutoEquipRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AutoEquipRequest)
  return false;
#undef DO_
}

void AutoEquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AutoEquipRequest)
  // optional int32 officerId = 1;
  if (has_officerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->officerid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AutoEquipRequest)
}

int AutoEquipRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 officerId = 1;
    if (has_officerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officerid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoEquipRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutoEquipRequest*>(&from));
}

void AutoEquipRequest::MergeFrom(const AutoEquipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officerid()) {
      set_officerid(from.officerid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AutoEquipRequest::CopyFrom(const AutoEquipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoEquipRequest::IsInitialized() const {

  return true;
}

void AutoEquipRequest::Swap(AutoEquipRequest* other) {
  if (other != this) {
    std::swap(officerid_, other->officerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutoEquipRequest::GetTypeName() const {
  return "main.AutoEquipRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AutoEquipResponse::kStateFieldNumber;
const int AutoEquipResponse::kUpdateBagInfoFieldNumber;
#endif  // !_MSC_VER

AutoEquipResponse::AutoEquipResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AutoEquipResponse)
}

void AutoEquipResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  updatebaginfo_ = const_cast< ::main::UpdateBagInfo*>(
      ::main::UpdateBagInfo::internal_default_instance());
#else
  updatebaginfo_ = const_cast< ::main::UpdateBagInfo*>(&::main::UpdateBagInfo::default_instance());
#endif
}

AutoEquipResponse::AutoEquipResponse(const AutoEquipResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AutoEquipResponse)
}

void AutoEquipResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  updatebaginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoEquipResponse::~AutoEquipResponse() {
  // @@protoc_insertion_point(destructor:main.AutoEquipResponse)
  SharedDtor();
}

void AutoEquipResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete updatebaginfo_;
  }
}

void AutoEquipResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutoEquipResponse& AutoEquipResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AutoEquip_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AutoEquip_2eproto();
#endif
  return *default_instance_;
}

AutoEquipResponse* AutoEquipResponse::default_instance_ = NULL;

AutoEquipResponse* AutoEquipResponse::New() const {
  return new AutoEquipResponse;
}

void AutoEquipResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_updatebaginfo()) {
      if (updatebaginfo_ != NULL) updatebaginfo_->::main::UpdateBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AutoEquipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AutoEquipResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updateBagInfo;
        break;
      }

      // optional .main.UpdateBagInfo updateBagInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_updateBagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatebaginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AutoEquipResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AutoEquipResponse)
  return false;
#undef DO_
}

void AutoEquipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AutoEquipResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .main.UpdateBagInfo updateBagInfo = 2;
  if (has_updatebaginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->updatebaginfo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AutoEquipResponse)
}

int AutoEquipResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .main.UpdateBagInfo updateBagInfo = 2;
    if (has_updatebaginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatebaginfo());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoEquipResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutoEquipResponse*>(&from));
}

void AutoEquipResponse::MergeFrom(const AutoEquipResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_updatebaginfo()) {
      mutable_updatebaginfo()->::main::UpdateBagInfo::MergeFrom(from.updatebaginfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AutoEquipResponse::CopyFrom(const AutoEquipResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoEquipResponse::IsInitialized() const {

  return true;
}

void AutoEquipResponse::Swap(AutoEquipResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(updatebaginfo_, other->updatebaginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutoEquipResponse::GetTypeName() const {
  return "main.AutoEquipResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
