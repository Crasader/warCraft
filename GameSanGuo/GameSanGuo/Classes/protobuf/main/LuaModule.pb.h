// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LuaModule.proto

#ifndef PROTOBUF_LuaModule_2eproto__INCLUDED
#define PROTOBUF_LuaModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LuaModule_2eproto();
void protobuf_AssignDesc_LuaModule_2eproto();
void protobuf_ShutdownFile_LuaModule_2eproto();

class LuaCommonRequest;
class LuaCommonResponse;
class LuaTestRequest;
class LuaTestResponse;

// ===================================================================

class LuaCommonRequest : public ::google::protobuf::MessageLite {
 public:
  LuaCommonRequest();
  virtual ~LuaCommonRequest();

  LuaCommonRequest(const LuaCommonRequest& from);

  inline LuaCommonRequest& operator=(const LuaCommonRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LuaCommonRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LuaCommonRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LuaCommonRequest* other);

  // implements Message ----------------------------------------------

  LuaCommonRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LuaCommonRequest& from);
  void MergeFrom(const LuaCommonRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // optional bytes request = 2;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const void* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  inline void set_allocated_request(::std::string* request);

  // @@protoc_insertion_point(class_scope:main.LuaCommonRequest)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_request();
  inline void clear_has_request();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_;
  ::google::protobuf::int32 cmd_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaModule_2eproto();
  friend void protobuf_ShutdownFile_LuaModule_2eproto();

  void InitAsDefaultInstance();
  static LuaCommonRequest* default_instance_;
};
// -------------------------------------------------------------------

class LuaCommonResponse : public ::google::protobuf::MessageLite {
 public:
  LuaCommonResponse();
  virtual ~LuaCommonResponse();

  LuaCommonResponse(const LuaCommonResponse& from);

  inline LuaCommonResponse& operator=(const LuaCommonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LuaCommonResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LuaCommonResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LuaCommonResponse* other);

  // implements Message ----------------------------------------------

  LuaCommonResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LuaCommonResponse& from);
  void MergeFrom(const LuaCommonResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // optional bytes response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const void* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  inline void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:main.LuaCommonResponse)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_response();
  inline void clear_has_response();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* response_;
  ::google::protobuf::int32 cmd_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaModule_2eproto();
  friend void protobuf_ShutdownFile_LuaModule_2eproto();

  void InitAsDefaultInstance();
  static LuaCommonResponse* default_instance_;
};
// -------------------------------------------------------------------

class LuaTestRequest : public ::google::protobuf::MessageLite {
 public:
  LuaTestRequest();
  virtual ~LuaTestRequest();

  LuaTestRequest(const LuaTestRequest& from);

  inline LuaTestRequest& operator=(const LuaTestRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LuaTestRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LuaTestRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LuaTestRequest* other);

  // implements Message ----------------------------------------------

  LuaTestRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LuaTestRequest& from);
  void MergeFrom(const LuaTestRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cmdId = 1;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:main.LuaTestRequest)
 private:
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_info();
  inline void clear_has_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::google::protobuf::int32 cmdid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaModule_2eproto();
  friend void protobuf_ShutdownFile_LuaModule_2eproto();

  void InitAsDefaultInstance();
  static LuaTestRequest* default_instance_;
};
// -------------------------------------------------------------------

class LuaTestResponse : public ::google::protobuf::MessageLite {
 public:
  LuaTestResponse();
  virtual ~LuaTestResponse();

  LuaTestResponse(const LuaTestResponse& from);

  inline LuaTestResponse& operator=(const LuaTestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LuaTestResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LuaTestResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LuaTestResponse* other);

  // implements Message ----------------------------------------------

  LuaTestResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LuaTestResponse& from);
  void MergeFrom(const LuaTestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cmdId = 1;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:main.LuaTestResponse)
 private:
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_info();
  inline void clear_has_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::google::protobuf::int32 cmdid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LuaModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LuaModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_LuaModule_2eproto();
  friend void protobuf_ShutdownFile_LuaModule_2eproto();

  void InitAsDefaultInstance();
  static LuaTestResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// LuaCommonRequest

// required int32 cmd = 1;
inline bool LuaCommonRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuaCommonRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuaCommonRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuaCommonRequest::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 LuaCommonRequest::cmd() const {
  // @@protoc_insertion_point(field_get:main.LuaCommonRequest.cmd)
  return cmd_;
}
inline void LuaCommonRequest::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:main.LuaCommonRequest.cmd)
}

// optional bytes request = 2;
inline bool LuaCommonRequest::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuaCommonRequest::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuaCommonRequest::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuaCommonRequest::clear_request() {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& LuaCommonRequest::request() const {
  // @@protoc_insertion_point(field_get:main.LuaCommonRequest.request)
  return *request_;
}
inline void LuaCommonRequest::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(value);
  // @@protoc_insertion_point(field_set:main.LuaCommonRequest.request)
}
inline void LuaCommonRequest::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.LuaCommonRequest.request)
}
inline void LuaCommonRequest::set_request(const void* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.LuaCommonRequest.request)
}
inline ::std::string* LuaCommonRequest::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.LuaCommonRequest.request)
  return request_;
}
inline ::std::string* LuaCommonRequest::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LuaCommonRequest::set_allocated_request(::std::string* request) {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_;
  }
  if (request) {
    set_has_request();
    request_ = request;
  } else {
    clear_has_request();
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.LuaCommonRequest.request)
}

// -------------------------------------------------------------------

// LuaCommonResponse

// required int32 cmd = 1;
inline bool LuaCommonResponse::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuaCommonResponse::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuaCommonResponse::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuaCommonResponse::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 LuaCommonResponse::cmd() const {
  // @@protoc_insertion_point(field_get:main.LuaCommonResponse.cmd)
  return cmd_;
}
inline void LuaCommonResponse::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:main.LuaCommonResponse.cmd)
}

// optional bytes response = 2;
inline bool LuaCommonResponse::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuaCommonResponse::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuaCommonResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuaCommonResponse::clear_response() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& LuaCommonResponse::response() const {
  // @@protoc_insertion_point(field_get:main.LuaCommonResponse.response)
  return *response_;
}
inline void LuaCommonResponse::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set:main.LuaCommonResponse.response)
}
inline void LuaCommonResponse::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.LuaCommonResponse.response)
}
inline void LuaCommonResponse::set_response(const void* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.LuaCommonResponse.response)
}
inline ::std::string* LuaCommonResponse::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.LuaCommonResponse.response)
  return response_;
}
inline ::std::string* LuaCommonResponse::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LuaCommonResponse::set_allocated_response(::std::string* response) {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (response) {
    set_has_response();
    response_ = response;
  } else {
    clear_has_response();
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.LuaCommonResponse.response)
}

// -------------------------------------------------------------------

// LuaTestRequest

// optional int32 cmdId = 1;
inline bool LuaTestRequest::has_cmdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuaTestRequest::set_has_cmdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuaTestRequest::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuaTestRequest::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 LuaTestRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:main.LuaTestRequest.cmdId)
  return cmdid_;
}
inline void LuaTestRequest::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:main.LuaTestRequest.cmdId)
}

// optional string info = 2;
inline bool LuaTestRequest::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuaTestRequest::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuaTestRequest::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuaTestRequest::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& LuaTestRequest::info() const {
  // @@protoc_insertion_point(field_get:main.LuaTestRequest.info)
  return *info_;
}
inline void LuaTestRequest::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:main.LuaTestRequest.info)
}
inline void LuaTestRequest::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.LuaTestRequest.info)
}
inline void LuaTestRequest::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.LuaTestRequest.info)
}
inline ::std::string* LuaTestRequest::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.LuaTestRequest.info)
  return info_;
}
inline ::std::string* LuaTestRequest::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LuaTestRequest::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.LuaTestRequest.info)
}

// -------------------------------------------------------------------

// LuaTestResponse

// optional int32 cmdId = 1;
inline bool LuaTestResponse::has_cmdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuaTestResponse::set_has_cmdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuaTestResponse::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuaTestResponse::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 LuaTestResponse::cmdid() const {
  // @@protoc_insertion_point(field_get:main.LuaTestResponse.cmdId)
  return cmdid_;
}
inline void LuaTestResponse::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:main.LuaTestResponse.cmdId)
}

// optional string info = 2;
inline bool LuaTestResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuaTestResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuaTestResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuaTestResponse::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& LuaTestResponse::info() const {
  // @@protoc_insertion_point(field_get:main.LuaTestResponse.info)
  return *info_;
}
inline void LuaTestResponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:main.LuaTestResponse.info)
}
inline void LuaTestResponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.LuaTestResponse.info)
}
inline void LuaTestResponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.LuaTestResponse.info)
}
inline ::std::string* LuaTestResponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.LuaTestResponse.info)
  return info_;
}
inline ::std::string* LuaTestResponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LuaTestResponse::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.LuaTestResponse.info)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LuaModule_2eproto__INCLUDED
