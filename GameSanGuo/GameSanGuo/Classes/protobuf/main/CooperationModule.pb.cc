// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CooperationModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CooperationModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_CooperationModule_2eproto() {
  delete CooperationRequest::default_instance_;
  delete CooperationResponse::default_instance_;
  delete CooperationModel::default_instance_;
  delete CooperationFillRequest::default_instance_;
  delete CooperationFillResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CooperationModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CooperationModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CooperationRequest::default_instance_ = new CooperationRequest();
  CooperationResponse::default_instance_ = new CooperationResponse();
  CooperationModel::default_instance_ = new CooperationModel();
  CooperationFillRequest::default_instance_ = new CooperationFillRequest();
  CooperationFillResponse::default_instance_ = new CooperationFillResponse();
  CooperationRequest::default_instance_->InitAsDefaultInstance();
  CooperationResponse::default_instance_->InitAsDefaultInstance();
  CooperationModel::default_instance_->InitAsDefaultInstance();
  CooperationFillRequest::default_instance_->InitAsDefaultInstance();
  CooperationFillResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CooperationModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CooperationModule_2eproto_once_);
void protobuf_AddDesc_CooperationModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CooperationModule_2eproto_once_,
                 &protobuf_AddDesc_CooperationModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CooperationModule_2eproto {
  StaticDescriptorInitializer_CooperationModule_2eproto() {
    protobuf_AddDesc_CooperationModule_2eproto();
  }
} static_descriptor_initializer_CooperationModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CooperationRequest::CooperationRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CooperationRequest)
}

void CooperationRequest::InitAsDefaultInstance() {
}

CooperationRequest::CooperationRequest(const CooperationRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CooperationRequest)
}

void CooperationRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CooperationRequest::~CooperationRequest() {
  // @@protoc_insertion_point(destructor:main.CooperationRequest)
  SharedDtor();
}

void CooperationRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CooperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CooperationRequest& CooperationRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CooperationModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CooperationModule_2eproto();
#endif
  return *default_instance_;
}

CooperationRequest* CooperationRequest::default_instance_ = NULL;

CooperationRequest* CooperationRequest::New() const {
  return new CooperationRequest;
}

void CooperationRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CooperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CooperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.CooperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CooperationRequest)
  return false;
#undef DO_
}

void CooperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CooperationRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CooperationRequest)
}

int CooperationRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CooperationRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CooperationRequest*>(&from));
}

void CooperationRequest::MergeFrom(const CooperationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CooperationRequest::CopyFrom(const CooperationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooperationRequest::IsInitialized() const {

  return true;
}

void CooperationRequest::Swap(CooperationRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CooperationRequest::GetTypeName() const {
  return "main.CooperationRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CooperationResponse::kCooperationModelFieldNumber;
#endif  // !_MSC_VER

CooperationResponse::CooperationResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CooperationResponse)
}

void CooperationResponse::InitAsDefaultInstance() {
}

CooperationResponse::CooperationResponse(const CooperationResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CooperationResponse)
}

void CooperationResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CooperationResponse::~CooperationResponse() {
  // @@protoc_insertion_point(destructor:main.CooperationResponse)
  SharedDtor();
}

void CooperationResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CooperationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CooperationResponse& CooperationResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CooperationModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CooperationModule_2eproto();
#endif
  return *default_instance_;
}

CooperationResponse* CooperationResponse::default_instance_ = NULL;

CooperationResponse* CooperationResponse::New() const {
  return new CooperationResponse;
}

void CooperationResponse::Clear() {
  cooperationmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CooperationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CooperationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.CooperationModel cooperationModel = 1;
      case 1: {
        if (tag == 10) {
         parse_cooperationModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cooperationmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cooperationModel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CooperationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CooperationResponse)
  return false;
#undef DO_
}

void CooperationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CooperationResponse)
  // repeated .main.CooperationModel cooperationModel = 1;
  for (int i = 0; i < this->cooperationmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cooperationmodel(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CooperationResponse)
}

int CooperationResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.CooperationModel cooperationModel = 1;
  total_size += 1 * this->cooperationmodel_size();
  for (int i = 0; i < this->cooperationmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cooperationmodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CooperationResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CooperationResponse*>(&from));
}

void CooperationResponse::MergeFrom(const CooperationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cooperationmodel_.MergeFrom(from.cooperationmodel_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CooperationResponse::CopyFrom(const CooperationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooperationResponse::IsInitialized() const {

  return true;
}

void CooperationResponse::Swap(CooperationResponse* other) {
  if (other != this) {
    cooperationmodel_.Swap(&other->cooperationmodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CooperationResponse::GetTypeName() const {
  return "main.CooperationResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CooperationModel::kRoleIdFieldNumber;
const int CooperationModel::kNameFieldNumber;
const int CooperationModel::kTypeFieldNumber;
const int CooperationModel::kItemIdFieldNumber;
const int CooperationModel::kItemLevelFieldNumber;
const int CooperationModel::kRoleLvFieldNumber;
const int CooperationModel::kInListFieldNumber;
#endif  // !_MSC_VER

CooperationModel::CooperationModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CooperationModel)
}

void CooperationModel::InitAsDefaultInstance() {
}

CooperationModel::CooperationModel(const CooperationModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CooperationModel)
}

void CooperationModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  itemid_ = 0;
  itemlevel_ = 0;
  rolelv_ = 0;
  inlist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CooperationModel::~CooperationModel() {
  // @@protoc_insertion_point(destructor:main.CooperationModel)
  SharedDtor();
}

void CooperationModel::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CooperationModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CooperationModel& CooperationModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CooperationModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CooperationModule_2eproto();
#endif
  return *default_instance_;
}

CooperationModel* CooperationModel::default_instance_ = NULL;

CooperationModel* CooperationModel::New() const {
  return new CooperationModel;
}

void CooperationModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CooperationModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(roleid_, inlist_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CooperationModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CooperationModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 4;
      case 4: {
        if (tag == 32) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemLevel;
        break;
      }

      // optional int32 itemLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_itemLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemlevel_)));
          set_has_itemlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roleLv;
        break;
      }

      // optional int32 roleLv = 6;
      case 6: {
        if (tag == 48) {
         parse_roleLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelv_)));
          set_has_rolelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_inList;
        break;
      }

      // optional sint32 inList = 7;
      case 7: {
        if (tag == 56) {
         parse_inList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &inlist_)));
          set_has_inlist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CooperationModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CooperationModel)
  return false;
#undef DO_
}

void CooperationModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CooperationModel)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemid(), output);
  }

  // optional int32 itemLevel = 5;
  if (has_itemlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemlevel(), output);
  }

  // optional int32 roleLv = 6;
  if (has_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rolelv(), output);
  }

  // optional sint32 inList = 7;
  if (has_inlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->inlist(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CooperationModel)
}

int CooperationModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemLevel = 5;
    if (has_itemlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemlevel());
    }

    // optional int32 roleLv = 6;
    if (has_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelv());
    }

    // optional sint32 inList = 7;
    if (has_inlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->inlist());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CooperationModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CooperationModel*>(&from));
}

void CooperationModel::MergeFrom(const CooperationModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemlevel()) {
      set_itemlevel(from.itemlevel());
    }
    if (from.has_rolelv()) {
      set_rolelv(from.rolelv());
    }
    if (from.has_inlist()) {
      set_inlist(from.inlist());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CooperationModel::CopyFrom(const CooperationModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooperationModel::IsInitialized() const {

  return true;
}

void CooperationModel::Swap(CooperationModel* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemlevel_, other->itemlevel_);
    std::swap(rolelv_, other->rolelv_);
    std::swap(inlist_, other->inlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CooperationModel::GetTypeName() const {
  return "main.CooperationModel";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CooperationFillRequest::CooperationFillRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CooperationFillRequest)
}

void CooperationFillRequest::InitAsDefaultInstance() {
}

CooperationFillRequest::CooperationFillRequest(const CooperationFillRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CooperationFillRequest)
}

void CooperationFillRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CooperationFillRequest::~CooperationFillRequest() {
  // @@protoc_insertion_point(destructor:main.CooperationFillRequest)
  SharedDtor();
}

void CooperationFillRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CooperationFillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CooperationFillRequest& CooperationFillRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CooperationModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CooperationModule_2eproto();
#endif
  return *default_instance_;
}

CooperationFillRequest* CooperationFillRequest::default_instance_ = NULL;

CooperationFillRequest* CooperationFillRequest::New() const {
  return new CooperationFillRequest;
}

void CooperationFillRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CooperationFillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CooperationFillRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.CooperationFillRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CooperationFillRequest)
  return false;
#undef DO_
}

void CooperationFillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CooperationFillRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CooperationFillRequest)
}

int CooperationFillRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CooperationFillRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CooperationFillRequest*>(&from));
}

void CooperationFillRequest::MergeFrom(const CooperationFillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CooperationFillRequest::CopyFrom(const CooperationFillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooperationFillRequest::IsInitialized() const {

  return true;
}

void CooperationFillRequest::Swap(CooperationFillRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CooperationFillRequest::GetTypeName() const {
  return "main.CooperationFillRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CooperationFillResponse::kStateFieldNumber;
#endif  // !_MSC_VER

CooperationFillResponse::CooperationFillResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CooperationFillResponse)
}

void CooperationFillResponse::InitAsDefaultInstance() {
}

CooperationFillResponse::CooperationFillResponse(const CooperationFillResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CooperationFillResponse)
}

void CooperationFillResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CooperationFillResponse::~CooperationFillResponse() {
  // @@protoc_insertion_point(destructor:main.CooperationFillResponse)
  SharedDtor();
}

void CooperationFillResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CooperationFillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CooperationFillResponse& CooperationFillResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CooperationModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CooperationModule_2eproto();
#endif
  return *default_instance_;
}

CooperationFillResponse* CooperationFillResponse::default_instance_ = NULL;

CooperationFillResponse* CooperationFillResponse::New() const {
  return new CooperationFillResponse;
}

void CooperationFillResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CooperationFillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CooperationFillResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CooperationFillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CooperationFillResponse)
  return false;
#undef DO_
}

void CooperationFillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CooperationFillResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CooperationFillResponse)
}

int CooperationFillResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CooperationFillResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CooperationFillResponse*>(&from));
}

void CooperationFillResponse::MergeFrom(const CooperationFillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CooperationFillResponse::CopyFrom(const CooperationFillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooperationFillResponse::IsInitialized() const {

  return true;
}

void CooperationFillResponse::Swap(CooperationFillResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CooperationFillResponse::GetTypeName() const {
  return "main.CooperationFillResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
