// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_Invite_2eproto() {
  delete InviteRequest::default_instance_;
  delete InviteResponse::default_instance_;
  delete InviteDetailRequest::default_instance_;
  delete InviteDetailResponse::default_instance_;
  delete InviteRewardMessage::default_instance_;
  delete InviteRewardRequest::default_instance_;
  delete InviteRewardResponse::default_instance_;
  delete ShareRewardRequest::default_instance_;
  delete ShareRewardResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Invite_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Invite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  InviteRequest::default_instance_ = new InviteRequest();
  InviteResponse::default_instance_ = new InviteResponse();
  InviteDetailRequest::default_instance_ = new InviteDetailRequest();
  InviteDetailResponse::default_instance_ = new InviteDetailResponse();
  InviteRewardMessage::default_instance_ = new InviteRewardMessage();
  InviteRewardRequest::default_instance_ = new InviteRewardRequest();
  InviteRewardResponse::default_instance_ = new InviteRewardResponse();
  ShareRewardRequest::default_instance_ = new ShareRewardRequest();
  ShareRewardResponse::default_instance_ = new ShareRewardResponse();
  InviteRequest::default_instance_->InitAsDefaultInstance();
  InviteResponse::default_instance_->InitAsDefaultInstance();
  InviteDetailRequest::default_instance_->InitAsDefaultInstance();
  InviteDetailResponse::default_instance_->InitAsDefaultInstance();
  InviteRewardMessage::default_instance_->InitAsDefaultInstance();
  InviteRewardRequest::default_instance_->InitAsDefaultInstance();
  InviteRewardResponse::default_instance_->InitAsDefaultInstance();
  ShareRewardRequest::default_instance_->InitAsDefaultInstance();
  ShareRewardResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invite_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Invite_2eproto_once_);
void protobuf_AddDesc_Invite_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Invite_2eproto_once_,
                 &protobuf_AddDesc_Invite_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invite_2eproto {
  StaticDescriptorInitializer_Invite_2eproto() {
    protobuf_AddDesc_Invite_2eproto();
  }
} static_descriptor_initializer_Invite_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int InviteRequest::kInviteCodeFieldNumber;
#endif  // !_MSC_VER

InviteRequest::InviteRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.InviteRequest)
}

void InviteRequest::InitAsDefaultInstance() {
}

InviteRequest::InviteRequest(const InviteRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.InviteRequest)
}

void InviteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invitecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteRequest::~InviteRequest() {
  // @@protoc_insertion_point(destructor:main.InviteRequest)
  SharedDtor();
}

void InviteRequest::SharedDtor() {
  if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitecode_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteRequest& InviteRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

InviteRequest* InviteRequest::default_instance_ = NULL;

InviteRequest* InviteRequest::New() const {
  return new InviteRequest;
}

void InviteRequest::Clear() {
  if (has_invitecode()) {
    if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      invitecode_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.InviteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviteCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitecode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.InviteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.InviteRequest)
  return false;
#undef DO_
}

void InviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.InviteRequest)
  // optional string inviteCode = 1;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invitecode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.InviteRequest)
}

int InviteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inviteCode = 1;
    if (has_invitecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitecode());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteRequest*>(&from));
}

void InviteRequest::MergeFrom(const InviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitecode()) {
      set_invitecode(from.invitecode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InviteRequest::CopyFrom(const InviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRequest::IsInitialized() const {

  return true;
}

void InviteRequest::Swap(InviteRequest* other) {
  if (other != this) {
    std::swap(invitecode_, other->invitecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteRequest::GetTypeName() const {
  return "main.InviteRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int InviteResponse::kStateFieldNumber;
const int InviteResponse::kCoinsFieldNumber;
const int InviteResponse::kGoldFieldNumber;
#endif  // !_MSC_VER

InviteResponse::InviteResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.InviteResponse)
}

void InviteResponse::InitAsDefaultInstance() {
}

InviteResponse::InviteResponse(const InviteResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.InviteResponse)
}

void InviteResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  coins_ = 0;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteResponse::~InviteResponse() {
  // @@protoc_insertion_point(destructor:main.InviteResponse)
  SharedDtor();
}

void InviteResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteResponse& InviteResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

InviteResponse* InviteResponse::default_instance_ = NULL;

InviteResponse* InviteResponse::New() const {
  return new InviteResponse;
}

void InviteResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, gold_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.InviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coins;
        break;
      }

      // optional int32 coins = 2;
      case 2: {
        if (tag == 16) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.InviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.InviteResponse)
  return false;
#undef DO_
}

void InviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.InviteResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 coins = 2;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coins(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.InviteResponse)
}

int InviteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 coins = 2;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteResponse*>(&from));
}

void InviteResponse::MergeFrom(const InviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InviteResponse::CopyFrom(const InviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteResponse::IsInitialized() const {

  return true;
}

void InviteResponse::Swap(InviteResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(coins_, other->coins_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteResponse::GetTypeName() const {
  return "main.InviteResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

InviteDetailRequest::InviteDetailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.InviteDetailRequest)
}

void InviteDetailRequest::InitAsDefaultInstance() {
}

InviteDetailRequest::InviteDetailRequest(const InviteDetailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.InviteDetailRequest)
}

void InviteDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteDetailRequest::~InviteDetailRequest() {
  // @@protoc_insertion_point(destructor:main.InviteDetailRequest)
  SharedDtor();
}

void InviteDetailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteDetailRequest& InviteDetailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

InviteDetailRequest* InviteDetailRequest::default_instance_ = NULL;

InviteDetailRequest* InviteDetailRequest::New() const {
  return new InviteDetailRequest;
}

void InviteDetailRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InviteDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.InviteDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.InviteDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.InviteDetailRequest)
  return false;
#undef DO_
}

void InviteDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.InviteDetailRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.InviteDetailRequest)
}

int InviteDetailRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteDetailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteDetailRequest*>(&from));
}

void InviteDetailRequest::MergeFrom(const InviteDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InviteDetailRequest::CopyFrom(const InviteDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteDetailRequest::IsInitialized() const {

  return true;
}

void InviteDetailRequest::Swap(InviteDetailRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteDetailRequest::GetTypeName() const {
  return "main.InviteDetailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int InviteDetailResponse::kInviteCodeFieldNumber;
const int InviteDetailResponse::kInviteNumFieldNumber;
const int InviteDetailResponse::kInviteMaxFieldNumber;
const int InviteDetailResponse::kRewardsFieldNumber;
#endif  // !_MSC_VER

InviteDetailResponse::InviteDetailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.InviteDetailResponse)
}

void InviteDetailResponse::InitAsDefaultInstance() {
}

InviteDetailResponse::InviteDetailResponse(const InviteDetailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.InviteDetailResponse)
}

void InviteDetailResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invitecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitenum_ = 0;
  invitemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteDetailResponse::~InviteDetailResponse() {
  // @@protoc_insertion_point(destructor:main.InviteDetailResponse)
  SharedDtor();
}

void InviteDetailResponse::SharedDtor() {
  if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitecode_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteDetailResponse& InviteDetailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

InviteDetailResponse* InviteDetailResponse::default_instance_ = NULL;

InviteDetailResponse* InviteDetailResponse::New() const {
  return new InviteDetailResponse;
}

void InviteDetailResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteDetailResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(invitenum_, invitemax_);
    if (has_invitecode()) {
      if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitecode_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InviteDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.InviteDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviteCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitecode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inviteNum;
        break;
      }

      // optional int32 inviteNum = 2;
      case 2: {
        if (tag == 16) {
         parse_inviteNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invitenum_)));
          set_has_invitenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inviteMax;
        break;
      }

      // optional int32 inviteMax = 3;
      case 3: {
        if (tag == 24) {
         parse_inviteMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invitemax_)));
          set_has_invitemax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .main.InviteRewardMessage rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.InviteDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.InviteDetailResponse)
  return false;
#undef DO_
}

void InviteDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.InviteDetailResponse)
  // optional string inviteCode = 1;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invitecode(), output);
  }

  // optional int32 inviteNum = 2;
  if (has_invitenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->invitenum(), output);
  }

  // optional int32 inviteMax = 3;
  if (has_invitemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->invitemax(), output);
  }

  // repeated .main.InviteRewardMessage rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rewards(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.InviteDetailResponse)
}

int InviteDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inviteCode = 1;
    if (has_invitecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitecode());
    }

    // optional int32 inviteNum = 2;
    if (has_invitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitenum());
    }

    // optional int32 inviteMax = 3;
    if (has_invitemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitemax());
    }

  }
  // repeated .main.InviteRewardMessage rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteDetailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteDetailResponse*>(&from));
}

void InviteDetailResponse::MergeFrom(const InviteDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitecode()) {
      set_invitecode(from.invitecode());
    }
    if (from.has_invitenum()) {
      set_invitenum(from.invitenum());
    }
    if (from.has_invitemax()) {
      set_invitemax(from.invitemax());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InviteDetailResponse::CopyFrom(const InviteDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteDetailResponse::IsInitialized() const {

  return true;
}

void InviteDetailResponse::Swap(InviteDetailResponse* other) {
  if (other != this) {
    std::swap(invitecode_, other->invitecode_);
    std::swap(invitenum_, other->invitenum_);
    std::swap(invitemax_, other->invitemax_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteDetailResponse::GetTypeName() const {
  return "main.InviteDetailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int InviteRewardMessage::kNumFieldNumber;
const int InviteRewardMessage::kItemTypeFieldNumber;
const int InviteRewardMessage::kItemIdFieldNumber;
const int InviteRewardMessage::kItemNumFieldNumber;
const int InviteRewardMessage::kStateFieldNumber;
#endif  // !_MSC_VER

InviteRewardMessage::InviteRewardMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.InviteRewardMessage)
}

void InviteRewardMessage::InitAsDefaultInstance() {
}

InviteRewardMessage::InviteRewardMessage(const InviteRewardMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.InviteRewardMessage)
}

void InviteRewardMessage::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteRewardMessage::~InviteRewardMessage() {
  // @@protoc_insertion_point(destructor:main.InviteRewardMessage)
  SharedDtor();
}

void InviteRewardMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteRewardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteRewardMessage& InviteRewardMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

InviteRewardMessage* InviteRewardMessage::default_instance_ = NULL;

InviteRewardMessage* InviteRewardMessage::New() const {
  return new InviteRewardMessage;
}

void InviteRewardMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteRewardMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(num_, state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InviteRewardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.InviteRewardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // optional int32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (tag == 24) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 4;
      case 4: {
        if (tag == 32) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.InviteRewardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.InviteRewardMessage)
  return false;
#undef DO_
}

void InviteRewardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.InviteRewardMessage)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 itemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemnum(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.InviteRewardMessage)
}

int InviteRewardMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteRewardMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteRewardMessage*>(&from));
}

void InviteRewardMessage::MergeFrom(const InviteRewardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InviteRewardMessage::CopyFrom(const InviteRewardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRewardMessage::IsInitialized() const {

  return true;
}

void InviteRewardMessage::Swap(InviteRewardMessage* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteRewardMessage::GetTypeName() const {
  return "main.InviteRewardMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int InviteRewardRequest::kNumFieldNumber;
#endif  // !_MSC_VER

InviteRewardRequest::InviteRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.InviteRewardRequest)
}

void InviteRewardRequest::InitAsDefaultInstance() {
}

InviteRewardRequest::InviteRewardRequest(const InviteRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.InviteRewardRequest)
}

void InviteRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteRewardRequest::~InviteRewardRequest() {
  // @@protoc_insertion_point(destructor:main.InviteRewardRequest)
  SharedDtor();
}

void InviteRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteRewardRequest& InviteRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

InviteRewardRequest* InviteRewardRequest::default_instance_ = NULL;

InviteRewardRequest* InviteRewardRequest::New() const {
  return new InviteRewardRequest;
}

void InviteRewardRequest::Clear() {
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InviteRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.InviteRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.InviteRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.InviteRewardRequest)
  return false;
#undef DO_
}

void InviteRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.InviteRewardRequest)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.InviteRewardRequest)
}

int InviteRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteRewardRequest*>(&from));
}

void InviteRewardRequest::MergeFrom(const InviteRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InviteRewardRequest::CopyFrom(const InviteRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRewardRequest::IsInitialized() const {

  return true;
}

void InviteRewardRequest::Swap(InviteRewardRequest* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteRewardRequest::GetTypeName() const {
  return "main.InviteRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int InviteRewardResponse::kStateFieldNumber;
const int InviteRewardResponse::kItemTypeFieldNumber;
const int InviteRewardResponse::kItemIdFieldNumber;
const int InviteRewardResponse::kItemNumFieldNumber;
#endif  // !_MSC_VER

InviteRewardResponse::InviteRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.InviteRewardResponse)
}

void InviteRewardResponse::InitAsDefaultInstance() {
}

InviteRewardResponse::InviteRewardResponse(const InviteRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.InviteRewardResponse)
}

void InviteRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteRewardResponse::~InviteRewardResponse() {
  // @@protoc_insertion_point(destructor:main.InviteRewardResponse)
  SharedDtor();
}

void InviteRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InviteRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InviteRewardResponse& InviteRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

InviteRewardResponse* InviteRewardResponse::default_instance_ = NULL;

InviteRewardResponse* InviteRewardResponse::New() const {
  return new InviteRewardResponse;
}

void InviteRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, itemnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool InviteRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.InviteRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // optional int32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (tag == 24) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 4;
      case 4: {
        if (tag == 32) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.InviteRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.InviteRewardResponse)
  return false;
#undef DO_
}

void InviteRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.InviteRewardResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 itemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemnum(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.InviteRewardResponse)
}

int InviteRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteRewardResponse*>(&from));
}

void InviteRewardResponse::MergeFrom(const InviteRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void InviteRewardResponse::CopyFrom(const InviteRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteRewardResponse::IsInitialized() const {

  return true;
}

void InviteRewardResponse::Swap(InviteRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InviteRewardResponse::GetTypeName() const {
  return "main.InviteRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareRewardRequest::kPlatformIdFieldNumber;
#endif  // !_MSC_VER

ShareRewardRequest::ShareRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShareRewardRequest)
}

void ShareRewardRequest::InitAsDefaultInstance() {
}

ShareRewardRequest::ShareRewardRequest(const ShareRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShareRewardRequest)
}

void ShareRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  platformid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareRewardRequest::~ShareRewardRequest() {
  // @@protoc_insertion_point(destructor:main.ShareRewardRequest)
  SharedDtor();
}

void ShareRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareRewardRequest& ShareRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

ShareRewardRequest* ShareRewardRequest::default_instance_ = NULL;

ShareRewardRequest* ShareRewardRequest::New() const {
  return new ShareRewardRequest;
}

void ShareRewardRequest::Clear() {
  platformid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShareRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShareRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 platformId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
          set_has_platformid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShareRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShareRewardRequest)
  return false;
#undef DO_
}

void ShareRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShareRewardRequest)
  // optional int32 platformId = 1;
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platformid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShareRewardRequest)
}

int ShareRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 platformId = 1;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareRewardRequest*>(&from));
}

void ShareRewardRequest::MergeFrom(const ShareRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platformid()) {
      set_platformid(from.platformid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShareRewardRequest::CopyFrom(const ShareRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareRewardRequest::IsInitialized() const {

  return true;
}

void ShareRewardRequest::Swap(ShareRewardRequest* other) {
  if (other != this) {
    std::swap(platformid_, other->platformid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareRewardRequest::GetTypeName() const {
  return "main.ShareRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ShareRewardResponse::kStateFieldNumber;
const int ShareRewardResponse::kGoldFieldNumber;
const int ShareRewardResponse::kCoinsFieldNumber;
#endif  // !_MSC_VER

ShareRewardResponse::ShareRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShareRewardResponse)
}

void ShareRewardResponse::InitAsDefaultInstance() {
}

ShareRewardResponse::ShareRewardResponse(const ShareRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShareRewardResponse)
}

void ShareRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  gold_ = 0;
  coins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareRewardResponse::~ShareRewardResponse() {
  // @@protoc_insertion_point(destructor:main.ShareRewardResponse)
  SharedDtor();
}

void ShareRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShareRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShareRewardResponse& ShareRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Invite_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Invite_2eproto();
#endif
  return *default_instance_;
}

ShareRewardResponse* ShareRewardResponse::default_instance_ = NULL;

ShareRewardResponse* ShareRewardResponse::New() const {
  return new ShareRewardResponse;
}

void ShareRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShareRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, coins_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShareRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShareRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coins;
        break;
      }

      // optional int32 coins = 3;
      case 3: {
        if (tag == 24) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShareRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShareRewardResponse)
  return false;
#undef DO_
}

void ShareRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShareRewardResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // optional int32 coins = 3;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coins(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShareRewardResponse)
}

int ShareRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 coins = 3;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShareRewardResponse*>(&from));
}

void ShareRewardResponse::MergeFrom(const ShareRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShareRewardResponse::CopyFrom(const ShareRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareRewardResponse::IsInitialized() const {

  return true;
}

void ShareRewardResponse::Swap(ShareRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(gold_, other->gold_);
    std::swap(coins_, other->coins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShareRewardResponse::GetTypeName() const {
  return "main.ShareRewardResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
