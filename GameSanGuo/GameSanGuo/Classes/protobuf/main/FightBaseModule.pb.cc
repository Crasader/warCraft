// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightBaseModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FightBaseModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_FightBaseModule_2eproto() {
  delete FightMatrixRequest::default_instance_;
  delete FightMatrixResponse::default_instance_;
  delete StartStatePVPResponse::default_instance_;
  delete StartStatePVERequest::default_instance_;
  delete StartStatePVEResponse::default_instance_;
  delete StartStateItemModel::default_instance_;
  delete StartRequest::default_instance_;
  delete StartResponse::default_instance_;
  delete PveContinuePlayRequest::default_instance_;
  delete PveStarRequest::default_instance_;
  delete PveStarResponse::default_instance_;
  delete FillUnitRequest::default_instance_;
  delete FillUnitResponse::default_instance_;
  delete FillUnitReviveRequest::default_instance_;
  delete FillUnitReviveResponse::default_instance_;
  delete QiangZhiFillUnitRequest::default_instance_;
  delete QiangZhiFillUnitResponse::default_instance_;
  delete MoveRequest::default_instance_;
  delete MoveResponse::default_instance_;
  delete GiveUpRequest::default_instance_;
  delete GiveUpResponse::default_instance_;
  delete RemoveRequest::default_instance_;
  delete RemoveResponse::default_instance_;
  delete ActionCountResponse::default_instance_;
  delete FightSpirit::default_instance_;
  delete VerifyRequest::default_instance_;
  delete VerifyResponse::default_instance_;
  delete MajorSkillRequest::default_instance_;
  delete MajorSkillResponse::default_instance_;
  delete MajorSkillProto::default_instance_;
  delete CoordinateProto::default_instance_;
  delete CoordinateEffectProto::default_instance_;
  delete FightThtoughRewardRequest::default_instance_;
  delete FightRewardRequest::default_instance_;
  delete FightRewardResponse::default_instance_;
  delete FightRewardDropItems::default_instance_;
  delete FightRunAwayRequest::default_instance_;
  delete FightRunAwayResponse::default_instance_;
  delete EnemyExitResponse::default_instance_;
  delete EnemyResumeResponse::default_instance_;
  delete FightLogRequest::default_instance_;
  delete FightReviveRequest::default_instance_;
  delete FightReviveResponse::default_instance_;
  delete FightFixMapRequest::default_instance_;
  delete FightFixMapResponse::default_instance_;
  delete FightFixAttackUnit::default_instance_;
  delete FightFixBuff::default_instance_;
  delete EnterBossRequest::default_instance_;
  delete EnterBossResponse::default_instance_;
  delete BossBuffModel::default_instance_;
  delete BossRankModel::default_instance_;
  delete AtkBossRequest::default_instance_;
  delete AtkBossResponse::default_instance_;
  delete BossCurrStateRequest::default_instance_;
  delete BossCurrStateResponse::default_instance_;
  delete MainBossRequest::default_instance_;
  delete MainBossResponse::default_instance_;
  delete BossDamageRankRequest::default_instance_;
  delete BossDamageRankResponse::default_instance_;
  delete BossRankInfo::default_instance_;
  delete GetBossBuffRequest::default_instance_;
  delete GetBossBuffResponse::default_instance_;
  delete BossEndRewardResponse::default_instance_;
  delete FightPvpRewardRequest::default_instance_;
  delete FightPvpRewardResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_FightBaseModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_FightBaseModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_ItemModule_2eproto();
  FightMatrixRequest::default_instance_ = new FightMatrixRequest();
  FightMatrixResponse::default_instance_ = new FightMatrixResponse();
  StartStatePVPResponse::default_instance_ = new StartStatePVPResponse();
  StartStatePVERequest::default_instance_ = new StartStatePVERequest();
  StartStatePVEResponse::default_instance_ = new StartStatePVEResponse();
  StartStateItemModel::default_instance_ = new StartStateItemModel();
  StartRequest::default_instance_ = new StartRequest();
  StartResponse::default_instance_ = new StartResponse();
  PveContinuePlayRequest::default_instance_ = new PveContinuePlayRequest();
  PveStarRequest::default_instance_ = new PveStarRequest();
  PveStarResponse::default_instance_ = new PveStarResponse();
  FillUnitRequest::default_instance_ = new FillUnitRequest();
  FillUnitResponse::default_instance_ = new FillUnitResponse();
  FillUnitReviveRequest::default_instance_ = new FillUnitReviveRequest();
  FillUnitReviveResponse::default_instance_ = new FillUnitReviveResponse();
  QiangZhiFillUnitRequest::default_instance_ = new QiangZhiFillUnitRequest();
  QiangZhiFillUnitResponse::default_instance_ = new QiangZhiFillUnitResponse();
  MoveRequest::default_instance_ = new MoveRequest();
  MoveResponse::default_instance_ = new MoveResponse();
  GiveUpRequest::default_instance_ = new GiveUpRequest();
  GiveUpResponse::default_instance_ = new GiveUpResponse();
  RemoveRequest::default_instance_ = new RemoveRequest();
  RemoveResponse::default_instance_ = new RemoveResponse();
  ActionCountResponse::default_instance_ = new ActionCountResponse();
  FightSpirit::default_instance_ = new FightSpirit();
  VerifyRequest::default_instance_ = new VerifyRequest();
  VerifyResponse::default_instance_ = new VerifyResponse();
  MajorSkillRequest::default_instance_ = new MajorSkillRequest();
  MajorSkillResponse::default_instance_ = new MajorSkillResponse();
  MajorSkillProto::default_instance_ = new MajorSkillProto();
  CoordinateProto::default_instance_ = new CoordinateProto();
  CoordinateEffectProto::default_instance_ = new CoordinateEffectProto();
  FightThtoughRewardRequest::default_instance_ = new FightThtoughRewardRequest();
  FightRewardRequest::default_instance_ = new FightRewardRequest();
  FightRewardResponse::default_instance_ = new FightRewardResponse();
  FightRewardDropItems::default_instance_ = new FightRewardDropItems();
  FightRunAwayRequest::default_instance_ = new FightRunAwayRequest();
  FightRunAwayResponse::default_instance_ = new FightRunAwayResponse();
  EnemyExitResponse::default_instance_ = new EnemyExitResponse();
  EnemyResumeResponse::default_instance_ = new EnemyResumeResponse();
  FightLogRequest::default_instance_ = new FightLogRequest();
  FightReviveRequest::default_instance_ = new FightReviveRequest();
  FightReviveResponse::default_instance_ = new FightReviveResponse();
  FightFixMapRequest::default_instance_ = new FightFixMapRequest();
  FightFixMapResponse::default_instance_ = new FightFixMapResponse();
  FightFixAttackUnit::default_instance_ = new FightFixAttackUnit();
  FightFixBuff::default_instance_ = new FightFixBuff();
  EnterBossRequest::default_instance_ = new EnterBossRequest();
  EnterBossResponse::default_instance_ = new EnterBossResponse();
  BossBuffModel::default_instance_ = new BossBuffModel();
  BossRankModel::default_instance_ = new BossRankModel();
  AtkBossRequest::default_instance_ = new AtkBossRequest();
  AtkBossResponse::default_instance_ = new AtkBossResponse();
  BossCurrStateRequest::default_instance_ = new BossCurrStateRequest();
  BossCurrStateResponse::default_instance_ = new BossCurrStateResponse();
  MainBossRequest::default_instance_ = new MainBossRequest();
  MainBossResponse::default_instance_ = new MainBossResponse();
  BossDamageRankRequest::default_instance_ = new BossDamageRankRequest();
  BossDamageRankResponse::default_instance_ = new BossDamageRankResponse();
  BossRankInfo::default_instance_ = new BossRankInfo();
  GetBossBuffRequest::default_instance_ = new GetBossBuffRequest();
  GetBossBuffResponse::default_instance_ = new GetBossBuffResponse();
  BossEndRewardResponse::default_instance_ = new BossEndRewardResponse();
  FightPvpRewardRequest::default_instance_ = new FightPvpRewardRequest();
  FightPvpRewardResponse::default_instance_ = new FightPvpRewardResponse();
  FightMatrixRequest::default_instance_->InitAsDefaultInstance();
  FightMatrixResponse::default_instance_->InitAsDefaultInstance();
  StartStatePVPResponse::default_instance_->InitAsDefaultInstance();
  StartStatePVERequest::default_instance_->InitAsDefaultInstance();
  StartStatePVEResponse::default_instance_->InitAsDefaultInstance();
  StartStateItemModel::default_instance_->InitAsDefaultInstance();
  StartRequest::default_instance_->InitAsDefaultInstance();
  StartResponse::default_instance_->InitAsDefaultInstance();
  PveContinuePlayRequest::default_instance_->InitAsDefaultInstance();
  PveStarRequest::default_instance_->InitAsDefaultInstance();
  PveStarResponse::default_instance_->InitAsDefaultInstance();
  FillUnitRequest::default_instance_->InitAsDefaultInstance();
  FillUnitResponse::default_instance_->InitAsDefaultInstance();
  FillUnitReviveRequest::default_instance_->InitAsDefaultInstance();
  FillUnitReviveResponse::default_instance_->InitAsDefaultInstance();
  QiangZhiFillUnitRequest::default_instance_->InitAsDefaultInstance();
  QiangZhiFillUnitResponse::default_instance_->InitAsDefaultInstance();
  MoveRequest::default_instance_->InitAsDefaultInstance();
  MoveResponse::default_instance_->InitAsDefaultInstance();
  GiveUpRequest::default_instance_->InitAsDefaultInstance();
  GiveUpResponse::default_instance_->InitAsDefaultInstance();
  RemoveRequest::default_instance_->InitAsDefaultInstance();
  RemoveResponse::default_instance_->InitAsDefaultInstance();
  ActionCountResponse::default_instance_->InitAsDefaultInstance();
  FightSpirit::default_instance_->InitAsDefaultInstance();
  VerifyRequest::default_instance_->InitAsDefaultInstance();
  VerifyResponse::default_instance_->InitAsDefaultInstance();
  MajorSkillRequest::default_instance_->InitAsDefaultInstance();
  MajorSkillResponse::default_instance_->InitAsDefaultInstance();
  MajorSkillProto::default_instance_->InitAsDefaultInstance();
  CoordinateProto::default_instance_->InitAsDefaultInstance();
  CoordinateEffectProto::default_instance_->InitAsDefaultInstance();
  FightThtoughRewardRequest::default_instance_->InitAsDefaultInstance();
  FightRewardRequest::default_instance_->InitAsDefaultInstance();
  FightRewardResponse::default_instance_->InitAsDefaultInstance();
  FightRewardDropItems::default_instance_->InitAsDefaultInstance();
  FightRunAwayRequest::default_instance_->InitAsDefaultInstance();
  FightRunAwayResponse::default_instance_->InitAsDefaultInstance();
  EnemyExitResponse::default_instance_->InitAsDefaultInstance();
  EnemyResumeResponse::default_instance_->InitAsDefaultInstance();
  FightLogRequest::default_instance_->InitAsDefaultInstance();
  FightReviveRequest::default_instance_->InitAsDefaultInstance();
  FightReviveResponse::default_instance_->InitAsDefaultInstance();
  FightFixMapRequest::default_instance_->InitAsDefaultInstance();
  FightFixMapResponse::default_instance_->InitAsDefaultInstance();
  FightFixAttackUnit::default_instance_->InitAsDefaultInstance();
  FightFixBuff::default_instance_->InitAsDefaultInstance();
  EnterBossRequest::default_instance_->InitAsDefaultInstance();
  EnterBossResponse::default_instance_->InitAsDefaultInstance();
  BossBuffModel::default_instance_->InitAsDefaultInstance();
  BossRankModel::default_instance_->InitAsDefaultInstance();
  AtkBossRequest::default_instance_->InitAsDefaultInstance();
  AtkBossResponse::default_instance_->InitAsDefaultInstance();
  BossCurrStateRequest::default_instance_->InitAsDefaultInstance();
  BossCurrStateResponse::default_instance_->InitAsDefaultInstance();
  MainBossRequest::default_instance_->InitAsDefaultInstance();
  MainBossResponse::default_instance_->InitAsDefaultInstance();
  BossDamageRankRequest::default_instance_->InitAsDefaultInstance();
  BossDamageRankResponse::default_instance_->InitAsDefaultInstance();
  BossRankInfo::default_instance_->InitAsDefaultInstance();
  GetBossBuffRequest::default_instance_->InitAsDefaultInstance();
  GetBossBuffResponse::default_instance_->InitAsDefaultInstance();
  BossEndRewardResponse::default_instance_->InitAsDefaultInstance();
  FightPvpRewardRequest::default_instance_->InitAsDefaultInstance();
  FightPvpRewardResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FightBaseModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FightBaseModule_2eproto_once_);
void protobuf_AddDesc_FightBaseModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FightBaseModule_2eproto_once_,
                 &protobuf_AddDesc_FightBaseModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FightBaseModule_2eproto {
  StaticDescriptorInitializer_FightBaseModule_2eproto() {
    protobuf_AddDesc_FightBaseModule_2eproto();
  }
} static_descriptor_initializer_FightBaseModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FightMatrixRequest::FightMatrixRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightMatrixRequest)
}

void FightMatrixRequest::InitAsDefaultInstance() {
}

FightMatrixRequest::FightMatrixRequest(const FightMatrixRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightMatrixRequest)
}

void FightMatrixRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightMatrixRequest::~FightMatrixRequest() {
  // @@protoc_insertion_point(destructor:main.FightMatrixRequest)
  SharedDtor();
}

void FightMatrixRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightMatrixRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightMatrixRequest& FightMatrixRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightMatrixRequest* FightMatrixRequest::default_instance_ = NULL;

FightMatrixRequest* FightMatrixRequest::New() const {
  return new FightMatrixRequest;
}

void FightMatrixRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightMatrixRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightMatrixRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightMatrixRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightMatrixRequest)
  return false;
#undef DO_
}

void FightMatrixRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightMatrixRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightMatrixRequest)
}

int FightMatrixRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightMatrixRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightMatrixRequest*>(&from));
}

void FightMatrixRequest::MergeFrom(const FightMatrixRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightMatrixRequest::CopyFrom(const FightMatrixRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightMatrixRequest::IsInitialized() const {

  return true;
}

void FightMatrixRequest::Swap(FightMatrixRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightMatrixRequest::GetTypeName() const {
  return "main.FightMatrixRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightMatrixResponse::kSpiritsYouFieldNumber;
const int FightMatrixResponse::kSpiritsHimFieldNumber;
#endif  // !_MSC_VER

FightMatrixResponse::FightMatrixResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightMatrixResponse)
}

void FightMatrixResponse::InitAsDefaultInstance() {
}

FightMatrixResponse::FightMatrixResponse(const FightMatrixResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightMatrixResponse)
}

void FightMatrixResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightMatrixResponse::~FightMatrixResponse() {
  // @@protoc_insertion_point(destructor:main.FightMatrixResponse)
  SharedDtor();
}

void FightMatrixResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightMatrixResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightMatrixResponse& FightMatrixResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightMatrixResponse* FightMatrixResponse::default_instance_ = NULL;

FightMatrixResponse* FightMatrixResponse::New() const {
  return new FightMatrixResponse;
}

void FightMatrixResponse::Clear() {
  spiritsyou_.Clear();
  spiritshim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightMatrixResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightMatrixResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.FightSpirit spiritsYou = 1;
      case 1: {
        if (tag == 10) {
         parse_spiritsYou:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spiritsyou()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_spiritsYou;
        if (input->ExpectTag(18)) goto parse_spiritsHim;
        break;
      }

      // repeated .main.FightSpirit spiritsHim = 2;
      case 2: {
        if (tag == 18) {
         parse_spiritsHim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spiritshim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_spiritsHim;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightMatrixResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightMatrixResponse)
  return false;
#undef DO_
}

void FightMatrixResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightMatrixResponse)
  // repeated .main.FightSpirit spiritsYou = 1;
  for (int i = 0; i < this->spiritsyou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->spiritsyou(i), output);
  }

  // repeated .main.FightSpirit spiritsHim = 2;
  for (int i = 0; i < this->spiritshim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->spiritshim(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightMatrixResponse)
}

int FightMatrixResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.FightSpirit spiritsYou = 1;
  total_size += 1 * this->spiritsyou_size();
  for (int i = 0; i < this->spiritsyou_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spiritsyou(i));
  }

  // repeated .main.FightSpirit spiritsHim = 2;
  total_size += 1 * this->spiritshim_size();
  for (int i = 0; i < this->spiritshim_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spiritshim(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightMatrixResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightMatrixResponse*>(&from));
}

void FightMatrixResponse::MergeFrom(const FightMatrixResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  spiritsyou_.MergeFrom(from.spiritsyou_);
  spiritshim_.MergeFrom(from.spiritshim_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightMatrixResponse::CopyFrom(const FightMatrixResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightMatrixResponse::IsInitialized() const {

  return true;
}

void FightMatrixResponse::Swap(FightMatrixResponse* other) {
  if (other != this) {
    spiritsyou_.Swap(&other->spiritsyou_);
    spiritshim_.Swap(&other->spiritshim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightMatrixResponse::GetTypeName() const {
  return "main.FightMatrixResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int StartStatePVPResponse::kStateFieldNumber;
const int StartStatePVPResponse::kFailMsgFieldNumber;
const int StartStatePVPResponse::kNameFieldNumber;
const int StartStatePVPResponse::kTnameFieldNumber;
const int StartStatePVPResponse::kImageFieldNumber;
const int StartStatePVPResponse::kTImageFieldNumber;
const int StartStatePVPResponse::kMajorPositionFieldNumber;
const int StartStatePVPResponse::kTmajorPositionFieldNumber;
const int StartStatePVPResponse::kItemIdFieldNumber;
const int StartStatePVPResponse::kTItemIdFieldNumber;
const int StartStatePVPResponse::kNationFieldNumber;
const int StartStatePVPResponse::kTNationFieldNumber;
const int StartStatePVPResponse::kIsAIFieldNumber;
const int StartStatePVPResponse::kBranchTypeFieldNumber;
#endif  // !_MSC_VER

StartStatePVPResponse::StartStatePVPResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.StartStatePVPResponse)
}

void StartStatePVPResponse::InitAsDefaultInstance() {
}

StartStatePVPResponse::StartStatePVPResponse(const StartStatePVPResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.StartStatePVPResponse)
}

void StartStatePVPResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = 0;
  timage_ = 0;
  majorposition_ = 0;
  tmajorposition_ = 0;
  nation_ = 0;
  tnation_ = 0;
  isai_ = 0;
  branchtype_ = 201;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartStatePVPResponse::~StartStatePVPResponse() {
  // @@protoc_insertion_point(destructor:main.StartStatePVPResponse)
  SharedDtor();
}

void StartStatePVPResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartStatePVPResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartStatePVPResponse& StartStatePVPResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

StartStatePVPResponse* StartStatePVPResponse::default_instance_ = NULL;

StartStatePVPResponse* StartStatePVPResponse::New() const {
  return new StartStatePVPResponse;
}

void StartStatePVPResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartStatePVPResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, image_);
    ZR_(timage_, majorposition_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tname()) {
      if (tname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tname_->clear();
      }
    }
    tmajorposition_ = 0;
  }
  if (_has_bits_[8 / 32] & 15360) {
    ZR_(tnation_, isai_);
    nation_ = 0;
    branchtype_ = 201;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemid_.Clear();
  titemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StartStatePVPResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.StartStatePVPResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tname;
        break;
      }

      // optional string tname = 4;
      case 4: {
        if (tag == 34) {
         parse_tname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image;
        break;
      }

      // optional int32 image = 5;
      case 5: {
        if (tag == 40) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tImage;
        break;
      }

      // optional int32 tImage = 6;
      case 6: {
        if (tag == 48) {
         parse_tImage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timage_)));
          set_has_timage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_majorPosition;
        break;
      }

      // optional int32 majorPosition = 7;
      case 7: {
        if (tag == 56) {
         parse_majorPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorposition_)));
          set_has_majorposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tmajorPosition;
        break;
      }

      // optional int32 tmajorPosition = 8;
      case 8: {
        if (tag == 64) {
         parse_tmajorPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmajorposition_)));
          set_has_tmajorposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemId;
        break;
      }

      // repeated .main.StartStateItemModel itemId = 9;
      case 9: {
        if (tag == 74) {
         parse_itemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_itemId;
        if (input->ExpectTag(82)) goto parse_tItemId;
        break;
      }

      // repeated .main.StartStateItemModel tItemId = 10;
      case 10: {
        if (tag == 82) {
         parse_tItemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titemid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tItemId;
        if (input->ExpectTag(88)) goto parse_nation;
        break;
      }

      // optional int32 nation = 11;
      case 11: {
        if (tag == 88) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_tNation;
        break;
      }

      // optional int32 tNation = 12;
      case 12: {
        if (tag == 96) {
         parse_tNation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tnation_)));
          set_has_tnation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_isAI;
        break;
      }

      // optional int32 isAI = 13;
      case 13: {
        if (tag == 104) {
         parse_isAI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isai_)));
          set_has_isai();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_branchType;
        break;
      }

      // optional int32 branchType = 14 [default = 201];
      case 14: {
        if (tag == 112) {
         parse_branchType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branchtype_)));
          set_has_branchtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.StartStatePVPResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.StartStatePVPResponse)
  return false;
#undef DO_
}

void StartStatePVPResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.StartStatePVPResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tname = 4;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tname(), output);
  }

  // optional int32 image = 5;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->image(), output);
  }

  // optional int32 tImage = 6;
  if (has_timage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timage(), output);
  }

  // optional int32 majorPosition = 7;
  if (has_majorposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->majorposition(), output);
  }

  // optional int32 tmajorPosition = 8;
  if (has_tmajorposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tmajorposition(), output);
  }

  // repeated .main.StartStateItemModel itemId = 9;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->itemid(i), output);
  }

  // repeated .main.StartStateItemModel tItemId = 10;
  for (int i = 0; i < this->titemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->titemid(i), output);
  }

  // optional int32 nation = 11;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nation(), output);
  }

  // optional int32 tNation = 12;
  if (has_tnation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tnation(), output);
  }

  // optional int32 isAI = 13;
  if (has_isai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->isai(), output);
  }

  // optional int32 branchType = 14 [default = 201];
  if (has_branchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->branchtype(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.StartStatePVPResponse)
}

int StartStatePVPResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tname = 4;
    if (has_tname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tname());
    }

    // optional int32 image = 5;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

    // optional int32 tImage = 6;
    if (has_timage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timage());
    }

    // optional int32 majorPosition = 7;
    if (has_majorposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorposition());
    }

    // optional int32 tmajorPosition = 8;
    if (has_tmajorposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmajorposition());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 nation = 11;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional int32 tNation = 12;
    if (has_tnation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tnation());
    }

    // optional int32 isAI = 13;
    if (has_isai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isai());
    }

    // optional int32 branchType = 14 [default = 201];
    if (has_branchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branchtype());
    }

  }
  // repeated .main.StartStateItemModel itemId = 9;
  total_size += 1 * this->itemid_size();
  for (int i = 0; i < this->itemid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemid(i));
  }

  // repeated .main.StartStateItemModel tItemId = 10;
  total_size += 1 * this->titemid_size();
  for (int i = 0; i < this->titemid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titemid(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStatePVPResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartStatePVPResponse*>(&from));
}

void StartStatePVPResponse::MergeFrom(const StartStatePVPResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  titemid_.MergeFrom(from.titemid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tname()) {
      set_tname(from.tname());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_timage()) {
      set_timage(from.timage());
    }
    if (from.has_majorposition()) {
      set_majorposition(from.majorposition());
    }
    if (from.has_tmajorposition()) {
      set_tmajorposition(from.tmajorposition());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_tnation()) {
      set_tnation(from.tnation());
    }
    if (from.has_isai()) {
      set_isai(from.isai());
    }
    if (from.has_branchtype()) {
      set_branchtype(from.branchtype());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StartStatePVPResponse::CopyFrom(const StartStatePVPResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStatePVPResponse::IsInitialized() const {

  return true;
}

void StartStatePVPResponse::Swap(StartStatePVPResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    std::swap(name_, other->name_);
    std::swap(tname_, other->tname_);
    std::swap(image_, other->image_);
    std::swap(timage_, other->timage_);
    std::swap(majorposition_, other->majorposition_);
    std::swap(tmajorposition_, other->tmajorposition_);
    itemid_.Swap(&other->itemid_);
    titemid_.Swap(&other->titemid_);
    std::swap(nation_, other->nation_);
    std::swap(tnation_, other->tnation_);
    std::swap(isai_, other->isai_);
    std::swap(branchtype_, other->branchtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartStatePVPResponse::GetTypeName() const {
  return "main.StartStatePVPResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int StartStatePVERequest::kStoryIdFieldNumber;
const int StartStatePVERequest::kPlotIdFieldNumber;
const int StartStatePVERequest::kCooIdFieldNumber;
#endif  // !_MSC_VER

StartStatePVERequest::StartStatePVERequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.StartStatePVERequest)
}

void StartStatePVERequest::InitAsDefaultInstance() {
}

StartStatePVERequest::StartStatePVERequest(const StartStatePVERequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.StartStatePVERequest)
}

void StartStatePVERequest::SharedCtor() {
  _cached_size_ = 0;
  storyid_ = 0;
  plotid_ = 0;
  cooid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartStatePVERequest::~StartStatePVERequest() {
  // @@protoc_insertion_point(destructor:main.StartStatePVERequest)
  SharedDtor();
}

void StartStatePVERequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartStatePVERequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartStatePVERequest& StartStatePVERequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

StartStatePVERequest* StartStatePVERequest::default_instance_ = NULL;

StartStatePVERequest* StartStatePVERequest::New() const {
  return new StartStatePVERequest;
}

void StartStatePVERequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartStatePVERequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(storyid_, cooid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StartStatePVERequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.StartStatePVERequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 storyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storyid_)));
          set_has_storyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plotId;
        break;
      }

      // optional int32 plotId = 2;
      case 2: {
        if (tag == 16) {
         parse_plotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plotid_)));
          set_has_plotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cooId;
        break;
      }

      // optional int32 cooId = 3;
      case 3: {
        if (tag == 24) {
         parse_cooId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooid_)));
          set_has_cooid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.StartStatePVERequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.StartStatePVERequest)
  return false;
#undef DO_
}

void StartStatePVERequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.StartStatePVERequest)
  // optional int32 storyId = 1;
  if (has_storyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->storyid(), output);
  }

  // optional int32 plotId = 2;
  if (has_plotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plotid(), output);
  }

  // optional int32 cooId = 3;
  if (has_cooid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cooid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.StartStatePVERequest)
}

int StartStatePVERequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 storyId = 1;
    if (has_storyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storyid());
    }

    // optional int32 plotId = 2;
    if (has_plotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plotid());
    }

    // optional int32 cooId = 3;
    if (has_cooid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStatePVERequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartStatePVERequest*>(&from));
}

void StartStatePVERequest::MergeFrom(const StartStatePVERequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storyid()) {
      set_storyid(from.storyid());
    }
    if (from.has_plotid()) {
      set_plotid(from.plotid());
    }
    if (from.has_cooid()) {
      set_cooid(from.cooid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StartStatePVERequest::CopyFrom(const StartStatePVERequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStatePVERequest::IsInitialized() const {

  return true;
}

void StartStatePVERequest::Swap(StartStatePVERequest* other) {
  if (other != this) {
    std::swap(storyid_, other->storyid_);
    std::swap(plotid_, other->plotid_);
    std::swap(cooid_, other->cooid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartStatePVERequest::GetTypeName() const {
  return "main.StartStatePVERequest";
}


// ===================================================================

#ifndef _MSC_VER
const int StartStatePVEResponse::kStateFieldNumber;
const int StartStatePVEResponse::kFightIdFieldNumber;
const int StartStatePVEResponse::kNameFieldNumber;
const int StartStatePVEResponse::kTnameFieldNumber;
const int StartStatePVEResponse::kImageFieldNumber;
const int StartStatePVEResponse::kTImageFieldNumber;
const int StartStatePVEResponse::kMajorPositionFieldNumber;
const int StartStatePVEResponse::kTmajorPositionFieldNumber;
const int StartStatePVEResponse::kItemFieldNumber;
const int StartStatePVEResponse::kTItemFieldNumber;
const int StartStatePVEResponse::kNationFieldNumber;
const int StartStatePVEResponse::kTNationFieldNumber;
const int StartStatePVEResponse::kBranchTypeFieldNumber;
const int StartStatePVEResponse::kSurvivalLevelFieldNumber;
const int StartStatePVEResponse::kNeedVerifyFieldNumber;
#endif  // !_MSC_VER

StartStatePVEResponse::StartStatePVEResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.StartStatePVEResponse)
}

void StartStatePVEResponse::InitAsDefaultInstance() {
}

StartStatePVEResponse::StartStatePVEResponse(const StartStatePVEResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.StartStatePVEResponse)
}

void StartStatePVEResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  fightid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = 0;
  timage_ = 0;
  majorposition_ = 0;
  tmajorposition_ = 0;
  nation_ = 0;
  tnation_ = 0;
  branchtype_ = 101;
  survivallevel_ = -1;
  needverify_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartStatePVEResponse::~StartStatePVEResponse() {
  // @@protoc_insertion_point(destructor:main.StartStatePVEResponse)
  SharedDtor();
}

void StartStatePVEResponse::SharedDtor() {
  if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fightid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartStatePVEResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartStatePVEResponse& StartStatePVEResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

StartStatePVEResponse* StartStatePVEResponse::default_instance_ = NULL;

StartStatePVEResponse* StartStatePVEResponse::New() const {
  return new StartStatePVEResponse;
}

void StartStatePVEResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartStatePVEResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, image_);
    ZR_(timage_, majorposition_);
    if (has_fightid()) {
      if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fightid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tname()) {
      if (tname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tname_->clear();
      }
    }
    tmajorposition_ = 0;
  }
  if (_has_bits_[8 / 32] & 31744) {
    nation_ = 0;
    tnation_ = 0;
    branchtype_ = 101;
    survivallevel_ = -1;
    needverify_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_.Clear();
  titem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StartStatePVEResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.StartStatePVEResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fightId;
        break;
      }

      // optional string fightId = 2;
      case 2: {
        if (tag == 18) {
         parse_fightId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fightid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tname;
        break;
      }

      // optional string tname = 4;
      case 4: {
        if (tag == 34) {
         parse_tname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image;
        break;
      }

      // optional int32 image = 5;
      case 5: {
        if (tag == 40) {
         parse_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
          set_has_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tImage;
        break;
      }

      // optional int32 tImage = 6;
      case 6: {
        if (tag == 48) {
         parse_tImage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timage_)));
          set_has_timage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_majorPosition;
        break;
      }

      // optional int32 majorPosition = 7;
      case 7: {
        if (tag == 56) {
         parse_majorPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorposition_)));
          set_has_majorposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tmajorPosition;
        break;
      }

      // optional int32 tmajorPosition = 8;
      case 8: {
        if (tag == 64) {
         parse_tmajorPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmajorposition_)));
          set_has_tmajorposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_item;
        break;
      }

      // repeated .main.StartStateItemModel item = 9;
      case 9: {
        if (tag == 74) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_item;
        if (input->ExpectTag(82)) goto parse_tItem;
        break;
      }

      // repeated .main.StartStateItemModel tItem = 10;
      case 10: {
        if (tag == 82) {
         parse_tItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tItem;
        if (input->ExpectTag(88)) goto parse_nation;
        break;
      }

      // optional int32 nation = 11;
      case 11: {
        if (tag == 88) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_tNation;
        break;
      }

      // optional int32 tNation = 12;
      case 12: {
        if (tag == 96) {
         parse_tNation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tnation_)));
          set_has_tnation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_branchType;
        break;
      }

      // optional int32 branchType = 13 [default = 101];
      case 13: {
        if (tag == 104) {
         parse_branchType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branchtype_)));
          set_has_branchtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_survivalLevel;
        break;
      }

      // optional int32 survivalLevel = 14 [default = -1];
      case 14: {
        if (tag == 112) {
         parse_survivalLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &survivallevel_)));
          set_has_survivallevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_needVerify;
        break;
      }

      // optional bool needVerify = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_needVerify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needverify_)));
          set_has_needverify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.StartStatePVEResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.StartStatePVEResponse)
  return false;
#undef DO_
}

void StartStatePVEResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.StartStatePVEResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string fightId = 2;
  if (has_fightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fightid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string tname = 4;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tname(), output);
  }

  // optional int32 image = 5;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->image(), output);
  }

  // optional int32 tImage = 6;
  if (has_timage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timage(), output);
  }

  // optional int32 majorPosition = 7;
  if (has_majorposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->majorposition(), output);
  }

  // optional int32 tmajorPosition = 8;
  if (has_tmajorposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tmajorposition(), output);
  }

  // repeated .main.StartStateItemModel item = 9;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->item(i), output);
  }

  // repeated .main.StartStateItemModel tItem = 10;
  for (int i = 0; i < this->titem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->titem(i), output);
  }

  // optional int32 nation = 11;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nation(), output);
  }

  // optional int32 tNation = 12;
  if (has_tnation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tnation(), output);
  }

  // optional int32 branchType = 13 [default = 101];
  if (has_branchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->branchtype(), output);
  }

  // optional int32 survivalLevel = 14 [default = -1];
  if (has_survivallevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->survivallevel(), output);
  }

  // optional bool needVerify = 15 [default = true];
  if (has_needverify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->needverify(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.StartStatePVEResponse)
}

int StartStatePVEResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string fightId = 2;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fightid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tname = 4;
    if (has_tname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tname());
    }

    // optional int32 image = 5;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image());
    }

    // optional int32 tImage = 6;
    if (has_timage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timage());
    }

    // optional int32 majorPosition = 7;
    if (has_majorposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorposition());
    }

    // optional int32 tmajorPosition = 8;
    if (has_tmajorposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmajorposition());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 nation = 11;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional int32 tNation = 12;
    if (has_tnation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tnation());
    }

    // optional int32 branchType = 13 [default = 101];
    if (has_branchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branchtype());
    }

    // optional int32 survivalLevel = 14 [default = -1];
    if (has_survivallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->survivallevel());
    }

    // optional bool needVerify = 15 [default = true];
    if (has_needverify()) {
      total_size += 1 + 1;
    }

  }
  // repeated .main.StartStateItemModel item = 9;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .main.StartStateItemModel tItem = 10;
  total_size += 1 * this->titem_size();
  for (int i = 0; i < this->titem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titem(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStatePVEResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartStatePVEResponse*>(&from));
}

void StartStatePVEResponse::MergeFrom(const StartStatePVEResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  titem_.MergeFrom(from.titem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_fightid()) {
      set_fightid(from.fightid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tname()) {
      set_tname(from.tname());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_timage()) {
      set_timage(from.timage());
    }
    if (from.has_majorposition()) {
      set_majorposition(from.majorposition());
    }
    if (from.has_tmajorposition()) {
      set_tmajorposition(from.tmajorposition());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_tnation()) {
      set_tnation(from.tnation());
    }
    if (from.has_branchtype()) {
      set_branchtype(from.branchtype());
    }
    if (from.has_survivallevel()) {
      set_survivallevel(from.survivallevel());
    }
    if (from.has_needverify()) {
      set_needverify(from.needverify());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StartStatePVEResponse::CopyFrom(const StartStatePVEResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStatePVEResponse::IsInitialized() const {

  return true;
}

void StartStatePVEResponse::Swap(StartStatePVEResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(fightid_, other->fightid_);
    std::swap(name_, other->name_);
    std::swap(tname_, other->tname_);
    std::swap(image_, other->image_);
    std::swap(timage_, other->timage_);
    std::swap(majorposition_, other->majorposition_);
    std::swap(tmajorposition_, other->tmajorposition_);
    item_.Swap(&other->item_);
    titem_.Swap(&other->titem_);
    std::swap(nation_, other->nation_);
    std::swap(tnation_, other->tnation_);
    std::swap(branchtype_, other->branchtype_);
    std::swap(survivallevel_, other->survivallevel_);
    std::swap(needverify_, other->needverify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartStatePVEResponse::GetTypeName() const {
  return "main.StartStatePVEResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int StartStateItemModel::kItemIdFieldNumber;
const int StartStateItemModel::kItemLevelFieldNumber;
#endif  // !_MSC_VER

StartStateItemModel::StartStateItemModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.StartStateItemModel)
}

void StartStateItemModel::InitAsDefaultInstance() {
}

StartStateItemModel::StartStateItemModel(const StartStateItemModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.StartStateItemModel)
}

void StartStateItemModel::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartStateItemModel::~StartStateItemModel() {
  // @@protoc_insertion_point(destructor:main.StartStateItemModel)
  SharedDtor();
}

void StartStateItemModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartStateItemModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartStateItemModel& StartStateItemModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

StartStateItemModel* StartStateItemModel::default_instance_ = NULL;

StartStateItemModel* StartStateItemModel::New() const {
  return new StartStateItemModel;
}

void StartStateItemModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartStateItemModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, itemlevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StartStateItemModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.StartStateItemModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemLevel;
        break;
      }

      // optional int32 itemLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_itemLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemlevel_)));
          set_has_itemlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.StartStateItemModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.StartStateItemModel)
  return false;
#undef DO_
}

void StartStateItemModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.StartStateItemModel)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemLevel = 2;
  if (has_itemlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemlevel(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.StartStateItemModel)
}

int StartStateItemModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemLevel = 2;
    if (has_itemlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemlevel());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStateItemModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartStateItemModel*>(&from));
}

void StartStateItemModel::MergeFrom(const StartStateItemModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemlevel()) {
      set_itemlevel(from.itemlevel());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StartStateItemModel::CopyFrom(const StartStateItemModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStateItemModel::IsInitialized() const {

  return true;
}

void StartStateItemModel::Swap(StartStateItemModel* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemlevel_, other->itemlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartStateItemModel::GetTypeName() const {
  return "main.StartStateItemModel";
}


// ===================================================================

#ifndef _MSC_VER
const int StartRequest::kEnemyRoleIdFieldNumber;
#endif  // !_MSC_VER

StartRequest::StartRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.StartRequest)
}

void StartRequest::InitAsDefaultInstance() {
}

StartRequest::StartRequest(const StartRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.StartRequest)
}

void StartRequest::SharedCtor() {
  _cached_size_ = 0;
  enemyroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:main.StartRequest)
  SharedDtor();
}

void StartRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartRequest& StartRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

StartRequest* StartRequest::default_instance_ = NULL;

StartRequest* StartRequest::New() const {
  return new StartRequest;
}

void StartRequest::Clear() {
  enemyroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.StartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enemyRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemyroleid_)));
          set_has_enemyroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.StartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.StartRequest)
  return false;
#undef DO_
}

void StartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.StartRequest)
  // optional int32 enemyRoleId = 1;
  if (has_enemyroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enemyroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.StartRequest)
}

int StartRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enemyRoleId = 1;
    if (has_enemyroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemyroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartRequest*>(&from));
}

void StartRequest::MergeFrom(const StartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyroleid()) {
      set_enemyroleid(from.enemyroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StartRequest::CopyFrom(const StartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {

  return true;
}

void StartRequest::Swap(StartRequest* other) {
  if (other != this) {
    std::swap(enemyroleid_, other->enemyroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartRequest::GetTypeName() const {
  return "main.StartRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int StartResponse::kStateFieldNumber;
const int StartResponse::kFailMsgFieldNumber;
const int StartResponse::kSpiritsYouFieldNumber;
const int StartResponse::kSpiritsHimFieldNumber;
const int StartResponse::kIsFirstAttackFieldNumber;
const int StartResponse::kYouHpFieldNumber;
const int StartResponse::kHimHpFieldNumber;
const int StartResponse::kYouActionCountFieldNumber;
const int StartResponse::kHimActionCountFieldNumber;
const int StartResponse::kFidFieldNumber;
const int StartResponse::kLordIdFieldNumber;
const int StartResponse::kLordNameFieldNumber;
const int StartResponse::kLordSkillBelongIdFieldNumber;
const int StartResponse::kLordSkillIdFieldNumber;
const int StartResponse::kTlordIdFieldNumber;
const int StartResponse::kTlordNameFieldNumber;
const int StartResponse::kTlordSkillBelongIdFieldNumber;
const int StartResponse::kTlordSkillIdFieldNumber;
const int StartResponse::kTlordSkillLevelFieldNumber;
const int StartResponse::kLordCdRoundFieldNumber;
const int StartResponse::kTlordCdRoundFieldNumber;
const int StartResponse::kClientTypeFieldNumber;
const int StartResponse::kNationFieldNumber;
const int StartResponse::kTnationFieldNumber;
const int StartResponse::kLordAtkModeFieldNumber;
const int StartResponse::kTlordAtkModeFieldNumber;
const int StartResponse::kSpeedFieldNumber;
const int StartResponse::kTspeedFieldNumber;
const int StartResponse::kYouActionCountByAddFieldNumber;
const int StartResponse::kHimActionCountByAddFieldNumber;
const int StartResponse::kMapIdFieldNumber;
const int StartResponse::kRoleIdFieldNumber;
const int StartResponse::kTRoleIdFieldNumber;
const int StartResponse::kMaxFillUnitFieldNumber;
const int StartResponse::kTMaxFillUnitFieldNumber;
const int StartResponse::kActionTImeFieldNumber;
const int StartResponse::kTActionTImeFieldNumber;
const int StartResponse::kYouBaseHpFieldNumber;
const int StartResponse::kHimBaseHpFieldNumber;
#endif  // !_MSC_VER

StartResponse::StartResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.StartResponse)
}

void StartResponse::InitAsDefaultInstance() {
}

StartResponse::StartResponse(const StartResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.StartResponse)
}

void StartResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isfirstattack_ = false;
  youhp_ = 0;
  himhp_ = 0;
  youactioncount_ = 0;
  himactioncount_ = 0;
  fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lordid_ = 0;
  lordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lordskillbelongid_ = 0;
  lordskillid_ = 0;
  tlordid_ = 0;
  tlordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tlordskillbelongid_ = 0;
  tlordskillid_ = 0;
  tlordskilllevel_ = 0;
  lordcdround_ = 0;
  tlordcdround_ = 0;
  clienttype_ = 0;
  nation_ = 0;
  tnation_ = 0;
  lordatkmode_ = 0;
  tlordatkmode_ = 0;
  speed_ = 0;
  tspeed_ = 0;
  youactioncountbyadd_ = 0;
  himactioncountbyadd_ = 0;
  mapid_ = 0;
  roleid_ = 0;
  troleid_ = 0;
  maxfillunit_ = 0;
  tmaxfillunit_ = 0;
  actiontime_ = 0;
  tactiontime_ = 0;
  youbasehp_ = 0;
  himbasehp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartResponse::~StartResponse() {
  // @@protoc_insertion_point(destructor:main.StartResponse)
  SharedDtor();
}

void StartResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  if (fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fid_;
  }
  if (lordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lordname_;
  }
  if (tlordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tlordname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StartResponse& StartResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

StartResponse* StartResponse::default_instance_ = NULL;

StartResponse* StartResponse::New() const {
  return new StartResponse;
}

void StartResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(state_, isfirstattack_);
    ZR_(youhp_, youactioncount_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(lordid_, tlordid_);
    himactioncount_ = 0;
    if (has_fid()) {
      if (fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fid_->clear();
      }
    }
    if (has_lordname()) {
      if (lordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lordname_->clear();
      }
    }
    if (has_tlordname()) {
      if (tlordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tlordname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(tlordskillbelongid_, tnation_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(lordatkmode_, roleid_);
  }
  if (_has_bits_[32 / 32] & 127) {
    ZR_(troleid_, himbasehp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  spiritsyou_.Clear();
  spiritshim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool StartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.StartResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spiritsYou;
        break;
      }

      // repeated .main.FightSpirit spiritsYou = 3;
      case 3: {
        if (tag == 26) {
         parse_spiritsYou:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spiritsyou()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spiritsYou;
        if (input->ExpectTag(34)) goto parse_spiritsHim;
        break;
      }

      // repeated .main.FightSpirit spiritsHim = 4;
      case 4: {
        if (tag == 34) {
         parse_spiritsHim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spiritshim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_spiritsHim;
        if (input->ExpectTag(40)) goto parse_isFirstAttack;
        break;
      }

      // optional bool isFirstAttack = 5;
      case 5: {
        if (tag == 40) {
         parse_isFirstAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirstattack_)));
          set_has_isfirstattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_youHp;
        break;
      }

      // optional int32 youHp = 6;
      case 6: {
        if (tag == 48) {
         parse_youHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youhp_)));
          set_has_youhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_himHp;
        break;
      }

      // optional int32 himHp = 7;
      case 7: {
        if (tag == 56) {
         parse_himHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himhp_)));
          set_has_himhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_youActionCount;
        break;
      }

      // optional int32 youActionCount = 8;
      case 8: {
        if (tag == 64) {
         parse_youActionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youactioncount_)));
          set_has_youactioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_himActionCount;
        break;
      }

      // optional int32 himActionCount = 9;
      case 9: {
        if (tag == 72) {
         parse_himActionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himactioncount_)));
          set_has_himactioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_fid;
        break;
      }

      // optional string fid = 10;
      case 10: {
        if (tag == 82) {
         parse_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lordId;
        break;
      }

      // optional int32 lordId = 11;
      case 11: {
        if (tag == 88) {
         parse_lordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordid_)));
          set_has_lordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lordName;
        break;
      }

      // optional string lordName = 12;
      case 12: {
        if (tag == 98) {
         parse_lordName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lordname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_lordSkillBelongId;
        break;
      }

      // optional int32 lordSkillBelongId = 13;
      case 13: {
        if (tag == 104) {
         parse_lordSkillBelongId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillbelongid_)));
          set_has_lordskillbelongid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_lordSkillId;
        break;
      }

      // optional int32 lordSkillId = 14;
      case 14: {
        if (tag == 112) {
         parse_lordSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillid_)));
          set_has_lordskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_tlordId;
        break;
      }

      // optional int32 tlordId = 15;
      case 15: {
        if (tag == 120) {
         parse_tlordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordid_)));
          set_has_tlordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_tlordName;
        break;
      }

      // optional string tlordName = 16;
      case 16: {
        if (tag == 130) {
         parse_tlordName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tlordname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_tlordSkillBelongId;
        break;
      }

      // optional int32 tlordSkillBelongId = 17;
      case 17: {
        if (tag == 136) {
         parse_tlordSkillBelongId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordskillbelongid_)));
          set_has_tlordskillbelongid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_tlordSkillId;
        break;
      }

      // optional int32 tlordSkillId = 18;
      case 18: {
        if (tag == 144) {
         parse_tlordSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordskillid_)));
          set_has_tlordskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tlordSkillLevel;
        break;
      }

      // optional int32 tlordSkillLevel = 19;
      case 19: {
        if (tag == 152) {
         parse_tlordSkillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordskilllevel_)));
          set_has_tlordskilllevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lordCdRound;
        break;
      }

      // optional int32 lordCdRound = 20;
      case 20: {
        if (tag == 160) {
         parse_lordCdRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordcdround_)));
          set_has_lordcdround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_tlordCdRound;
        break;
      }

      // optional int32 tlordCdRound = 21;
      case 21: {
        if (tag == 168) {
         parse_tlordCdRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordcdround_)));
          set_has_tlordcdround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_clientType;
        break;
      }

      // optional int32 clientType = 22;
      case 22: {
        if (tag == 176) {
         parse_clientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_nation;
        break;
      }

      // optional int32 nation = 23;
      case 23: {
        if (tag == 184) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_tnation;
        break;
      }

      // optional int32 tnation = 24;
      case 24: {
        if (tag == 192) {
         parse_tnation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tnation_)));
          set_has_tnation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_lordAtkMode;
        break;
      }

      // optional int32 lordAtkMode = 25;
      case 25: {
        if (tag == 200) {
         parse_lordAtkMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordatkmode_)));
          set_has_lordatkmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_TlordAtkMode;
        break;
      }

      // optional int32 TlordAtkMode = 26;
      case 26: {
        if (tag == 208) {
         parse_TlordAtkMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordatkmode_)));
          set_has_tlordatkmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_speed;
        break;
      }

      // optional int32 speed = 27;
      case 27: {
        if (tag == 216) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_tspeed;
        break;
      }

      // optional int32 tspeed = 28;
      case 28: {
        if (tag == 224) {
         parse_tspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tspeed_)));
          set_has_tspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_youActionCountByAdd;
        break;
      }

      // optional int32 youActionCountByAdd = 29;
      case 29: {
        if (tag == 232) {
         parse_youActionCountByAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youactioncountbyadd_)));
          set_has_youactioncountbyadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_himActionCountByAdd;
        break;
      }

      // optional int32 himActionCountByAdd = 30;
      case 30: {
        if (tag == 240) {
         parse_himActionCountByAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himactioncountbyadd_)));
          set_has_himactioncountbyadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 31;
      case 31: {
        if (tag == 248) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 32;
      case 32: {
        if (tag == 256) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_tRoleId;
        break;
      }

      // optional int32 tRoleId = 33;
      case 33: {
        if (tag == 264) {
         parse_tRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &troleid_)));
          set_has_troleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_maxFillUnit;
        break;
      }

      // optional int32 maxFillUnit = 34;
      case 34: {
        if (tag == 272) {
         parse_maxFillUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfillunit_)));
          set_has_maxfillunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_tMaxFillUnit;
        break;
      }

      // optional int32 tMaxFillUnit = 35;
      case 35: {
        if (tag == 280) {
         parse_tMaxFillUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmaxfillunit_)));
          set_has_tmaxfillunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_actionTIme;
        break;
      }

      // optional int32 actionTIme = 36;
      case 36: {
        if (tag == 288) {
         parse_actionTIme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontime_)));
          set_has_actiontime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_tActionTIme;
        break;
      }

      // optional int32 tActionTIme = 37;
      case 37: {
        if (tag == 296) {
         parse_tActionTIme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tactiontime_)));
          set_has_tactiontime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_youBaseHp;
        break;
      }

      // optional int32 youBaseHp = 38;
      case 38: {
        if (tag == 304) {
         parse_youBaseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youbasehp_)));
          set_has_youbasehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_himBaseHp;
        break;
      }

      // optional int32 himBaseHp = 39;
      case 39: {
        if (tag == 312) {
         parse_himBaseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himbasehp_)));
          set_has_himbasehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.StartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.StartResponse)
  return false;
#undef DO_
}

void StartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.StartResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // repeated .main.FightSpirit spiritsYou = 3;
  for (int i = 0; i < this->spiritsyou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->spiritsyou(i), output);
  }

  // repeated .main.FightSpirit spiritsHim = 4;
  for (int i = 0; i < this->spiritshim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->spiritshim(i), output);
  }

  // optional bool isFirstAttack = 5;
  if (has_isfirstattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isfirstattack(), output);
  }

  // optional int32 youHp = 6;
  if (has_youhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->youhp(), output);
  }

  // optional int32 himHp = 7;
  if (has_himhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->himhp(), output);
  }

  // optional int32 youActionCount = 8;
  if (has_youactioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->youactioncount(), output);
  }

  // optional int32 himActionCount = 9;
  if (has_himactioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->himactioncount(), output);
  }

  // optional string fid = 10;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->fid(), output);
  }

  // optional int32 lordId = 11;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lordid(), output);
  }

  // optional string lordName = 12;
  if (has_lordname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->lordname(), output);
  }

  // optional int32 lordSkillBelongId = 13;
  if (has_lordskillbelongid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lordskillbelongid(), output);
  }

  // optional int32 lordSkillId = 14;
  if (has_lordskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lordskillid(), output);
  }

  // optional int32 tlordId = 15;
  if (has_tlordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tlordid(), output);
  }

  // optional string tlordName = 16;
  if (has_tlordname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->tlordname(), output);
  }

  // optional int32 tlordSkillBelongId = 17;
  if (has_tlordskillbelongid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tlordskillbelongid(), output);
  }

  // optional int32 tlordSkillId = 18;
  if (has_tlordskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tlordskillid(), output);
  }

  // optional int32 tlordSkillLevel = 19;
  if (has_tlordskilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tlordskilllevel(), output);
  }

  // optional int32 lordCdRound = 20;
  if (has_lordcdround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lordcdround(), output);
  }

  // optional int32 tlordCdRound = 21;
  if (has_tlordcdround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tlordcdround(), output);
  }

  // optional int32 clientType = 22;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->clienttype(), output);
  }

  // optional int32 nation = 23;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nation(), output);
  }

  // optional int32 tnation = 24;
  if (has_tnation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tnation(), output);
  }

  // optional int32 lordAtkMode = 25;
  if (has_lordatkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->lordatkmode(), output);
  }

  // optional int32 TlordAtkMode = 26;
  if (has_tlordatkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tlordatkmode(), output);
  }

  // optional int32 speed = 27;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->speed(), output);
  }

  // optional int32 tspeed = 28;
  if (has_tspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->tspeed(), output);
  }

  // optional int32 youActionCountByAdd = 29;
  if (has_youactioncountbyadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->youactioncountbyadd(), output);
  }

  // optional int32 himActionCountByAdd = 30;
  if (has_himactioncountbyadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->himactioncountbyadd(), output);
  }

  // optional int32 mapId = 31;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->mapid(), output);
  }

  // optional int32 roleId = 32;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->roleid(), output);
  }

  // optional int32 tRoleId = 33;
  if (has_troleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->troleid(), output);
  }

  // optional int32 maxFillUnit = 34;
  if (has_maxfillunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->maxfillunit(), output);
  }

  // optional int32 tMaxFillUnit = 35;
  if (has_tmaxfillunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->tmaxfillunit(), output);
  }

  // optional int32 actionTIme = 36;
  if (has_actiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->actiontime(), output);
  }

  // optional int32 tActionTIme = 37;
  if (has_tactiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->tactiontime(), output);
  }

  // optional int32 youBaseHp = 38;
  if (has_youbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->youbasehp(), output);
  }

  // optional int32 himBaseHp = 39;
  if (has_himbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->himbasehp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.StartResponse)
}

int StartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional bool isFirstAttack = 5;
    if (has_isfirstattack()) {
      total_size += 1 + 1;
    }

    // optional int32 youHp = 6;
    if (has_youhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youhp());
    }

    // optional int32 himHp = 7;
    if (has_himhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himhp());
    }

    // optional int32 youActionCount = 8;
    if (has_youactioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youactioncount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 himActionCount = 9;
    if (has_himactioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himactioncount());
    }

    // optional string fid = 10;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fid());
    }

    // optional int32 lordId = 11;
    if (has_lordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordid());
    }

    // optional string lordName = 12;
    if (has_lordname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lordname());
    }

    // optional int32 lordSkillBelongId = 13;
    if (has_lordskillbelongid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillbelongid());
    }

    // optional int32 lordSkillId = 14;
    if (has_lordskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillid());
    }

    // optional int32 tlordId = 15;
    if (has_tlordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordid());
    }

    // optional string tlordName = 16;
    if (has_tlordname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tlordname());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tlordSkillBelongId = 17;
    if (has_tlordskillbelongid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordskillbelongid());
    }

    // optional int32 tlordSkillId = 18;
    if (has_tlordskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordskillid());
    }

    // optional int32 tlordSkillLevel = 19;
    if (has_tlordskilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordskilllevel());
    }

    // optional int32 lordCdRound = 20;
    if (has_lordcdround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordcdround());
    }

    // optional int32 tlordCdRound = 21;
    if (has_tlordcdround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordcdround());
    }

    // optional int32 clientType = 22;
    if (has_clienttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

    // optional int32 nation = 23;
    if (has_nation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional int32 tnation = 24;
    if (has_tnation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tnation());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 lordAtkMode = 25;
    if (has_lordatkmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordatkmode());
    }

    // optional int32 TlordAtkMode = 26;
    if (has_tlordatkmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordatkmode());
    }

    // optional int32 speed = 27;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 tspeed = 28;
    if (has_tspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tspeed());
    }

    // optional int32 youActionCountByAdd = 29;
    if (has_youactioncountbyadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youactioncountbyadd());
    }

    // optional int32 himActionCountByAdd = 30;
    if (has_himactioncountbyadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himactioncountbyadd());
    }

    // optional int32 mapId = 31;
    if (has_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 roleId = 32;
    if (has_roleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 tRoleId = 33;
    if (has_troleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->troleid());
    }

    // optional int32 maxFillUnit = 34;
    if (has_maxfillunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfillunit());
    }

    // optional int32 tMaxFillUnit = 35;
    if (has_tmaxfillunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmaxfillunit());
    }

    // optional int32 actionTIme = 36;
    if (has_actiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontime());
    }

    // optional int32 tActionTIme = 37;
    if (has_tactiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tactiontime());
    }

    // optional int32 youBaseHp = 38;
    if (has_youbasehp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youbasehp());
    }

    // optional int32 himBaseHp = 39;
    if (has_himbasehp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himbasehp());
    }

  }
  // repeated .main.FightSpirit spiritsYou = 3;
  total_size += 1 * this->spiritsyou_size();
  for (int i = 0; i < this->spiritsyou_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spiritsyou(i));
  }

  // repeated .main.FightSpirit spiritsHim = 4;
  total_size += 1 * this->spiritshim_size();
  for (int i = 0; i < this->spiritshim_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spiritshim(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartResponse*>(&from));
}

void StartResponse::MergeFrom(const StartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  spiritsyou_.MergeFrom(from.spiritsyou_);
  spiritshim_.MergeFrom(from.spiritshim_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_isfirstattack()) {
      set_isfirstattack(from.isfirstattack());
    }
    if (from.has_youhp()) {
      set_youhp(from.youhp());
    }
    if (from.has_himhp()) {
      set_himhp(from.himhp());
    }
    if (from.has_youactioncount()) {
      set_youactioncount(from.youactioncount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_himactioncount()) {
      set_himactioncount(from.himactioncount());
    }
    if (from.has_fid()) {
      set_fid(from.fid());
    }
    if (from.has_lordid()) {
      set_lordid(from.lordid());
    }
    if (from.has_lordname()) {
      set_lordname(from.lordname());
    }
    if (from.has_lordskillbelongid()) {
      set_lordskillbelongid(from.lordskillbelongid());
    }
    if (from.has_lordskillid()) {
      set_lordskillid(from.lordskillid());
    }
    if (from.has_tlordid()) {
      set_tlordid(from.tlordid());
    }
    if (from.has_tlordname()) {
      set_tlordname(from.tlordname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tlordskillbelongid()) {
      set_tlordskillbelongid(from.tlordskillbelongid());
    }
    if (from.has_tlordskillid()) {
      set_tlordskillid(from.tlordskillid());
    }
    if (from.has_tlordskilllevel()) {
      set_tlordskilllevel(from.tlordskilllevel());
    }
    if (from.has_lordcdround()) {
      set_lordcdround(from.lordcdround());
    }
    if (from.has_tlordcdround()) {
      set_tlordcdround(from.tlordcdround());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_tnation()) {
      set_tnation(from.tnation());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lordatkmode()) {
      set_lordatkmode(from.lordatkmode());
    }
    if (from.has_tlordatkmode()) {
      set_tlordatkmode(from.tlordatkmode());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_tspeed()) {
      set_tspeed(from.tspeed());
    }
    if (from.has_youactioncountbyadd()) {
      set_youactioncountbyadd(from.youactioncountbyadd());
    }
    if (from.has_himactioncountbyadd()) {
      set_himactioncountbyadd(from.himactioncountbyadd());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_troleid()) {
      set_troleid(from.troleid());
    }
    if (from.has_maxfillunit()) {
      set_maxfillunit(from.maxfillunit());
    }
    if (from.has_tmaxfillunit()) {
      set_tmaxfillunit(from.tmaxfillunit());
    }
    if (from.has_actiontime()) {
      set_actiontime(from.actiontime());
    }
    if (from.has_tactiontime()) {
      set_tactiontime(from.tactiontime());
    }
    if (from.has_youbasehp()) {
      set_youbasehp(from.youbasehp());
    }
    if (from.has_himbasehp()) {
      set_himbasehp(from.himbasehp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StartResponse::CopyFrom(const StartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartResponse::IsInitialized() const {

  return true;
}

void StartResponse::Swap(StartResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    spiritsyou_.Swap(&other->spiritsyou_);
    spiritshim_.Swap(&other->spiritshim_);
    std::swap(isfirstattack_, other->isfirstattack_);
    std::swap(youhp_, other->youhp_);
    std::swap(himhp_, other->himhp_);
    std::swap(youactioncount_, other->youactioncount_);
    std::swap(himactioncount_, other->himactioncount_);
    std::swap(fid_, other->fid_);
    std::swap(lordid_, other->lordid_);
    std::swap(lordname_, other->lordname_);
    std::swap(lordskillbelongid_, other->lordskillbelongid_);
    std::swap(lordskillid_, other->lordskillid_);
    std::swap(tlordid_, other->tlordid_);
    std::swap(tlordname_, other->tlordname_);
    std::swap(tlordskillbelongid_, other->tlordskillbelongid_);
    std::swap(tlordskillid_, other->tlordskillid_);
    std::swap(tlordskilllevel_, other->tlordskilllevel_);
    std::swap(lordcdround_, other->lordcdround_);
    std::swap(tlordcdround_, other->tlordcdround_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(nation_, other->nation_);
    std::swap(tnation_, other->tnation_);
    std::swap(lordatkmode_, other->lordatkmode_);
    std::swap(tlordatkmode_, other->tlordatkmode_);
    std::swap(speed_, other->speed_);
    std::swap(tspeed_, other->tspeed_);
    std::swap(youactioncountbyadd_, other->youactioncountbyadd_);
    std::swap(himactioncountbyadd_, other->himactioncountbyadd_);
    std::swap(mapid_, other->mapid_);
    std::swap(roleid_, other->roleid_);
    std::swap(troleid_, other->troleid_);
    std::swap(maxfillunit_, other->maxfillunit_);
    std::swap(tmaxfillunit_, other->tmaxfillunit_);
    std::swap(actiontime_, other->actiontime_);
    std::swap(tactiontime_, other->tactiontime_);
    std::swap(youbasehp_, other->youbasehp_);
    std::swap(himbasehp_, other->himbasehp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StartResponse::GetTypeName() const {
  return "main.StartResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PveContinuePlayRequest::kRequestFieldNumber;
#endif  // !_MSC_VER

PveContinuePlayRequest::PveContinuePlayRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PveContinuePlayRequest)
}

void PveContinuePlayRequest::InitAsDefaultInstance() {
}

PveContinuePlayRequest::PveContinuePlayRequest(const PveContinuePlayRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PveContinuePlayRequest)
}

void PveContinuePlayRequest::SharedCtor() {
  _cached_size_ = 0;
  request_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveContinuePlayRequest::~PveContinuePlayRequest() {
  // @@protoc_insertion_point(destructor:main.PveContinuePlayRequest)
  SharedDtor();
}

void PveContinuePlayRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PveContinuePlayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PveContinuePlayRequest& PveContinuePlayRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

PveContinuePlayRequest* PveContinuePlayRequest::default_instance_ = NULL;

PveContinuePlayRequest* PveContinuePlayRequest::New() const {
  return new PveContinuePlayRequest;
}

void PveContinuePlayRequest::Clear() {
  request_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PveContinuePlayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PveContinuePlayRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 request = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PveContinuePlayRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PveContinuePlayRequest)
  return false;
#undef DO_
}

void PveContinuePlayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PveContinuePlayRequest)
  // required int32 request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PveContinuePlayRequest)
}

int PveContinuePlayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveContinuePlayRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PveContinuePlayRequest*>(&from));
}

void PveContinuePlayRequest::MergeFrom(const PveContinuePlayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PveContinuePlayRequest::CopyFrom(const PveContinuePlayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveContinuePlayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PveContinuePlayRequest::Swap(PveContinuePlayRequest* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PveContinuePlayRequest::GetTypeName() const {
  return "main.PveContinuePlayRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PveStarRequest::PveStarRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PveStarRequest)
}

void PveStarRequest::InitAsDefaultInstance() {
}

PveStarRequest::PveStarRequest(const PveStarRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PveStarRequest)
}

void PveStarRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveStarRequest::~PveStarRequest() {
  // @@protoc_insertion_point(destructor:main.PveStarRequest)
  SharedDtor();
}

void PveStarRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PveStarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PveStarRequest& PveStarRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

PveStarRequest* PveStarRequest::default_instance_ = NULL;

PveStarRequest* PveStarRequest::New() const {
  return new PveStarRequest;
}

void PveStarRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PveStarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PveStarRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.PveStarRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PveStarRequest)
  return false;
#undef DO_
}

void PveStarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PveStarRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PveStarRequest)
}

int PveStarRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveStarRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PveStarRequest*>(&from));
}

void PveStarRequest::MergeFrom(const PveStarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PveStarRequest::CopyFrom(const PveStarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveStarRequest::IsInitialized() const {

  return true;
}

void PveStarRequest::Swap(PveStarRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PveStarRequest::GetTypeName() const {
  return "main.PveStarRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PveStarResponse::kStateFieldNumber;
const int PveStarResponse::kFailMsgFieldNumber;
const int PveStarResponse::kSpiritsYouFieldNumber;
const int PveStarResponse::kSpiritsHimFieldNumber;
const int PveStarResponse::kIsFirstAttackFieldNumber;
const int PveStarResponse::kYouHpFieldNumber;
const int PveStarResponse::kHimHpFieldNumber;
const int PveStarResponse::kYouActionCountFieldNumber;
const int PveStarResponse::kHimActionCountFieldNumber;
const int PveStarResponse::kFidFieldNumber;
const int PveStarResponse::kLordIdFieldNumber;
const int PveStarResponse::kLordNameFieldNumber;
const int PveStarResponse::kLordSkillBelongIdFieldNumber;
const int PveStarResponse::kLordSkillIdFieldNumber;
const int PveStarResponse::kTlordIdFieldNumber;
const int PveStarResponse::kTlordNameFieldNumber;
const int PveStarResponse::kTlordSkillBelongIdFieldNumber;
const int PveStarResponse::kTlordSkillIdFieldNumber;
const int PveStarResponse::kTlordSkillLevelFieldNumber;
const int PveStarResponse::kLordCdRoundBaseFieldNumber;
const int PveStarResponse::kTlordCdRoundBaseFieldNumber;
const int PveStarResponse::kClientTypeFieldNumber;
const int PveStarResponse::kNationFieldNumber;
const int PveStarResponse::kTnationFieldNumber;
const int PveStarResponse::kLordAtkModeFieldNumber;
const int PveStarResponse::kTlordAtkModeFieldNumber;
const int PveStarResponse::kYouActionCountByAddFieldNumber;
const int PveStarResponse::kHimActionCountByAddFieldNumber;
const int PveStarResponse::kMapIdFieldNumber;
const int PveStarResponse::kFriendOfficerCdRoundCurrentFieldNumber;
const int PveStarResponse::kFriendOfficerCdRoundFieldNumber;
const int PveStarResponse::kFriendOfficerIdFieldNumber;
const int PveStarResponse::kFriendOfficerLevelFieldNumber;
const int PveStarResponse::kRoleIdFieldNumber;
const int PveStarResponse::kTRoleIdFieldNumber;
const int PveStarResponse::kMaxFillUnitFieldNumber;
const int PveStarResponse::kTMaxFillUnitFieldNumber;
const int PveStarResponse::kTClientTypeFieldNumber;
const int PveStarResponse::kSpeedFieldNumber;
const int PveStarResponse::kTspeedFieldNumber;
const int PveStarResponse::kDropItemCountFieldNumber;
const int PveStarResponse::kYouBaseHpFieldNumber;
const int PveStarResponse::kHimBaseHpFieldNumber;
const int PveStarResponse::kLordCdRoundFieldNumber;
const int PveStarResponse::kPlotIdFieldNumber;
const int PveStarResponse::kSelfTempOfficerFieldNumber;
const int PveStarResponse::kAiTempOfficerFieldNumber;
const int PveStarResponse::kCooTempOfficerFieldNumber;
#endif  // !_MSC_VER

PveStarResponse::PveStarResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PveStarResponse)
}

void PveStarResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cootempofficer_ = const_cast< ::main::FightSpirit*>(
      ::main::FightSpirit::internal_default_instance());
#else
  cootempofficer_ = const_cast< ::main::FightSpirit*>(&::main::FightSpirit::default_instance());
#endif
}

PveStarResponse::PveStarResponse(const PveStarResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PveStarResponse)
}

void PveStarResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isfirstattack_ = false;
  youhp_ = 0;
  himhp_ = 0;
  youactioncount_ = 0;
  himactioncount_ = 0;
  fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lordid_ = 0;
  lordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lordskillbelongid_ = 0;
  lordskillid_ = 0;
  tlordid_ = 0;
  tlordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tlordskillbelongid_ = 0;
  tlordskillid_ = 0;
  tlordskilllevel_ = 0;
  lordcdroundbase_ = 0;
  tlordcdroundbase_ = 0;
  clienttype_ = 0;
  nation_ = 0;
  tnation_ = 0;
  lordatkmode_ = 0;
  tlordatkmode_ = 0;
  youactioncountbyadd_ = 0;
  himactioncountbyadd_ = 0;
  mapid_ = 0;
  friendofficercdroundcurrent_ = 0;
  friendofficercdround_ = 0;
  friendofficerid_ = 0;
  friendofficerlevel_ = 0;
  roleid_ = 0;
  troleid_ = 0;
  maxfillunit_ = 0;
  tmaxfillunit_ = 0;
  tclienttype_ = 0;
  speed_ = 0;
  tspeed_ = 0;
  dropitemcount_ = 0;
  youbasehp_ = 0;
  himbasehp_ = 0;
  lordcdround_ = 0;
  plotid_ = 0;
  cootempofficer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveStarResponse::~PveStarResponse() {
  // @@protoc_insertion_point(destructor:main.PveStarResponse)
  SharedDtor();
}

void PveStarResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  if (fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fid_;
  }
  if (lordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lordname_;
  }
  if (tlordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tlordname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cootempofficer_;
  }
}

void PveStarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PveStarResponse& PveStarResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

PveStarResponse* PveStarResponse::default_instance_ = NULL;

PveStarResponse* PveStarResponse::New() const {
  return new PveStarResponse;
}

void PveStarResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PveStarResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(state_, isfirstattack_);
    ZR_(youhp_, youactioncount_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(lordid_, tlordid_);
    himactioncount_ = 0;
    if (has_fid()) {
      if (fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fid_->clear();
      }
    }
    if (has_lordname()) {
      if (lordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lordname_->clear();
      }
    }
    if (has_tlordname()) {
      if (tlordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tlordname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(tlordskillbelongid_, tnation_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(lordatkmode_, friendofficerid_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(friendofficerlevel_, tspeed_);
  }
  if (_has_bits_[40 / 32] & 40704) {
    ZR_(dropitemcount_, lordcdround_);
    plotid_ = 0;
    if (has_cootempofficer()) {
      if (cootempofficer_ != NULL) cootempofficer_->::main::FightSpirit::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  spiritsyou_.Clear();
  spiritshim_.Clear();
  selftempofficer_.Clear();
  aitempofficer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PveStarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PveStarResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spiritsYou;
        break;
      }

      // repeated .main.FightSpirit spiritsYou = 3;
      case 3: {
        if (tag == 26) {
         parse_spiritsYou:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spiritsyou()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spiritsYou;
        if (input->ExpectTag(34)) goto parse_spiritsHim;
        break;
      }

      // repeated .main.FightSpirit spiritsHim = 4;
      case 4: {
        if (tag == 34) {
         parse_spiritsHim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spiritshim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_spiritsHim;
        if (input->ExpectTag(40)) goto parse_isFirstAttack;
        break;
      }

      // optional bool isFirstAttack = 5;
      case 5: {
        if (tag == 40) {
         parse_isFirstAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirstattack_)));
          set_has_isfirstattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_youHp;
        break;
      }

      // optional int32 youHp = 6;
      case 6: {
        if (tag == 48) {
         parse_youHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youhp_)));
          set_has_youhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_himHp;
        break;
      }

      // optional int32 himHp = 7;
      case 7: {
        if (tag == 56) {
         parse_himHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himhp_)));
          set_has_himhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_youActionCount;
        break;
      }

      // optional int32 youActionCount = 8;
      case 8: {
        if (tag == 64) {
         parse_youActionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youactioncount_)));
          set_has_youactioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_himActionCount;
        break;
      }

      // optional int32 himActionCount = 9;
      case 9: {
        if (tag == 72) {
         parse_himActionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himactioncount_)));
          set_has_himactioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_fid;
        break;
      }

      // optional string fid = 10;
      case 10: {
        if (tag == 82) {
         parse_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lordId;
        break;
      }

      // optional int32 lordId = 11;
      case 11: {
        if (tag == 88) {
         parse_lordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordid_)));
          set_has_lordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lordName;
        break;
      }

      // optional string lordName = 12;
      case 12: {
        if (tag == 98) {
         parse_lordName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lordname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_lordSkillBelongId;
        break;
      }

      // optional int32 lordSkillBelongId = 13;
      case 13: {
        if (tag == 104) {
         parse_lordSkillBelongId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillbelongid_)));
          set_has_lordskillbelongid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_lordSkillId;
        break;
      }

      // optional int32 lordSkillId = 14;
      case 14: {
        if (tag == 112) {
         parse_lordSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordskillid_)));
          set_has_lordskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_tlordId;
        break;
      }

      // optional int32 tlordId = 15;
      case 15: {
        if (tag == 120) {
         parse_tlordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordid_)));
          set_has_tlordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_tlordName;
        break;
      }

      // optional string tlordName = 16;
      case 16: {
        if (tag == 130) {
         parse_tlordName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tlordname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_tlordSkillBelongId;
        break;
      }

      // optional int32 tlordSkillBelongId = 17;
      case 17: {
        if (tag == 136) {
         parse_tlordSkillBelongId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordskillbelongid_)));
          set_has_tlordskillbelongid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_tlordSkillId;
        break;
      }

      // optional int32 tlordSkillId = 18;
      case 18: {
        if (tag == 144) {
         parse_tlordSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordskillid_)));
          set_has_tlordskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tlordSkillLevel;
        break;
      }

      // optional int32 tlordSkillLevel = 19;
      case 19: {
        if (tag == 152) {
         parse_tlordSkillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordskilllevel_)));
          set_has_tlordskilllevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lordCdRoundBase;
        break;
      }

      // optional int32 lordCdRoundBase = 20;
      case 20: {
        if (tag == 160) {
         parse_lordCdRoundBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordcdroundbase_)));
          set_has_lordcdroundbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_tlordCdRoundBase;
        break;
      }

      // optional int32 tlordCdRoundBase = 21;
      case 21: {
        if (tag == 168) {
         parse_tlordCdRoundBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordcdroundbase_)));
          set_has_tlordcdroundbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_clientType;
        break;
      }

      // optional int32 clientType = 22;
      case 22: {
        if (tag == 176) {
         parse_clientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_nation;
        break;
      }

      // optional int32 nation = 23;
      case 23: {
        if (tag == 184) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_tnation;
        break;
      }

      // optional int32 tnation = 24;
      case 24: {
        if (tag == 192) {
         parse_tnation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tnation_)));
          set_has_tnation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_lordAtkMode;
        break;
      }

      // optional int32 lordAtkMode = 25;
      case 25: {
        if (tag == 200) {
         parse_lordAtkMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordatkmode_)));
          set_has_lordatkmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_TlordAtkMode;
        break;
      }

      // optional int32 TlordAtkMode = 26;
      case 26: {
        if (tag == 208) {
         parse_TlordAtkMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tlordatkmode_)));
          set_has_tlordatkmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_youActionCountByAdd;
        break;
      }

      // optional int32 youActionCountByAdd = 27;
      case 27: {
        if (tag == 216) {
         parse_youActionCountByAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youactioncountbyadd_)));
          set_has_youactioncountbyadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_himActionCountByAdd;
        break;
      }

      // optional int32 himActionCountByAdd = 28;
      case 28: {
        if (tag == 224) {
         parse_himActionCountByAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himactioncountbyadd_)));
          set_has_himactioncountbyadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 29;
      case 29: {
        if (tag == 232) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_friendOfficerCdRoundCurrent;
        break;
      }

      // optional int32 friendOfficerCdRoundCurrent = 30;
      case 30: {
        if (tag == 240) {
         parse_friendOfficerCdRoundCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendofficercdroundcurrent_)));
          set_has_friendofficercdroundcurrent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_friendOfficerCdRound;
        break;
      }

      // optional int32 friendOfficerCdRound = 31;
      case 31: {
        if (tag == 248) {
         parse_friendOfficerCdRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendofficercdround_)));
          set_has_friendofficercdround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_friendOfficerId;
        break;
      }

      // optional int32 friendOfficerId = 32;
      case 32: {
        if (tag == 256) {
         parse_friendOfficerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendofficerid_)));
          set_has_friendofficerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_friendOfficerLevel;
        break;
      }

      // optional int32 friendOfficerLevel = 33;
      case 33: {
        if (tag == 264) {
         parse_friendOfficerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendofficerlevel_)));
          set_has_friendofficerlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 34;
      case 34: {
        if (tag == 272) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_tRoleId;
        break;
      }

      // optional int32 tRoleId = 35;
      case 35: {
        if (tag == 280) {
         parse_tRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &troleid_)));
          set_has_troleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_maxFillUnit;
        break;
      }

      // optional int32 maxFillUnit = 36;
      case 36: {
        if (tag == 288) {
         parse_maxFillUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxfillunit_)));
          set_has_maxfillunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_tMaxFillUnit;
        break;
      }

      // optional int32 tMaxFillUnit = 37;
      case 37: {
        if (tag == 296) {
         parse_tMaxFillUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmaxfillunit_)));
          set_has_tmaxfillunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_tClientType;
        break;
      }

      // optional int32 tClientType = 38;
      case 38: {
        if (tag == 304) {
         parse_tClientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tclienttype_)));
          set_has_tclienttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_speed;
        break;
      }

      // optional int32 speed = 39;
      case 39: {
        if (tag == 312) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_tspeed;
        break;
      }

      // optional int32 tspeed = 40;
      case 40: {
        if (tag == 320) {
         parse_tspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tspeed_)));
          set_has_tspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_dropItemCount;
        break;
      }

      // optional int32 dropItemCount = 41;
      case 41: {
        if (tag == 328) {
         parse_dropItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropitemcount_)));
          set_has_dropitemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_youBaseHp;
        break;
      }

      // optional int32 youBaseHp = 42;
      case 42: {
        if (tag == 336) {
         parse_youBaseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youbasehp_)));
          set_has_youbasehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_himBaseHp;
        break;
      }

      // optional int32 himBaseHp = 43;
      case 43: {
        if (tag == 344) {
         parse_himBaseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himbasehp_)));
          set_has_himbasehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_lordCdRound;
        break;
      }

      // optional int32 lordCdRound = 44;
      case 44: {
        if (tag == 352) {
         parse_lordCdRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordcdround_)));
          set_has_lordcdround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_plotId;
        break;
      }

      // optional int32 plotId = 45;
      case 45: {
        if (tag == 360) {
         parse_plotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plotid_)));
          set_has_plotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_selfTempOfficer;
        break;
      }

      // repeated .main.FightSpirit selfTempOfficer = 46;
      case 46: {
        if (tag == 370) {
         parse_selfTempOfficer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selftempofficer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_selfTempOfficer;
        if (input->ExpectTag(378)) goto parse_aiTempOfficer;
        break;
      }

      // repeated .main.FightSpirit aiTempOfficer = 47;
      case 47: {
        if (tag == 378) {
         parse_aiTempOfficer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aitempofficer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_aiTempOfficer;
        if (input->ExpectTag(386)) goto parse_cooTempOfficer;
        break;
      }

      // optional .main.FightSpirit cooTempOfficer = 48;
      case 48: {
        if (tag == 386) {
         parse_cooTempOfficer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cootempofficer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PveStarResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PveStarResponse)
  return false;
#undef DO_
}

void PveStarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PveStarResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // repeated .main.FightSpirit spiritsYou = 3;
  for (int i = 0; i < this->spiritsyou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->spiritsyou(i), output);
  }

  // repeated .main.FightSpirit spiritsHim = 4;
  for (int i = 0; i < this->spiritshim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->spiritshim(i), output);
  }

  // optional bool isFirstAttack = 5;
  if (has_isfirstattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isfirstattack(), output);
  }

  // optional int32 youHp = 6;
  if (has_youhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->youhp(), output);
  }

  // optional int32 himHp = 7;
  if (has_himhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->himhp(), output);
  }

  // optional int32 youActionCount = 8;
  if (has_youactioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->youactioncount(), output);
  }

  // optional int32 himActionCount = 9;
  if (has_himactioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->himactioncount(), output);
  }

  // optional string fid = 10;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->fid(), output);
  }

  // optional int32 lordId = 11;
  if (has_lordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lordid(), output);
  }

  // optional string lordName = 12;
  if (has_lordname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->lordname(), output);
  }

  // optional int32 lordSkillBelongId = 13;
  if (has_lordskillbelongid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lordskillbelongid(), output);
  }

  // optional int32 lordSkillId = 14;
  if (has_lordskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lordskillid(), output);
  }

  // optional int32 tlordId = 15;
  if (has_tlordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tlordid(), output);
  }

  // optional string tlordName = 16;
  if (has_tlordname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->tlordname(), output);
  }

  // optional int32 tlordSkillBelongId = 17;
  if (has_tlordskillbelongid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tlordskillbelongid(), output);
  }

  // optional int32 tlordSkillId = 18;
  if (has_tlordskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tlordskillid(), output);
  }

  // optional int32 tlordSkillLevel = 19;
  if (has_tlordskilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tlordskilllevel(), output);
  }

  // optional int32 lordCdRoundBase = 20;
  if (has_lordcdroundbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lordcdroundbase(), output);
  }

  // optional int32 tlordCdRoundBase = 21;
  if (has_tlordcdroundbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tlordcdroundbase(), output);
  }

  // optional int32 clientType = 22;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->clienttype(), output);
  }

  // optional int32 nation = 23;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nation(), output);
  }

  // optional int32 tnation = 24;
  if (has_tnation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tnation(), output);
  }

  // optional int32 lordAtkMode = 25;
  if (has_lordatkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->lordatkmode(), output);
  }

  // optional int32 TlordAtkMode = 26;
  if (has_tlordatkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tlordatkmode(), output);
  }

  // optional int32 youActionCountByAdd = 27;
  if (has_youactioncountbyadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->youactioncountbyadd(), output);
  }

  // optional int32 himActionCountByAdd = 28;
  if (has_himactioncountbyadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->himactioncountbyadd(), output);
  }

  // optional int32 mapId = 29;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->mapid(), output);
  }

  // optional int32 friendOfficerCdRoundCurrent = 30;
  if (has_friendofficercdroundcurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->friendofficercdroundcurrent(), output);
  }

  // optional int32 friendOfficerCdRound = 31;
  if (has_friendofficercdround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->friendofficercdround(), output);
  }

  // optional int32 friendOfficerId = 32;
  if (has_friendofficerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->friendofficerid(), output);
  }

  // optional int32 friendOfficerLevel = 33;
  if (has_friendofficerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->friendofficerlevel(), output);
  }

  // optional int32 roleId = 34;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->roleid(), output);
  }

  // optional int32 tRoleId = 35;
  if (has_troleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->troleid(), output);
  }

  // optional int32 maxFillUnit = 36;
  if (has_maxfillunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->maxfillunit(), output);
  }

  // optional int32 tMaxFillUnit = 37;
  if (has_tmaxfillunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->tmaxfillunit(), output);
  }

  // optional int32 tClientType = 38;
  if (has_tclienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->tclienttype(), output);
  }

  // optional int32 speed = 39;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->speed(), output);
  }

  // optional int32 tspeed = 40;
  if (has_tspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->tspeed(), output);
  }

  // optional int32 dropItemCount = 41;
  if (has_dropitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->dropitemcount(), output);
  }

  // optional int32 youBaseHp = 42;
  if (has_youbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->youbasehp(), output);
  }

  // optional int32 himBaseHp = 43;
  if (has_himbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->himbasehp(), output);
  }

  // optional int32 lordCdRound = 44;
  if (has_lordcdround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->lordcdround(), output);
  }

  // optional int32 plotId = 45;
  if (has_plotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->plotid(), output);
  }

  // repeated .main.FightSpirit selfTempOfficer = 46;
  for (int i = 0; i < this->selftempofficer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->selftempofficer(i), output);
  }

  // repeated .main.FightSpirit aiTempOfficer = 47;
  for (int i = 0; i < this->aitempofficer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->aitempofficer(i), output);
  }

  // optional .main.FightSpirit cooTempOfficer = 48;
  if (has_cootempofficer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->cootempofficer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PveStarResponse)
}

int PveStarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional bool isFirstAttack = 5;
    if (has_isfirstattack()) {
      total_size += 1 + 1;
    }

    // optional int32 youHp = 6;
    if (has_youhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youhp());
    }

    // optional int32 himHp = 7;
    if (has_himhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himhp());
    }

    // optional int32 youActionCount = 8;
    if (has_youactioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youactioncount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 himActionCount = 9;
    if (has_himactioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himactioncount());
    }

    // optional string fid = 10;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fid());
    }

    // optional int32 lordId = 11;
    if (has_lordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordid());
    }

    // optional string lordName = 12;
    if (has_lordname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lordname());
    }

    // optional int32 lordSkillBelongId = 13;
    if (has_lordskillbelongid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillbelongid());
    }

    // optional int32 lordSkillId = 14;
    if (has_lordskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordskillid());
    }

    // optional int32 tlordId = 15;
    if (has_tlordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordid());
    }

    // optional string tlordName = 16;
    if (has_tlordname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tlordname());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tlordSkillBelongId = 17;
    if (has_tlordskillbelongid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordskillbelongid());
    }

    // optional int32 tlordSkillId = 18;
    if (has_tlordskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordskillid());
    }

    // optional int32 tlordSkillLevel = 19;
    if (has_tlordskilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordskilllevel());
    }

    // optional int32 lordCdRoundBase = 20;
    if (has_lordcdroundbase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordcdroundbase());
    }

    // optional int32 tlordCdRoundBase = 21;
    if (has_tlordcdroundbase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordcdroundbase());
    }

    // optional int32 clientType = 22;
    if (has_clienttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

    // optional int32 nation = 23;
    if (has_nation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // optional int32 tnation = 24;
    if (has_tnation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tnation());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 lordAtkMode = 25;
    if (has_lordatkmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordatkmode());
    }

    // optional int32 TlordAtkMode = 26;
    if (has_tlordatkmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tlordatkmode());
    }

    // optional int32 youActionCountByAdd = 27;
    if (has_youactioncountbyadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youactioncountbyadd());
    }

    // optional int32 himActionCountByAdd = 28;
    if (has_himactioncountbyadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himactioncountbyadd());
    }

    // optional int32 mapId = 29;
    if (has_mapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 friendOfficerCdRoundCurrent = 30;
    if (has_friendofficercdroundcurrent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendofficercdroundcurrent());
    }

    // optional int32 friendOfficerCdRound = 31;
    if (has_friendofficercdround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendofficercdround());
    }

    // optional int32 friendOfficerId = 32;
    if (has_friendofficerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendofficerid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 friendOfficerLevel = 33;
    if (has_friendofficerlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendofficerlevel());
    }

    // optional int32 roleId = 34;
    if (has_roleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 tRoleId = 35;
    if (has_troleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->troleid());
    }

    // optional int32 maxFillUnit = 36;
    if (has_maxfillunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxfillunit());
    }

    // optional int32 tMaxFillUnit = 37;
    if (has_tmaxfillunit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmaxfillunit());
    }

    // optional int32 tClientType = 38;
    if (has_tclienttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tclienttype());
    }

    // optional int32 speed = 39;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 tspeed = 40;
    if (has_tspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tspeed());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 dropItemCount = 41;
    if (has_dropitemcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropitemcount());
    }

    // optional int32 youBaseHp = 42;
    if (has_youbasehp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youbasehp());
    }

    // optional int32 himBaseHp = 43;
    if (has_himbasehp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himbasehp());
    }

    // optional int32 lordCdRound = 44;
    if (has_lordcdround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordcdround());
    }

    // optional int32 plotId = 45;
    if (has_plotid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plotid());
    }

    // optional .main.FightSpirit cooTempOfficer = 48;
    if (has_cootempofficer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cootempofficer());
    }

  }
  // repeated .main.FightSpirit spiritsYou = 3;
  total_size += 1 * this->spiritsyou_size();
  for (int i = 0; i < this->spiritsyou_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spiritsyou(i));
  }

  // repeated .main.FightSpirit spiritsHim = 4;
  total_size += 1 * this->spiritshim_size();
  for (int i = 0; i < this->spiritshim_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spiritshim(i));
  }

  // repeated .main.FightSpirit selfTempOfficer = 46;
  total_size += 2 * this->selftempofficer_size();
  for (int i = 0; i < this->selftempofficer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selftempofficer(i));
  }

  // repeated .main.FightSpirit aiTempOfficer = 47;
  total_size += 2 * this->aitempofficer_size();
  for (int i = 0; i < this->aitempofficer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aitempofficer(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveStarResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PveStarResponse*>(&from));
}

void PveStarResponse::MergeFrom(const PveStarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  spiritsyou_.MergeFrom(from.spiritsyou_);
  spiritshim_.MergeFrom(from.spiritshim_);
  selftempofficer_.MergeFrom(from.selftempofficer_);
  aitempofficer_.MergeFrom(from.aitempofficer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_isfirstattack()) {
      set_isfirstattack(from.isfirstattack());
    }
    if (from.has_youhp()) {
      set_youhp(from.youhp());
    }
    if (from.has_himhp()) {
      set_himhp(from.himhp());
    }
    if (from.has_youactioncount()) {
      set_youactioncount(from.youactioncount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_himactioncount()) {
      set_himactioncount(from.himactioncount());
    }
    if (from.has_fid()) {
      set_fid(from.fid());
    }
    if (from.has_lordid()) {
      set_lordid(from.lordid());
    }
    if (from.has_lordname()) {
      set_lordname(from.lordname());
    }
    if (from.has_lordskillbelongid()) {
      set_lordskillbelongid(from.lordskillbelongid());
    }
    if (from.has_lordskillid()) {
      set_lordskillid(from.lordskillid());
    }
    if (from.has_tlordid()) {
      set_tlordid(from.tlordid());
    }
    if (from.has_tlordname()) {
      set_tlordname(from.tlordname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tlordskillbelongid()) {
      set_tlordskillbelongid(from.tlordskillbelongid());
    }
    if (from.has_tlordskillid()) {
      set_tlordskillid(from.tlordskillid());
    }
    if (from.has_tlordskilllevel()) {
      set_tlordskilllevel(from.tlordskilllevel());
    }
    if (from.has_lordcdroundbase()) {
      set_lordcdroundbase(from.lordcdroundbase());
    }
    if (from.has_tlordcdroundbase()) {
      set_tlordcdroundbase(from.tlordcdroundbase());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_tnation()) {
      set_tnation(from.tnation());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lordatkmode()) {
      set_lordatkmode(from.lordatkmode());
    }
    if (from.has_tlordatkmode()) {
      set_tlordatkmode(from.tlordatkmode());
    }
    if (from.has_youactioncountbyadd()) {
      set_youactioncountbyadd(from.youactioncountbyadd());
    }
    if (from.has_himactioncountbyadd()) {
      set_himactioncountbyadd(from.himactioncountbyadd());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_friendofficercdroundcurrent()) {
      set_friendofficercdroundcurrent(from.friendofficercdroundcurrent());
    }
    if (from.has_friendofficercdround()) {
      set_friendofficercdround(from.friendofficercdround());
    }
    if (from.has_friendofficerid()) {
      set_friendofficerid(from.friendofficerid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_friendofficerlevel()) {
      set_friendofficerlevel(from.friendofficerlevel());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_troleid()) {
      set_troleid(from.troleid());
    }
    if (from.has_maxfillunit()) {
      set_maxfillunit(from.maxfillunit());
    }
    if (from.has_tmaxfillunit()) {
      set_tmaxfillunit(from.tmaxfillunit());
    }
    if (from.has_tclienttype()) {
      set_tclienttype(from.tclienttype());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_tspeed()) {
      set_tspeed(from.tspeed());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_dropitemcount()) {
      set_dropitemcount(from.dropitemcount());
    }
    if (from.has_youbasehp()) {
      set_youbasehp(from.youbasehp());
    }
    if (from.has_himbasehp()) {
      set_himbasehp(from.himbasehp());
    }
    if (from.has_lordcdround()) {
      set_lordcdround(from.lordcdround());
    }
    if (from.has_plotid()) {
      set_plotid(from.plotid());
    }
    if (from.has_cootempofficer()) {
      mutable_cootempofficer()->::main::FightSpirit::MergeFrom(from.cootempofficer());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PveStarResponse::CopyFrom(const PveStarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveStarResponse::IsInitialized() const {

  return true;
}

void PveStarResponse::Swap(PveStarResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    spiritsyou_.Swap(&other->spiritsyou_);
    spiritshim_.Swap(&other->spiritshim_);
    std::swap(isfirstattack_, other->isfirstattack_);
    std::swap(youhp_, other->youhp_);
    std::swap(himhp_, other->himhp_);
    std::swap(youactioncount_, other->youactioncount_);
    std::swap(himactioncount_, other->himactioncount_);
    std::swap(fid_, other->fid_);
    std::swap(lordid_, other->lordid_);
    std::swap(lordname_, other->lordname_);
    std::swap(lordskillbelongid_, other->lordskillbelongid_);
    std::swap(lordskillid_, other->lordskillid_);
    std::swap(tlordid_, other->tlordid_);
    std::swap(tlordname_, other->tlordname_);
    std::swap(tlordskillbelongid_, other->tlordskillbelongid_);
    std::swap(tlordskillid_, other->tlordskillid_);
    std::swap(tlordskilllevel_, other->tlordskilllevel_);
    std::swap(lordcdroundbase_, other->lordcdroundbase_);
    std::swap(tlordcdroundbase_, other->tlordcdroundbase_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(nation_, other->nation_);
    std::swap(tnation_, other->tnation_);
    std::swap(lordatkmode_, other->lordatkmode_);
    std::swap(tlordatkmode_, other->tlordatkmode_);
    std::swap(youactioncountbyadd_, other->youactioncountbyadd_);
    std::swap(himactioncountbyadd_, other->himactioncountbyadd_);
    std::swap(mapid_, other->mapid_);
    std::swap(friendofficercdroundcurrent_, other->friendofficercdroundcurrent_);
    std::swap(friendofficercdround_, other->friendofficercdround_);
    std::swap(friendofficerid_, other->friendofficerid_);
    std::swap(friendofficerlevel_, other->friendofficerlevel_);
    std::swap(roleid_, other->roleid_);
    std::swap(troleid_, other->troleid_);
    std::swap(maxfillunit_, other->maxfillunit_);
    std::swap(tmaxfillunit_, other->tmaxfillunit_);
    std::swap(tclienttype_, other->tclienttype_);
    std::swap(speed_, other->speed_);
    std::swap(tspeed_, other->tspeed_);
    std::swap(dropitemcount_, other->dropitemcount_);
    std::swap(youbasehp_, other->youbasehp_);
    std::swap(himbasehp_, other->himbasehp_);
    std::swap(lordcdround_, other->lordcdround_);
    std::swap(plotid_, other->plotid_);
    selftempofficer_.Swap(&other->selftempofficer_);
    aitempofficer_.Swap(&other->aitempofficer_);
    std::swap(cootempofficer_, other->cootempofficer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PveStarResponse::GetTypeName() const {
  return "main.PveStarResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FillUnitRequest::kEnemyRoleIdFieldNumber;
#endif  // !_MSC_VER

FillUnitRequest::FillUnitRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FillUnitRequest)
}

void FillUnitRequest::InitAsDefaultInstance() {
}

FillUnitRequest::FillUnitRequest(const FillUnitRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FillUnitRequest)
}

void FillUnitRequest::SharedCtor() {
  _cached_size_ = 0;
  enemyroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillUnitRequest::~FillUnitRequest() {
  // @@protoc_insertion_point(destructor:main.FillUnitRequest)
  SharedDtor();
}

void FillUnitRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FillUnitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FillUnitRequest& FillUnitRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FillUnitRequest* FillUnitRequest::default_instance_ = NULL;

FillUnitRequest* FillUnitRequest::New() const {
  return new FillUnitRequest;
}

void FillUnitRequest::Clear() {
  enemyroleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FillUnitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FillUnitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enemyRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemyroleid_)));
          set_has_enemyroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FillUnitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FillUnitRequest)
  return false;
#undef DO_
}

void FillUnitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FillUnitRequest)
  // optional int32 enemyRoleId = 1;
  if (has_enemyroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enemyroleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FillUnitRequest)
}

int FillUnitRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enemyRoleId = 1;
    if (has_enemyroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemyroleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillUnitRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FillUnitRequest*>(&from));
}

void FillUnitRequest::MergeFrom(const FillUnitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyroleid()) {
      set_enemyroleid(from.enemyroleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FillUnitRequest::CopyFrom(const FillUnitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillUnitRequest::IsInitialized() const {

  return true;
}

void FillUnitRequest::Swap(FillUnitRequest* other) {
  if (other != this) {
    std::swap(enemyroleid_, other->enemyroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FillUnitRequest::GetTypeName() const {
  return "main.FillUnitRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FillUnitResponse::kStateFieldNumber;
const int FillUnitResponse::kFailMsgFieldNumber;
const int FillUnitResponse::kSpiritsFieldNumber;
const int FillUnitResponse::kActionCountFieldNumber;
const int FillUnitResponse::kIsSelfFieldNumber;
const int FillUnitResponse::kUnLowerActionCountFieldNumber;
#endif  // !_MSC_VER

FillUnitResponse::FillUnitResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FillUnitResponse)
}

void FillUnitResponse::InitAsDefaultInstance() {
}

FillUnitResponse::FillUnitResponse(const FillUnitResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FillUnitResponse)
}

void FillUnitResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actioncount_ = 0;
  isself_ = 0;
  unloweractioncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillUnitResponse::~FillUnitResponse() {
  // @@protoc_insertion_point(destructor:main.FillUnitResponse)
  SharedDtor();
}

void FillUnitResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FillUnitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FillUnitResponse& FillUnitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FillUnitResponse* FillUnitResponse::default_instance_ = NULL;

FillUnitResponse* FillUnitResponse::New() const {
  return new FillUnitResponse;
}

void FillUnitResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FillUnitResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(state_, actioncount_);
    ZR_(isself_, unloweractioncount_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  spirits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FillUnitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FillUnitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        break;
      }

      // repeated .main.FightSpirit spirits = 3;
      case 3: {
        if (tag == 26) {
         parse_spirits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spirits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        if (input->ExpectTag(32)) goto parse_actionCount;
        break;
      }

      // optional int32 actionCount = 4;
      case 4: {
        if (tag == 32) {
         parse_actionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncount_)));
          set_has_actioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isSelf;
        break;
      }

      // optional int32 isSelf = 5;
      case 5: {
        if (tag == 40) {
         parse_isSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isself_)));
          set_has_isself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unLowerActionCount;
        break;
      }

      // optional int32 unLowerActionCount = 6;
      case 6: {
        if (tag == 48) {
         parse_unLowerActionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unloweractioncount_)));
          set_has_unloweractioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FillUnitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FillUnitResponse)
  return false;
#undef DO_
}

void FillUnitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FillUnitResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // repeated .main.FightSpirit spirits = 3;
  for (int i = 0; i < this->spirits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->spirits(i), output);
  }

  // optional int32 actionCount = 4;
  if (has_actioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncount(), output);
  }

  // optional int32 isSelf = 5;
  if (has_isself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isself(), output);
  }

  // optional int32 unLowerActionCount = 6;
  if (has_unloweractioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unloweractioncount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FillUnitResponse)
}

int FillUnitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional int32 actionCount = 4;
    if (has_actioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncount());
    }

    // optional int32 isSelf = 5;
    if (has_isself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isself());
    }

    // optional int32 unLowerActionCount = 6;
    if (has_unloweractioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unloweractioncount());
    }

  }
  // repeated .main.FightSpirit spirits = 3;
  total_size += 1 * this->spirits_size();
  for (int i = 0; i < this->spirits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spirits(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillUnitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FillUnitResponse*>(&from));
}

void FillUnitResponse::MergeFrom(const FillUnitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  spirits_.MergeFrom(from.spirits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_actioncount()) {
      set_actioncount(from.actioncount());
    }
    if (from.has_isself()) {
      set_isself(from.isself());
    }
    if (from.has_unloweractioncount()) {
      set_unloweractioncount(from.unloweractioncount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FillUnitResponse::CopyFrom(const FillUnitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillUnitResponse::IsInitialized() const {

  return true;
}

void FillUnitResponse::Swap(FillUnitResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    spirits_.Swap(&other->spirits_);
    std::swap(actioncount_, other->actioncount_);
    std::swap(isself_, other->isself_);
    std::swap(unloweractioncount_, other->unloweractioncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FillUnitResponse::GetTypeName() const {
  return "main.FillUnitResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FillUnitReviveRequest::FillUnitReviveRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FillUnitReviveRequest)
}

void FillUnitReviveRequest::InitAsDefaultInstance() {
}

FillUnitReviveRequest::FillUnitReviveRequest(const FillUnitReviveRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FillUnitReviveRequest)
}

void FillUnitReviveRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillUnitReviveRequest::~FillUnitReviveRequest() {
  // @@protoc_insertion_point(destructor:main.FillUnitReviveRequest)
  SharedDtor();
}

void FillUnitReviveRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FillUnitReviveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FillUnitReviveRequest& FillUnitReviveRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FillUnitReviveRequest* FillUnitReviveRequest::default_instance_ = NULL;

FillUnitReviveRequest* FillUnitReviveRequest::New() const {
  return new FillUnitReviveRequest;
}

void FillUnitReviveRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FillUnitReviveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FillUnitReviveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.FillUnitReviveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FillUnitReviveRequest)
  return false;
#undef DO_
}

void FillUnitReviveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FillUnitReviveRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FillUnitReviveRequest)
}

int FillUnitReviveRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillUnitReviveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FillUnitReviveRequest*>(&from));
}

void FillUnitReviveRequest::MergeFrom(const FillUnitReviveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FillUnitReviveRequest::CopyFrom(const FillUnitReviveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillUnitReviveRequest::IsInitialized() const {

  return true;
}

void FillUnitReviveRequest::Swap(FillUnitReviveRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FillUnitReviveRequest::GetTypeName() const {
  return "main.FillUnitReviveRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FillUnitReviveResponse::kStateFieldNumber;
const int FillUnitReviveResponse::kRoleIdFieldNumber;
const int FillUnitReviveResponse::kSpiritsFieldNumber;
const int FillUnitReviveResponse::kSelfTempOfficerFieldNumber;
#endif  // !_MSC_VER

FillUnitReviveResponse::FillUnitReviveResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FillUnitReviveResponse)
}

void FillUnitReviveResponse::InitAsDefaultInstance() {
}

FillUnitReviveResponse::FillUnitReviveResponse(const FillUnitReviveResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FillUnitReviveResponse)
}

void FillUnitReviveResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillUnitReviveResponse::~FillUnitReviveResponse() {
  // @@protoc_insertion_point(destructor:main.FillUnitReviveResponse)
  SharedDtor();
}

void FillUnitReviveResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FillUnitReviveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FillUnitReviveResponse& FillUnitReviveResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FillUnitReviveResponse* FillUnitReviveResponse::default_instance_ = NULL;

FillUnitReviveResponse* FillUnitReviveResponse::New() const {
  return new FillUnitReviveResponse;
}

void FillUnitReviveResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FillUnitReviveResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, roleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  spirits_.Clear();
  selftempofficer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FillUnitReviveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FillUnitReviveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 2;
      case 2: {
        if (tag == 16) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        break;
      }

      // repeated .main.FightSpirit spirits = 3;
      case 3: {
        if (tag == 26) {
         parse_spirits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spirits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        if (input->ExpectTag(34)) goto parse_selfTempOfficer;
        break;
      }

      // repeated .main.FightSpirit selfTempOfficer = 4;
      case 4: {
        if (tag == 34) {
         parse_selfTempOfficer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selftempofficer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_selfTempOfficer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FillUnitReviveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FillUnitReviveResponse)
  return false;
#undef DO_
}

void FillUnitReviveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FillUnitReviveResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 roleId = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // repeated .main.FightSpirit spirits = 3;
  for (int i = 0; i < this->spirits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->spirits(i), output);
  }

  // repeated .main.FightSpirit selfTempOfficer = 4;
  for (int i = 0; i < this->selftempofficer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->selftempofficer(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FillUnitReviveResponse)
}

int FillUnitReviveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 roleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .main.FightSpirit spirits = 3;
  total_size += 1 * this->spirits_size();
  for (int i = 0; i < this->spirits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spirits(i));
  }

  // repeated .main.FightSpirit selfTempOfficer = 4;
  total_size += 1 * this->selftempofficer_size();
  for (int i = 0; i < this->selftempofficer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selftempofficer(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillUnitReviveResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FillUnitReviveResponse*>(&from));
}

void FillUnitReviveResponse::MergeFrom(const FillUnitReviveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  spirits_.MergeFrom(from.spirits_);
  selftempofficer_.MergeFrom(from.selftempofficer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FillUnitReviveResponse::CopyFrom(const FillUnitReviveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillUnitReviveResponse::IsInitialized() const {

  return true;
}

void FillUnitReviveResponse::Swap(FillUnitReviveResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(roleid_, other->roleid_);
    spirits_.Swap(&other->spirits_);
    selftempofficer_.Swap(&other->selftempofficer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FillUnitReviveResponse::GetTypeName() const {
  return "main.FillUnitReviveResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QiangZhiFillUnitRequest::QiangZhiFillUnitRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.QiangZhiFillUnitRequest)
}

void QiangZhiFillUnitRequest::InitAsDefaultInstance() {
}

QiangZhiFillUnitRequest::QiangZhiFillUnitRequest(const QiangZhiFillUnitRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.QiangZhiFillUnitRequest)
}

void QiangZhiFillUnitRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QiangZhiFillUnitRequest::~QiangZhiFillUnitRequest() {
  // @@protoc_insertion_point(destructor:main.QiangZhiFillUnitRequest)
  SharedDtor();
}

void QiangZhiFillUnitRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QiangZhiFillUnitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QiangZhiFillUnitRequest& QiangZhiFillUnitRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

QiangZhiFillUnitRequest* QiangZhiFillUnitRequest::default_instance_ = NULL;

QiangZhiFillUnitRequest* QiangZhiFillUnitRequest::New() const {
  return new QiangZhiFillUnitRequest;
}

void QiangZhiFillUnitRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool QiangZhiFillUnitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.QiangZhiFillUnitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.QiangZhiFillUnitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.QiangZhiFillUnitRequest)
  return false;
#undef DO_
}

void QiangZhiFillUnitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.QiangZhiFillUnitRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.QiangZhiFillUnitRequest)
}

int QiangZhiFillUnitRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QiangZhiFillUnitRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QiangZhiFillUnitRequest*>(&from));
}

void QiangZhiFillUnitRequest::MergeFrom(const QiangZhiFillUnitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QiangZhiFillUnitRequest::CopyFrom(const QiangZhiFillUnitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QiangZhiFillUnitRequest::IsInitialized() const {

  return true;
}

void QiangZhiFillUnitRequest::Swap(QiangZhiFillUnitRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QiangZhiFillUnitRequest::GetTypeName() const {
  return "main.QiangZhiFillUnitRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int QiangZhiFillUnitResponse::kStateFieldNumber;
const int QiangZhiFillUnitResponse::kFailMsgFieldNumber;
const int QiangZhiFillUnitResponse::kSpiritsFieldNumber;
const int QiangZhiFillUnitResponse::kActionCountFieldNumber;
const int QiangZhiFillUnitResponse::kIsSelfFieldNumber;
const int QiangZhiFillUnitResponse::kUnLowerActionCountFieldNumber;
#endif  // !_MSC_VER

QiangZhiFillUnitResponse::QiangZhiFillUnitResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.QiangZhiFillUnitResponse)
}

void QiangZhiFillUnitResponse::InitAsDefaultInstance() {
}

QiangZhiFillUnitResponse::QiangZhiFillUnitResponse(const QiangZhiFillUnitResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.QiangZhiFillUnitResponse)
}

void QiangZhiFillUnitResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actioncount_ = 0;
  isself_ = 0;
  unloweractioncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QiangZhiFillUnitResponse::~QiangZhiFillUnitResponse() {
  // @@protoc_insertion_point(destructor:main.QiangZhiFillUnitResponse)
  SharedDtor();
}

void QiangZhiFillUnitResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QiangZhiFillUnitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QiangZhiFillUnitResponse& QiangZhiFillUnitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

QiangZhiFillUnitResponse* QiangZhiFillUnitResponse::default_instance_ = NULL;

QiangZhiFillUnitResponse* QiangZhiFillUnitResponse::New() const {
  return new QiangZhiFillUnitResponse;
}

void QiangZhiFillUnitResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QiangZhiFillUnitResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(state_, actioncount_);
    ZR_(isself_, unloweractioncount_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  spirits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool QiangZhiFillUnitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.QiangZhiFillUnitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        break;
      }

      // repeated .main.FightSpirit spirits = 3;
      case 3: {
        if (tag == 26) {
         parse_spirits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spirits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        if (input->ExpectTag(32)) goto parse_actionCount;
        break;
      }

      // optional int32 actionCount = 4;
      case 4: {
        if (tag == 32) {
         parse_actionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncount_)));
          set_has_actioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isSelf;
        break;
      }

      // optional int32 isSelf = 5;
      case 5: {
        if (tag == 40) {
         parse_isSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isself_)));
          set_has_isself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unLowerActionCount;
        break;
      }

      // optional int32 unLowerActionCount = 6;
      case 6: {
        if (tag == 48) {
         parse_unLowerActionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unloweractioncount_)));
          set_has_unloweractioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.QiangZhiFillUnitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.QiangZhiFillUnitResponse)
  return false;
#undef DO_
}

void QiangZhiFillUnitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.QiangZhiFillUnitResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // repeated .main.FightSpirit spirits = 3;
  for (int i = 0; i < this->spirits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->spirits(i), output);
  }

  // optional int32 actionCount = 4;
  if (has_actioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncount(), output);
  }

  // optional int32 isSelf = 5;
  if (has_isself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isself(), output);
  }

  // optional int32 unLowerActionCount = 6;
  if (has_unloweractioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unloweractioncount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.QiangZhiFillUnitResponse)
}

int QiangZhiFillUnitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional int32 actionCount = 4;
    if (has_actioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncount());
    }

    // optional int32 isSelf = 5;
    if (has_isself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isself());
    }

    // optional int32 unLowerActionCount = 6;
    if (has_unloweractioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unloweractioncount());
    }

  }
  // repeated .main.FightSpirit spirits = 3;
  total_size += 1 * this->spirits_size();
  for (int i = 0; i < this->spirits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spirits(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QiangZhiFillUnitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QiangZhiFillUnitResponse*>(&from));
}

void QiangZhiFillUnitResponse::MergeFrom(const QiangZhiFillUnitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  spirits_.MergeFrom(from.spirits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_actioncount()) {
      set_actioncount(from.actioncount());
    }
    if (from.has_isself()) {
      set_isself(from.isself());
    }
    if (from.has_unloweractioncount()) {
      set_unloweractioncount(from.unloweractioncount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QiangZhiFillUnitResponse::CopyFrom(const QiangZhiFillUnitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QiangZhiFillUnitResponse::IsInitialized() const {

  return true;
}

void QiangZhiFillUnitResponse::Swap(QiangZhiFillUnitResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    spirits_.Swap(&other->spirits_);
    std::swap(actioncount_, other->actioncount_);
    std::swap(isself_, other->isself_);
    std::swap(unloweractioncount_, other->unloweractioncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QiangZhiFillUnitResponse::GetTypeName() const {
  return "main.QiangZhiFillUnitResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MoveRequest::kXFieldNumber;
const int MoveRequest::kToxFieldNumber;
#endif  // !_MSC_VER

MoveRequest::MoveRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MoveRequest)
}

void MoveRequest::InitAsDefaultInstance() {
}

MoveRequest::MoveRequest(const MoveRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MoveRequest)
}

void MoveRequest::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  tox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:main.MoveRequest)
  SharedDtor();
}

void MoveRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MoveRequest& MoveRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

MoveRequest* MoveRequest::default_instance_ = NULL;

MoveRequest* MoveRequest::New() const {
  return new MoveRequest;
}

void MoveRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoveRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, tox_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tox;
        break;
      }

      // optional int32 tox = 2;
      case 2: {
        if (tag == 16) {
         parse_tox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tox_)));
          set_has_tox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MoveRequest)
  return false;
#undef DO_
}

void MoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MoveRequest)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 tox = 2;
  if (has_tox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tox(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MoveRequest)
}

int MoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 tox = 2;
    if (has_tox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tox());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MoveRequest*>(&from));
}

void MoveRequest::MergeFrom(const MoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_tox()) {
      set_tox(from.tox());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {

  return true;
}

void MoveRequest::Swap(MoveRequest* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(tox_, other->tox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MoveRequest::GetTypeName() const {
  return "main.MoveRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int MoveResponse::kStateFieldNumber;
const int MoveResponse::kFailMsgFieldNumber;
const int MoveResponse::kXFieldNumber;
const int MoveResponse::kToxFieldNumber;
const int MoveResponse::kActionCountFieldNumber;
#endif  // !_MSC_VER

MoveResponse::MoveResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MoveResponse)
}

void MoveResponse::InitAsDefaultInstance() {
}

MoveResponse::MoveResponse(const MoveResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MoveResponse)
}

void MoveResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  tox_ = 0;
  actioncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveResponse::~MoveResponse() {
  // @@protoc_insertion_point(destructor:main.MoveResponse)
  SharedDtor();
}

void MoveResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MoveResponse& MoveResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

MoveResponse* MoveResponse::default_instance_ = NULL;

MoveResponse* MoveResponse::New() const {
  return new MoveResponse;
}

void MoveResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoveResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(state_, actioncount_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MoveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tox;
        break;
      }

      // optional int32 tox = 4;
      case 4: {
        if (tag == 32) {
         parse_tox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tox_)));
          set_has_tox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_actionCount;
        break;
      }

      // optional int32 actionCount = 5;
      case 5: {
        if (tag == 40) {
         parse_actionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncount_)));
          set_has_actioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MoveResponse)
  return false;
#undef DO_
}

void MoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MoveResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 tox = 4;
  if (has_tox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tox(), output);
  }

  // optional int32 actionCount = 5;
  if (has_actioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->actioncount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MoveResponse)
}

int MoveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 tox = 4;
    if (has_tox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tox());
    }

    // optional int32 actionCount = 5;
    if (has_actioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MoveResponse*>(&from));
}

void MoveResponse::MergeFrom(const MoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_tox()) {
      set_tox(from.tox());
    }
    if (from.has_actioncount()) {
      set_actioncount(from.actioncount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {

  return true;
}

void MoveResponse::Swap(MoveResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    std::swap(x_, other->x_);
    std::swap(tox_, other->tox_);
    std::swap(actioncount_, other->actioncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MoveResponse::GetTypeName() const {
  return "main.MoveResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GiveUpRequest::GiveUpRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GiveUpRequest)
}

void GiveUpRequest::InitAsDefaultInstance() {
}

GiveUpRequest::GiveUpRequest(const GiveUpRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GiveUpRequest)
}

void GiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveUpRequest::~GiveUpRequest() {
  // @@protoc_insertion_point(destructor:main.GiveUpRequest)
  SharedDtor();
}

void GiveUpRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiveUpRequest& GiveUpRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

GiveUpRequest* GiveUpRequest::default_instance_ = NULL;

GiveUpRequest* GiveUpRequest::New() const {
  return new GiveUpRequest;
}

void GiveUpRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GiveUpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.GiveUpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GiveUpRequest)
  return false;
#undef DO_
}

void GiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GiveUpRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GiveUpRequest)
}

int GiveUpRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveUpRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiveUpRequest*>(&from));
}

void GiveUpRequest::MergeFrom(const GiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GiveUpRequest::CopyFrom(const GiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveUpRequest::IsInitialized() const {

  return true;
}

void GiveUpRequest::Swap(GiveUpRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiveUpRequest::GetTypeName() const {
  return "main.GiveUpRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GiveUpResponse::kStateFieldNumber;
const int GiveUpResponse::kRoundFieldNumber;
const int GiveUpResponse::kSkillResidueRoundFieldNumber;
const int GiveUpResponse::kActionCountFieldNumber;
#endif  // !_MSC_VER

GiveUpResponse::GiveUpResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GiveUpResponse)
}

void GiveUpResponse::InitAsDefaultInstance() {
}

GiveUpResponse::GiveUpResponse(const GiveUpResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GiveUpResponse)
}

void GiveUpResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  round_ = -1;
  skillresidueround_ = 0;
  actioncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveUpResponse::~GiveUpResponse() {
  // @@protoc_insertion_point(destructor:main.GiveUpResponse)
  SharedDtor();
}

void GiveUpResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiveUpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiveUpResponse& GiveUpResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

GiveUpResponse* GiveUpResponse::default_instance_ = NULL;

GiveUpResponse* GiveUpResponse::New() const {
  return new GiveUpResponse;
}

void GiveUpResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GiveUpResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(skillresidueround_, actioncount_);
    state_ = 0;
    round_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GiveUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GiveUpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_round;
        break;
      }

      // optional int32 round = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillResidueRound;
        break;
      }

      // optional sint32 skillResidueRound = 3;
      case 3: {
        if (tag == 24) {
         parse_skillResidueRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillresidueround_)));
          set_has_skillresidueround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_actionCount;
        break;
      }

      // optional sint32 actionCount = 4;
      case 4: {
        if (tag == 32) {
         parse_actionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &actioncount_)));
          set_has_actioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GiveUpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GiveUpResponse)
  return false;
#undef DO_
}

void GiveUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GiveUpResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 round = 2 [default = -1];
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round(), output);
  }

  // optional sint32 skillResidueRound = 3;
  if (has_skillresidueround()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->skillresidueround(), output);
  }

  // optional sint32 actionCount = 4;
  if (has_actioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->actioncount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GiveUpResponse)
}

int GiveUpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 round = 2 [default = -1];
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional sint32 skillResidueRound = 3;
    if (has_skillresidueround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillresidueround());
    }

    // optional sint32 actionCount = 4;
    if (has_actioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->actioncount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveUpResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiveUpResponse*>(&from));
}

void GiveUpResponse::MergeFrom(const GiveUpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_skillresidueround()) {
      set_skillresidueround(from.skillresidueround());
    }
    if (from.has_actioncount()) {
      set_actioncount(from.actioncount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GiveUpResponse::CopyFrom(const GiveUpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveUpResponse::IsInitialized() const {

  return true;
}

void GiveUpResponse::Swap(GiveUpResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(round_, other->round_);
    std::swap(skillresidueround_, other->skillresidueround_);
    std::swap(actioncount_, other->actioncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiveUpResponse::GetTypeName() const {
  return "main.GiveUpResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRequest::kEnemyRoleIdFieldNumber;
const int RemoveRequest::kXFieldNumber;
const int RemoveRequest::kYFieldNumber;
#endif  // !_MSC_VER

RemoveRequest::RemoveRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RemoveRequest)
}

void RemoveRequest::InitAsDefaultInstance() {
}

RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RemoveRequest)
}

void RemoveRequest::SharedCtor() {
  _cached_size_ = 0;
  enemyroleid_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:main.RemoveRequest)
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveRequest& RemoveRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

RemoveRequest* RemoveRequest::default_instance_ = NULL;

RemoveRequest* RemoveRequest::New() const {
  return new RemoveRequest;
}

void RemoveRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoveRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enemyroleid_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enemyRoleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemyroleid_)));
          set_has_enemyroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RemoveRequest)
  return false;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RemoveRequest)
  // optional int32 enemyRoleId = 1;
  if (has_enemyroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enemyroleid(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RemoveRequest)
}

int RemoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enemyRoleId = 1;
    if (has_enemyroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemyroleid());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveRequest*>(&from));
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyroleid()) {
      set_enemyroleid(from.enemyroleid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {

  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other != this) {
    std::swap(enemyroleid_, other->enemyroleid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveRequest::GetTypeName() const {
  return "main.RemoveRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveResponse::kStateFieldNumber;
const int RemoveResponse::kFailMsgFieldNumber;
const int RemoveResponse::kXFieldNumber;
const int RemoveResponse::kYFieldNumber;
const int RemoveResponse::kActionCountFieldNumber;
#endif  // !_MSC_VER

RemoveResponse::RemoveResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.RemoveResponse)
}

void RemoveResponse::InitAsDefaultInstance() {
}

RemoveResponse::RemoveResponse(const RemoveResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.RemoveResponse)
}

void RemoveResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  actioncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveResponse::~RemoveResponse() {
  // @@protoc_insertion_point(destructor:main.RemoveResponse)
  SharedDtor();
}

void RemoveResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveResponse& RemoveResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

RemoveResponse* RemoveResponse::default_instance_ = NULL;

RemoveResponse* RemoveResponse::New() const {
  return new RemoveResponse;
}

void RemoveResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoveResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(state_, actioncount_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.RemoveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional int32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_actionCount;
        break;
      }

      // optional int32 actionCount = 5;
      case 5: {
        if (tag == 40) {
         parse_actionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncount_)));
          set_has_actioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.RemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.RemoveResponse)
  return false;
#undef DO_
}

void RemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.RemoveResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // optional int32 actionCount = 5;
  if (has_actioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->actioncount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.RemoveResponse)
}

int RemoveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 actionCount = 5;
    if (has_actioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveResponse*>(&from));
}

void RemoveResponse::MergeFrom(const RemoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_actioncount()) {
      set_actioncount(from.actioncount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RemoveResponse::CopyFrom(const RemoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResponse::IsInitialized() const {

  return true;
}

void RemoveResponse::Swap(RemoveResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(actioncount_, other->actioncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveResponse::GetTypeName() const {
  return "main.RemoveResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ActionCountResponse::kYourCountFieldNumber;
const int ActionCountResponse::kHimCountFieldNumber;
#endif  // !_MSC_VER

ActionCountResponse::ActionCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ActionCountResponse)
}

void ActionCountResponse::InitAsDefaultInstance() {
}

ActionCountResponse::ActionCountResponse(const ActionCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ActionCountResponse)
}

void ActionCountResponse::SharedCtor() {
  _cached_size_ = 0;
  yourcount_ = 0;
  himcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionCountResponse::~ActionCountResponse() {
  // @@protoc_insertion_point(destructor:main.ActionCountResponse)
  SharedDtor();
}

void ActionCountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ActionCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActionCountResponse& ActionCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

ActionCountResponse* ActionCountResponse::default_instance_ = NULL;

ActionCountResponse* ActionCountResponse::New() const {
  return new ActionCountResponse;
}

void ActionCountResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionCountResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(yourcount_, himcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ActionCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ActionCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 yourCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yourcount_)));
          set_has_yourcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_himCount;
        break;
      }

      // optional int32 himCount = 2;
      case 2: {
        if (tag == 16) {
         parse_himCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &himcount_)));
          set_has_himcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ActionCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ActionCountResponse)
  return false;
#undef DO_
}

void ActionCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ActionCountResponse)
  // optional int32 yourCount = 1;
  if (has_yourcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->yourcount(), output);
  }

  // optional int32 himCount = 2;
  if (has_himcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->himcount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ActionCountResponse)
}

int ActionCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 yourCount = 1;
    if (has_yourcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yourcount());
    }

    // optional int32 himCount = 2;
    if (has_himcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->himcount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActionCountResponse*>(&from));
}

void ActionCountResponse::MergeFrom(const ActionCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yourcount()) {
      set_yourcount(from.yourcount());
    }
    if (from.has_himcount()) {
      set_himcount(from.himcount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ActionCountResponse::CopyFrom(const ActionCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCountResponse::IsInitialized() const {

  return true;
}

void ActionCountResponse::Swap(ActionCountResponse* other) {
  if (other != this) {
    std::swap(yourcount_, other->yourcount_);
    std::swap(himcount_, other->himcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ActionCountResponse::GetTypeName() const {
  return "main.ActionCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FightSpirit::kSidFieldNumber;
const int FightSpirit::kTypeFieldNumber;
const int FightSpirit::kColorFieldNumber;
const int FightSpirit::kXFieldNumber;
const int FightSpirit::kYFieldNumber;
const int FightSpirit::kBaseAttackFieldNumber;
const int FightSpirit::kAttackFieldNumber;
const int FightSpirit::kBaseDefFieldNumber;
const int FightSpirit::kDefFieldNumber;
const int FightSpirit::kRoundFieldNumber;
const int FightSpirit::kDefeatPlusFieldNumber;
const int FightSpirit::kChainAndMergeAttackPlusFieldNumber;
const int FightSpirit::kWallgrowFieldNumber;
const int FightSpirit::kSkillIdFieldNumber;
const int FightSpirit::kValue1FieldNumber;
const int FightSpirit::kValue2FieldNumber;
const int FightSpirit::kWalltypeFieldNumber;
const int FightSpirit::kWallCeilingFieldNumber;
const int FightSpirit::kBuffIdFieldNumber;
const int FightSpirit::kBvalue1FieldNumber;
const int FightSpirit::kEffectRoundFieldNumber;
const int FightSpirit::kRandNumFieldNumber;
const int FightSpirit::kBuffTypeFieldNumber;
const int FightSpirit::kEffectFieldNumber;
const int FightSpirit::kPerRoundAddAtkFieldNumber;
const int FightSpirit::kAtkModeSkillFieldNumber;
const int FightSpirit::kDefeatFieldNumber;
const int FightSpirit::kCurrentDefFieldNumber;
#endif  // !_MSC_VER

FightSpirit::FightSpirit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightSpirit)
}

void FightSpirit::InitAsDefaultInstance() {
}

FightSpirit::FightSpirit(const FightSpirit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightSpirit)
}

void FightSpirit::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  type_ = 0;
  color_ = 0;
  x_ = 0;
  y_ = 0;
  baseattack_ = 0;
  attack_ = 0;
  basedef_ = 0;
  def_ = 0;
  round_ = 0;
  defeatplus_ = 0;
  chainandmergeattackplus_ = 0;
  wallgrow_ = 0;
  skillid_ = 0;
  value1_ = 0;
  value2_ = 0;
  walltype_ = 0;
  wallceiling_ = 0;
  buffid_ = 0;
  bvalue1_ = 0;
  effectround_ = 0;
  randnum_ = 0;
  bufftype_ = 0;
  effect_ = 0;
  perroundaddatk_ = 0;
  atkmodeskill_ = 0;
  defeat_ = false;
  currentdef_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightSpirit::~FightSpirit() {
  // @@protoc_insertion_point(destructor:main.FightSpirit)
  SharedDtor();
}

void FightSpirit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightSpirit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightSpirit& FightSpirit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightSpirit* FightSpirit::default_instance_ = NULL;

FightSpirit* FightSpirit::New() const {
  return new FightSpirit;
}

void FightSpirit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightSpirit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sid_, basedef_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(def_, value2_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(walltype_, effect_);
  }
  ZR_(perroundaddatk_, currentdef_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightSpirit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightSpirit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional int32 color = 3;
      case 3: {
        if (tag == 24) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }

      // optional int32 x = 4;
      case 4: {
        if (tag == 32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }

      // optional int32 y = 5;
      case 5: {
        if (tag == 40) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_baseAttack;
        break;
      }

      // optional int32 baseAttack = 6;
      case 6: {
        if (tag == 48) {
         parse_baseAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseattack_)));
          set_has_baseattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_attack;
        break;
      }

      // optional int32 attack = 7;
      case 7: {
        if (tag == 56) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_baseDef;
        break;
      }

      // optional int32 baseDef = 8;
      case 8: {
        if (tag == 64) {
         parse_baseDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basedef_)));
          set_has_basedef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_def;
        break;
      }

      // optional int32 def = 9;
      case 9: {
        if (tag == 72) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_round;
        break;
      }

      // optional int32 round = 10;
      case 10: {
        if (tag == 80) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_defeatPlus;
        break;
      }

      // optional float defeatPlus = 11;
      case 11: {
        if (tag == 93) {
         parse_defeatPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defeatplus_)));
          set_has_defeatplus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_chainAndMergeAttackPlus;
        break;
      }

      // optional float chainAndMergeAttackPlus = 12;
      case 12: {
        if (tag == 101) {
         parse_chainAndMergeAttackPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chainandmergeattackplus_)));
          set_has_chainandmergeattackplus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_wallgrow;
        break;
      }

      // optional float wallgrow = 13;
      case 13: {
        if (tag == 109) {
         parse_wallgrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wallgrow_)));
          set_has_wallgrow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 14;
      case 14: {
        if (tag == 112) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_value1;
        break;
      }

      // optional float value1 = 15;
      case 15: {
        if (tag == 125) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_value2;
        break;
      }

      // optional float value2 = 16;
      case 16: {
        if (tag == 133) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_walltype;
        break;
      }

      // optional float walltype = 17;
      case 17: {
        if (tag == 141) {
         parse_walltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &walltype_)));
          set_has_walltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_wallCeiling;
        break;
      }

      // optional float wallCeiling = 18;
      case 18: {
        if (tag == 149) {
         parse_wallCeiling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wallceiling_)));
          set_has_wallceiling();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_buffId;
        break;
      }

      // optional int32 buffId = 19;
      case 19: {
        if (tag == 152) {
         parse_buffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_bvalue1;
        break;
      }

      // optional float bvalue1 = 20;
      case 20: {
        if (tag == 165) {
         parse_bvalue1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bvalue1_)));
          set_has_bvalue1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_effectRound;
        break;
      }

      // optional int32 effectRound = 21;
      case 21: {
        if (tag == 168) {
         parse_effectRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectround_)));
          set_has_effectround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_randNum;
        break;
      }

      // optional int32 randNum = 22;
      case 22: {
        if (tag == 176) {
         parse_randNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randnum_)));
          set_has_randnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_buffType;
        break;
      }

      // optional int32 buffType = 23;
      case 23: {
        if (tag == 184) {
         parse_buffType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufftype_)));
          set_has_bufftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_effect;
        break;
      }

      // optional int32 effect = 24;
      case 24: {
        if (tag == 192) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_perRoundAddAtk;
        break;
      }

      // optional int32 perRoundAddAtk = 25;
      case 25: {
        if (tag == 200) {
         parse_perRoundAddAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perroundaddatk_)));
          set_has_perroundaddatk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_atkModeSkill;
        break;
      }

      // optional int32 atkModeSkill = 26;
      case 26: {
        if (tag == 208) {
         parse_atkModeSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atkmodeskill_)));
          set_has_atkmodeskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_defeat;
        break;
      }

      // optional bool defeat = 27;
      case 27: {
        if (tag == 216) {
         parse_defeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defeat_)));
          set_has_defeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_currentDef;
        break;
      }

      // optional int32 currentDef = 28;
      case 28: {
        if (tag == 224) {
         parse_currentDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentdef_)));
          set_has_currentdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightSpirit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightSpirit)
  return false;
#undef DO_
}

void FightSpirit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightSpirit)
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->color(), output);
  }

  // optional int32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }

  // optional int32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }

  // optional int32 baseAttack = 6;
  if (has_baseattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->baseattack(), output);
  }

  // optional int32 attack = 7;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attack(), output);
  }

  // optional int32 baseDef = 8;
  if (has_basedef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->basedef(), output);
  }

  // optional int32 def = 9;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->def(), output);
  }

  // optional int32 round = 10;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->round(), output);
  }

  // optional float defeatPlus = 11;
  if (has_defeatplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->defeatplus(), output);
  }

  // optional float chainAndMergeAttackPlus = 12;
  if (has_chainandmergeattackplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->chainandmergeattackplus(), output);
  }

  // optional float wallgrow = 13;
  if (has_wallgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->wallgrow(), output);
  }

  // optional int32 skillId = 14;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->skillid(), output);
  }

  // optional float value1 = 15;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->value1(), output);
  }

  // optional float value2 = 16;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->value2(), output);
  }

  // optional float walltype = 17;
  if (has_walltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->walltype(), output);
  }

  // optional float wallCeiling = 18;
  if (has_wallceiling()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->wallceiling(), output);
  }

  // optional int32 buffId = 19;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->buffid(), output);
  }

  // optional float bvalue1 = 20;
  if (has_bvalue1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->bvalue1(), output);
  }

  // optional int32 effectRound = 21;
  if (has_effectround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->effectround(), output);
  }

  // optional int32 randNum = 22;
  if (has_randnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->randnum(), output);
  }

  // optional int32 buffType = 23;
  if (has_bufftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->bufftype(), output);
  }

  // optional int32 effect = 24;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->effect(), output);
  }

  // optional int32 perRoundAddAtk = 25;
  if (has_perroundaddatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->perroundaddatk(), output);
  }

  // optional int32 atkModeSkill = 26;
  if (has_atkmodeskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->atkmodeskill(), output);
  }

  // optional bool defeat = 27;
  if (has_defeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->defeat(), output);
  }

  // optional int32 currentDef = 28;
  if (has_currentdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->currentdef(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightSpirit)
}

int FightSpirit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 baseAttack = 6;
    if (has_baseattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseattack());
    }

    // optional int32 attack = 7;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 baseDef = 8;
    if (has_basedef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basedef());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 def = 9;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }

    // optional int32 round = 10;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional float defeatPlus = 11;
    if (has_defeatplus()) {
      total_size += 1 + 4;
    }

    // optional float chainAndMergeAttackPlus = 12;
    if (has_chainandmergeattackplus()) {
      total_size += 1 + 4;
    }

    // optional float wallgrow = 13;
    if (has_wallgrow()) {
      total_size += 1 + 4;
    }

    // optional int32 skillId = 14;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional float value1 = 15;
    if (has_value1()) {
      total_size += 1 + 4;
    }

    // optional float value2 = 16;
    if (has_value2()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float walltype = 17;
    if (has_walltype()) {
      total_size += 2 + 4;
    }

    // optional float wallCeiling = 18;
    if (has_wallceiling()) {
      total_size += 2 + 4;
    }

    // optional int32 buffId = 19;
    if (has_buffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional float bvalue1 = 20;
    if (has_bvalue1()) {
      total_size += 2 + 4;
    }

    // optional int32 effectRound = 21;
    if (has_effectround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectround());
    }

    // optional int32 randNum = 22;
    if (has_randnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randnum());
    }

    // optional int32 buffType = 23;
    if (has_bufftype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufftype());
    }

    // optional int32 effect = 24;
    if (has_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 perRoundAddAtk = 25;
    if (has_perroundaddatk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perroundaddatk());
    }

    // optional int32 atkModeSkill = 26;
    if (has_atkmodeskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkmodeskill());
    }

    // optional bool defeat = 27;
    if (has_defeat()) {
      total_size += 2 + 1;
    }

    // optional int32 currentDef = 28;
    if (has_currentdef()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentdef());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightSpirit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightSpirit*>(&from));
}

void FightSpirit::MergeFrom(const FightSpirit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_baseattack()) {
      set_baseattack(from.baseattack());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_basedef()) {
      set_basedef(from.basedef());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_defeatplus()) {
      set_defeatplus(from.defeatplus());
    }
    if (from.has_chainandmergeattackplus()) {
      set_chainandmergeattackplus(from.chainandmergeattackplus());
    }
    if (from.has_wallgrow()) {
      set_wallgrow(from.wallgrow());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_walltype()) {
      set_walltype(from.walltype());
    }
    if (from.has_wallceiling()) {
      set_wallceiling(from.wallceiling());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_bvalue1()) {
      set_bvalue1(from.bvalue1());
    }
    if (from.has_effectround()) {
      set_effectround(from.effectround());
    }
    if (from.has_randnum()) {
      set_randnum(from.randnum());
    }
    if (from.has_bufftype()) {
      set_bufftype(from.bufftype());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_perroundaddatk()) {
      set_perroundaddatk(from.perroundaddatk());
    }
    if (from.has_atkmodeskill()) {
      set_atkmodeskill(from.atkmodeskill());
    }
    if (from.has_defeat()) {
      set_defeat(from.defeat());
    }
    if (from.has_currentdef()) {
      set_currentdef(from.currentdef());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightSpirit::CopyFrom(const FightSpirit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightSpirit::IsInitialized() const {

  return true;
}

void FightSpirit::Swap(FightSpirit* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(type_, other->type_);
    std::swap(color_, other->color_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(baseattack_, other->baseattack_);
    std::swap(attack_, other->attack_);
    std::swap(basedef_, other->basedef_);
    std::swap(def_, other->def_);
    std::swap(round_, other->round_);
    std::swap(defeatplus_, other->defeatplus_);
    std::swap(chainandmergeattackplus_, other->chainandmergeattackplus_);
    std::swap(wallgrow_, other->wallgrow_);
    std::swap(skillid_, other->skillid_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(walltype_, other->walltype_);
    std::swap(wallceiling_, other->wallceiling_);
    std::swap(buffid_, other->buffid_);
    std::swap(bvalue1_, other->bvalue1_);
    std::swap(effectround_, other->effectround_);
    std::swap(randnum_, other->randnum_);
    std::swap(bufftype_, other->bufftype_);
    std::swap(effect_, other->effect_);
    std::swap(perroundaddatk_, other->perroundaddatk_);
    std::swap(atkmodeskill_, other->atkmodeskill_);
    std::swap(defeat_, other->defeat_);
    std::swap(currentdef_, other->currentdef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightSpirit::GetTypeName() const {
  return "main.FightSpirit";
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyRequest::kCheckFieldNumber;
#endif  // !_MSC_VER

VerifyRequest::VerifyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.VerifyRequest)
}

void VerifyRequest::InitAsDefaultInstance() {
}

VerifyRequest::VerifyRequest(const VerifyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.VerifyRequest)
}

void VerifyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyRequest::~VerifyRequest() {
  // @@protoc_insertion_point(destructor:main.VerifyRequest)
  SharedDtor();
}

void VerifyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VerifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VerifyRequest& VerifyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

VerifyRequest* VerifyRequest::default_instance_ = NULL;

VerifyRequest* VerifyRequest::New() const {
  return new VerifyRequest;
}

void VerifyRequest::Clear() {
  check_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VerifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.VerifyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 check = 1;
      case 1: {
        if (tag == 8) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_check())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_check())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_check;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.VerifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.VerifyRequest)
  return false;
#undef DO_
}

void VerifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.VerifyRequest)
  // repeated int32 check = 1;
  for (int i = 0; i < this->check_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->check(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.VerifyRequest)
}

int VerifyRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 check = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->check_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->check(i));
    }
    total_size += 1 * this->check_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VerifyRequest*>(&from));
}

void VerifyRequest::MergeFrom(const VerifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  check_.MergeFrom(from.check_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VerifyRequest::CopyFrom(const VerifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRequest::IsInitialized() const {

  return true;
}

void VerifyRequest::Swap(VerifyRequest* other) {
  if (other != this) {
    check_.Swap(&other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VerifyRequest::GetTypeName() const {
  return "main.VerifyRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

VerifyResponse::VerifyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.VerifyResponse)
}

void VerifyResponse::InitAsDefaultInstance() {
}

VerifyResponse::VerifyResponse(const VerifyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.VerifyResponse)
}

void VerifyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyResponse::~VerifyResponse() {
  // @@protoc_insertion_point(destructor:main.VerifyResponse)
  SharedDtor();
}

void VerifyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VerifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VerifyResponse& VerifyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

VerifyResponse* VerifyResponse::default_instance_ = NULL;

VerifyResponse* VerifyResponse::New() const {
  return new VerifyResponse;
}

void VerifyResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool VerifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.VerifyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.VerifyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.VerifyResponse)
  return false;
#undef DO_
}

void VerifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.VerifyResponse)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.VerifyResponse)
}

int VerifyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VerifyResponse*>(&from));
}

void VerifyResponse::MergeFrom(const VerifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VerifyResponse::CopyFrom(const VerifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyResponse::IsInitialized() const {

  return true;
}

void VerifyResponse::Swap(VerifyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VerifyResponse::GetTypeName() const {
  return "main.VerifyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MajorSkillRequest::kValue1FieldNumber;
const int MajorSkillRequest::kValue2FieldNumber;
const int MajorSkillRequest::kTestFieldNumber;
#endif  // !_MSC_VER

MajorSkillRequest::MajorSkillRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MajorSkillRequest)
}

void MajorSkillRequest::InitAsDefaultInstance() {
}

MajorSkillRequest::MajorSkillRequest(const MajorSkillRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MajorSkillRequest)
}

void MajorSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  value1_ = 0;
  value2_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MajorSkillRequest::~MajorSkillRequest() {
  // @@protoc_insertion_point(destructor:main.MajorSkillRequest)
  SharedDtor();
}

void MajorSkillRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MajorSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MajorSkillRequest& MajorSkillRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

MajorSkillRequest* MajorSkillRequest::default_instance_ = NULL;

MajorSkillRequest* MajorSkillRequest::New() const {
  return new MajorSkillRequest;
}

void MajorSkillRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MajorSkillRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value1_, test_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MajorSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MajorSkillRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value1 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value2;
        break;
      }

      // optional float value2 = 2;
      case 2: {
        if (tag == 21) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_test;
        break;
      }

      // optional int32 test = 3;
      case 3: {
        if (tag == 24) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MajorSkillRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MajorSkillRequest)
  return false;
#undef DO_
}

void MajorSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MajorSkillRequest)
  // optional float value1 = 1;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value1(), output);
  }

  // optional float value2 = 2;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value2(), output);
  }

  // optional int32 test = 3;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->test(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MajorSkillRequest)
}

int MajorSkillRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float value1 = 1;
    if (has_value1()) {
      total_size += 1 + 4;
    }

    // optional float value2 = 2;
    if (has_value2()) {
      total_size += 1 + 4;
    }

    // optional int32 test = 3;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MajorSkillRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MajorSkillRequest*>(&from));
}

void MajorSkillRequest::MergeFrom(const MajorSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MajorSkillRequest::CopyFrom(const MajorSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MajorSkillRequest::IsInitialized() const {

  return true;
}

void MajorSkillRequest::Swap(MajorSkillRequest* other) {
  if (other != this) {
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MajorSkillRequest::GetTypeName() const {
  return "main.MajorSkillRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int MajorSkillResponse::kMajorSkillProtoFieldNumber;
#endif  // !_MSC_VER

MajorSkillResponse::MajorSkillResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MajorSkillResponse)
}

void MajorSkillResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  majorskillproto_ = const_cast< ::main::MajorSkillProto*>(
      ::main::MajorSkillProto::internal_default_instance());
#else
  majorskillproto_ = const_cast< ::main::MajorSkillProto*>(&::main::MajorSkillProto::default_instance());
#endif
}

MajorSkillResponse::MajorSkillResponse(const MajorSkillResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MajorSkillResponse)
}

void MajorSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  majorskillproto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MajorSkillResponse::~MajorSkillResponse() {
  // @@protoc_insertion_point(destructor:main.MajorSkillResponse)
  SharedDtor();
}

void MajorSkillResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete majorskillproto_;
  }
}

void MajorSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MajorSkillResponse& MajorSkillResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

MajorSkillResponse* MajorSkillResponse::default_instance_ = NULL;

MajorSkillResponse* MajorSkillResponse::New() const {
  return new MajorSkillResponse;
}

void MajorSkillResponse::Clear() {
  if (has_majorskillproto()) {
    if (majorskillproto_ != NULL) majorskillproto_->::main::MajorSkillProto::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MajorSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MajorSkillResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.MajorSkillProto majorSkillProto = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_majorskillproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MajorSkillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MajorSkillResponse)
  return false;
#undef DO_
}

void MajorSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MajorSkillResponse)
  // optional .main.MajorSkillProto majorSkillProto = 1;
  if (has_majorskillproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->majorskillproto(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MajorSkillResponse)
}

int MajorSkillResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.MajorSkillProto majorSkillProto = 1;
    if (has_majorskillproto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->majorskillproto());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MajorSkillResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MajorSkillResponse*>(&from));
}

void MajorSkillResponse::MergeFrom(const MajorSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_majorskillproto()) {
      mutable_majorskillproto()->::main::MajorSkillProto::MergeFrom(from.majorskillproto());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MajorSkillResponse::CopyFrom(const MajorSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MajorSkillResponse::IsInitialized() const {

  return true;
}

void MajorSkillResponse::Swap(MajorSkillResponse* other) {
  if (other != this) {
    std::swap(majorskillproto_, other->majorskillproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MajorSkillResponse::GetTypeName() const {
  return "main.MajorSkillResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MajorSkillProto::kStateFieldNumber;
const int MajorSkillProto::kSkillIdFieldNumber;
const int MajorSkillProto::kValue1FieldNumber;
const int MajorSkillProto::kValue2FieldNumber;
const int MajorSkillProto::kRoleIdFieldNumber;
const int MajorSkillProto::kCoordinateProtoListFieldNumber;
const int MajorSkillProto::kBuffIdFieldNumber;
const int MajorSkillProto::kRoundFieldNumber;
const int MajorSkillProto::kValue3FieldNumber;
const int MajorSkillProto::kLordAtkModeFieldNumber;
const int MajorSkillProto::kCoordinateEffectProtoFieldNumber;
#endif  // !_MSC_VER

MajorSkillProto::MajorSkillProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MajorSkillProto)
}

void MajorSkillProto::InitAsDefaultInstance() {
}

MajorSkillProto::MajorSkillProto(const MajorSkillProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MajorSkillProto)
}

void MajorSkillProto::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  skillid_ = 0;
  value1_ = 0;
  value2_ = 0;
  roleid_ = 0;
  buffid_ = 0;
  round_ = 0;
  value3_ = 0;
  lordatkmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MajorSkillProto::~MajorSkillProto() {
  // @@protoc_insertion_point(destructor:main.MajorSkillProto)
  SharedDtor();
}

void MajorSkillProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MajorSkillProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MajorSkillProto& MajorSkillProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

MajorSkillProto* MajorSkillProto::default_instance_ = NULL;

MajorSkillProto* MajorSkillProto::New() const {
  return new MajorSkillProto;
}

void MajorSkillProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MajorSkillProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(state_, value2_);
    ZR_(roleid_, round_);
  }
  if (_has_bits_[8 / 32] & 768) {
    value3_ = 0;
    lordatkmode_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  coordinateprotolist_.Clear();
  coordinateeffectproto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MajorSkillProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MajorSkillProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 2;
      case 2: {
        if (tag == 16) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_value1;
        break;
      }

      // optional float value1 = 3;
      case 3: {
        if (tag == 29) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_value2;
        break;
      }

      // optional float value2 = 4;
      case 4: {
        if (tag == 37) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 5;
      case 5: {
        if (tag == 40) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_coordinateProtoList;
        break;
      }

      // repeated .main.CoordinateProto coordinateProtoList = 6;
      case 6: {
        if (tag == 50) {
         parse_coordinateProtoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coordinateprotolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_coordinateProtoList;
        if (input->ExpectTag(56)) goto parse_buffId;
        break;
      }

      // optional int32 buffId = 7;
      case 7: {
        if (tag == 56) {
         parse_buffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_round;
        break;
      }

      // optional int32 round = 8;
      case 8: {
        if (tag == 64) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_value3;
        break;
      }

      // optional float value3 = 9;
      case 9: {
        if (tag == 77) {
         parse_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lordAtkMode;
        break;
      }

      // optional int32 lordAtkMode = 10;
      case 10: {
        if (tag == 80) {
         parse_lordAtkMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lordatkmode_)));
          set_has_lordatkmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_coordinateEffectProto;
        break;
      }

      // repeated .main.CoordinateEffectProto coordinateEffectProto = 11;
      case 11: {
        if (tag == 90) {
         parse_coordinateEffectProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coordinateeffectproto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_coordinateEffectProto;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MajorSkillProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MajorSkillProto)
  return false;
#undef DO_
}

void MajorSkillProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MajorSkillProto)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional float value1 = 3;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value1(), output);
  }

  // optional float value2 = 4;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value2(), output);
  }

  // optional int32 roleId = 5;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roleid(), output);
  }

  // repeated .main.CoordinateProto coordinateProtoList = 6;
  for (int i = 0; i < this->coordinateprotolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->coordinateprotolist(i), output);
  }

  // optional int32 buffId = 7;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buffid(), output);
  }

  // optional int32 round = 8;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->round(), output);
  }

  // optional float value3 = 9;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->value3(), output);
  }

  // optional int32 lordAtkMode = 10;
  if (has_lordatkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lordatkmode(), output);
  }

  // repeated .main.CoordinateEffectProto coordinateEffectProto = 11;
  for (int i = 0; i < this->coordinateeffectproto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->coordinateeffectproto(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MajorSkillProto)
}

int MajorSkillProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional float value1 = 3;
    if (has_value1()) {
      total_size += 1 + 4;
    }

    // optional float value2 = 4;
    if (has_value2()) {
      total_size += 1 + 4;
    }

    // optional int32 roleId = 5;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 buffId = 7;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 round = 8;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float value3 = 9;
    if (has_value3()) {
      total_size += 1 + 4;
    }

    // optional int32 lordAtkMode = 10;
    if (has_lordatkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lordatkmode());
    }

  }
  // repeated .main.CoordinateProto coordinateProtoList = 6;
  total_size += 1 * this->coordinateprotolist_size();
  for (int i = 0; i < this->coordinateprotolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinateprotolist(i));
  }

  // repeated .main.CoordinateEffectProto coordinateEffectProto = 11;
  total_size += 1 * this->coordinateeffectproto_size();
  for (int i = 0; i < this->coordinateeffectproto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinateeffectproto(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MajorSkillProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MajorSkillProto*>(&from));
}

void MajorSkillProto::MergeFrom(const MajorSkillProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordinateprotolist_.MergeFrom(from.coordinateprotolist_);
  coordinateeffectproto_.MergeFrom(from.coordinateeffectproto_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value3()) {
      set_value3(from.value3());
    }
    if (from.has_lordatkmode()) {
      set_lordatkmode(from.lordatkmode());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MajorSkillProto::CopyFrom(const MajorSkillProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MajorSkillProto::IsInitialized() const {

  return true;
}

void MajorSkillProto::Swap(MajorSkillProto* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(skillid_, other->skillid_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(roleid_, other->roleid_);
    coordinateprotolist_.Swap(&other->coordinateprotolist_);
    std::swap(buffid_, other->buffid_);
    std::swap(round_, other->round_);
    std::swap(value3_, other->value3_);
    std::swap(lordatkmode_, other->lordatkmode_);
    coordinateeffectproto_.Swap(&other->coordinateeffectproto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MajorSkillProto::GetTypeName() const {
  return "main.MajorSkillProto";
}


// ===================================================================

#ifndef _MSC_VER
const int CoordinateProto::kXFieldNumber;
const int CoordinateProto::kYFieldNumber;
#endif  // !_MSC_VER

CoordinateProto::CoordinateProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CoordinateProto)
}

void CoordinateProto::InitAsDefaultInstance() {
}

CoordinateProto::CoordinateProto(const CoordinateProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CoordinateProto)
}

void CoordinateProto::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordinateProto::~CoordinateProto() {
  // @@protoc_insertion_point(destructor:main.CoordinateProto)
  SharedDtor();
}

void CoordinateProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CoordinateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CoordinateProto& CoordinateProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

CoordinateProto* CoordinateProto::default_instance_ = NULL;

CoordinateProto* CoordinateProto::New() const {
  return new CoordinateProto;
}

void CoordinateProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CoordinateProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CoordinateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CoordinateProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CoordinateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CoordinateProto)
  return false;
#undef DO_
}

void CoordinateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CoordinateProto)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CoordinateProto)
}

int CoordinateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordinateProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CoordinateProto*>(&from));
}

void CoordinateProto::MergeFrom(const CoordinateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CoordinateProto::CopyFrom(const CoordinateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinateProto::IsInitialized() const {

  return true;
}

void CoordinateProto::Swap(CoordinateProto* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CoordinateProto::GetTypeName() const {
  return "main.CoordinateProto";
}


// ===================================================================

#ifndef _MSC_VER
const int CoordinateEffectProto::kXFieldNumber;
const int CoordinateEffectProto::kYFieldNumber;
const int CoordinateEffectProto::kHpFieldNumber;
#endif  // !_MSC_VER

CoordinateEffectProto::CoordinateEffectProto()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CoordinateEffectProto)
}

void CoordinateEffectProto::InitAsDefaultInstance() {
}

CoordinateEffectProto::CoordinateEffectProto(const CoordinateEffectProto& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CoordinateEffectProto)
}

void CoordinateEffectProto::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordinateEffectProto::~CoordinateEffectProto() {
  // @@protoc_insertion_point(destructor:main.CoordinateEffectProto)
  SharedDtor();
}

void CoordinateEffectProto::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CoordinateEffectProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CoordinateEffectProto& CoordinateEffectProto::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

CoordinateEffectProto* CoordinateEffectProto::default_instance_ = NULL;

CoordinateEffectProto* CoordinateEffectProto::New() const {
  return new CoordinateEffectProto;
}

void CoordinateEffectProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CoordinateEffectProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, hp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CoordinateEffectProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CoordinateEffectProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional int32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CoordinateEffectProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CoordinateEffectProto)
  return false;
#undef DO_
}

void CoordinateEffectProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CoordinateEffectProto)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CoordinateEffectProto)
}

int CoordinateEffectProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordinateEffectProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CoordinateEffectProto*>(&from));
}

void CoordinateEffectProto::MergeFrom(const CoordinateEffectProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CoordinateEffectProto::CopyFrom(const CoordinateEffectProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinateEffectProto::IsInitialized() const {

  return true;
}

void CoordinateEffectProto::Swap(CoordinateEffectProto* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CoordinateEffectProto::GetTypeName() const {
  return "main.CoordinateEffectProto";
}


// ===================================================================

#ifndef _MSC_VER
const int FightThtoughRewardRequest::kFighprossIdFieldNumber;
const int FightThtoughRewardRequest::kIsWinFieldNumber;
const int FightThtoughRewardRequest::kCurrHpFieldNumber;
#endif  // !_MSC_VER

FightThtoughRewardRequest::FightThtoughRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightThtoughRewardRequest)
}

void FightThtoughRewardRequest::InitAsDefaultInstance() {
}

FightThtoughRewardRequest::FightThtoughRewardRequest(const FightThtoughRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightThtoughRewardRequest)
}

void FightThtoughRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  fighprossid_ = GOOGLE_LONGLONG(0);
  iswin_ = 0;
  currhp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightThtoughRewardRequest::~FightThtoughRewardRequest() {
  // @@protoc_insertion_point(destructor:main.FightThtoughRewardRequest)
  SharedDtor();
}

void FightThtoughRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightThtoughRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightThtoughRewardRequest& FightThtoughRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightThtoughRewardRequest* FightThtoughRewardRequest::default_instance_ = NULL;

FightThtoughRewardRequest* FightThtoughRewardRequest::New() const {
  return new FightThtoughRewardRequest;
}

void FightThtoughRewardRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightThtoughRewardRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fighprossid_, currhp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightThtoughRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightThtoughRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 fighprossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fighprossid_)));
          set_has_fighprossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isWin;
        break;
      }

      // required sint32 isWin = 2;
      case 2: {
        if (tag == 16) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currHp;
        break;
      }

      // optional sint32 currHp = 3;
      case 3: {
        if (tag == 24) {
         parse_currHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &currhp_)));
          set_has_currhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightThtoughRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightThtoughRewardRequest)
  return false;
#undef DO_
}

void FightThtoughRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightThtoughRewardRequest)
  // required int64 fighprossId = 1;
  if (has_fighprossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fighprossid(), output);
  }

  // required sint32 isWin = 2;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->iswin(), output);
  }

  // optional sint32 currHp = 3;
  if (has_currhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->currhp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightThtoughRewardRequest)
}

int FightThtoughRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 fighprossId = 1;
    if (has_fighprossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fighprossid());
    }

    // required sint32 isWin = 2;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->iswin());
    }

    // optional sint32 currHp = 3;
    if (has_currhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->currhp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightThtoughRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightThtoughRewardRequest*>(&from));
}

void FightThtoughRewardRequest::MergeFrom(const FightThtoughRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fighprossid()) {
      set_fighprossid(from.fighprossid());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_currhp()) {
      set_currhp(from.currhp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightThtoughRewardRequest::CopyFrom(const FightThtoughRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightThtoughRewardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FightThtoughRewardRequest::Swap(FightThtoughRewardRequest* other) {
  if (other != this) {
    std::swap(fighprossid_, other->fighprossid_);
    std::swap(iswin_, other->iswin_);
    std::swap(currhp_, other->currhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightThtoughRewardRequest::GetTypeName() const {
  return "main.FightThtoughRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightRewardRequest::kFighprossIdFieldNumber;
#endif  // !_MSC_VER

FightRewardRequest::FightRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightRewardRequest)
}

void FightRewardRequest::InitAsDefaultInstance() {
}

FightRewardRequest::FightRewardRequest(const FightRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightRewardRequest)
}

void FightRewardRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fighprossid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRewardRequest::~FightRewardRequest() {
  // @@protoc_insertion_point(destructor:main.FightRewardRequest)
  SharedDtor();
}

void FightRewardRequest::SharedDtor() {
  if (fighprossid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fighprossid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightRewardRequest& FightRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightRewardRequest* FightRewardRequest::default_instance_ = NULL;

FightRewardRequest* FightRewardRequest::New() const {
  return new FightRewardRequest;
}

void FightRewardRequest::Clear() {
  if (has_fighprossid()) {
    if (fighprossid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fighprossid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fighprossId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fighprossid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightRewardRequest)
  return false;
#undef DO_
}

void FightRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightRewardRequest)
  // optional string fighprossId = 1;
  if (has_fighprossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fighprossid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightRewardRequest)
}

int FightRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fighprossId = 1;
    if (has_fighprossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fighprossid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightRewardRequest*>(&from));
}

void FightRewardRequest::MergeFrom(const FightRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fighprossid()) {
      set_fighprossid(from.fighprossid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightRewardRequest::CopyFrom(const FightRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRewardRequest::IsInitialized() const {

  return true;
}

void FightRewardRequest::Swap(FightRewardRequest* other) {
  if (other != this) {
    std::swap(fighprossid_, other->fighprossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightRewardRequest::GetTypeName() const {
  return "main.FightRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightRewardResponse::kStateFieldNumber;
const int FightRewardResponse::kPlotIdFieldNumber;
const int FightRewardResponse::kRatingFieldNumber;
const int FightRewardResponse::kExpFieldNumber;
const int FightRewardResponse::kGoldFieldNumber;
const int FightRewardResponse::kDropItemsFieldNumber;
const int FightRewardResponse::kIsWinFieldNumber;
const int FightRewardResponse::kHpRateFieldNumber;
const int FightRewardResponse::kCoinsFieldNumber;
const int FightRewardResponse::kMeritoriousFieldNumber;
const int FightRewardResponse::kLianDanFieldNumber;
const int FightRewardResponse::kAddExpFieldNumber;
const int FightRewardResponse::kLevelFieldNumber;
const int FightRewardResponse::kIsMaxLevelFieldNumber;
const int FightRewardResponse::kBaseHpFieldNumber;
const int FightRewardResponse::kCurrHpFieldNumber;
const int FightRewardResponse::kOldLevelFieldNumber;
const int FightRewardResponse::kXiyuFieldNumber;
#endif  // !_MSC_VER

FightRewardResponse::FightRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightRewardResponse)
}

void FightRewardResponse::InitAsDefaultInstance() {
}

FightRewardResponse::FightRewardResponse(const FightRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightRewardResponse)
}

void FightRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  plotid_ = 0;
  rating_ = 0;
  exp_ = 0;
  gold_ = 0;
  iswin_ = 0;
  hprate_ = 0;
  coins_ = 0;
  meritorious_ = 0;
  liandan_ = -1;
  addexp_ = 0;
  level_ = 0;
  ismaxlevel_ = 0;
  basehp_ = 0;
  currhp_ = 0;
  oldlevel_ = 0;
  xiyu_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRewardResponse::~FightRewardResponse() {
  // @@protoc_insertion_point(destructor:main.FightRewardResponse)
  SharedDtor();
}

void FightRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightRewardResponse& FightRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightRewardResponse* FightRewardResponse::default_instance_ = NULL;

FightRewardResponse* FightRewardResponse::New() const {
  return new FightRewardResponse;
}

void FightRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(state_, exp_);
    ZR_(gold_, hprate_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(coins_, meritorious_);
    ZR_(addexp_, currhp_);
    liandan_ = -1;
  }
  if (_has_bits_[16 / 32] & 196608) {
    oldlevel_ = 0;
    xiyu_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dropitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plotId;
        break;
      }

      // optional int32 plotId = 2;
      case 2: {
        if (tag == 16) {
         parse_plotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plotid_)));
          set_has_plotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rating;
        break;
      }

      // optional int32 rating = 3;
      case 3: {
        if (tag == 24) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // optional int32 gold = 5;
      case 5: {
        if (tag == 40) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dropItems;
        break;
      }

      // repeated .main.FightRewardDropItems dropItems = 6;
      case 6: {
        if (tag == 50) {
         parse_dropItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dropItems;
        if (input->ExpectTag(56)) goto parse_isWin;
        break;
      }

      // optional int32 isWin = 7;
      case 7: {
        if (tag == 56) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_hpRate;
        break;
      }

      // optional float hpRate = 8;
      case 8: {
        if (tag == 69) {
         parse_hpRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hprate_)));
          set_has_hprate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_coins;
        break;
      }

      // optional int32 coins = 9;
      case 9: {
        if (tag == 72) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_meritorious;
        break;
      }

      // optional int32 meritorious = 10;
      case 10: {
        if (tag == 80) {
         parse_meritorious:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meritorious_)));
          set_has_meritorious();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lianDan;
        break;
      }

      // optional int32 lianDan = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_lianDan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liandan_)));
          set_has_liandan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_addExp;
        break;
      }

      // optional int32 addExp = 12;
      case 12: {
        if (tag == 96) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }

      // optional int32 level = 13;
      case 13: {
        if (tag == 104) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isMaxLevel;
        break;
      }

      // optional int32 isMaxLevel = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_isMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismaxlevel_)));
          set_has_ismaxlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_baseHp;
        break;
      }

      // optional sint32 baseHp = 15;
      case 15: {
        if (tag == 120) {
         parse_baseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &basehp_)));
          set_has_basehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_currHp;
        break;
      }

      // optional sint32 currHp = 16;
      case 16: {
        if (tag == 128) {
         parse_currHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &currhp_)));
          set_has_currhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_oldLevel;
        break;
      }

      // optional int32 oldLevel = 17;
      case 17: {
        if (tag == 136) {
         parse_oldLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldlevel_)));
          set_has_oldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_xiyu;
        break;
      }

      // optional int32 xiyu = 18 [default = -1];
      case 18: {
        if (tag == 144) {
         parse_xiyu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xiyu_)));
          set_has_xiyu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightRewardResponse)
  return false;
#undef DO_
}

void FightRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightRewardResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 plotId = 2;
  if (has_plotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plotid(), output);
  }

  // optional int32 rating = 3;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rating(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // repeated .main.FightRewardDropItems dropItems = 6;
  for (int i = 0; i < this->dropitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->dropitems(i), output);
  }

  // optional int32 isWin = 7;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iswin(), output);
  }

  // optional float hpRate = 8;
  if (has_hprate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->hprate(), output);
  }

  // optional int32 coins = 9;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->coins(), output);
  }

  // optional int32 meritorious = 10;
  if (has_meritorious()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->meritorious(), output);
  }

  // optional int32 lianDan = 11 [default = -1];
  if (has_liandan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->liandan(), output);
  }

  // optional int32 addExp = 12;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->addexp(), output);
  }

  // optional int32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->level(), output);
  }

  // optional int32 isMaxLevel = 14 [default = 0];
  if (has_ismaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ismaxlevel(), output);
  }

  // optional sint32 baseHp = 15;
  if (has_basehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->basehp(), output);
  }

  // optional sint32 currHp = 16;
  if (has_currhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->currhp(), output);
  }

  // optional int32 oldLevel = 17;
  if (has_oldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->oldlevel(), output);
  }

  // optional int32 xiyu = 18 [default = -1];
  if (has_xiyu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->xiyu(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightRewardResponse)
}

int FightRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 plotId = 2;
    if (has_plotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plotid());
    }

    // optional int32 rating = 3;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rating());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 isWin = 7;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswin());
    }

    // optional float hpRate = 8;
    if (has_hprate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 coins = 9;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

    // optional int32 meritorious = 10;
    if (has_meritorious()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meritorious());
    }

    // optional int32 lianDan = 11 [default = -1];
    if (has_liandan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liandan());
    }

    // optional int32 addExp = 12;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addexp());
    }

    // optional int32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 isMaxLevel = 14 [default = 0];
    if (has_ismaxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismaxlevel());
    }

    // optional sint32 baseHp = 15;
    if (has_basehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->basehp());
    }

    // optional sint32 currHp = 16;
    if (has_currhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->currhp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 oldLevel = 17;
    if (has_oldlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldlevel());
    }

    // optional int32 xiyu = 18 [default = -1];
    if (has_xiyu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xiyu());
    }

  }
  // repeated .main.FightRewardDropItems dropItems = 6;
  total_size += 1 * this->dropitems_size();
  for (int i = 0; i < this->dropitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropitems(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightRewardResponse*>(&from));
}

void FightRewardResponse::MergeFrom(const FightRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropitems_.MergeFrom(from.dropitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_plotid()) {
      set_plotid(from.plotid());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_hprate()) {
      set_hprate(from.hprate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_meritorious()) {
      set_meritorious(from.meritorious());
    }
    if (from.has_liandan()) {
      set_liandan(from.liandan());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ismaxlevel()) {
      set_ismaxlevel(from.ismaxlevel());
    }
    if (from.has_basehp()) {
      set_basehp(from.basehp());
    }
    if (from.has_currhp()) {
      set_currhp(from.currhp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_oldlevel()) {
      set_oldlevel(from.oldlevel());
    }
    if (from.has_xiyu()) {
      set_xiyu(from.xiyu());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightRewardResponse::CopyFrom(const FightRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRewardResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->dropitems())) return false;
  return true;
}

void FightRewardResponse::Swap(FightRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(plotid_, other->plotid_);
    std::swap(rating_, other->rating_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    dropitems_.Swap(&other->dropitems_);
    std::swap(iswin_, other->iswin_);
    std::swap(hprate_, other->hprate_);
    std::swap(coins_, other->coins_);
    std::swap(meritorious_, other->meritorious_);
    std::swap(liandan_, other->liandan_);
    std::swap(addexp_, other->addexp_);
    std::swap(level_, other->level_);
    std::swap(ismaxlevel_, other->ismaxlevel_);
    std::swap(basehp_, other->basehp_);
    std::swap(currhp_, other->currhp_);
    std::swap(oldlevel_, other->oldlevel_);
    std::swap(xiyu_, other->xiyu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightRewardResponse::GetTypeName() const {
  return "main.FightRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FightRewardDropItems::kOfficerCardsFieldNumber;
const int FightRewardDropItems::kEquipmentCardsFieldNumber;
const int FightRewardDropItems::kPropsCardsFieldNumber;
const int FightRewardDropItems::kFragmentCardsFieldNumber;
const int FightRewardDropItems::kConsumableCardsFieldNumber;
const int FightRewardDropItems::kMaterialItemProtosFieldNumber;
const int FightRewardDropItems::kItemDataFieldNumber;
#endif  // !_MSC_VER

FightRewardDropItems::FightRewardDropItems()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightRewardDropItems)
}

void FightRewardDropItems::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  officercards_ = const_cast< ::main::OfficerCardItemProto*>(
      ::main::OfficerCardItemProto::internal_default_instance());
#else
  officercards_ = const_cast< ::main::OfficerCardItemProto*>(&::main::OfficerCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipmentcards_ = const_cast< ::main::EquipmentCardItemProto*>(
      ::main::EquipmentCardItemProto::internal_default_instance());
#else
  equipmentcards_ = const_cast< ::main::EquipmentCardItemProto*>(&::main::EquipmentCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  propscards_ = const_cast< ::main::PropsCardItemProto*>(
      ::main::PropsCardItemProto::internal_default_instance());
#else
  propscards_ = const_cast< ::main::PropsCardItemProto*>(&::main::PropsCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fragmentcards_ = const_cast< ::main::OfficerFragmentCardItemProto*>(
      ::main::OfficerFragmentCardItemProto::internal_default_instance());
#else
  fragmentcards_ = const_cast< ::main::OfficerFragmentCardItemProto*>(&::main::OfficerFragmentCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  consumablecards_ = const_cast< ::main::ConsumableCardItemProto*>(
      ::main::ConsumableCardItemProto::internal_default_instance());
#else
  consumablecards_ = const_cast< ::main::ConsumableCardItemProto*>(&::main::ConsumableCardItemProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  materialitemprotos_ = const_cast< ::main::MaterialItemProto*>(
      ::main::MaterialItemProto::internal_default_instance());
#else
  materialitemprotos_ = const_cast< ::main::MaterialItemProto*>(&::main::MaterialItemProto::default_instance());
#endif
}

FightRewardDropItems::FightRewardDropItems(const FightRewardDropItems& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightRewardDropItems)
}

void FightRewardDropItems::SharedCtor() {
  _cached_size_ = 0;
  officercards_ = NULL;
  equipmentcards_ = NULL;
  propscards_ = NULL;
  fragmentcards_ = NULL;
  consumablecards_ = NULL;
  materialitemprotos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRewardDropItems::~FightRewardDropItems() {
  // @@protoc_insertion_point(destructor:main.FightRewardDropItems)
  SharedDtor();
}

void FightRewardDropItems::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete officercards_;
    delete equipmentcards_;
    delete propscards_;
    delete fragmentcards_;
    delete consumablecards_;
    delete materialitemprotos_;
  }
}

void FightRewardDropItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightRewardDropItems& FightRewardDropItems::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightRewardDropItems* FightRewardDropItems::default_instance_ = NULL;

FightRewardDropItems* FightRewardDropItems::New() const {
  return new FightRewardDropItems;
}

void FightRewardDropItems::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_officercards()) {
      if (officercards_ != NULL) officercards_->::main::OfficerCardItemProto::Clear();
    }
    if (has_equipmentcards()) {
      if (equipmentcards_ != NULL) equipmentcards_->::main::EquipmentCardItemProto::Clear();
    }
    if (has_propscards()) {
      if (propscards_ != NULL) propscards_->::main::PropsCardItemProto::Clear();
    }
    if (has_fragmentcards()) {
      if (fragmentcards_ != NULL) fragmentcards_->::main::OfficerFragmentCardItemProto::Clear();
    }
    if (has_consumablecards()) {
      if (consumablecards_ != NULL) consumablecards_->::main::ConsumableCardItemProto::Clear();
    }
    if (has_materialitemprotos()) {
      if (materialitemprotos_ != NULL) materialitemprotos_->::main::MaterialItemProto::Clear();
    }
  }
  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightRewardDropItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightRewardDropItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .main.OfficerCardItemProto officerCards = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_officercards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipmentCards;
        break;
      }

      // optional .main.EquipmentCardItemProto equipmentCards = 2;
      case 2: {
        if (tag == 18) {
         parse_equipmentCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_propsCards;
        break;
      }

      // optional .main.PropsCardItemProto propsCards = 3;
      case 3: {
        if (tag == 26) {
         parse_propsCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propscards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fragmentCards;
        break;
      }

      // optional .main.OfficerFragmentCardItemProto fragmentCards = 4;
      case 4: {
        if (tag == 34) {
         parse_fragmentCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fragmentcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_consumableCards;
        break;
      }

      // optional .main.ConsumableCardItemProto consumableCards = 5;
      case 5: {
        if (tag == 42) {
         parse_consumableCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consumablecards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_materialItemProtos;
        break;
      }

      // optional .main.MaterialItemProto materialItemProtos = 6;
      case 6: {
        if (tag == 50) {
         parse_materialItemProtos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_materialitemprotos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemData;
        break;
      }

      // repeated .main.ItemDataProto itemData = 7;
      case 7: {
        if (tag == 58) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightRewardDropItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightRewardDropItems)
  return false;
#undef DO_
}

void FightRewardDropItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightRewardDropItems)
  // optional .main.OfficerCardItemProto officerCards = 1;
  if (has_officercards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->officercards(), output);
  }

  // optional .main.EquipmentCardItemProto equipmentCards = 2;
  if (has_equipmentcards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equipmentcards(), output);
  }

  // optional .main.PropsCardItemProto propsCards = 3;
  if (has_propscards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->propscards(), output);
  }

  // optional .main.OfficerFragmentCardItemProto fragmentCards = 4;
  if (has_fragmentcards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->fragmentcards(), output);
  }

  // optional .main.ConsumableCardItemProto consumableCards = 5;
  if (has_consumablecards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->consumablecards(), output);
  }

  // optional .main.MaterialItemProto materialItemProtos = 6;
  if (has_materialitemprotos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->materialitemprotos(), output);
  }

  // repeated .main.ItemDataProto itemData = 7;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->itemdata(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightRewardDropItems)
}

int FightRewardDropItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .main.OfficerCardItemProto officerCards = 1;
    if (has_officercards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->officercards());
    }

    // optional .main.EquipmentCardItemProto equipmentCards = 2;
    if (has_equipmentcards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentcards());
    }

    // optional .main.PropsCardItemProto propsCards = 3;
    if (has_propscards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propscards());
    }

    // optional .main.OfficerFragmentCardItemProto fragmentCards = 4;
    if (has_fragmentcards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fragmentcards());
    }

    // optional .main.ConsumableCardItemProto consumableCards = 5;
    if (has_consumablecards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consumablecards());
    }

    // optional .main.MaterialItemProto materialItemProtos = 6;
    if (has_materialitemprotos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->materialitemprotos());
    }

  }
  // repeated .main.ItemDataProto itemData = 7;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRewardDropItems::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightRewardDropItems*>(&from));
}

void FightRewardDropItems::MergeFrom(const FightRewardDropItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_officercards()) {
      mutable_officercards()->::main::OfficerCardItemProto::MergeFrom(from.officercards());
    }
    if (from.has_equipmentcards()) {
      mutable_equipmentcards()->::main::EquipmentCardItemProto::MergeFrom(from.equipmentcards());
    }
    if (from.has_propscards()) {
      mutable_propscards()->::main::PropsCardItemProto::MergeFrom(from.propscards());
    }
    if (from.has_fragmentcards()) {
      mutable_fragmentcards()->::main::OfficerFragmentCardItemProto::MergeFrom(from.fragmentcards());
    }
    if (from.has_consumablecards()) {
      mutable_consumablecards()->::main::ConsumableCardItemProto::MergeFrom(from.consumablecards());
    }
    if (from.has_materialitemprotos()) {
      mutable_materialitemprotos()->::main::MaterialItemProto::MergeFrom(from.materialitemprotos());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightRewardDropItems::CopyFrom(const FightRewardDropItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRewardDropItems::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->itemdata())) return false;
  return true;
}

void FightRewardDropItems::Swap(FightRewardDropItems* other) {
  if (other != this) {
    std::swap(officercards_, other->officercards_);
    std::swap(equipmentcards_, other->equipmentcards_);
    std::swap(propscards_, other->propscards_);
    std::swap(fragmentcards_, other->fragmentcards_);
    std::swap(consumablecards_, other->consumablecards_);
    std::swap(materialitemprotos_, other->materialitemprotos_);
    itemdata_.Swap(&other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightRewardDropItems::GetTypeName() const {
  return "main.FightRewardDropItems";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FightRunAwayRequest::FightRunAwayRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightRunAwayRequest)
}

void FightRunAwayRequest::InitAsDefaultInstance() {
}

FightRunAwayRequest::FightRunAwayRequest(const FightRunAwayRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightRunAwayRequest)
}

void FightRunAwayRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRunAwayRequest::~FightRunAwayRequest() {
  // @@protoc_insertion_point(destructor:main.FightRunAwayRequest)
  SharedDtor();
}

void FightRunAwayRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightRunAwayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightRunAwayRequest& FightRunAwayRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightRunAwayRequest* FightRunAwayRequest::default_instance_ = NULL;

FightRunAwayRequest* FightRunAwayRequest::New() const {
  return new FightRunAwayRequest;
}

void FightRunAwayRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightRunAwayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightRunAwayRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightRunAwayRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightRunAwayRequest)
  return false;
#undef DO_
}

void FightRunAwayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightRunAwayRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightRunAwayRequest)
}

int FightRunAwayRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRunAwayRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightRunAwayRequest*>(&from));
}

void FightRunAwayRequest::MergeFrom(const FightRunAwayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightRunAwayRequest::CopyFrom(const FightRunAwayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRunAwayRequest::IsInitialized() const {

  return true;
}

void FightRunAwayRequest::Swap(FightRunAwayRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightRunAwayRequest::GetTypeName() const {
  return "main.FightRunAwayRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightRunAwayResponse::kStateFieldNumber;
const int FightRunAwayResponse::kRatingFieldNumber;
const int FightRunAwayResponse::kExpFieldNumber;
const int FightRunAwayResponse::kGoldFieldNumber;
const int FightRunAwayResponse::kHpRateFieldNumber;
const int FightRunAwayResponse::kAddExpFieldNumber;
const int FightRunAwayResponse::kCurrHpFieldNumber;
const int FightRunAwayResponse::kBashHpFieldNumber;
const int FightRunAwayResponse::kIsRunAwayFieldNumber;
const int FightRunAwayResponse::kRoundFieldNumber;
#endif  // !_MSC_VER

FightRunAwayResponse::FightRunAwayResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightRunAwayResponse)
}

void FightRunAwayResponse::InitAsDefaultInstance() {
}

FightRunAwayResponse::FightRunAwayResponse(const FightRunAwayResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightRunAwayResponse)
}

void FightRunAwayResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  rating_ = 0;
  exp_ = 0;
  gold_ = 0;
  hprate_ = 0;
  addexp_ = 0;
  currhp_ = 0;
  bashhp_ = 0;
  isrunaway_ = 0;
  round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRunAwayResponse::~FightRunAwayResponse() {
  // @@protoc_insertion_point(destructor:main.FightRunAwayResponse)
  SharedDtor();
}

void FightRunAwayResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightRunAwayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightRunAwayResponse& FightRunAwayResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightRunAwayResponse* FightRunAwayResponse::default_instance_ = NULL;

FightRunAwayResponse* FightRunAwayResponse::New() const {
  return new FightRunAwayResponse;
}

void FightRunAwayResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightRunAwayResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, bashhp_);
  }
  ZR_(isrunaway_, round_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightRunAwayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightRunAwayResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rating;
        break;
      }

      // optional int32 rating = 2;
      case 2: {
        if (tag == 16) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_hpRate;
        break;
      }

      // optional float hpRate = 5;
      case 5: {
        if (tag == 45) {
         parse_hpRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hprate_)));
          set_has_hprate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_addExp;
        break;
      }

      // optional int32 addExp = 6;
      case 6: {
        if (tag == 48) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_currHp;
        break;
      }

      // optional sint32 currHp = 7;
      case 7: {
        if (tag == 56) {
         parse_currHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &currhp_)));
          set_has_currhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bashHp;
        break;
      }

      // optional sint32 bashHp = 8;
      case 8: {
        if (tag == 64) {
         parse_bashHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bashhp_)));
          set_has_bashhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isRunAway;
        break;
      }

      // optional int32 isRunAway = 9;
      case 9: {
        if (tag == 72) {
         parse_isRunAway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrunaway_)));
          set_has_isrunaway();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_round;
        break;
      }

      // optional int32 round = 10;
      case 10: {
        if (tag == 80) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightRunAwayResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightRunAwayResponse)
  return false;
#undef DO_
}

void FightRunAwayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightRunAwayResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 rating = 2;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rating(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional float hpRate = 5;
  if (has_hprate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->hprate(), output);
  }

  // optional int32 addExp = 6;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->addexp(), output);
  }

  // optional sint32 currHp = 7;
  if (has_currhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->currhp(), output);
  }

  // optional sint32 bashHp = 8;
  if (has_bashhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->bashhp(), output);
  }

  // optional int32 isRunAway = 9;
  if (has_isrunaway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isrunaway(), output);
  }

  // optional int32 round = 10;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->round(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightRunAwayResponse)
}

int FightRunAwayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 rating = 2;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rating());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional float hpRate = 5;
    if (has_hprate()) {
      total_size += 1 + 4;
    }

    // optional int32 addExp = 6;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addexp());
    }

    // optional sint32 currHp = 7;
    if (has_currhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->currhp());
    }

    // optional sint32 bashHp = 8;
    if (has_bashhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bashhp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isRunAway = 9;
    if (has_isrunaway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrunaway());
    }

    // optional int32 round = 10;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRunAwayResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightRunAwayResponse*>(&from));
}

void FightRunAwayResponse::MergeFrom(const FightRunAwayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_hprate()) {
      set_hprate(from.hprate());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_currhp()) {
      set_currhp(from.currhp());
    }
    if (from.has_bashhp()) {
      set_bashhp(from.bashhp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isrunaway()) {
      set_isrunaway(from.isrunaway());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightRunAwayResponse::CopyFrom(const FightRunAwayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRunAwayResponse::IsInitialized() const {

  return true;
}

void FightRunAwayResponse::Swap(FightRunAwayResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(rating_, other->rating_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(hprate_, other->hprate_);
    std::swap(addexp_, other->addexp_);
    std::swap(currhp_, other->currhp_);
    std::swap(bashhp_, other->bashhp_);
    std::swap(isrunaway_, other->isrunaway_);
    std::swap(round_, other->round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightRunAwayResponse::GetTypeName() const {
  return "main.FightRunAwayResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EnemyExitResponse::kStateFieldNumber;
#endif  // !_MSC_VER

EnemyExitResponse::EnemyExitResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EnemyExitResponse)
}

void EnemyExitResponse::InitAsDefaultInstance() {
}

EnemyExitResponse::EnemyExitResponse(const EnemyExitResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EnemyExitResponse)
}

void EnemyExitResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnemyExitResponse::~EnemyExitResponse() {
  // @@protoc_insertion_point(destructor:main.EnemyExitResponse)
  SharedDtor();
}

void EnemyExitResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnemyExitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnemyExitResponse& EnemyExitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

EnemyExitResponse* EnemyExitResponse::default_instance_ = NULL;

EnemyExitResponse* EnemyExitResponse::New() const {
  return new EnemyExitResponse;
}

void EnemyExitResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnemyExitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EnemyExitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EnemyExitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EnemyExitResponse)
  return false;
#undef DO_
}

void EnemyExitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EnemyExitResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EnemyExitResponse)
}

int EnemyExitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyExitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnemyExitResponse*>(&from));
}

void EnemyExitResponse::MergeFrom(const EnemyExitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnemyExitResponse::CopyFrom(const EnemyExitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyExitResponse::IsInitialized() const {

  return true;
}

void EnemyExitResponse::Swap(EnemyExitResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnemyExitResponse::GetTypeName() const {
  return "main.EnemyExitResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int EnemyResumeResponse::kStateFieldNumber;
#endif  // !_MSC_VER

EnemyResumeResponse::EnemyResumeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EnemyResumeResponse)
}

void EnemyResumeResponse::InitAsDefaultInstance() {
}

EnemyResumeResponse::EnemyResumeResponse(const EnemyResumeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EnemyResumeResponse)
}

void EnemyResumeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnemyResumeResponse::~EnemyResumeResponse() {
  // @@protoc_insertion_point(destructor:main.EnemyResumeResponse)
  SharedDtor();
}

void EnemyResumeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnemyResumeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnemyResumeResponse& EnemyResumeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

EnemyResumeResponse* EnemyResumeResponse::default_instance_ = NULL;

EnemyResumeResponse* EnemyResumeResponse::New() const {
  return new EnemyResumeResponse;
}

void EnemyResumeResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnemyResumeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EnemyResumeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EnemyResumeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EnemyResumeResponse)
  return false;
#undef DO_
}

void EnemyResumeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EnemyResumeResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EnemyResumeResponse)
}

int EnemyResumeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyResumeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnemyResumeResponse*>(&from));
}

void EnemyResumeResponse::MergeFrom(const EnemyResumeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnemyResumeResponse::CopyFrom(const EnemyResumeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyResumeResponse::IsInitialized() const {

  return true;
}

void EnemyResumeResponse::Swap(EnemyResumeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnemyResumeResponse::GetTypeName() const {
  return "main.EnemyResumeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FightLogRequest::kStrFieldNumber;
#endif  // !_MSC_VER

FightLogRequest::FightLogRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightLogRequest)
}

void FightLogRequest::InitAsDefaultInstance() {
}

FightLogRequest::FightLogRequest(const FightLogRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightLogRequest)
}

void FightLogRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightLogRequest::~FightLogRequest() {
  // @@protoc_insertion_point(destructor:main.FightLogRequest)
  SharedDtor();
}

void FightLogRequest::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightLogRequest& FightLogRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightLogRequest* FightLogRequest::default_instance_ = NULL;

FightLogRequest* FightLogRequest::New() const {
  return new FightLogRequest;
}

void FightLogRequest::Clear() {
  if (has_str()) {
    if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      str_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightLogRequest)
  return false;
#undef DO_
}

void FightLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightLogRequest)
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightLogRequest)
}

int FightLogRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightLogRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightLogRequest*>(&from));
}

void FightLogRequest::MergeFrom(const FightLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightLogRequest::CopyFrom(const FightLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightLogRequest::IsInitialized() const {

  return true;
}

void FightLogRequest::Swap(FightLogRequest* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightLogRequest::GetTypeName() const {
  return "main.FightLogRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightReviveRequest::kIsReviveFieldNumber;
#endif  // !_MSC_VER

FightReviveRequest::FightReviveRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightReviveRequest)
}

void FightReviveRequest::InitAsDefaultInstance() {
}

FightReviveRequest::FightReviveRequest(const FightReviveRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightReviveRequest)
}

void FightReviveRequest::SharedCtor() {
  _cached_size_ = 0;
  isrevive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightReviveRequest::~FightReviveRequest() {
  // @@protoc_insertion_point(destructor:main.FightReviveRequest)
  SharedDtor();
}

void FightReviveRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightReviveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightReviveRequest& FightReviveRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightReviveRequest* FightReviveRequest::default_instance_ = NULL;

FightReviveRequest* FightReviveRequest::New() const {
  return new FightReviveRequest;
}

void FightReviveRequest::Clear() {
  isrevive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightReviveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightReviveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isRevive = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrevive_)));
          set_has_isrevive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightReviveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightReviveRequest)
  return false;
#undef DO_
}

void FightReviveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightReviveRequest)
  // optional int32 isRevive = 1;
  if (has_isrevive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isrevive(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightReviveRequest)
}

int FightReviveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isRevive = 1;
    if (has_isrevive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrevive());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightReviveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightReviveRequest*>(&from));
}

void FightReviveRequest::MergeFrom(const FightReviveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isrevive()) {
      set_isrevive(from.isrevive());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightReviveRequest::CopyFrom(const FightReviveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightReviveRequest::IsInitialized() const {

  return true;
}

void FightReviveRequest::Swap(FightReviveRequest* other) {
  if (other != this) {
    std::swap(isrevive_, other->isrevive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightReviveRequest::GetTypeName() const {
  return "main.FightReviveRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightReviveResponse::kStateFieldNumber;
#endif  // !_MSC_VER

FightReviveResponse::FightReviveResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightReviveResponse)
}

void FightReviveResponse::InitAsDefaultInstance() {
}

FightReviveResponse::FightReviveResponse(const FightReviveResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightReviveResponse)
}

void FightReviveResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightReviveResponse::~FightReviveResponse() {
  // @@protoc_insertion_point(destructor:main.FightReviveResponse)
  SharedDtor();
}

void FightReviveResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightReviveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightReviveResponse& FightReviveResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightReviveResponse* FightReviveResponse::default_instance_ = NULL;

FightReviveResponse* FightReviveResponse::New() const {
  return new FightReviveResponse;
}

void FightReviveResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightReviveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightReviveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightReviveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightReviveResponse)
  return false;
#undef DO_
}

void FightReviveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightReviveResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightReviveResponse)
}

int FightReviveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightReviveResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightReviveResponse*>(&from));
}

void FightReviveResponse::MergeFrom(const FightReviveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightReviveResponse::CopyFrom(const FightReviveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightReviveResponse::IsInitialized() const {

  return true;
}

void FightReviveResponse::Swap(FightReviveResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightReviveResponse::GetTypeName() const {
  return "main.FightReviveResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FightFixMapRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

FightFixMapRequest::FightFixMapRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightFixMapRequest)
}

void FightFixMapRequest::InitAsDefaultInstance() {
}

FightFixMapRequest::FightFixMapRequest(const FightFixMapRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightFixMapRequest)
}

void FightFixMapRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightFixMapRequest::~FightFixMapRequest() {
  // @@protoc_insertion_point(destructor:main.FightFixMapRequest)
  SharedDtor();
}

void FightFixMapRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightFixMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightFixMapRequest& FightFixMapRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightFixMapRequest* FightFixMapRequest::default_instance_ = NULL;

FightFixMapRequest* FightFixMapRequest::New() const {
  return new FightFixMapRequest;
}

void FightFixMapRequest::Clear() {
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightFixMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightFixMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightFixMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightFixMapRequest)
  return false;
#undef DO_
}

void FightFixMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightFixMapRequest)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightFixMapRequest)
}

int FightFixMapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightFixMapRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightFixMapRequest*>(&from));
}

void FightFixMapRequest::MergeFrom(const FightFixMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightFixMapRequest::CopyFrom(const FightFixMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightFixMapRequest::IsInitialized() const {

  return true;
}

void FightFixMapRequest::Swap(FightFixMapRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightFixMapRequest::GetTypeName() const {
  return "main.FightFixMapRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightFixMapResponse::kRoleIdFieldNumber;
const int FightFixMapResponse::kFreeCountFieldNumber;
const int FightFixMapResponse::kActionCountFieldNumber;
const int FightFixMapResponse::kBaseHpFieldNumber;
const int FightFixMapResponse::kHpFieldNumber;
const int FightFixMapResponse::kMajorSkillCurrentRoundFieldNumber;
const int FightFixMapResponse::kSpiritsFieldNumber;
const int FightFixMapResponse::kAttackListFieldNumber;
const int FightFixMapResponse::kCooRoundFieldNumber;
#endif  // !_MSC_VER

FightFixMapResponse::FightFixMapResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightFixMapResponse)
}

void FightFixMapResponse::InitAsDefaultInstance() {
}

FightFixMapResponse::FightFixMapResponse(const FightFixMapResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightFixMapResponse)
}

void FightFixMapResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  freecount_ = 0;
  actioncount_ = 0;
  basehp_ = 0;
  hp_ = 0;
  majorskillcurrentround_ = 0;
  cooround_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightFixMapResponse::~FightFixMapResponse() {
  // @@protoc_insertion_point(destructor:main.FightFixMapResponse)
  SharedDtor();
}

void FightFixMapResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightFixMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightFixMapResponse& FightFixMapResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightFixMapResponse* FightFixMapResponse::default_instance_ = NULL;

FightFixMapResponse* FightFixMapResponse::New() const {
  return new FightFixMapResponse;
}

void FightFixMapResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightFixMapResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(roleid_, majorskillcurrentround_);
  }
  cooround_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  spirits_.Clear();
  attacklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightFixMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightFixMapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_freeCount;
        break;
      }

      // optional int32 freeCount = 2;
      case 2: {
        if (tag == 16) {
         parse_freeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freecount_)));
          set_has_freecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actionCount;
        break;
      }

      // optional int32 actionCount = 3;
      case 3: {
        if (tag == 24) {
         parse_actionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncount_)));
          set_has_actioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_baseHp;
        break;
      }

      // optional int32 baseHp = 4;
      case 4: {
        if (tag == 32) {
         parse_baseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basehp_)));
          set_has_basehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (tag == 40) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_majorSkillCurrentRound;
        break;
      }

      // optional int32 majorSkillCurrentRound = 6;
      case 6: {
        if (tag == 48) {
         parse_majorSkillCurrentRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorskillcurrentround_)));
          set_has_majorskillcurrentround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_spirits;
        break;
      }

      // repeated .main.FightSpirit spirits = 7;
      case 7: {
        if (tag == 58) {
         parse_spirits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spirits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_spirits;
        if (input->ExpectTag(66)) goto parse_attackList;
        break;
      }

      // repeated .main.FightFixAttackUnit attackList = 8;
      case 8: {
        if (tag == 66) {
         parse_attackList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attackList;
        if (input->ExpectTag(72)) goto parse_cooRound;
        break;
      }

      // optional int32 cooRound = 9;
      case 9: {
        if (tag == 72) {
         parse_cooRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooround_)));
          set_has_cooround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightFixMapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightFixMapResponse)
  return false;
#undef DO_
}

void FightFixMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightFixMapResponse)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 freeCount = 2;
  if (has_freecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freecount(), output);
  }

  // optional int32 actionCount = 3;
  if (has_actioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actioncount(), output);
  }

  // optional int32 baseHp = 4;
  if (has_basehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->basehp(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int32 majorSkillCurrentRound = 6;
  if (has_majorskillcurrentround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->majorskillcurrentround(), output);
  }

  // repeated .main.FightSpirit spirits = 7;
  for (int i = 0; i < this->spirits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->spirits(i), output);
  }

  // repeated .main.FightFixAttackUnit attackList = 8;
  for (int i = 0; i < this->attacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->attacklist(i), output);
  }

  // optional int32 cooRound = 9;
  if (has_cooround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cooround(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightFixMapResponse)
}

int FightFixMapResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 freeCount = 2;
    if (has_freecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freecount());
    }

    // optional int32 actionCount = 3;
    if (has_actioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncount());
    }

    // optional int32 baseHp = 4;
    if (has_basehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basehp());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 majorSkillCurrentRound = 6;
    if (has_majorskillcurrentround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorskillcurrentround());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cooRound = 9;
    if (has_cooround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooround());
    }

  }
  // repeated .main.FightSpirit spirits = 7;
  total_size += 1 * this->spirits_size();
  for (int i = 0; i < this->spirits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spirits(i));
  }

  // repeated .main.FightFixAttackUnit attackList = 8;
  total_size += 1 * this->attacklist_size();
  for (int i = 0; i < this->attacklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacklist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightFixMapResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightFixMapResponse*>(&from));
}

void FightFixMapResponse::MergeFrom(const FightFixMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  spirits_.MergeFrom(from.spirits_);
  attacklist_.MergeFrom(from.attacklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_freecount()) {
      set_freecount(from.freecount());
    }
    if (from.has_actioncount()) {
      set_actioncount(from.actioncount());
    }
    if (from.has_basehp()) {
      set_basehp(from.basehp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_majorskillcurrentround()) {
      set_majorskillcurrentround(from.majorskillcurrentround());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cooround()) {
      set_cooround(from.cooround());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightFixMapResponse::CopyFrom(const FightFixMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightFixMapResponse::IsInitialized() const {

  return true;
}

void FightFixMapResponse::Swap(FightFixMapResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(freecount_, other->freecount_);
    std::swap(actioncount_, other->actioncount_);
    std::swap(basehp_, other->basehp_);
    std::swap(hp_, other->hp_);
    std::swap(majorskillcurrentround_, other->majorskillcurrentround_);
    spirits_.Swap(&other->spirits_);
    attacklist_.Swap(&other->attacklist_);
    std::swap(cooround_, other->cooround_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightFixMapResponse::GetTypeName() const {
  return "main.FightFixMapResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FightFixAttackUnit::kXFieldNumber;
const int FightFixAttackUnit::kYFieldNumber;
const int FightFixAttackUnit::kCurrentRoundFieldNumber;
const int FightFixAttackUnit::kCurrentAttackFieldNumber;
const int FightFixAttackUnit::kCurrentChainCountFieldNumber;
const int FightFixAttackUnit::kCurrentMergeCountFieldNumber;
const int FightFixAttackUnit::kBuffListFieldNumber;
const int FightFixAttackUnit::kAcceptAmageFieldNumber;
const int FightFixAttackUnit::kIshasFuhuoFieldNumber;
const int FightFixAttackUnit::kIsFuhuoFieldNumber;
#endif  // !_MSC_VER

FightFixAttackUnit::FightFixAttackUnit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightFixAttackUnit)
}

void FightFixAttackUnit::InitAsDefaultInstance() {
}

FightFixAttackUnit::FightFixAttackUnit(const FightFixAttackUnit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightFixAttackUnit)
}

void FightFixAttackUnit::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  currentround_ = 0;
  currentattack_ = 0;
  currentchaincount_ = 0;
  currentmergecount_ = 0;
  acceptamage_ = 0;
  ishasfuhuo_ = false;
  isfuhuo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightFixAttackUnit::~FightFixAttackUnit() {
  // @@protoc_insertion_point(destructor:main.FightFixAttackUnit)
  SharedDtor();
}

void FightFixAttackUnit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightFixAttackUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightFixAttackUnit& FightFixAttackUnit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightFixAttackUnit* FightFixAttackUnit::default_instance_ = NULL;

FightFixAttackUnit* FightFixAttackUnit::New() const {
  return new FightFixAttackUnit;
}

void FightFixAttackUnit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightFixAttackUnit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(x_, currentmergecount_);
    acceptamage_ = 0;
  }
  ZR_(ishasfuhuo_, isfuhuo_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bufflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightFixAttackUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightFixAttackUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currentRound;
        break;
      }

      // optional int32 currentRound = 3;
      case 3: {
        if (tag == 24) {
         parse_currentRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentround_)));
          set_has_currentround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_currentAttack;
        break;
      }

      // optional int32 currentAttack = 4;
      case 4: {
        if (tag == 32) {
         parse_currentAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentattack_)));
          set_has_currentattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_currentChainCount;
        break;
      }

      // optional int32 currentChainCount = 5;
      case 5: {
        if (tag == 40) {
         parse_currentChainCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentchaincount_)));
          set_has_currentchaincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currentMergeCount;
        break;
      }

      // optional int32 currentMergeCount = 6;
      case 6: {
        if (tag == 48) {
         parse_currentMergeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentmergecount_)));
          set_has_currentmergecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_buffList;
        break;
      }

      // repeated .main.FightFixBuff buffList = 7;
      case 7: {
        if (tag == 58) {
         parse_buffList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufflist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_buffList;
        if (input->ExpectTag(64)) goto parse_acceptAmage;
        break;
      }

      // optional int32 acceptAmage = 8;
      case 8: {
        if (tag == 64) {
         parse_acceptAmage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptamage_)));
          set_has_acceptamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ishasFuhuo;
        break;
      }

      // optional bool ishasFuhuo = 9;
      case 9: {
        if (tag == 72) {
         parse_ishasFuhuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishasfuhuo_)));
          set_has_ishasfuhuo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_isFuhuo;
        break;
      }

      // optional bool isFuhuo = 10;
      case 10: {
        if (tag == 80) {
         parse_isFuhuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfuhuo_)));
          set_has_isfuhuo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightFixAttackUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightFixAttackUnit)
  return false;
#undef DO_
}

void FightFixAttackUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightFixAttackUnit)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 currentRound = 3;
  if (has_currentround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentround(), output);
  }

  // optional int32 currentAttack = 4;
  if (has_currentattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentattack(), output);
  }

  // optional int32 currentChainCount = 5;
  if (has_currentchaincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currentchaincount(), output);
  }

  // optional int32 currentMergeCount = 6;
  if (has_currentmergecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currentmergecount(), output);
  }

  // repeated .main.FightFixBuff buffList = 7;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->bufflist(i), output);
  }

  // optional int32 acceptAmage = 8;
  if (has_acceptamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->acceptamage(), output);
  }

  // optional bool ishasFuhuo = 9;
  if (has_ishasfuhuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ishasfuhuo(), output);
  }

  // optional bool isFuhuo = 10;
  if (has_isfuhuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isfuhuo(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightFixAttackUnit)
}

int FightFixAttackUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 currentRound = 3;
    if (has_currentround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentround());
    }

    // optional int32 currentAttack = 4;
    if (has_currentattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentattack());
    }

    // optional int32 currentChainCount = 5;
    if (has_currentchaincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentchaincount());
    }

    // optional int32 currentMergeCount = 6;
    if (has_currentmergecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentmergecount());
    }

    // optional int32 acceptAmage = 8;
    if (has_acceptamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acceptamage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ishasFuhuo = 9;
    if (has_ishasfuhuo()) {
      total_size += 1 + 1;
    }

    // optional bool isFuhuo = 10;
    if (has_isfuhuo()) {
      total_size += 1 + 1;
    }

  }
  // repeated .main.FightFixBuff buffList = 7;
  total_size += 1 * this->bufflist_size();
  for (int i = 0; i < this->bufflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufflist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightFixAttackUnit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightFixAttackUnit*>(&from));
}

void FightFixAttackUnit::MergeFrom(const FightFixAttackUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufflist_.MergeFrom(from.bufflist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_currentround()) {
      set_currentround(from.currentround());
    }
    if (from.has_currentattack()) {
      set_currentattack(from.currentattack());
    }
    if (from.has_currentchaincount()) {
      set_currentchaincount(from.currentchaincount());
    }
    if (from.has_currentmergecount()) {
      set_currentmergecount(from.currentmergecount());
    }
    if (from.has_acceptamage()) {
      set_acceptamage(from.acceptamage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ishasfuhuo()) {
      set_ishasfuhuo(from.ishasfuhuo());
    }
    if (from.has_isfuhuo()) {
      set_isfuhuo(from.isfuhuo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightFixAttackUnit::CopyFrom(const FightFixAttackUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightFixAttackUnit::IsInitialized() const {

  return true;
}

void FightFixAttackUnit::Swap(FightFixAttackUnit* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(currentround_, other->currentround_);
    std::swap(currentattack_, other->currentattack_);
    std::swap(currentchaincount_, other->currentchaincount_);
    std::swap(currentmergecount_, other->currentmergecount_);
    bufflist_.Swap(&other->bufflist_);
    std::swap(acceptamage_, other->acceptamage_);
    std::swap(ishasfuhuo_, other->ishasfuhuo_);
    std::swap(isfuhuo_, other->isfuhuo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightFixAttackUnit::GetTypeName() const {
  return "main.FightFixAttackUnit";
}


// ===================================================================

#ifndef _MSC_VER
const int FightFixBuff::kBuffIdFieldNumber;
const int FightFixBuff::kBuffTypeFieldNumber;
const int FightFixBuff::kBuffRoundFieldNumber;
const int FightFixBuff::kBuffRoundValueFieldNumber;
const int FightFixBuff::kBuffEffectFieldNumber;
#endif  // !_MSC_VER

FightFixBuff::FightFixBuff()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightFixBuff)
}

void FightFixBuff::InitAsDefaultInstance() {
}

FightFixBuff::FightFixBuff(const FightFixBuff& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightFixBuff)
}

void FightFixBuff::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0;
  bufftype_ = 0;
  buffround_ = 0;
  buffroundvalue_ = 0;
  buffeffect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightFixBuff::~FightFixBuff() {
  // @@protoc_insertion_point(destructor:main.FightFixBuff)
  SharedDtor();
}

void FightFixBuff::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightFixBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightFixBuff& FightFixBuff::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightFixBuff* FightFixBuff::default_instance_ = NULL;

FightFixBuff* FightFixBuff::New() const {
  return new FightFixBuff;
}

void FightFixBuff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightFixBuff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(buffid_, buffeffect_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightFixBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightFixBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buffId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buffType;
        break;
      }

      // optional int32 buffType = 2;
      case 2: {
        if (tag == 16) {
         parse_buffType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufftype_)));
          set_has_bufftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buffRound;
        break;
      }

      // optional int32 buffRound = 3;
      case 3: {
        if (tag == 24) {
         parse_buffRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffround_)));
          set_has_buffround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_buffRoundValue;
        break;
      }

      // optional float buffRoundValue = 4;
      case 4: {
        if (tag == 37) {
         parse_buffRoundValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buffroundvalue_)));
          set_has_buffroundvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buffEffect;
        break;
      }

      // optional int32 buffEffect = 5;
      case 5: {
        if (tag == 40) {
         parse_buffEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffeffect_)));
          set_has_buffeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightFixBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightFixBuff)
  return false;
#undef DO_
}

void FightFixBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightFixBuff)
  // optional int32 buffId = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buffid(), output);
  }

  // optional int32 buffType = 2;
  if (has_bufftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bufftype(), output);
  }

  // optional int32 buffRound = 3;
  if (has_buffround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buffround(), output);
  }

  // optional float buffRoundValue = 4;
  if (has_buffroundvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->buffroundvalue(), output);
  }

  // optional int32 buffEffect = 5;
  if (has_buffeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buffeffect(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightFixBuff)
}

int FightFixBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buffId = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 buffType = 2;
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufftype());
    }

    // optional int32 buffRound = 3;
    if (has_buffround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffround());
    }

    // optional float buffRoundValue = 4;
    if (has_buffroundvalue()) {
      total_size += 1 + 4;
    }

    // optional int32 buffEffect = 5;
    if (has_buffeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffeffect());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightFixBuff::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightFixBuff*>(&from));
}

void FightFixBuff::MergeFrom(const FightFixBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_bufftype()) {
      set_bufftype(from.bufftype());
    }
    if (from.has_buffround()) {
      set_buffround(from.buffround());
    }
    if (from.has_buffroundvalue()) {
      set_buffroundvalue(from.buffroundvalue());
    }
    if (from.has_buffeffect()) {
      set_buffeffect(from.buffeffect());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightFixBuff::CopyFrom(const FightFixBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightFixBuff::IsInitialized() const {

  return true;
}

void FightFixBuff::Swap(FightFixBuff* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(bufftype_, other->bufftype_);
    std::swap(buffround_, other->buffround_);
    std::swap(buffroundvalue_, other->buffroundvalue_);
    std::swap(buffeffect_, other->buffeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightFixBuff::GetTypeName() const {
  return "main.FightFixBuff";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EnterBossRequest::EnterBossRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EnterBossRequest)
}

void EnterBossRequest::InitAsDefaultInstance() {
}

EnterBossRequest::EnterBossRequest(const EnterBossRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EnterBossRequest)
}

void EnterBossRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterBossRequest::~EnterBossRequest() {
  // @@protoc_insertion_point(destructor:main.EnterBossRequest)
  SharedDtor();
}

void EnterBossRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterBossRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterBossRequest& EnterBossRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

EnterBossRequest* EnterBossRequest::default_instance_ = NULL;

EnterBossRequest* EnterBossRequest::New() const {
  return new EnterBossRequest;
}

void EnterBossRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnterBossRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EnterBossRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.EnterBossRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EnterBossRequest)
  return false;
#undef DO_
}

void EnterBossRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EnterBossRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EnterBossRequest)
}

int EnterBossRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterBossRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnterBossRequest*>(&from));
}

void EnterBossRequest::MergeFrom(const EnterBossRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnterBossRequest::CopyFrom(const EnterBossRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterBossRequest::IsInitialized() const {

  return true;
}

void EnterBossRequest::Swap(EnterBossRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnterBossRequest::GetTypeName() const {
  return "main.EnterBossRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int EnterBossResponse::kBossHpFieldNumber;
const int EnterBossResponse::kBossBaseHpFieldNumber;
const int EnterBossResponse::kBossDamageCountFieldNumber;
const int EnterBossResponse::kBossBuffModelFieldNumber;
const int EnterBossResponse::kBossRankModelFieldNumber;
const int EnterBossResponse::kStateFieldNumber;
const int EnterBossResponse::kErrMsgFieldNumber;
const int EnterBossResponse::kTimeFieldNumber;
const int EnterBossResponse::kValue1FieldNumber;
const int EnterBossResponse::kValue2FieldNumber;
const int EnterBossResponse::kValue3FieldNumber;
const int EnterBossResponse::kDamageFieldNumber;
#endif  // !_MSC_VER

EnterBossResponse::EnterBossResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.EnterBossResponse)
}

void EnterBossResponse::InitAsDefaultInstance() {
}

EnterBossResponse::EnterBossResponse(const EnterBossResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.EnterBossResponse)
}

void EnterBossResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bosshp_ = 0;
  bossbasehp_ = 0;
  bossdamagecount_ = 0;
  state_ = false;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  value1_ = 0;
  value2_ = 0;
  value3_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterBossResponse::~EnterBossResponse() {
  // @@protoc_insertion_point(destructor:main.EnterBossResponse)
  SharedDtor();
}

void EnterBossResponse::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterBossResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterBossResponse& EnterBossResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

EnterBossResponse* EnterBossResponse::default_instance_ = NULL;

EnterBossResponse* EnterBossResponse::New() const {
  return new EnterBossResponse;
}

void EnterBossResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterBossResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(bosshp_, bossbasehp_);
    ZR_(bossdamagecount_, state_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    time_ = 0;
  }
  ZR_(value1_, damage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bossbuffmodel_.Clear();
  bossrankmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool EnterBossResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.EnterBossResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossHp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bossBaseHp;
        break;
      }

      // optional int32 bossBaseHp = 2;
      case 2: {
        if (tag == 16) {
         parse_bossBaseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossbasehp_)));
          set_has_bossbasehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossDamageCount;
        break;
      }

      // optional int32 bossDamageCount = 3;
      case 3: {
        if (tag == 24) {
         parse_bossDamageCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossdamagecount_)));
          set_has_bossdamagecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bossBuffModel;
        break;
      }

      // repeated .main.BossBuffModel bossBuffModel = 4;
      case 4: {
        if (tag == 34) {
         parse_bossBuffModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossbuffmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bossBuffModel;
        if (input->ExpectTag(42)) goto parse_bossRankModel;
        break;
      }

      // repeated .main.BossRankModel bossRankModel = 5;
      case 5: {
        if (tag == 42) {
         parse_bossRankModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossrankmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bossRankModel;
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional bool state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 7;
      case 7: {
        if (tag == 58) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional int32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_value1;
        break;
      }

      // optional int32 value1 = 9;
      case 9: {
        if (tag == 72) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_value2;
        break;
      }

      // optional float value2 = 10;
      case 10: {
        if (tag == 85) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_value3;
        break;
      }

      // optional int32 value3 = 11;
      case 11: {
        if (tag == 88) {
         parse_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_damage;
        break;
      }

      // optional sint32 damage = 12;
      case 12: {
        if (tag == 96) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.EnterBossResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.EnterBossResponse)
  return false;
#undef DO_
}

void EnterBossResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.EnterBossResponse)
  // optional int32 bossHp = 1;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bosshp(), output);
  }

  // optional int32 bossBaseHp = 2;
  if (has_bossbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bossbasehp(), output);
  }

  // optional int32 bossDamageCount = 3;
  if (has_bossdamagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossdamagecount(), output);
  }

  // repeated .main.BossBuffModel bossBuffModel = 4;
  for (int i = 0; i < this->bossbuffmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->bossbuffmodel(i), output);
  }

  // repeated .main.BossRankModel bossRankModel = 5;
  for (int i = 0; i < this->bossrankmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->bossrankmodel(i), output);
  }

  // optional bool state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->state(), output);
  }

  // optional string errMsg = 7;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->errmsg(), output);
  }

  // optional int32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->time(), output);
  }

  // optional int32 value1 = 9;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->value1(), output);
  }

  // optional float value2 = 10;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->value2(), output);
  }

  // optional int32 value3 = 11;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->value3(), output);
  }

  // optional sint32 damage = 12;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->damage(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.EnterBossResponse)
}

int EnterBossResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossHp = 1;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosshp());
    }

    // optional int32 bossBaseHp = 2;
    if (has_bossbasehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossbasehp());
    }

    // optional int32 bossDamageCount = 3;
    if (has_bossdamagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossdamagecount());
    }

    // optional bool state = 6;
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional string errMsg = 7;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional int32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 value1 = 9;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value1());
    }

    // optional float value2 = 10;
    if (has_value2()) {
      total_size += 1 + 4;
    }

    // optional int32 value3 = 11;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value3());
    }

    // optional sint32 damage = 12;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage());
    }

  }
  // repeated .main.BossBuffModel bossBuffModel = 4;
  total_size += 1 * this->bossbuffmodel_size();
  for (int i = 0; i < this->bossbuffmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossbuffmodel(i));
  }

  // repeated .main.BossRankModel bossRankModel = 5;
  total_size += 1 * this->bossrankmodel_size();
  for (int i = 0; i < this->bossrankmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossrankmodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterBossResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnterBossResponse*>(&from));
}

void EnterBossResponse::MergeFrom(const EnterBossResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossbuffmodel_.MergeFrom(from.bossbuffmodel_);
  bossrankmodel_.MergeFrom(from.bossrankmodel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
    if (from.has_bossbasehp()) {
      set_bossbasehp(from.bossbasehp());
    }
    if (from.has_bossdamagecount()) {
      set_bossdamagecount(from.bossdamagecount());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnterBossResponse::CopyFrom(const EnterBossResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterBossResponse::IsInitialized() const {

  return true;
}

void EnterBossResponse::Swap(EnterBossResponse* other) {
  if (other != this) {
    std::swap(bosshp_, other->bosshp_);
    std::swap(bossbasehp_, other->bossbasehp_);
    std::swap(bossdamagecount_, other->bossdamagecount_);
    bossbuffmodel_.Swap(&other->bossbuffmodel_);
    bossrankmodel_.Swap(&other->bossrankmodel_);
    std::swap(state_, other->state_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(time_, other->time_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnterBossResponse::GetTypeName() const {
  return "main.EnterBossResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BossBuffModel::kBuffIdFieldNumber;
const int BossBuffModel::kBuffNameFieldNumber;
const int BossBuffModel::kBuffGoldFieldNumber;
const int BossBuffModel::kBuffBasValueFieldNumber;
#endif  // !_MSC_VER

BossBuffModel::BossBuffModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossBuffModel)
}

void BossBuffModel::InitAsDefaultInstance() {
}

BossBuffModel::BossBuffModel(const BossBuffModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossBuffModel)
}

void BossBuffModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buffid_ = 0;
  buffname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffgold_ = 0;
  buffbasvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossBuffModel::~BossBuffModel() {
  // @@protoc_insertion_point(destructor:main.BossBuffModel)
  SharedDtor();
}

void BossBuffModel::SharedDtor() {
  if (buffname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buffname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossBuffModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossBuffModel& BossBuffModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossBuffModel* BossBuffModel::default_instance_ = NULL;

BossBuffModel* BossBuffModel::New() const {
  return new BossBuffModel;
}

void BossBuffModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossBuffModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(buffid_, buffbasvalue_);
    if (has_buffname()) {
      if (buffname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buffname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossBuffModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossBuffModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buffId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buffName;
        break;
      }

      // optional string buffName = 3;
      case 3: {
        if (tag == 26) {
         parse_buffName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buffGold;
        break;
      }

      // optional int32 buffGold = 4;
      case 4: {
        if (tag == 32) {
         parse_buffGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffgold_)));
          set_has_buffgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buffBasValue;
        break;
      }

      // optional int32 buffBasValue = 5;
      case 5: {
        if (tag == 40) {
         parse_buffBasValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffbasvalue_)));
          set_has_buffbasvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossBuffModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossBuffModel)
  return false;
#undef DO_
}

void BossBuffModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossBuffModel)
  // optional int32 buffId = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buffid(), output);
  }

  // optional string buffName = 3;
  if (has_buffname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->buffname(), output);
  }

  // optional int32 buffGold = 4;
  if (has_buffgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buffgold(), output);
  }

  // optional int32 buffBasValue = 5;
  if (has_buffbasvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buffbasvalue(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossBuffModel)
}

int BossBuffModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buffId = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional string buffName = 3;
    if (has_buffname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffname());
    }

    // optional int32 buffGold = 4;
    if (has_buffgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffgold());
    }

    // optional int32 buffBasValue = 5;
    if (has_buffbasvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffbasvalue());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossBuffModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossBuffModel*>(&from));
}

void BossBuffModel::MergeFrom(const BossBuffModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_buffname()) {
      set_buffname(from.buffname());
    }
    if (from.has_buffgold()) {
      set_buffgold(from.buffgold());
    }
    if (from.has_buffbasvalue()) {
      set_buffbasvalue(from.buffbasvalue());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossBuffModel::CopyFrom(const BossBuffModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossBuffModel::IsInitialized() const {

  return true;
}

void BossBuffModel::Swap(BossBuffModel* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(buffname_, other->buffname_);
    std::swap(buffgold_, other->buffgold_);
    std::swap(buffbasvalue_, other->buffbasvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossBuffModel::GetTypeName() const {
  return "main.BossBuffModel";
}


// ===================================================================

#ifndef _MSC_VER
const int BossRankModel::kRoleIdFieldNumber;
const int BossRankModel::kRoleNameFieldNumber;
const int BossRankModel::kLevelFieldNumber;
const int BossRankModel::kDamageFieldNumber;
#endif  // !_MSC_VER

BossRankModel::BossRankModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossRankModel)
}

void BossRankModel::InitAsDefaultInstance() {
}

BossRankModel::BossRankModel(const BossRankModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossRankModel)
}

void BossRankModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossRankModel::~BossRankModel() {
  // @@protoc_insertion_point(destructor:main.BossRankModel)
  SharedDtor();
}

void BossRankModel::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossRankModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossRankModel& BossRankModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossRankModel* BossRankModel::default_instance_ = NULL;

BossRankModel* BossRankModel::New() const {
  return new BossRankModel;
}

void BossRankModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossRankModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roleid_, damage_);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rolename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossRankModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossRankModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (tag == 18) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // optional int32 damage = 4;
      case 4: {
        if (tag == 32) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossRankModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossRankModel)
  return false;
#undef DO_
}

void BossRankModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossRankModel)
  // optional int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rolename(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossRankModel)
}

int BossRankModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossRankModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossRankModel*>(&from));
}

void BossRankModel::MergeFrom(const BossRankModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossRankModel::CopyFrom(const BossRankModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossRankModel::IsInitialized() const {

  return true;
}

void BossRankModel::Swap(BossRankModel* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossRankModel::GetTypeName() const {
  return "main.BossRankModel";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AtkBossRequest::AtkBossRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AtkBossRequest)
}

void AtkBossRequest::InitAsDefaultInstance() {
}

AtkBossRequest::AtkBossRequest(const AtkBossRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AtkBossRequest)
}

void AtkBossRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtkBossRequest::~AtkBossRequest() {
  // @@protoc_insertion_point(destructor:main.AtkBossRequest)
  SharedDtor();
}

void AtkBossRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AtkBossRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AtkBossRequest& AtkBossRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

AtkBossRequest* AtkBossRequest::default_instance_ = NULL;

AtkBossRequest* AtkBossRequest::New() const {
  return new AtkBossRequest;
}

void AtkBossRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AtkBossRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AtkBossRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.AtkBossRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AtkBossRequest)
  return false;
#undef DO_
}

void AtkBossRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AtkBossRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AtkBossRequest)
}

int AtkBossRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtkBossRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AtkBossRequest*>(&from));
}

void AtkBossRequest::MergeFrom(const AtkBossRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AtkBossRequest::CopyFrom(const AtkBossRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtkBossRequest::IsInitialized() const {

  return true;
}

void AtkBossRequest::Swap(AtkBossRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AtkBossRequest::GetTypeName() const {
  return "main.AtkBossRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AtkBossResponse::kBossItemIdFieldNumber;
const int AtkBossResponse::kBossHpFieldNumber;
const int AtkBossResponse::kBossBaseHpFieldNumber;
const int AtkBossResponse::kRoleItemIdFieldNumber;
const int AtkBossResponse::kLordTypeFieldNumber;
const int AtkBossResponse::kRoledamageFieldNumber;
const int AtkBossResponse::kStateFieldNumber;
const int AtkBossResponse::kErrMsgFieldNumber;
const int AtkBossResponse::kIsCritFieldNumber;
const int AtkBossResponse::kCoinsFieldNumber;
const int AtkBossResponse::kMedalFieldNumber;
#endif  // !_MSC_VER

AtkBossResponse::AtkBossResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AtkBossResponse)
}

void AtkBossResponse::InitAsDefaultInstance() {
}

AtkBossResponse::AtkBossResponse(const AtkBossResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AtkBossResponse)
}

void AtkBossResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bossitemid_ = 0;
  bosshp_ = 0;
  bossbasehp_ = 0;
  roleitemid_ = 0;
  lordtype_ = 0;
  roledamage_ = 0;
  state_ = false;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iscrit_ = false;
  coins_ = 0;
  medal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtkBossResponse::~AtkBossResponse() {
  // @@protoc_insertion_point(destructor:main.AtkBossResponse)
  SharedDtor();
}

void AtkBossResponse::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AtkBossResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AtkBossResponse& AtkBossResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

AtkBossResponse* AtkBossResponse::default_instance_ = NULL;

AtkBossResponse* AtkBossResponse::New() const {
  return new AtkBossResponse;
}

void AtkBossResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AtkBossResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bossitemid_, roledamage_);
    state_ = false;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ZR_(iscrit_, medal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AtkBossResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AtkBossResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossitemid_)));
          set_has_bossitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bossHp;
        break;
      }

      // optional int32 bossHp = 2;
      case 2: {
        if (tag == 16) {
         parse_bossHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossBaseHp;
        break;
      }

      // optional int32 bossBaseHp = 3;
      case 3: {
        if (tag == 24) {
         parse_bossBaseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossbasehp_)));
          set_has_bossbasehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roleItemId;
        break;
      }

      // optional int32 roleItemId = 4;
      case 4: {
        if (tag == 32) {
         parse_roleItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleitemid_)));
          set_has_roleitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roledamage;
        break;
      }

      // optional int32 roledamage = 5;
      case 5: {
        if (tag == 40) {
         parse_roledamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roledamage_)));
          set_has_roledamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional bool state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 7;
      case 7: {
        if (tag == 58) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lordType;
        break;
      }

      // optional sint32 lordType = 8;
      case 8: {
        if (tag == 64) {
         parse_lordType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lordtype_)));
          set_has_lordtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isCrit;
        break;
      }

      // optional bool isCrit = 9;
      case 9: {
        if (tag == 72) {
         parse_isCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscrit_)));
          set_has_iscrit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_coins;
        break;
      }

      // optional sint32 coins = 10;
      case 10: {
        if (tag == 80) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_medal;
        break;
      }

      // optional sint32 medal = 11;
      case 11: {
        if (tag == 88) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AtkBossResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AtkBossResponse)
  return false;
#undef DO_
}

void AtkBossResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AtkBossResponse)
  // optional int32 bossItemId = 1;
  if (has_bossitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossitemid(), output);
  }

  // optional int32 bossHp = 2;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bosshp(), output);
  }

  // optional int32 bossBaseHp = 3;
  if (has_bossbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossbasehp(), output);
  }

  // optional int32 roleItemId = 4;
  if (has_roleitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roleitemid(), output);
  }

  // optional int32 roledamage = 5;
  if (has_roledamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roledamage(), output);
  }

  // optional bool state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->state(), output);
  }

  // optional string errMsg = 7;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->errmsg(), output);
  }

  // optional sint32 lordType = 8;
  if (has_lordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->lordtype(), output);
  }

  // optional bool isCrit = 9;
  if (has_iscrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->iscrit(), output);
  }

  // optional sint32 coins = 10;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->coins(), output);
  }

  // optional sint32 medal = 11;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->medal(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AtkBossResponse)
}

int AtkBossResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossItemId = 1;
    if (has_bossitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossitemid());
    }

    // optional int32 bossHp = 2;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosshp());
    }

    // optional int32 bossBaseHp = 3;
    if (has_bossbasehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossbasehp());
    }

    // optional int32 roleItemId = 4;
    if (has_roleitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleitemid());
    }

    // optional sint32 lordType = 8;
    if (has_lordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lordtype());
    }

    // optional int32 roledamage = 5;
    if (has_roledamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roledamage());
    }

    // optional bool state = 6;
    if (has_state()) {
      total_size += 1 + 1;
    }

    // optional string errMsg = 7;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isCrit = 9;
    if (has_iscrit()) {
      total_size += 1 + 1;
    }

    // optional sint32 coins = 10;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->coins());
    }

    // optional sint32 medal = 11;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->medal());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtkBossResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AtkBossResponse*>(&from));
}

void AtkBossResponse::MergeFrom(const AtkBossResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossitemid()) {
      set_bossitemid(from.bossitemid());
    }
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
    if (from.has_bossbasehp()) {
      set_bossbasehp(from.bossbasehp());
    }
    if (from.has_roleitemid()) {
      set_roleitemid(from.roleitemid());
    }
    if (from.has_lordtype()) {
      set_lordtype(from.lordtype());
    }
    if (from.has_roledamage()) {
      set_roledamage(from.roledamage());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iscrit()) {
      set_iscrit(from.iscrit());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AtkBossResponse::CopyFrom(const AtkBossResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtkBossResponse::IsInitialized() const {

  return true;
}

void AtkBossResponse::Swap(AtkBossResponse* other) {
  if (other != this) {
    std::swap(bossitemid_, other->bossitemid_);
    std::swap(bosshp_, other->bosshp_);
    std::swap(bossbasehp_, other->bossbasehp_);
    std::swap(roleitemid_, other->roleitemid_);
    std::swap(lordtype_, other->lordtype_);
    std::swap(roledamage_, other->roledamage_);
    std::swap(state_, other->state_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(iscrit_, other->iscrit_);
    std::swap(coins_, other->coins_);
    std::swap(medal_, other->medal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AtkBossResponse::GetTypeName() const {
  return "main.AtkBossResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BossCurrStateRequest::BossCurrStateRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossCurrStateRequest)
}

void BossCurrStateRequest::InitAsDefaultInstance() {
}

BossCurrStateRequest::BossCurrStateRequest(const BossCurrStateRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossCurrStateRequest)
}

void BossCurrStateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossCurrStateRequest::~BossCurrStateRequest() {
  // @@protoc_insertion_point(destructor:main.BossCurrStateRequest)
  SharedDtor();
}

void BossCurrStateRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossCurrStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossCurrStateRequest& BossCurrStateRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossCurrStateRequest* BossCurrStateRequest::default_instance_ = NULL;

BossCurrStateRequest* BossCurrStateRequest::New() const {
  return new BossCurrStateRequest;
}

void BossCurrStateRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossCurrStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossCurrStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossCurrStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossCurrStateRequest)
  return false;
#undef DO_
}

void BossCurrStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossCurrStateRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossCurrStateRequest)
}

int BossCurrStateRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossCurrStateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossCurrStateRequest*>(&from));
}

void BossCurrStateRequest::MergeFrom(const BossCurrStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossCurrStateRequest::CopyFrom(const BossCurrStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossCurrStateRequest::IsInitialized() const {

  return true;
}

void BossCurrStateRequest::Swap(BossCurrStateRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossCurrStateRequest::GetTypeName() const {
  return "main.BossCurrStateRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BossCurrStateResponse::kBossHpFieldNumber;
const int BossCurrStateResponse::kBossBaseHpFieldNumber;
const int BossCurrStateResponse::kBossRankModelFieldNumber;
#endif  // !_MSC_VER

BossCurrStateResponse::BossCurrStateResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossCurrStateResponse)
}

void BossCurrStateResponse::InitAsDefaultInstance() {
}

BossCurrStateResponse::BossCurrStateResponse(const BossCurrStateResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossCurrStateResponse)
}

void BossCurrStateResponse::SharedCtor() {
  _cached_size_ = 0;
  bosshp_ = 0;
  bossbasehp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossCurrStateResponse::~BossCurrStateResponse() {
  // @@protoc_insertion_point(destructor:main.BossCurrStateResponse)
  SharedDtor();
}

void BossCurrStateResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossCurrStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossCurrStateResponse& BossCurrStateResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossCurrStateResponse* BossCurrStateResponse::default_instance_ = NULL;

BossCurrStateResponse* BossCurrStateResponse::New() const {
  return new BossCurrStateResponse;
}

void BossCurrStateResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossCurrStateResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bosshp_, bossbasehp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bossrankmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossCurrStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossCurrStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossHp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bossBaseHp;
        break;
      }

      // optional int32 bossBaseHp = 2;
      case 2: {
        if (tag == 16) {
         parse_bossBaseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossbasehp_)));
          set_has_bossbasehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bossRankModel;
        break;
      }

      // repeated .main.BossRankModel bossRankModel = 3;
      case 3: {
        if (tag == 26) {
         parse_bossRankModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossrankmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bossRankModel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossCurrStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossCurrStateResponse)
  return false;
#undef DO_
}

void BossCurrStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossCurrStateResponse)
  // optional int32 bossHp = 1;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bosshp(), output);
  }

  // optional int32 bossBaseHp = 2;
  if (has_bossbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bossbasehp(), output);
  }

  // repeated .main.BossRankModel bossRankModel = 3;
  for (int i = 0; i < this->bossrankmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bossrankmodel(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossCurrStateResponse)
}

int BossCurrStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossHp = 1;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosshp());
    }

    // optional int32 bossBaseHp = 2;
    if (has_bossbasehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossbasehp());
    }

  }
  // repeated .main.BossRankModel bossRankModel = 3;
  total_size += 1 * this->bossrankmodel_size();
  for (int i = 0; i < this->bossrankmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossrankmodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossCurrStateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossCurrStateResponse*>(&from));
}

void BossCurrStateResponse::MergeFrom(const BossCurrStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossrankmodel_.MergeFrom(from.bossrankmodel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
    if (from.has_bossbasehp()) {
      set_bossbasehp(from.bossbasehp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossCurrStateResponse::CopyFrom(const BossCurrStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossCurrStateResponse::IsInitialized() const {

  return true;
}

void BossCurrStateResponse::Swap(BossCurrStateResponse* other) {
  if (other != this) {
    std::swap(bosshp_, other->bosshp_);
    std::swap(bossbasehp_, other->bossbasehp_);
    bossrankmodel_.Swap(&other->bossrankmodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossCurrStateResponse::GetTypeName() const {
  return "main.BossCurrStateResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MainBossRequest::MainBossRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MainBossRequest)
}

void MainBossRequest::InitAsDefaultInstance() {
}

MainBossRequest::MainBossRequest(const MainBossRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MainBossRequest)
}

void MainBossRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainBossRequest::~MainBossRequest() {
  // @@protoc_insertion_point(destructor:main.MainBossRequest)
  SharedDtor();
}

void MainBossRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MainBossRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MainBossRequest& MainBossRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

MainBossRequest* MainBossRequest::default_instance_ = NULL;

MainBossRequest* MainBossRequest::New() const {
  return new MainBossRequest;
}

void MainBossRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MainBossRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MainBossRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.MainBossRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MainBossRequest)
  return false;
#undef DO_
}

void MainBossRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MainBossRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MainBossRequest)
}

int MainBossRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainBossRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MainBossRequest*>(&from));
}

void MainBossRequest::MergeFrom(const MainBossRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MainBossRequest::CopyFrom(const MainBossRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainBossRequest::IsInitialized() const {

  return true;
}

void MainBossRequest::Swap(MainBossRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MainBossRequest::GetTypeName() const {
  return "main.MainBossRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int MainBossResponse::kStateFieldNumber;
const int MainBossResponse::kBossLevelFieldNumber;
const int MainBossResponse::kResidueTimeFieldNumber;
const int MainBossResponse::kTheFirstThreeFieldNumber;
const int MainBossResponse::kSlayInfoFieldNumber;
const int MainBossResponse::kStartedTimeFieldNumber;
#endif  // !_MSC_VER

MainBossResponse::MainBossResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MainBossResponse)
}

void MainBossResponse::InitAsDefaultInstance() {
}

MainBossResponse::MainBossResponse(const MainBossResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MainBossResponse)
}

void MainBossResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  bosslevel_ = 0;
  residuetime_ = GOOGLE_LONGLONG(0);
  thefirstthree_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slayinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startedtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainBossResponse::~MainBossResponse() {
  // @@protoc_insertion_point(destructor:main.MainBossResponse)
  SharedDtor();
}

void MainBossResponse::SharedDtor() {
  if (thefirstthree_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thefirstthree_;
  }
  if (slayinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slayinfo_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MainBossResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MainBossResponse& MainBossResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

MainBossResponse* MainBossResponse::default_instance_ = NULL;

MainBossResponse* MainBossResponse::New() const {
  return new MainBossResponse;
}

void MainBossResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MainBossResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(state_, residuetime_);
    if (has_thefirstthree()) {
      if (thefirstthree_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thefirstthree_->clear();
      }
    }
    if (has_slayinfo()) {
      if (slayinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slayinfo_->clear();
      }
    }
    startedtime_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MainBossResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MainBossResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bossLevel;
        break;
      }

      // optional sint32 bossLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_bossLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bosslevel_)));
          set_has_bosslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_residueTime;
        break;
      }

      // optional sint64 residueTime = 3;
      case 3: {
        if (tag == 24) {
         parse_residueTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &residuetime_)));
          set_has_residuetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_theFirstThree;
        break;
      }

      // optional string theFirstThree = 4;
      case 4: {
        if (tag == 34) {
         parse_theFirstThree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thefirstthree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_slayInfo;
        break;
      }

      // optional string slayInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_slayInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slayinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_startedTime;
        break;
      }

      // optional sint32 startedTime = 6;
      case 6: {
        if (tag == 48) {
         parse_startedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &startedtime_)));
          set_has_startedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MainBossResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MainBossResponse)
  return false;
#undef DO_
}

void MainBossResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MainBossResponse)
  // required sint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->state(), output);
  }

  // optional sint32 bossLevel = 2;
  if (has_bosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bosslevel(), output);
  }

  // optional sint64 residueTime = 3;
  if (has_residuetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->residuetime(), output);
  }

  // optional string theFirstThree = 4;
  if (has_thefirstthree()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->thefirstthree(), output);
  }

  // optional string slayInfo = 5;
  if (has_slayinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->slayinfo(), output);
  }

  // optional sint32 startedTime = 6;
  if (has_startedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->startedtime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MainBossResponse)
}

int MainBossResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->state());
    }

    // optional sint32 bossLevel = 2;
    if (has_bosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bosslevel());
    }

    // optional sint64 residueTime = 3;
    if (has_residuetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->residuetime());
    }

    // optional string theFirstThree = 4;
    if (has_thefirstthree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thefirstthree());
    }

    // optional string slayInfo = 5;
    if (has_slayinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slayinfo());
    }

    // optional sint32 startedTime = 6;
    if (has_startedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->startedtime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainBossResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MainBossResponse*>(&from));
}

void MainBossResponse::MergeFrom(const MainBossResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_bosslevel()) {
      set_bosslevel(from.bosslevel());
    }
    if (from.has_residuetime()) {
      set_residuetime(from.residuetime());
    }
    if (from.has_thefirstthree()) {
      set_thefirstthree(from.thefirstthree());
    }
    if (from.has_slayinfo()) {
      set_slayinfo(from.slayinfo());
    }
    if (from.has_startedtime()) {
      set_startedtime(from.startedtime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MainBossResponse::CopyFrom(const MainBossResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainBossResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MainBossResponse::Swap(MainBossResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(bosslevel_, other->bosslevel_);
    std::swap(residuetime_, other->residuetime_);
    std::swap(thefirstthree_, other->thefirstthree_);
    std::swap(slayinfo_, other->slayinfo_);
    std::swap(startedtime_, other->startedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MainBossResponse::GetTypeName() const {
  return "main.MainBossResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BossDamageRankRequest::BossDamageRankRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossDamageRankRequest)
}

void BossDamageRankRequest::InitAsDefaultInstance() {
}

BossDamageRankRequest::BossDamageRankRequest(const BossDamageRankRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossDamageRankRequest)
}

void BossDamageRankRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamageRankRequest::~BossDamageRankRequest() {
  // @@protoc_insertion_point(destructor:main.BossDamageRankRequest)
  SharedDtor();
}

void BossDamageRankRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossDamageRankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossDamageRankRequest& BossDamageRankRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossDamageRankRequest* BossDamageRankRequest::default_instance_ = NULL;

BossDamageRankRequest* BossDamageRankRequest::New() const {
  return new BossDamageRankRequest;
}

void BossDamageRankRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossDamageRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossDamageRankRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossDamageRankRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossDamageRankRequest)
  return false;
#undef DO_
}

void BossDamageRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossDamageRankRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossDamageRankRequest)
}

int BossDamageRankRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamageRankRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossDamageRankRequest*>(&from));
}

void BossDamageRankRequest::MergeFrom(const BossDamageRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossDamageRankRequest::CopyFrom(const BossDamageRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamageRankRequest::IsInitialized() const {

  return true;
}

void BossDamageRankRequest::Swap(BossDamageRankRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossDamageRankRequest::GetTypeName() const {
  return "main.BossDamageRankRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BossDamageRankResponse::kBossRankInfoFieldNumber;
const int BossDamageRankResponse::kMinuteFieldNumber;
const int BossDamageRankResponse::kPlayerNameFieldNumber;
const int BossDamageRankResponse::kDamageFieldNumber;
const int BossDamageRankResponse::kSelfDamageFieldNumber;
#endif  // !_MSC_VER

BossDamageRankResponse::BossDamageRankResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossDamageRankResponse)
}

void BossDamageRankResponse::InitAsDefaultInstance() {
}

BossDamageRankResponse::BossDamageRankResponse(const BossDamageRankResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossDamageRankResponse)
}

void BossDamageRankResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  minute_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_ = GOOGLE_LONGLONG(0);
  selfdamage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamageRankResponse::~BossDamageRankResponse() {
  // @@protoc_insertion_point(destructor:main.BossDamageRankResponse)
  SharedDtor();
}

void BossDamageRankResponse::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossDamageRankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossDamageRankResponse& BossDamageRankResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossDamageRankResponse* BossDamageRankResponse::default_instance_ = NULL;

BossDamageRankResponse* BossDamageRankResponse::New() const {
  return new BossDamageRankResponse;
}

void BossDamageRankResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossDamageRankResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(minute_, damage_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bossrankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossDamageRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossDamageRankResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.BossRankInfo bossRankInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_bossRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bossRankInfo;
        if (input->ExpectTag(16)) goto parse_minute;
        break;
      }

      // optional sint32 minute = 2;
      case 2: {
        if (tag == 16) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // optional sint64 damage = 4;
      case 4: {
        if (tag == 32) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_selfDamage;
        break;
      }

      // optional sint32 selfDamage = 5;
      case 5: {
        if (tag == 40) {
         parse_selfDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &selfdamage_)));
          set_has_selfdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossDamageRankResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossDamageRankResponse)
  return false;
#undef DO_
}

void BossDamageRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossDamageRankResponse)
  // repeated .main.BossRankInfo bossRankInfo = 1;
  for (int i = 0; i < this->bossrankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bossrankinfo(i), output);
  }

  // optional sint32 minute = 2;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->minute(), output);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // optional sint64 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->damage(), output);
  }

  // optional sint32 selfDamage = 5;
  if (has_selfdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->selfdamage(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossDamageRankResponse)
}

int BossDamageRankResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint32 minute = 2;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->minute());
    }

    // optional string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional sint64 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->damage());
    }

    // optional sint32 selfDamage = 5;
    if (has_selfdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->selfdamage());
    }

  }
  // repeated .main.BossRankInfo bossRankInfo = 1;
  total_size += 1 * this->bossrankinfo_size();
  for (int i = 0; i < this->bossrankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossrankinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamageRankResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossDamageRankResponse*>(&from));
}

void BossDamageRankResponse::MergeFrom(const BossDamageRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossrankinfo_.MergeFrom(from.bossrankinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_selfdamage()) {
      set_selfdamage(from.selfdamage());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossDamageRankResponse::CopyFrom(const BossDamageRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamageRankResponse::IsInitialized() const {

  return true;
}

void BossDamageRankResponse::Swap(BossDamageRankResponse* other) {
  if (other != this) {
    bossrankinfo_.Swap(&other->bossrankinfo_);
    std::swap(minute_, other->minute_);
    std::swap(playername_, other->playername_);
    std::swap(damage_, other->damage_);
    std::swap(selfdamage_, other->selfdamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossDamageRankResponse::GetTypeName() const {
  return "main.BossDamageRankResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BossRankInfo::kRoleIdFieldNumber;
const int BossRankInfo::kRoleNameFieldNumber;
const int BossRankInfo::kLevelFieldNumber;
const int BossRankInfo::kIconFieldNumber;
const int BossRankInfo::kCountryFieldNumber;
const int BossRankInfo::kDamageFieldNumber;
const int BossRankInfo::kRankIndexFieldNumber;
#endif  // !_MSC_VER

BossRankInfo::BossRankInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossRankInfo)
}

void BossRankInfo::InitAsDefaultInstance() {
}

BossRankInfo::BossRankInfo(const BossRankInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossRankInfo)
}

void BossRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  icon_ = 0;
  country_ = 0;
  damage_ = 0;
  rankindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossRankInfo::~BossRankInfo() {
  // @@protoc_insertion_point(destructor:main.BossRankInfo)
  SharedDtor();
}

void BossRankInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossRankInfo& BossRankInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossRankInfo* BossRankInfo::default_instance_ = NULL;

BossRankInfo* BossRankInfo::New() const {
  return new BossRankInfo;
}

void BossRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(roleid_, rankindex_);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rolename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (tag == 18) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional sint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_icon;
        break;
      }

      // optional sint32 icon = 4;
      case 4: {
        if (tag == 32) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_country;
        break;
      }

      // optional sint32 country = 5;
      case 5: {
        if (tag == 40) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_damage;
        break;
      }

      // optional sint32 damage = 6;
      case 6: {
        if (tag == 48) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rankIndex;
        break;
      }

      // optional sint32 rankIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_rankIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rankindex_)));
          set_has_rankindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossRankInfo)
  return false;
#undef DO_
}

void BossRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossRankInfo)
  // optional sint32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->roleid(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rolename(), output);
  }

  // optional sint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->level(), output);
  }

  // optional sint32 icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->icon(), output);
  }

  // optional sint32 country = 5;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->country(), output);
  }

  // optional sint32 damage = 6;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->damage(), output);
  }

  // optional sint32 rankIndex = 7;
  if (has_rankindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->rankindex(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossRankInfo)
}

int BossRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->roleid());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional sint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

    // optional sint32 icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->icon());
    }

    // optional sint32 country = 5;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->country());
    }

    // optional sint32 damage = 6;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage());
    }

    // optional sint32 rankIndex = 7;
    if (has_rankindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rankindex());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossRankInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossRankInfo*>(&from));
}

void BossRankInfo::MergeFrom(const BossRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_rankindex()) {
      set_rankindex(from.rankindex());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossRankInfo::CopyFrom(const BossRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossRankInfo::IsInitialized() const {

  return true;
}

void BossRankInfo::Swap(BossRankInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(icon_, other->icon_);
    std::swap(country_, other->country_);
    std::swap(damage_, other->damage_);
    std::swap(rankindex_, other->rankindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossRankInfo::GetTypeName() const {
  return "main.BossRankInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GetBossBuffRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

GetBossBuffRequest::GetBossBuffRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GetBossBuffRequest)
}

void GetBossBuffRequest::InitAsDefaultInstance() {
}

GetBossBuffRequest::GetBossBuffRequest(const GetBossBuffRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GetBossBuffRequest)
}

void GetBossBuffRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBossBuffRequest::~GetBossBuffRequest() {
  // @@protoc_insertion_point(destructor:main.GetBossBuffRequest)
  SharedDtor();
}

void GetBossBuffRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetBossBuffRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetBossBuffRequest& GetBossBuffRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

GetBossBuffRequest* GetBossBuffRequest::default_instance_ = NULL;

GetBossBuffRequest* GetBossBuffRequest::New() const {
  return new GetBossBuffRequest;
}

void GetBossBuffRequest::Clear() {
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetBossBuffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GetBossBuffRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GetBossBuffRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GetBossBuffRequest)
  return false;
#undef DO_
}

void GetBossBuffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GetBossBuffRequest)
  // optional sint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GetBossBuffRequest)
}

int GetBossBuffRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBossBuffRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetBossBuffRequest*>(&from));
}

void GetBossBuffRequest::MergeFrom(const GetBossBuffRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetBossBuffRequest::CopyFrom(const GetBossBuffRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBossBuffRequest::IsInitialized() const {

  return true;
}

void GetBossBuffRequest::Swap(GetBossBuffRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetBossBuffRequest::GetTypeName() const {
  return "main.GetBossBuffRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetBossBuffResponse::kStateFieldNumber;
const int GetBossBuffResponse::kValue1FieldNumber;
const int GetBossBuffResponse::kValue2FieldNumber;
const int GetBossBuffResponse::kValue3FieldNumber;
#endif  // !_MSC_VER

GetBossBuffResponse::GetBossBuffResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.GetBossBuffResponse)
}

void GetBossBuffResponse::InitAsDefaultInstance() {
}

GetBossBuffResponse::GetBossBuffResponse(const GetBossBuffResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.GetBossBuffResponse)
}

void GetBossBuffResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  value1_ = 0;
  value2_ = 0;
  value3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBossBuffResponse::~GetBossBuffResponse() {
  // @@protoc_insertion_point(destructor:main.GetBossBuffResponse)
  SharedDtor();
}

void GetBossBuffResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetBossBuffResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetBossBuffResponse& GetBossBuffResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

GetBossBuffResponse* GetBossBuffResponse::default_instance_ = NULL;

GetBossBuffResponse* GetBossBuffResponse::New() const {
  return new GetBossBuffResponse;
}

void GetBossBuffResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetBossBuffResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, value3_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetBossBuffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.GetBossBuffResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value1;
        break;
      }

      // optional sint32 value1 = 2;
      case 2: {
        if (tag == 16) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_value2;
        break;
      }

      // optional float value2 = 3;
      case 3: {
        if (tag == 29) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value3;
        break;
      }

      // optional sint32 value3 = 4;
      case 4: {
        if (tag == 32) {
         parse_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.GetBossBuffResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.GetBossBuffResponse)
  return false;
#undef DO_
}

void GetBossBuffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.GetBossBuffResponse)
  // optional sint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->state(), output);
  }

  // optional sint32 value1 = 2;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->value1(), output);
  }

  // optional float value2 = 3;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value2(), output);
  }

  // optional sint32 value3 = 4;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->value3(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.GetBossBuffResponse)
}

int GetBossBuffResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->state());
    }

    // optional sint32 value1 = 2;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value1());
    }

    // optional float value2 = 3;
    if (has_value2()) {
      total_size += 1 + 4;
    }

    // optional sint32 value3 = 4;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value3());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBossBuffResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetBossBuffResponse*>(&from));
}

void GetBossBuffResponse::MergeFrom(const GetBossBuffResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetBossBuffResponse::CopyFrom(const GetBossBuffResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBossBuffResponse::IsInitialized() const {

  return true;
}

void GetBossBuffResponse::Swap(GetBossBuffResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetBossBuffResponse::GetTypeName() const {
  return "main.GetBossBuffResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int BossEndRewardResponse::kRewardStringFieldNumber;
#endif  // !_MSC_VER

BossEndRewardResponse::BossEndRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.BossEndRewardResponse)
}

void BossEndRewardResponse::InitAsDefaultInstance() {
}

BossEndRewardResponse::BossEndRewardResponse(const BossEndRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.BossEndRewardResponse)
}

void BossEndRewardResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rewardstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossEndRewardResponse::~BossEndRewardResponse() {
  // @@protoc_insertion_point(destructor:main.BossEndRewardResponse)
  SharedDtor();
}

void BossEndRewardResponse::SharedDtor() {
  if (rewardstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BossEndRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BossEndRewardResponse& BossEndRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

BossEndRewardResponse* BossEndRewardResponse::default_instance_ = NULL;

BossEndRewardResponse* BossEndRewardResponse::New() const {
  return new BossEndRewardResponse;
}

void BossEndRewardResponse::Clear() {
  if (has_rewardstring()) {
    if (rewardstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      rewardstring_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BossEndRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.BossEndRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rewardString = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.BossEndRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.BossEndRewardResponse)
  return false;
#undef DO_
}

void BossEndRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.BossEndRewardResponse)
  // optional string rewardString = 1;
  if (has_rewardstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rewardstring(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.BossEndRewardResponse)
}

int BossEndRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rewardString = 1;
    if (has_rewardstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardstring());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossEndRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BossEndRewardResponse*>(&from));
}

void BossEndRewardResponse::MergeFrom(const BossEndRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardstring()) {
      set_rewardstring(from.rewardstring());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BossEndRewardResponse::CopyFrom(const BossEndRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossEndRewardResponse::IsInitialized() const {

  return true;
}

void BossEndRewardResponse::Swap(BossEndRewardResponse* other) {
  if (other != this) {
    std::swap(rewardstring_, other->rewardstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BossEndRewardResponse::GetTypeName() const {
  return "main.BossEndRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int FightPvpRewardRequest::kFightIdFieldNumber;
#endif  // !_MSC_VER

FightPvpRewardRequest::FightPvpRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightPvpRewardRequest)
}

void FightPvpRewardRequest::InitAsDefaultInstance() {
}

FightPvpRewardRequest::FightPvpRewardRequest(const FightPvpRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightPvpRewardRequest)
}

void FightPvpRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  fightid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightPvpRewardRequest::~FightPvpRewardRequest() {
  // @@protoc_insertion_point(destructor:main.FightPvpRewardRequest)
  SharedDtor();
}

void FightPvpRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightPvpRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightPvpRewardRequest& FightPvpRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightPvpRewardRequest* FightPvpRewardRequest::default_instance_ = NULL;

FightPvpRewardRequest* FightPvpRewardRequest::New() const {
  return new FightPvpRewardRequest;
}

void FightPvpRewardRequest::Clear() {
  fightid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightPvpRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightPvpRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 fightId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &fightid_)));
          set_has_fightid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightPvpRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightPvpRewardRequest)
  return false;
#undef DO_
}

void FightPvpRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightPvpRewardRequest)
  // required sint64 fightId = 1;
  if (has_fightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->fightid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightPvpRewardRequest)
}

int FightPvpRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 fightId = 1;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->fightid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightPvpRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightPvpRewardRequest*>(&from));
}

void FightPvpRewardRequest::MergeFrom(const FightPvpRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightid()) {
      set_fightid(from.fightid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightPvpRewardRequest::CopyFrom(const FightPvpRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightPvpRewardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FightPvpRewardRequest::Swap(FightPvpRewardRequest* other) {
  if (other != this) {
    std::swap(fightid_, other->fightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightPvpRewardRequest::GetTypeName() const {
  return "main.FightPvpRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int FightPvpRewardResponse::kStateFieldNumber;
const int FightPvpRewardResponse::kIsWinFieldNumber;
const int FightPvpRewardResponse::kPrestigeFieldNumber;
const int FightPvpRewardResponse::kScoreFieldNumber;
const int FightPvpRewardResponse::kRankFieldNumber;
const int FightPvpRewardResponse::kCountFieldNumber;
#endif  // !_MSC_VER

FightPvpRewardResponse::FightPvpRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.FightPvpRewardResponse)
}

void FightPvpRewardResponse::InitAsDefaultInstance() {
}

FightPvpRewardResponse::FightPvpRewardResponse(const FightPvpRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.FightPvpRewardResponse)
}

void FightPvpRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  iswin_ = false;
  prestige_ = 0;
  score_ = 0;
  rank_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightPvpRewardResponse::~FightPvpRewardResponse() {
  // @@protoc_insertion_point(destructor:main.FightPvpRewardResponse)
  SharedDtor();
}

void FightPvpRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightPvpRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightPvpRewardResponse& FightPvpRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightBaseModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightBaseModule_2eproto();
#endif
  return *default_instance_;
}

FightPvpRewardResponse* FightPvpRewardResponse::default_instance_ = NULL;

FightPvpRewardResponse* FightPvpRewardResponse::New() const {
  return new FightPvpRewardResponse;
}

void FightPvpRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightPvpRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(state_, count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool FightPvpRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.FightPvpRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isWin;
        break;
      }

      // optional bool isWin = 2;
      case 2: {
        if (tag == 16) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prestige;
        break;
      }

      // optional sint32 prestige = 3;
      case 3: {
        if (tag == 24) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional sint32 score = 4;
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional sint32 rank = 5;
      case 5: {
        if (tag == 40) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional sint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.FightPvpRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.FightPvpRewardResponse)
  return false;
#undef DO_
}

void FightPvpRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.FightPvpRewardResponse)
  // required sint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->state(), output);
  }

  // optional bool isWin = 2;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iswin(), output);
  }

  // optional sint32 prestige = 3;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->prestige(), output);
  }

  // optional sint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->score(), output);
  }

  // optional sint32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->rank(), output);
  }

  // optional sint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.FightPvpRewardResponse)
}

int FightPvpRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->state());
    }

    // optional bool isWin = 2;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional sint32 prestige = 3;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prestige());
    }

    // optional sint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->score());
    }

    // optional sint32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank());
    }

    // optional sint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightPvpRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightPvpRewardResponse*>(&from));
}

void FightPvpRewardResponse::MergeFrom(const FightPvpRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void FightPvpRewardResponse::CopyFrom(const FightPvpRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightPvpRewardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FightPvpRewardResponse::Swap(FightPvpRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(iswin_, other->iswin_);
    std::swap(prestige_, other->prestige_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightPvpRewardResponse::GetTypeName() const {
  return "main.FightPvpRewardResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
