// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_LoginModule_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginResponse::default_instance_;
  delete PvPLoginRequest::default_instance_;
  delete HeartBeatRequest::default_instance_;
  delete HeartBeatResponse::default_instance_;
  delete CDKEYRequest::default_instance_;
  delete CDKEYResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_LoginModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_LoginModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::main::protobuf_AddDesc_RoleModule_2eproto();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  PvPLoginRequest::default_instance_ = new PvPLoginRequest();
  HeartBeatRequest::default_instance_ = new HeartBeatRequest();
  HeartBeatResponse::default_instance_ = new HeartBeatResponse();
  CDKEYRequest::default_instance_ = new CDKEYRequest();
  CDKEYResponse::default_instance_ = new CDKEYResponse();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  PvPLoginRequest::default_instance_->InitAsDefaultInstance();
  HeartBeatRequest::default_instance_->InitAsDefaultInstance();
  HeartBeatResponse::default_instance_->InitAsDefaultInstance();
  CDKEYRequest::default_instance_->InitAsDefaultInstance();
  CDKEYResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_LoginModule_2eproto_once_);
void protobuf_AddDesc_LoginModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_LoginModule_2eproto_once_,
                 &protobuf_AddDesc_LoginModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginModule_2eproto {
  StaticDescriptorInitializer_LoginModule_2eproto() {
    protobuf_AddDesc_LoginModule_2eproto();
  }
} static_descriptor_initializer_LoginModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kLoginKeyFieldNumber;
const int LoginRequest::kUserIdFieldNumber;
const int LoginRequest::kServerIdFieldNumber;
const int LoginRequest::kChannelIdFieldNumber;
const int LoginRequest::kSubChannelIdFieldNumber;
const int LoginRequest::kNickNameFieldNumber;
const int LoginRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  loginkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0;
  channelid_ = 0;
  subchannelid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:main.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (loginkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginkey_;
  }
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRequest& LoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginModule_2eproto();
#endif
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(serverid_, channelid_);
    if (has_loginkey()) {
      if (loginkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loginkey_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    subchannelid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string loginKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userId;
        break;
      }

      // required string userId = 2;
      case 2: {
        if (tag == 18) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverId;
        break;
      }

      // required int32 serverId = 3;
      case 3: {
        if (tag == 24) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channelId;
        break;
      }

      // required int32 channelId = 4;
      case 4: {
        if (tag == 32) {
         parse_channelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subChannelId;
        break;
      }

      // required int32 subChannelId = 5;
      case 5: {
        if (tag == 40) {
         parse_subChannelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subchannelid_)));
          set_has_subchannelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nickName;
        break;
      }

      // required string nickName = 6;
      case 6: {
        if (tag == 50) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }

      // optional string token = 7;
      case 7: {
        if (tag == 58) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LoginRequest)
  // required string loginKey = 1;
  if (has_loginkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loginkey(), output);
  }

  // required string userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // required int32 serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }

  // required int32 channelId = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channelid(), output);
  }

  // required int32 subChannelId = 5;
  if (has_subchannelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->subchannelid(), output);
  }

  // required string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nickname(), output);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LoginRequest)
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string loginKey = 1;
    if (has_loginkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginkey());
    }

    // required string userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 serverId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 channelId = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

    // required int32 subChannelId = 5;
    if (has_subchannelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subchannelid());
    }

    // required string nickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRequest*>(&from));
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginkey()) {
      set_loginkey(from.loginkey());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_subchannelid()) {
      set_subchannelid(from.subchannelid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(loginkey_, other->loginkey_);
    std::swap(userid_, other->userid_);
    std::swap(serverid_, other->serverid_);
    std::swap(channelid_, other->channelid_);
    std::swap(subchannelid_, other->subchannelid_);
    std::swap(nickname_, other->nickname_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginRequest::GetTypeName() const {
  return "main.LoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kStateFieldNumber;
const int LoginResponse::kFailMsgFieldNumber;
const int LoginResponse::kHasRoleFieldNumber;
const int LoginResponse::kCDKEYFieldNumber;
const int LoginResponse::kRoleResponseFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roleresponse_ = const_cast< ::main::RoleResponse*>(
      ::main::RoleResponse::internal_default_instance());
#else
  roleresponse_ = const_cast< ::main::RoleResponse*>(&::main::RoleResponse::default_instance());
#endif
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  failmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hasrole_ = 0;
  cdkey_ = 0;
  roleresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:main.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete failmsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete roleresponse_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginResponse& LoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginModule_2eproto();
#endif
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(state_, hasrole_);
    if (has_failmsg()) {
      if (failmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        failmsg_->clear();
      }
    }
    cdkey_ = 0;
    if (has_roleresponse()) {
      if (roleresponse_ != NULL) roleresponse_->::main::RoleResponse::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failMsg;
        break;
      }

      // optional string failMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_failMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hasRole;
        break;
      }

      // optional int32 hasRole = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_hasRole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasrole_)));
          set_has_hasrole();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CDKEY;
        break;
      }

      // optional int32 CDKEY = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_CDKEY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdkey_)));
          set_has_cdkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_roleResponse;
        break;
      }

      // optional .main.RoleResponse roleResponse = 5;
      case 5: {
        if (tag == 42) {
         parse_roleResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roleresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.LoginResponse)
  // optional int32 state = 1 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string failMsg = 2;
  if (has_failmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failmsg(), output);
  }

  // optional int32 hasRole = 3 [default = 0];
  if (has_hasrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hasrole(), output);
  }

  // optional int32 CDKEY = 4 [default = 0];
  if (has_cdkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cdkey(), output);
  }

  // optional .main.RoleResponse roleResponse = 5;
  if (has_roleresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->roleresponse(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.LoginResponse)
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string failMsg = 2;
    if (has_failmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failmsg());
    }

    // optional int32 hasRole = 3 [default = 0];
    if (has_hasrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasrole());
    }

    // optional int32 CDKEY = 4 [default = 0];
    if (has_cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdkey());
    }

    // optional .main.RoleResponse roleResponse = 5;
    if (has_roleresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roleresponse());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginResponse*>(&from));
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_failmsg()) {
      set_failmsg(from.failmsg());
    }
    if (from.has_hasrole()) {
      set_hasrole(from.hasrole());
    }
    if (from.has_cdkey()) {
      set_cdkey(from.cdkey());
    }
    if (from.has_roleresponse()) {
      mutable_roleresponse()->::main::RoleResponse::MergeFrom(from.roleresponse());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  if (has_roleresponse()) {
    if (!this->roleresponse().IsInitialized()) return false;
  }
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(failmsg_, other->failmsg_);
    std::swap(hasrole_, other->hasrole_);
    std::swap(cdkey_, other->cdkey_);
    std::swap(roleresponse_, other->roleresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginResponse::GetTypeName() const {
  return "main.LoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PvPLoginRequest::kAccountIdFieldNumber;
const int PvPLoginRequest::kServerIdFieldNumber;
const int PvPLoginRequest::kFightIdFieldNumber;
const int PvPLoginRequest::kTypeFieldNumber;
const int PvPLoginRequest::kChannelIdFieldNumber;
const int PvPLoginRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

PvPLoginRequest::PvPLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.PvPLoginRequest)
}

void PvPLoginRequest::InitAsDefaultInstance() {
}

PvPLoginRequest::PvPLoginRequest(const PvPLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.PvPLoginRequest)
}

void PvPLoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0;
  fightid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  channelid_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPLoginRequest::~PvPLoginRequest() {
  // @@protoc_insertion_point(destructor:main.PvPLoginRequest)
  SharedDtor();
}

void PvPLoginRequest::SharedDtor() {
  if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountid_;
  }
  if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fightid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PvPLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PvPLoginRequest& PvPLoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginModule_2eproto();
#endif
  return *default_instance_;
}

PvPLoginRequest* PvPLoginRequest::default_instance_ = NULL;

PvPLoginRequest* PvPLoginRequest::New() const {
  return new PvPLoginRequest;
}

void PvPLoginRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvPLoginRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(serverid_, roleid_);
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountid_->clear();
      }
    }
    if (has_fightid()) {
      if (fightid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fightid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PvPLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.PvPLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string accountId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverId;
        break;
      }

      // required int32 serverId = 2;
      case 2: {
        if (tag == 16) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fightId;
        break;
      }

      // optional string fightId = 3;
      case 3: {
        if (tag == 26) {
         parse_fightId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fightid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelId;
        break;
      }

      // optional int32 channelId = 5;
      case 5: {
        if (tag == 40) {
         parse_channelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roleId;
        break;
      }

      // optional int32 roleId = 6;
      case 6: {
        if (tag == 48) {
         parse_roleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.PvPLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.PvPLoginRequest)
  return false;
#undef DO_
}

void PvPLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.PvPLoginRequest)
  // required string accountId = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->accountid(), output);
  }

  // required int32 serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // optional string fightId = 3;
  if (has_fightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fightid(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 channelId = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channelid(), output);
  }

  // optional int32 roleId = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roleid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.PvPLoginRequest)
}

int PvPLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string accountId = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // required int32 serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional string fightId = 3;
    if (has_fightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fightid());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 channelId = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

    // optional int32 roleId = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PvPLoginRequest*>(&from));
}

void PvPLoginRequest::MergeFrom(const PvPLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_fightid()) {
      set_fightid(from.fightid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PvPLoginRequest::CopyFrom(const PvPLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PvPLoginRequest::Swap(PvPLoginRequest* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(serverid_, other->serverid_);
    std::swap(fightid_, other->fightid_);
    std::swap(type_, other->type_);
    std::swap(channelid_, other->channelid_);
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PvPLoginRequest::GetTypeName() const {
  return "main.PvPLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeatRequest::HeartBeatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.HeartBeatRequest)
}

void HeartBeatRequest::InitAsDefaultInstance() {
}

HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:main.HeartBeatRequest)
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HeartBeatRequest& HeartBeatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginModule_2eproto();
#endif
  return *default_instance_;
}

HeartBeatRequest* HeartBeatRequest::default_instance_ = NULL;

HeartBeatRequest* HeartBeatRequest::New() const {
  return new HeartBeatRequest;
}

void HeartBeatRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.HeartBeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.HeartBeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.HeartBeatRequest)
  return false;
#undef DO_
}

void HeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.HeartBeatRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.HeartBeatRequest)
}

int HeartBeatRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartBeatRequest*>(&from));
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {

  return true;
}

void HeartBeatRequest::Swap(HeartBeatRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HeartBeatRequest::GetTypeName() const {
  return "main.HeartBeatRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatResponse::kStateFieldNumber;
#endif  // !_MSC_VER

HeartBeatResponse::HeartBeatResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.HeartBeatResponse)
}

void HeartBeatResponse::InitAsDefaultInstance() {
}

HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:main.HeartBeatResponse)
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HeartBeatResponse& HeartBeatResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginModule_2eproto();
#endif
  return *default_instance_;
}

HeartBeatResponse* HeartBeatResponse::default_instance_ = NULL;

HeartBeatResponse* HeartBeatResponse::New() const {
  return new HeartBeatResponse;
}

void HeartBeatResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.HeartBeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.HeartBeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.HeartBeatResponse)
  return false;
#undef DO_
}

void HeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.HeartBeatResponse)
  // optional int32 state = 1 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.HeartBeatResponse)
}

int HeartBeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HeartBeatResponse*>(&from));
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {

  return true;
}

void HeartBeatResponse::Swap(HeartBeatResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HeartBeatResponse::GetTypeName() const {
  return "main.HeartBeatResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CDKEYRequest::kCDKEYFieldNumber;
#endif  // !_MSC_VER

CDKEYRequest::CDKEYRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CDKEYRequest)
}

void CDKEYRequest::InitAsDefaultInstance() {
}

CDKEYRequest::CDKEYRequest(const CDKEYRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CDKEYRequest)
}

void CDKEYRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDKEYRequest::~CDKEYRequest() {
  // @@protoc_insertion_point(destructor:main.CDKEYRequest)
  SharedDtor();
}

void CDKEYRequest::SharedDtor() {
  if (cdkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdkey_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CDKEYRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CDKEYRequest& CDKEYRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginModule_2eproto();
#endif
  return *default_instance_;
}

CDKEYRequest* CDKEYRequest::default_instance_ = NULL;

CDKEYRequest* CDKEYRequest::New() const {
  return new CDKEYRequest;
}

void CDKEYRequest::Clear() {
  if (has_cdkey()) {
    if (cdkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cdkey_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CDKEYRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CDKEYRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string CDKEY = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CDKEYRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CDKEYRequest)
  return false;
#undef DO_
}

void CDKEYRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CDKEYRequest)
  // optional string CDKEY = 1;
  if (has_cdkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cdkey(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CDKEYRequest)
}

int CDKEYRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string CDKEY = 1;
    if (has_cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdkey());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDKEYRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CDKEYRequest*>(&from));
}

void CDKEYRequest::MergeFrom(const CDKEYRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdkey()) {
      set_cdkey(from.cdkey());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CDKEYRequest::CopyFrom(const CDKEYRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDKEYRequest::IsInitialized() const {

  return true;
}

void CDKEYRequest::Swap(CDKEYRequest* other) {
  if (other != this) {
    std::swap(cdkey_, other->cdkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CDKEYRequest::GetTypeName() const {
  return "main.CDKEYRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CDKEYResponse::kStateFieldNumber;
#endif  // !_MSC_VER

CDKEYResponse::CDKEYResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.CDKEYResponse)
}

void CDKEYResponse::InitAsDefaultInstance() {
}

CDKEYResponse::CDKEYResponse(const CDKEYResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.CDKEYResponse)
}

void CDKEYResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDKEYResponse::~CDKEYResponse() {
  // @@protoc_insertion_point(destructor:main.CDKEYResponse)
  SharedDtor();
}

void CDKEYResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CDKEYResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CDKEYResponse& CDKEYResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_LoginModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_LoginModule_2eproto();
#endif
  return *default_instance_;
}

CDKEYResponse* CDKEYResponse::default_instance_ = NULL;

CDKEYResponse* CDKEYResponse::New() const {
  return new CDKEYResponse;
}

void CDKEYResponse::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CDKEYResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.CDKEYResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.CDKEYResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.CDKEYResponse)
  return false;
#undef DO_
}

void CDKEYResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.CDKEYResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.CDKEYResponse)
}

int CDKEYResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDKEYResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CDKEYResponse*>(&from));
}

void CDKEYResponse::MergeFrom(const CDKEYResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CDKEYResponse::CopyFrom(const CDKEYResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDKEYResponse::IsInitialized() const {

  return true;
}

void CDKEYResponse::Swap(CDKEYResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CDKEYResponse::GetTypeName() const {
  return "main.CDKEYResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
