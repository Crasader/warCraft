// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonthlyCardModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MonthlyCardModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_MonthlyCardModule_2eproto() {
  delete MonthlyCardShowRequest::default_instance_;
  delete MonthlyCardShowResponse::default_instance_;
  delete MonthlyCardShowInfo::default_instance_;
  delete MonthlyCardRewardRequest::default_instance_;
  delete MonthlyCardRewardResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MonthlyCardModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MonthlyCardModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MonthlyCardShowRequest::default_instance_ = new MonthlyCardShowRequest();
  MonthlyCardShowResponse::default_instance_ = new MonthlyCardShowResponse();
  MonthlyCardShowInfo::default_instance_ = new MonthlyCardShowInfo();
  MonthlyCardRewardRequest::default_instance_ = new MonthlyCardRewardRequest();
  MonthlyCardRewardResponse::default_instance_ = new MonthlyCardRewardResponse();
  MonthlyCardShowRequest::default_instance_->InitAsDefaultInstance();
  MonthlyCardShowResponse::default_instance_->InitAsDefaultInstance();
  MonthlyCardShowInfo::default_instance_->InitAsDefaultInstance();
  MonthlyCardRewardRequest::default_instance_->InitAsDefaultInstance();
  MonthlyCardRewardResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MonthlyCardModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MonthlyCardModule_2eproto_once_);
void protobuf_AddDesc_MonthlyCardModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MonthlyCardModule_2eproto_once_,
                 &protobuf_AddDesc_MonthlyCardModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MonthlyCardModule_2eproto {
  StaticDescriptorInitializer_MonthlyCardModule_2eproto() {
    protobuf_AddDesc_MonthlyCardModule_2eproto();
  }
} static_descriptor_initializer_MonthlyCardModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MonthlyCardShowRequest::MonthlyCardShowRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MonthlyCardShowRequest)
}

void MonthlyCardShowRequest::InitAsDefaultInstance() {
}

MonthlyCardShowRequest::MonthlyCardShowRequest(const MonthlyCardShowRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MonthlyCardShowRequest)
}

void MonthlyCardShowRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthlyCardShowRequest::~MonthlyCardShowRequest() {
  // @@protoc_insertion_point(destructor:main.MonthlyCardShowRequest)
  SharedDtor();
}

void MonthlyCardShowRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonthlyCardShowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonthlyCardShowRequest& MonthlyCardShowRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonthlyCardModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonthlyCardModule_2eproto();
#endif
  return *default_instance_;
}

MonthlyCardShowRequest* MonthlyCardShowRequest::default_instance_ = NULL;

MonthlyCardShowRequest* MonthlyCardShowRequest::New() const {
  return new MonthlyCardShowRequest;
}

void MonthlyCardShowRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MonthlyCardShowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MonthlyCardShowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.MonthlyCardShowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MonthlyCardShowRequest)
  return false;
#undef DO_
}

void MonthlyCardShowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MonthlyCardShowRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MonthlyCardShowRequest)
}

int MonthlyCardShowRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthlyCardShowRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonthlyCardShowRequest*>(&from));
}

void MonthlyCardShowRequest::MergeFrom(const MonthlyCardShowRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MonthlyCardShowRequest::CopyFrom(const MonthlyCardShowRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyCardShowRequest::IsInitialized() const {

  return true;
}

void MonthlyCardShowRequest::Swap(MonthlyCardShowRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonthlyCardShowRequest::GetTypeName() const {
  return "main.MonthlyCardShowRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int MonthlyCardShowResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

MonthlyCardShowResponse::MonthlyCardShowResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MonthlyCardShowResponse)
}

void MonthlyCardShowResponse::InitAsDefaultInstance() {
}

MonthlyCardShowResponse::MonthlyCardShowResponse(const MonthlyCardShowResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MonthlyCardShowResponse)
}

void MonthlyCardShowResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthlyCardShowResponse::~MonthlyCardShowResponse() {
  // @@protoc_insertion_point(destructor:main.MonthlyCardShowResponse)
  SharedDtor();
}

void MonthlyCardShowResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonthlyCardShowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonthlyCardShowResponse& MonthlyCardShowResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonthlyCardModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonthlyCardModule_2eproto();
#endif
  return *default_instance_;
}

MonthlyCardShowResponse* MonthlyCardShowResponse::default_instance_ = NULL;

MonthlyCardShowResponse* MonthlyCardShowResponse::New() const {
  return new MonthlyCardShowResponse;
}

void MonthlyCardShowResponse::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MonthlyCardShowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MonthlyCardShowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.MonthlyCardShowInfo info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MonthlyCardShowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MonthlyCardShowResponse)
  return false;
#undef DO_
}

void MonthlyCardShowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MonthlyCardShowResponse)
  // repeated .main.MonthlyCardShowInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MonthlyCardShowResponse)
}

int MonthlyCardShowResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.MonthlyCardShowInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthlyCardShowResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonthlyCardShowResponse*>(&from));
}

void MonthlyCardShowResponse::MergeFrom(const MonthlyCardShowResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MonthlyCardShowResponse::CopyFrom(const MonthlyCardShowResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyCardShowResponse::IsInitialized() const {

  return true;
}

void MonthlyCardShowResponse::Swap(MonthlyCardShowResponse* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonthlyCardShowResponse::GetTypeName() const {
  return "main.MonthlyCardShowResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int MonthlyCardShowInfo::kTypeFieldNumber;
const int MonthlyCardShowInfo::kGoldFieldNumber;
const int MonthlyCardShowInfo::kStateFieldNumber;
const int MonthlyCardShowInfo::kInvalidFieldNumber;
#endif  // !_MSC_VER

MonthlyCardShowInfo::MonthlyCardShowInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MonthlyCardShowInfo)
}

void MonthlyCardShowInfo::InitAsDefaultInstance() {
}

MonthlyCardShowInfo::MonthlyCardShowInfo(const MonthlyCardShowInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MonthlyCardShowInfo)
}

void MonthlyCardShowInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  gold_ = 0;
  state_ = 0;
  invalid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthlyCardShowInfo::~MonthlyCardShowInfo() {
  // @@protoc_insertion_point(destructor:main.MonthlyCardShowInfo)
  SharedDtor();
}

void MonthlyCardShowInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonthlyCardShowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonthlyCardShowInfo& MonthlyCardShowInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonthlyCardModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonthlyCardModule_2eproto();
#endif
  return *default_instance_;
}

MonthlyCardShowInfo* MonthlyCardShowInfo::default_instance_ = NULL;

MonthlyCardShowInfo* MonthlyCardShowInfo::New() const {
  return new MonthlyCardShowInfo;
}

void MonthlyCardShowInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonthlyCardShowInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, invalid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MonthlyCardShowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MonthlyCardShowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_invalid;
        break;
      }

      // optional int32 invalid = 4;
      case 4: {
        if (tag == 32) {
         parse_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invalid_)));
          set_has_invalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MonthlyCardShowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MonthlyCardShowInfo)
  return false;
#undef DO_
}

void MonthlyCardShowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MonthlyCardShowInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 invalid = 4;
  if (has_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->invalid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MonthlyCardShowInfo)
}

int MonthlyCardShowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 invalid = 4;
    if (has_invalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invalid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthlyCardShowInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonthlyCardShowInfo*>(&from));
}

void MonthlyCardShowInfo::MergeFrom(const MonthlyCardShowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_invalid()) {
      set_invalid(from.invalid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MonthlyCardShowInfo::CopyFrom(const MonthlyCardShowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyCardShowInfo::IsInitialized() const {

  return true;
}

void MonthlyCardShowInfo::Swap(MonthlyCardShowInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gold_, other->gold_);
    std::swap(state_, other->state_);
    std::swap(invalid_, other->invalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonthlyCardShowInfo::GetTypeName() const {
  return "main.MonthlyCardShowInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MonthlyCardRewardRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

MonthlyCardRewardRequest::MonthlyCardRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MonthlyCardRewardRequest)
}

void MonthlyCardRewardRequest::InitAsDefaultInstance() {
}

MonthlyCardRewardRequest::MonthlyCardRewardRequest(const MonthlyCardRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MonthlyCardRewardRequest)
}

void MonthlyCardRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthlyCardRewardRequest::~MonthlyCardRewardRequest() {
  // @@protoc_insertion_point(destructor:main.MonthlyCardRewardRequest)
  SharedDtor();
}

void MonthlyCardRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonthlyCardRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonthlyCardRewardRequest& MonthlyCardRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonthlyCardModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonthlyCardModule_2eproto();
#endif
  return *default_instance_;
}

MonthlyCardRewardRequest* MonthlyCardRewardRequest::default_instance_ = NULL;

MonthlyCardRewardRequest* MonthlyCardRewardRequest::New() const {
  return new MonthlyCardRewardRequest;
}

void MonthlyCardRewardRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MonthlyCardRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MonthlyCardRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MonthlyCardRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MonthlyCardRewardRequest)
  return false;
#undef DO_
}

void MonthlyCardRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MonthlyCardRewardRequest)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MonthlyCardRewardRequest)
}

int MonthlyCardRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthlyCardRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonthlyCardRewardRequest*>(&from));
}

void MonthlyCardRewardRequest::MergeFrom(const MonthlyCardRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MonthlyCardRewardRequest::CopyFrom(const MonthlyCardRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyCardRewardRequest::IsInitialized() const {

  return true;
}

void MonthlyCardRewardRequest::Swap(MonthlyCardRewardRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonthlyCardRewardRequest::GetTypeName() const {
  return "main.MonthlyCardRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int MonthlyCardRewardResponse::kStateFieldNumber;
const int MonthlyCardRewardResponse::kTypeFieldNumber;
#endif  // !_MSC_VER

MonthlyCardRewardResponse::MonthlyCardRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.MonthlyCardRewardResponse)
}

void MonthlyCardRewardResponse::InitAsDefaultInstance() {
}

MonthlyCardRewardResponse::MonthlyCardRewardResponse(const MonthlyCardRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.MonthlyCardRewardResponse)
}

void MonthlyCardRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthlyCardRewardResponse::~MonthlyCardRewardResponse() {
  // @@protoc_insertion_point(destructor:main.MonthlyCardRewardResponse)
  SharedDtor();
}

void MonthlyCardRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonthlyCardRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonthlyCardRewardResponse& MonthlyCardRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonthlyCardModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonthlyCardModule_2eproto();
#endif
  return *default_instance_;
}

MonthlyCardRewardResponse* MonthlyCardRewardResponse::default_instance_ = NULL;

MonthlyCardRewardResponse* MonthlyCardRewardResponse::New() const {
  return new MonthlyCardRewardResponse;
}

void MonthlyCardRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonthlyCardRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MonthlyCardRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.MonthlyCardRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.MonthlyCardRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.MonthlyCardRewardResponse)
  return false;
#undef DO_
}

void MonthlyCardRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.MonthlyCardRewardResponse)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.MonthlyCardRewardResponse)
}

int MonthlyCardRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthlyCardRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonthlyCardRewardResponse*>(&from));
}

void MonthlyCardRewardResponse::MergeFrom(const MonthlyCardRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MonthlyCardRewardResponse::CopyFrom(const MonthlyCardRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthlyCardRewardResponse::IsInitialized() const {

  return true;
}

void MonthlyCardRewardResponse::Swap(MonthlyCardRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonthlyCardRewardResponse::GetTypeName() const {
  return "main.MonthlyCardRewardResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
