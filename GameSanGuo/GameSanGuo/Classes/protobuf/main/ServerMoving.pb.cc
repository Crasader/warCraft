// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMoving.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerMoving.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_ServerMoving_2eproto() {
  delete ServerMovingResponse::default_instance_;
  delete ServerMovingModel::default_instance_;
  delete ServerMovingModel2::default_instance_;
  delete AnnouncementRequest::default_instance_;
  delete AnnouncementResponse::default_instance_;
  delete AnnouncementModel::default_instance_;
  delete ServerNoticeResponse::default_instance_;
  delete AlanWake::default_instance_;
  delete ShowCommonMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ServerMoving_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ServerMoving_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ServerMovingResponse::default_instance_ = new ServerMovingResponse();
  ServerMovingModel::default_instance_ = new ServerMovingModel();
  ServerMovingModel2::default_instance_ = new ServerMovingModel2();
  AnnouncementRequest::default_instance_ = new AnnouncementRequest();
  AnnouncementResponse::default_instance_ = new AnnouncementResponse();
  AnnouncementModel::default_instance_ = new AnnouncementModel();
  ServerNoticeResponse::default_instance_ = new ServerNoticeResponse();
  AlanWake::default_instance_ = new AlanWake();
  ShowCommonMessage::default_instance_ = new ShowCommonMessage();
  ServerMovingResponse::default_instance_->InitAsDefaultInstance();
  ServerMovingModel::default_instance_->InitAsDefaultInstance();
  ServerMovingModel2::default_instance_->InitAsDefaultInstance();
  AnnouncementRequest::default_instance_->InitAsDefaultInstance();
  AnnouncementResponse::default_instance_->InitAsDefaultInstance();
  AnnouncementModel::default_instance_->InitAsDefaultInstance();
  ServerNoticeResponse::default_instance_->InitAsDefaultInstance();
  AlanWake::default_instance_->InitAsDefaultInstance();
  ShowCommonMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerMoving_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ServerMoving_2eproto_once_);
void protobuf_AddDesc_ServerMoving_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ServerMoving_2eproto_once_,
                 &protobuf_AddDesc_ServerMoving_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerMoving_2eproto {
  StaticDescriptorInitializer_ServerMoving_2eproto() {
    protobuf_AddDesc_ServerMoving_2eproto();
  }
} static_descriptor_initializer_ServerMoving_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ServerMovingResponse::kModelFieldNumber;
#endif  // !_MSC_VER

ServerMovingResponse::ServerMovingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ServerMovingResponse)
}

void ServerMovingResponse::InitAsDefaultInstance() {
}

ServerMovingResponse::ServerMovingResponse(const ServerMovingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ServerMovingResponse)
}

void ServerMovingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMovingResponse::~ServerMovingResponse() {
  // @@protoc_insertion_point(destructor:main.ServerMovingResponse)
  SharedDtor();
}

void ServerMovingResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMovingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMovingResponse& ServerMovingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

ServerMovingResponse* ServerMovingResponse::default_instance_ = NULL;

ServerMovingResponse* ServerMovingResponse::New() const {
  return new ServerMovingResponse;
}

void ServerMovingResponse::Clear() {
  model_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMovingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ServerMovingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.ServerMovingModel model = 1;
      case 1: {
        if (tag == 10) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_model;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ServerMovingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ServerMovingResponse)
  return false;
#undef DO_
}

void ServerMovingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ServerMovingResponse)
  // repeated .main.ServerMovingModel model = 1;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->model(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ServerMovingResponse)
}

int ServerMovingResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.ServerMovingModel model = 1;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMovingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMovingResponse*>(&from));
}

void ServerMovingResponse::MergeFrom(const ServerMovingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMovingResponse::CopyFrom(const ServerMovingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMovingResponse::IsInitialized() const {

  return true;
}

void ServerMovingResponse::Swap(ServerMovingResponse* other) {
  if (other != this) {
    model_.Swap(&other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMovingResponse::GetTypeName() const {
  return "main.ServerMovingResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMovingModel::kIdFieldNumber;
const int ServerMovingModel::kLevelFieldNumber;
const int ServerMovingModel::kModelFieldNumber;
#endif  // !_MSC_VER

ServerMovingModel::ServerMovingModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ServerMovingModel)
}

void ServerMovingModel::InitAsDefaultInstance() {
}

ServerMovingModel::ServerMovingModel(const ServerMovingModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ServerMovingModel)
}

void ServerMovingModel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMovingModel::~ServerMovingModel() {
  // @@protoc_insertion_point(destructor:main.ServerMovingModel)
  SharedDtor();
}

void ServerMovingModel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMovingModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMovingModel& ServerMovingModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

ServerMovingModel* ServerMovingModel::default_instance_ = NULL;

ServerMovingModel* ServerMovingModel::New() const {
  return new ServerMovingModel;
}

void ServerMovingModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerMovingModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  model_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMovingModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ServerMovingModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // repeated .main.ServerMovingModel2 model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ServerMovingModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ServerMovingModel)
  return false;
#undef DO_
}

void ServerMovingModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ServerMovingModel)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated .main.ServerMovingModel2 model = 3;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->model(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ServerMovingModel)
}

int ServerMovingModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .main.ServerMovingModel2 model = 3;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMovingModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMovingModel*>(&from));
}

void ServerMovingModel::MergeFrom(const ServerMovingModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMovingModel::CopyFrom(const ServerMovingModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMovingModel::IsInitialized() const {

  return true;
}

void ServerMovingModel::Swap(ServerMovingModel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    model_.Swap(&other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMovingModel::GetTypeName() const {
  return "main.ServerMovingModel";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMovingModel2::kMsgFieldNumber;
#endif  // !_MSC_VER

ServerMovingModel2::ServerMovingModel2()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ServerMovingModel2)
}

void ServerMovingModel2::InitAsDefaultInstance() {
}

ServerMovingModel2::ServerMovingModel2(const ServerMovingModel2& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ServerMovingModel2)
}

void ServerMovingModel2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMovingModel2::~ServerMovingModel2() {
  // @@protoc_insertion_point(destructor:main.ServerMovingModel2)
  SharedDtor();
}

void ServerMovingModel2::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMovingModel2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMovingModel2& ServerMovingModel2::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

ServerMovingModel2* ServerMovingModel2::default_instance_ = NULL;

ServerMovingModel2* ServerMovingModel2::New() const {
  return new ServerMovingModel2;
}

void ServerMovingModel2::Clear() {
  if (has_msg()) {
    if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      msg_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMovingModel2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ServerMovingModel2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ServerMovingModel2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ServerMovingModel2)
  return false;
#undef DO_
}

void ServerMovingModel2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ServerMovingModel2)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ServerMovingModel2)
}

int ServerMovingModel2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMovingModel2::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMovingModel2*>(&from));
}

void ServerMovingModel2::MergeFrom(const ServerMovingModel2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMovingModel2::CopyFrom(const ServerMovingModel2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMovingModel2::IsInitialized() const {

  return true;
}

void ServerMovingModel2::Swap(ServerMovingModel2* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMovingModel2::GetTypeName() const {
  return "main.ServerMovingModel2";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AnnouncementRequest::AnnouncementRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AnnouncementRequest)
}

void AnnouncementRequest::InitAsDefaultInstance() {
}

AnnouncementRequest::AnnouncementRequest(const AnnouncementRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AnnouncementRequest)
}

void AnnouncementRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnouncementRequest::~AnnouncementRequest() {
  // @@protoc_insertion_point(destructor:main.AnnouncementRequest)
  SharedDtor();
}

void AnnouncementRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AnnouncementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnnouncementRequest& AnnouncementRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

AnnouncementRequest* AnnouncementRequest::default_instance_ = NULL;

AnnouncementRequest* AnnouncementRequest::New() const {
  return new AnnouncementRequest;
}

void AnnouncementRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AnnouncementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AnnouncementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.AnnouncementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AnnouncementRequest)
  return false;
#undef DO_
}

void AnnouncementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AnnouncementRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AnnouncementRequest)
}

int AnnouncementRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnouncementRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnouncementRequest*>(&from));
}

void AnnouncementRequest::MergeFrom(const AnnouncementRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AnnouncementRequest::CopyFrom(const AnnouncementRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnouncementRequest::IsInitialized() const {

  return true;
}

void AnnouncementRequest::Swap(AnnouncementRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnnouncementRequest::GetTypeName() const {
  return "main.AnnouncementRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int AnnouncementResponse::kAnnouncementModelFieldNumber;
#endif  // !_MSC_VER

AnnouncementResponse::AnnouncementResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AnnouncementResponse)
}

void AnnouncementResponse::InitAsDefaultInstance() {
}

AnnouncementResponse::AnnouncementResponse(const AnnouncementResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AnnouncementResponse)
}

void AnnouncementResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnouncementResponse::~AnnouncementResponse() {
  // @@protoc_insertion_point(destructor:main.AnnouncementResponse)
  SharedDtor();
}

void AnnouncementResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AnnouncementResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnnouncementResponse& AnnouncementResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

AnnouncementResponse* AnnouncementResponse::default_instance_ = NULL;

AnnouncementResponse* AnnouncementResponse::New() const {
  return new AnnouncementResponse;
}

void AnnouncementResponse::Clear() {
  announcementmodel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AnnouncementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AnnouncementResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .main.AnnouncementModel announcementModel = 1;
      case 1: {
        if (tag == 10) {
         parse_announcementModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_announcementmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_announcementModel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AnnouncementResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AnnouncementResponse)
  return false;
#undef DO_
}

void AnnouncementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AnnouncementResponse)
  // repeated .main.AnnouncementModel announcementModel = 1;
  for (int i = 0; i < this->announcementmodel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->announcementmodel(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AnnouncementResponse)
}

int AnnouncementResponse::ByteSize() const {
  int total_size = 0;

  // repeated .main.AnnouncementModel announcementModel = 1;
  total_size += 1 * this->announcementmodel_size();
  for (int i = 0; i < this->announcementmodel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->announcementmodel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnouncementResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnouncementResponse*>(&from));
}

void AnnouncementResponse::MergeFrom(const AnnouncementResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  announcementmodel_.MergeFrom(from.announcementmodel_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AnnouncementResponse::CopyFrom(const AnnouncementResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnouncementResponse::IsInitialized() const {

  return true;
}

void AnnouncementResponse::Swap(AnnouncementResponse* other) {
  if (other != this) {
    announcementmodel_.Swap(&other->announcementmodel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnnouncementResponse::GetTypeName() const {
  return "main.AnnouncementResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int AnnouncementModel::kTitleFieldNumber;
const int AnnouncementModel::kContentFieldNumber;
const int AnnouncementModel::kUrlFieldNumber;
const int AnnouncementModel::kViewIdFieldNumber;
#endif  // !_MSC_VER

AnnouncementModel::AnnouncementModel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AnnouncementModel)
}

void AnnouncementModel::InitAsDefaultInstance() {
}

AnnouncementModel::AnnouncementModel(const AnnouncementModel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AnnouncementModel)
}

void AnnouncementModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viewid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnouncementModel::~AnnouncementModel() {
  // @@protoc_insertion_point(destructor:main.AnnouncementModel)
  SharedDtor();
}

void AnnouncementModel::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AnnouncementModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnnouncementModel& AnnouncementModel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

AnnouncementModel* AnnouncementModel::default_instance_ = NULL;

AnnouncementModel* AnnouncementModel::New() const {
  return new AnnouncementModel;
}

void AnnouncementModel::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    viewid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AnnouncementModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AnnouncementModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_viewId;
        break;
      }

      // optional int32 viewId = 4;
      case 4: {
        if (tag == 32) {
         parse_viewId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewid_)));
          set_has_viewid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AnnouncementModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AnnouncementModel)
  return false;
#undef DO_
}

void AnnouncementModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AnnouncementModel)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional int32 viewId = 4;
  if (has_viewid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viewid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AnnouncementModel)
}

int AnnouncementModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 viewId = 4;
    if (has_viewid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnouncementModel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnouncementModel*>(&from));
}

void AnnouncementModel::MergeFrom(const AnnouncementModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_viewid()) {
      set_viewid(from.viewid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AnnouncementModel::CopyFrom(const AnnouncementModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnouncementModel::IsInitialized() const {

  return true;
}

void AnnouncementModel::Swap(AnnouncementModel* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(url_, other->url_);
    std::swap(viewid_, other->viewid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnnouncementModel::GetTypeName() const {
  return "main.AnnouncementModel";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerNoticeResponse::kTypeFieldNumber;
const int ServerNoticeResponse::kContentFieldNumber;
#endif  // !_MSC_VER

ServerNoticeResponse::ServerNoticeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ServerNoticeResponse)
}

void ServerNoticeResponse::InitAsDefaultInstance() {
}

ServerNoticeResponse::ServerNoticeResponse(const ServerNoticeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ServerNoticeResponse)
}

void ServerNoticeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerNoticeResponse::~ServerNoticeResponse() {
  // @@protoc_insertion_point(destructor:main.ServerNoticeResponse)
  SharedDtor();
}

void ServerNoticeResponse::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerNoticeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerNoticeResponse& ServerNoticeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

ServerNoticeResponse* ServerNoticeResponse::default_instance_ = NULL;

ServerNoticeResponse* ServerNoticeResponse::New() const {
  return new ServerNoticeResponse;
}

void ServerNoticeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerNoticeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ServerNoticeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ServerNoticeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ServerNoticeResponse)
  return false;
#undef DO_
}

void ServerNoticeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ServerNoticeResponse)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ServerNoticeResponse)
}

int ServerNoticeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerNoticeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerNoticeResponse*>(&from));
}

void ServerNoticeResponse::MergeFrom(const ServerNoticeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerNoticeResponse::CopyFrom(const ServerNoticeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerNoticeResponse::IsInitialized() const {

  return true;
}

void ServerNoticeResponse::Swap(ServerNoticeResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerNoticeResponse::GetTypeName() const {
  return "main.ServerNoticeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int AlanWake::kArg1FieldNumber;
const int AlanWake::kArg2FieldNumber;
#endif  // !_MSC_VER

AlanWake::AlanWake()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.AlanWake)
}

void AlanWake::InitAsDefaultInstance() {
}

AlanWake::AlanWake(const AlanWake& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.AlanWake)
}

void AlanWake::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  arg1_ = 0;
  arg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlanWake::~AlanWake() {
  // @@protoc_insertion_point(destructor:main.AlanWake)
  SharedDtor();
}

void AlanWake::SharedDtor() {
  if (arg2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arg2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AlanWake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AlanWake& AlanWake::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

AlanWake* AlanWake::default_instance_ = NULL;

AlanWake* AlanWake::New() const {
  return new AlanWake;
}

void AlanWake::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    arg1_ = 0;
    if (has_arg2()) {
      if (arg2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arg2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AlanWake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.AlanWake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 arg1 = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arg2;
        break;
      }

      // optional string arg2 = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_arg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.AlanWake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.AlanWake)
  return false;
#undef DO_
}

void AlanWake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.AlanWake)
  // optional int32 arg1 = 1 [default = 0];
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arg1(), output);
  }

  // optional string arg2 = 2 [default = ""];
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->arg2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.AlanWake)
}

int AlanWake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 arg1 = 1 [default = 0];
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }

    // optional string arg2 = 2 [default = ""];
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arg2());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlanWake::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlanWake*>(&from));
}

void AlanWake::MergeFrom(const AlanWake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AlanWake::CopyFrom(const AlanWake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlanWake::IsInitialized() const {

  return true;
}

void AlanWake::Swap(AlanWake* other) {
  if (other != this) {
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AlanWake::GetTypeName() const {
  return "main.AlanWake";
}


// ===================================================================

#ifndef _MSC_VER
const int ShowCommonMessage::kMsgFieldNumber;
#endif  // !_MSC_VER

ShowCommonMessage::ShowCommonMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ShowCommonMessage)
}

void ShowCommonMessage::InitAsDefaultInstance() {
}

ShowCommonMessage::ShowCommonMessage(const ShowCommonMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ShowCommonMessage)
}

void ShowCommonMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowCommonMessage::~ShowCommonMessage() {
  // @@protoc_insertion_point(destructor:main.ShowCommonMessage)
  SharedDtor();
}

void ShowCommonMessage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShowCommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShowCommonMessage& ShowCommonMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerMoving_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMoving_2eproto();
#endif
  return *default_instance_;
}

ShowCommonMessage* ShowCommonMessage::default_instance_ = NULL;

ShowCommonMessage* ShowCommonMessage::New() const {
  return new ShowCommonMessage;
}

void ShowCommonMessage::Clear() {
  if (has_msg()) {
    if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      msg_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ShowCommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ShowCommonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ShowCommonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ShowCommonMessage)
  return false;
#undef DO_
}

void ShowCommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ShowCommonMessage)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ShowCommonMessage)
}

int ShowCommonMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowCommonMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowCommonMessage*>(&from));
}

void ShowCommonMessage::MergeFrom(const ShowCommonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ShowCommonMessage::CopyFrom(const ShowCommonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCommonMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShowCommonMessage::Swap(ShowCommonMessage* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShowCommonMessage::GetTypeName() const {
  return "main.ShowCommonMessage";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
