// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleErrorModule.proto

#ifndef PROTOBUF_RoleErrorModule_2eproto__INCLUDED
#define PROTOBUF_RoleErrorModule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace main {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RoleErrorModule_2eproto();
void protobuf_AssignDesc_RoleErrorModule_2eproto();
void protobuf_ShutdownFile_RoleErrorModule_2eproto();

class RoleErrorInfoRequest;
class RoleErrorInfoResponse;

// ===================================================================

class RoleErrorInfoRequest : public ::google::protobuf::MessageLite {
 public:
  RoleErrorInfoRequest();
  virtual ~RoleErrorInfoRequest();

  RoleErrorInfoRequest(const RoleErrorInfoRequest& from);

  inline RoleErrorInfoRequest& operator=(const RoleErrorInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RoleErrorInfoRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RoleErrorInfoRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RoleErrorInfoRequest* other);

  // implements Message ----------------------------------------------

  RoleErrorInfoRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RoleErrorInfoRequest& from);
  void MergeFrom(const RoleErrorInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:main.RoleErrorInfoRequest)
 private:
  inline void set_has_title();
  inline void clear_has_title();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RoleErrorModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RoleErrorModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_RoleErrorModule_2eproto();
  friend void protobuf_ShutdownFile_RoleErrorModule_2eproto();

  void InitAsDefaultInstance();
  static RoleErrorInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoleErrorInfoResponse : public ::google::protobuf::MessageLite {
 public:
  RoleErrorInfoResponse();
  virtual ~RoleErrorInfoResponse();

  RoleErrorInfoResponse(const RoleErrorInfoResponse& from);

  inline RoleErrorInfoResponse& operator=(const RoleErrorInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RoleErrorInfoResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RoleErrorInfoResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RoleErrorInfoResponse* other);

  // implements Message ----------------------------------------------

  RoleErrorInfoResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RoleErrorInfoResponse& from);
  void MergeFrom(const RoleErrorInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:main.RoleErrorInfoResponse)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RoleErrorModule_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RoleErrorModule_2eproto();
  #endif
  friend void protobuf_AssignDesc_RoleErrorModule_2eproto();
  friend void protobuf_ShutdownFile_RoleErrorModule_2eproto();

  void InitAsDefaultInstance();
  static RoleErrorInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RoleErrorInfoRequest

// optional string title = 1;
inline bool RoleErrorInfoRequest::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleErrorInfoRequest::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleErrorInfoRequest::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleErrorInfoRequest::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& RoleErrorInfoRequest::title() const {
  // @@protoc_insertion_point(field_get:main.RoleErrorInfoRequest.title)
  return *title_;
}
inline void RoleErrorInfoRequest::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:main.RoleErrorInfoRequest.title)
}
inline void RoleErrorInfoRequest::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:main.RoleErrorInfoRequest.title)
}
inline void RoleErrorInfoRequest::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:main.RoleErrorInfoRequest.title)
}
inline ::std::string* RoleErrorInfoRequest::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:main.RoleErrorInfoRequest.title)
  return title_;
}
inline ::std::string* RoleErrorInfoRequest::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoleErrorInfoRequest::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:main.RoleErrorInfoRequest.title)
}

// -------------------------------------------------------------------

// RoleErrorInfoResponse

// optional int32 state = 1;
inline bool RoleErrorInfoResponse::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleErrorInfoResponse::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleErrorInfoResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleErrorInfoResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 RoleErrorInfoResponse::state() const {
  // @@protoc_insertion_point(field_get:main.RoleErrorInfoResponse.state)
  return state_;
}
inline void RoleErrorInfoResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:main.RoleErrorInfoResponse.state)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoleErrorModule_2eproto__INCLUDED
