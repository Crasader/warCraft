// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaModule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArenaModule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace main {

void protobuf_ShutdownFile_ArenaModule_2eproto() {
  delete ArenaMainInfoRequest::default_instance_;
  delete ArenaMainInfoResponse::default_instance_;
  delete ArenaFightReportRequest::default_instance_;
  delete ArenaFightReportResponse::default_instance_;
  delete ArenaRanksRequest::default_instance_;
  delete ArenaRanksResponse::default_instance_;
  delete ArenaStartRequest::default_instance_;
  delete ArenaStartResponse::default_instance_;
  delete ArenaEndFightRequest::default_instance_;
  delete ArenaEndFightResponse::default_instance_;
  delete ArenaGetRewardRequest::default_instance_;
  delete ArenaGetRewardResponse::default_instance_;
  delete ArenaBuyFightCountRequest::default_instance_;
  delete ArenaBuyFightCountResponse::default_instance_;
  delete ArenaFightReport::default_instance_;
  delete ArenaBaseInfo::default_instance_;
  delete ArenaRoleInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ArenaModule_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ArenaModule_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ArenaMainInfoRequest::default_instance_ = new ArenaMainInfoRequest();
  ArenaMainInfoResponse::default_instance_ = new ArenaMainInfoResponse();
  ArenaFightReportRequest::default_instance_ = new ArenaFightReportRequest();
  ArenaFightReportResponse::default_instance_ = new ArenaFightReportResponse();
  ArenaRanksRequest::default_instance_ = new ArenaRanksRequest();
  ArenaRanksResponse::default_instance_ = new ArenaRanksResponse();
  ArenaStartRequest::default_instance_ = new ArenaStartRequest();
  ArenaStartResponse::default_instance_ = new ArenaStartResponse();
  ArenaEndFightRequest::default_instance_ = new ArenaEndFightRequest();
  ArenaEndFightResponse::default_instance_ = new ArenaEndFightResponse();
  ArenaGetRewardRequest::default_instance_ = new ArenaGetRewardRequest();
  ArenaGetRewardResponse::default_instance_ = new ArenaGetRewardResponse();
  ArenaBuyFightCountRequest::default_instance_ = new ArenaBuyFightCountRequest();
  ArenaBuyFightCountResponse::default_instance_ = new ArenaBuyFightCountResponse();
  ArenaFightReport::default_instance_ = new ArenaFightReport();
  ArenaBaseInfo::default_instance_ = new ArenaBaseInfo();
  ArenaRoleInfo::default_instance_ = new ArenaRoleInfo();
  ArenaMainInfoRequest::default_instance_->InitAsDefaultInstance();
  ArenaMainInfoResponse::default_instance_->InitAsDefaultInstance();
  ArenaFightReportRequest::default_instance_->InitAsDefaultInstance();
  ArenaFightReportResponse::default_instance_->InitAsDefaultInstance();
  ArenaRanksRequest::default_instance_->InitAsDefaultInstance();
  ArenaRanksResponse::default_instance_->InitAsDefaultInstance();
  ArenaStartRequest::default_instance_->InitAsDefaultInstance();
  ArenaStartResponse::default_instance_->InitAsDefaultInstance();
  ArenaEndFightRequest::default_instance_->InitAsDefaultInstance();
  ArenaEndFightResponse::default_instance_->InitAsDefaultInstance();
  ArenaGetRewardRequest::default_instance_->InitAsDefaultInstance();
  ArenaGetRewardResponse::default_instance_->InitAsDefaultInstance();
  ArenaBuyFightCountRequest::default_instance_->InitAsDefaultInstance();
  ArenaBuyFightCountResponse::default_instance_->InitAsDefaultInstance();
  ArenaFightReport::default_instance_->InitAsDefaultInstance();
  ArenaBaseInfo::default_instance_->InitAsDefaultInstance();
  ArenaRoleInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArenaModule_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ArenaModule_2eproto_once_);
void protobuf_AddDesc_ArenaModule_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ArenaModule_2eproto_once_,
                 &protobuf_AddDesc_ArenaModule_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArenaModule_2eproto {
  StaticDescriptorInitializer_ArenaModule_2eproto() {
    protobuf_AddDesc_ArenaModule_2eproto();
  }
} static_descriptor_initializer_ArenaModule_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaMainInfoRequest::ArenaMainInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaMainInfoRequest)
}

void ArenaMainInfoRequest::InitAsDefaultInstance() {
}

ArenaMainInfoRequest::ArenaMainInfoRequest(const ArenaMainInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaMainInfoRequest)
}

void ArenaMainInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaMainInfoRequest::~ArenaMainInfoRequest() {
  // @@protoc_insertion_point(destructor:main.ArenaMainInfoRequest)
  SharedDtor();
}

void ArenaMainInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaMainInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaMainInfoRequest& ArenaMainInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaMainInfoRequest* ArenaMainInfoRequest::default_instance_ = NULL;

ArenaMainInfoRequest* ArenaMainInfoRequest::New() const {
  return new ArenaMainInfoRequest;
}

void ArenaMainInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaMainInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaMainInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaMainInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaMainInfoRequest)
  return false;
#undef DO_
}

void ArenaMainInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaMainInfoRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaMainInfoRequest)
}

int ArenaMainInfoRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaMainInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaMainInfoRequest*>(&from));
}

void ArenaMainInfoRequest::MergeFrom(const ArenaMainInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaMainInfoRequest::CopyFrom(const ArenaMainInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaMainInfoRequest::IsInitialized() const {

  return true;
}

void ArenaMainInfoRequest::Swap(ArenaMainInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaMainInfoRequest::GetTypeName() const {
  return "main.ArenaMainInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaMainInfoResponse::kBaseInfoFieldNumber;
const int ArenaMainInfoResponse::kSelfInfoFieldNumber;
const int ArenaMainInfoResponse::kMatchListFieldNumber;
#endif  // !_MSC_VER

ArenaMainInfoResponse::ArenaMainInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaMainInfoResponse)
}

void ArenaMainInfoResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baseinfo_ = const_cast< ::main::ArenaBaseInfo*>(
      ::main::ArenaBaseInfo::internal_default_instance());
#else
  baseinfo_ = const_cast< ::main::ArenaBaseInfo*>(&::main::ArenaBaseInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  selfinfo_ = const_cast< ::main::ArenaRoleInfo*>(
      ::main::ArenaRoleInfo::internal_default_instance());
#else
  selfinfo_ = const_cast< ::main::ArenaRoleInfo*>(&::main::ArenaRoleInfo::default_instance());
#endif
}

ArenaMainInfoResponse::ArenaMainInfoResponse(const ArenaMainInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaMainInfoResponse)
}

void ArenaMainInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaMainInfoResponse::~ArenaMainInfoResponse() {
  // @@protoc_insertion_point(destructor:main.ArenaMainInfoResponse)
  SharedDtor();
}

void ArenaMainInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baseinfo_;
    delete selfinfo_;
  }
}

void ArenaMainInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaMainInfoResponse& ArenaMainInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaMainInfoResponse* ArenaMainInfoResponse::default_instance_ = NULL;

ArenaMainInfoResponse* ArenaMainInfoResponse::New() const {
  return new ArenaMainInfoResponse;
}

void ArenaMainInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::main::ArenaBaseInfo::Clear();
    }
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::main::ArenaRoleInfo::Clear();
    }
  }
  matchlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaMainInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaMainInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.ArenaBaseInfo baseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_selfInfo;
        break;
      }

      // required .main.ArenaRoleInfo selfInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_selfInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_matchList;
        break;
      }

      // repeated .main.ArenaRoleInfo matchList = 3;
      case 3: {
        if (tag == 26) {
         parse_matchList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_matchList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaMainInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaMainInfoResponse)
  return false;
#undef DO_
}

void ArenaMainInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaMainInfoResponse)
  // required .main.ArenaBaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baseinfo(), output);
  }

  // required .main.ArenaRoleInfo selfInfo = 2;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->selfinfo(), output);
  }

  // repeated .main.ArenaRoleInfo matchList = 3;
  for (int i = 0; i < this->matchlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->matchlist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaMainInfoResponse)
}

int ArenaMainInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.ArenaBaseInfo baseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // required .main.ArenaRoleInfo selfInfo = 2;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

  }
  // repeated .main.ArenaRoleInfo matchList = 3;
  total_size += 1 * this->matchlist_size();
  for (int i = 0; i < this->matchlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaMainInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaMainInfoResponse*>(&from));
}

void ArenaMainInfoResponse::MergeFrom(const ArenaMainInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchlist_.MergeFrom(from.matchlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::main::ArenaBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::main::ArenaRoleInfo::MergeFrom(from.selfinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaMainInfoResponse::CopyFrom(const ArenaMainInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaMainInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_selfinfo()) {
    if (!this->selfinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->matchlist())) return false;
  return true;
}

void ArenaMainInfoResponse::Swap(ArenaMainInfoResponse* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(selfinfo_, other->selfinfo_);
    matchlist_.Swap(&other->matchlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaMainInfoResponse::GetTypeName() const {
  return "main.ArenaMainInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaFightReportRequest::ArenaFightReportRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaFightReportRequest)
}

void ArenaFightReportRequest::InitAsDefaultInstance() {
}

ArenaFightReportRequest::ArenaFightReportRequest(const ArenaFightReportRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaFightReportRequest)
}

void ArenaFightReportRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaFightReportRequest::~ArenaFightReportRequest() {
  // @@protoc_insertion_point(destructor:main.ArenaFightReportRequest)
  SharedDtor();
}

void ArenaFightReportRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaFightReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaFightReportRequest& ArenaFightReportRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaFightReportRequest* ArenaFightReportRequest::default_instance_ = NULL;

ArenaFightReportRequest* ArenaFightReportRequest::New() const {
  return new ArenaFightReportRequest;
}

void ArenaFightReportRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaFightReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaFightReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaFightReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaFightReportRequest)
  return false;
#undef DO_
}

void ArenaFightReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaFightReportRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaFightReportRequest)
}

int ArenaFightReportRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaFightReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaFightReportRequest*>(&from));
}

void ArenaFightReportRequest::MergeFrom(const ArenaFightReportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaFightReportRequest::CopyFrom(const ArenaFightReportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaFightReportRequest::IsInitialized() const {

  return true;
}

void ArenaFightReportRequest::Swap(ArenaFightReportRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaFightReportRequest::GetTypeName() const {
  return "main.ArenaFightReportRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaFightReportResponse::kBaseInfoFieldNumber;
const int ArenaFightReportResponse::kReportListFieldNumber;
#endif  // !_MSC_VER

ArenaFightReportResponse::ArenaFightReportResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaFightReportResponse)
}

void ArenaFightReportResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baseinfo_ = const_cast< ::main::ArenaBaseInfo*>(
      ::main::ArenaBaseInfo::internal_default_instance());
#else
  baseinfo_ = const_cast< ::main::ArenaBaseInfo*>(&::main::ArenaBaseInfo::default_instance());
#endif
}

ArenaFightReportResponse::ArenaFightReportResponse(const ArenaFightReportResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaFightReportResponse)
}

void ArenaFightReportResponse::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaFightReportResponse::~ArenaFightReportResponse() {
  // @@protoc_insertion_point(destructor:main.ArenaFightReportResponse)
  SharedDtor();
}

void ArenaFightReportResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baseinfo_;
  }
}

void ArenaFightReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaFightReportResponse& ArenaFightReportResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaFightReportResponse* ArenaFightReportResponse::default_instance_ = NULL;

ArenaFightReportResponse* ArenaFightReportResponse::New() const {
  return new ArenaFightReportResponse;
}

void ArenaFightReportResponse::Clear() {
  if (has_baseinfo()) {
    if (baseinfo_ != NULL) baseinfo_->::main::ArenaBaseInfo::Clear();
  }
  reportlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaFightReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaFightReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.ArenaBaseInfo baseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reportList;
        break;
      }

      // repeated .main.ArenaFightReport reportList = 2;
      case 2: {
        if (tag == 18) {
         parse_reportList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reportList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaFightReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaFightReportResponse)
  return false;
#undef DO_
}

void ArenaFightReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaFightReportResponse)
  // required .main.ArenaBaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baseinfo(), output);
  }

  // repeated .main.ArenaFightReport reportList = 2;
  for (int i = 0; i < this->reportlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->reportlist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaFightReportResponse)
}

int ArenaFightReportResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.ArenaBaseInfo baseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  // repeated .main.ArenaFightReport reportList = 2;
  total_size += 1 * this->reportlist_size();
  for (int i = 0; i < this->reportlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportlist(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaFightReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaFightReportResponse*>(&from));
}

void ArenaFightReportResponse::MergeFrom(const ArenaFightReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportlist_.MergeFrom(from.reportlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::main::ArenaBaseInfo::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaFightReportResponse::CopyFrom(const ArenaFightReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaFightReportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->reportlist())) return false;
  return true;
}

void ArenaFightReportResponse::Swap(ArenaFightReportResponse* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    reportlist_.Swap(&other->reportlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaFightReportResponse::GetTypeName() const {
  return "main.ArenaFightReportResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaRanksRequest::ArenaRanksRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaRanksRequest)
}

void ArenaRanksRequest::InitAsDefaultInstance() {
}

ArenaRanksRequest::ArenaRanksRequest(const ArenaRanksRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaRanksRequest)
}

void ArenaRanksRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRanksRequest::~ArenaRanksRequest() {
  // @@protoc_insertion_point(destructor:main.ArenaRanksRequest)
  SharedDtor();
}

void ArenaRanksRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaRanksRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaRanksRequest& ArenaRanksRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaRanksRequest* ArenaRanksRequest::default_instance_ = NULL;

ArenaRanksRequest* ArenaRanksRequest::New() const {
  return new ArenaRanksRequest;
}

void ArenaRanksRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaRanksRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaRanksRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaRanksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaRanksRequest)
  return false;
#undef DO_
}

void ArenaRanksRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaRanksRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaRanksRequest)
}

int ArenaRanksRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRanksRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaRanksRequest*>(&from));
}

void ArenaRanksRequest::MergeFrom(const ArenaRanksRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaRanksRequest::CopyFrom(const ArenaRanksRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRanksRequest::IsInitialized() const {

  return true;
}

void ArenaRanksRequest::Swap(ArenaRanksRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaRanksRequest::GetTypeName() const {
  return "main.ArenaRanksRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRanksResponse::kBaseInfoFieldNumber;
const int ArenaRanksResponse::kSelfInfoFieldNumber;
const int ArenaRanksResponse::kRanksFieldNumber;
#endif  // !_MSC_VER

ArenaRanksResponse::ArenaRanksResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaRanksResponse)
}

void ArenaRanksResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baseinfo_ = const_cast< ::main::ArenaBaseInfo*>(
      ::main::ArenaBaseInfo::internal_default_instance());
#else
  baseinfo_ = const_cast< ::main::ArenaBaseInfo*>(&::main::ArenaBaseInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  selfinfo_ = const_cast< ::main::ArenaRoleInfo*>(
      ::main::ArenaRoleInfo::internal_default_instance());
#else
  selfinfo_ = const_cast< ::main::ArenaRoleInfo*>(&::main::ArenaRoleInfo::default_instance());
#endif
}

ArenaRanksResponse::ArenaRanksResponse(const ArenaRanksResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaRanksResponse)
}

void ArenaRanksResponse::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRanksResponse::~ArenaRanksResponse() {
  // @@protoc_insertion_point(destructor:main.ArenaRanksResponse)
  SharedDtor();
}

void ArenaRanksResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baseinfo_;
    delete selfinfo_;
  }
}

void ArenaRanksResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaRanksResponse& ArenaRanksResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaRanksResponse* ArenaRanksResponse::default_instance_ = NULL;

ArenaRanksResponse* ArenaRanksResponse::New() const {
  return new ArenaRanksResponse;
}

void ArenaRanksResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::main::ArenaBaseInfo::Clear();
    }
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::main::ArenaRoleInfo::Clear();
    }
  }
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaRanksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaRanksResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .main.ArenaBaseInfo baseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_selfInfo;
        break;
      }

      // required .main.ArenaRoleInfo selfInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_selfInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        break;
      }

      // repeated .main.ArenaRoleInfo ranks = 3;
      case 3: {
        if (tag == 26) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaRanksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaRanksResponse)
  return false;
#undef DO_
}

void ArenaRanksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaRanksResponse)
  // required .main.ArenaBaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baseinfo(), output);
  }

  // required .main.ArenaRoleInfo selfInfo = 2;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->selfinfo(), output);
  }

  // repeated .main.ArenaRoleInfo ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ranks(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaRanksResponse)
}

int ArenaRanksResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .main.ArenaBaseInfo baseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // required .main.ArenaRoleInfo selfInfo = 2;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

  }
  // repeated .main.ArenaRoleInfo ranks = 3;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRanksResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaRanksResponse*>(&from));
}

void ArenaRanksResponse::MergeFrom(const ArenaRanksResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::main::ArenaBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::main::ArenaRoleInfo::MergeFrom(from.selfinfo());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaRanksResponse::CopyFrom(const ArenaRanksResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRanksResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_selfinfo()) {
    if (!this->selfinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  return true;
}

void ArenaRanksResponse::Swap(ArenaRanksResponse* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(selfinfo_, other->selfinfo_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaRanksResponse::GetTypeName() const {
  return "main.ArenaRanksResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaStartRequest::kRankFieldNumber;
#endif  // !_MSC_VER

ArenaStartRequest::ArenaStartRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaStartRequest)
}

void ArenaStartRequest::InitAsDefaultInstance() {
}

ArenaStartRequest::ArenaStartRequest(const ArenaStartRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaStartRequest)
}

void ArenaStartRequest::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaStartRequest::~ArenaStartRequest() {
  // @@protoc_insertion_point(destructor:main.ArenaStartRequest)
  SharedDtor();
}

void ArenaStartRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaStartRequest& ArenaStartRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaStartRequest* ArenaStartRequest::default_instance_ = NULL;

ArenaStartRequest* ArenaStartRequest::New() const {
  return new ArenaStartRequest;
}

void ArenaStartRequest::Clear() {
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaStartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaStartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaStartRequest)
  return false;
#undef DO_
}

void ArenaStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaStartRequest)
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaStartRequest)
}

int ArenaStartRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaStartRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaStartRequest*>(&from));
}

void ArenaStartRequest::MergeFrom(const ArenaStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaStartRequest::CopyFrom(const ArenaStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaStartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaStartRequest::Swap(ArenaStartRequest* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaStartRequest::GetTypeName() const {
  return "main.ArenaStartRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaStartResponse::kStateFieldNumber;
const int ArenaStartResponse::kMsgFieldNumber;
const int ArenaStartResponse::kGoldFieldNumber;
const int ArenaStartResponse::kSurplusBuyCountFieldNumber;
#endif  // !_MSC_VER

ArenaStartResponse::ArenaStartResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaStartResponse)
}

void ArenaStartResponse::InitAsDefaultInstance() {
}

ArenaStartResponse::ArenaStartResponse(const ArenaStartResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaStartResponse)
}

void ArenaStartResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gold_ = 0;
  surplusbuycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaStartResponse::~ArenaStartResponse() {
  // @@protoc_insertion_point(destructor:main.ArenaStartResponse)
  SharedDtor();
}

void ArenaStartResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaStartResponse& ArenaStartResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaStartResponse* ArenaStartResponse::default_instance_ = NULL;

ArenaStartResponse* ArenaStartResponse::New() const {
  return new ArenaStartResponse;
}

void ArenaStartResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaStartResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, surplusbuycount_);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaStartResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_surplusBuyCount;
        break;
      }

      // optional int32 surplusBuyCount = 4;
      case 4: {
        if (tag == 32) {
         parse_surplusBuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surplusbuycount_)));
          set_has_surplusbuycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaStartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaStartResponse)
  return false;
#undef DO_
}

void ArenaStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaStartResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // optional int32 surplusBuyCount = 4;
  if (has_surplusbuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->surplusbuycount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaStartResponse)
}

int ArenaStartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 surplusBuyCount = 4;
    if (has_surplusbuycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surplusbuycount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaStartResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaStartResponse*>(&from));
}

void ArenaStartResponse::MergeFrom(const ArenaStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_surplusbuycount()) {
      set_surplusbuycount(from.surplusbuycount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaStartResponse::CopyFrom(const ArenaStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaStartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaStartResponse::Swap(ArenaStartResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(msg_, other->msg_);
    std::swap(gold_, other->gold_);
    std::swap(surplusbuycount_, other->surplusbuycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaStartResponse::GetTypeName() const {
  return "main.ArenaStartResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaEndFightRequest::kQuickFieldNumber;
const int ArenaEndFightRequest::kIsWinFieldNumber;
#endif  // !_MSC_VER

ArenaEndFightRequest::ArenaEndFightRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaEndFightRequest)
}

void ArenaEndFightRequest::InitAsDefaultInstance() {
}

ArenaEndFightRequest::ArenaEndFightRequest(const ArenaEndFightRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaEndFightRequest)
}

void ArenaEndFightRequest::SharedCtor() {
  _cached_size_ = 0;
  quick_ = false;
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaEndFightRequest::~ArenaEndFightRequest() {
  // @@protoc_insertion_point(destructor:main.ArenaEndFightRequest)
  SharedDtor();
}

void ArenaEndFightRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaEndFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaEndFightRequest& ArenaEndFightRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaEndFightRequest* ArenaEndFightRequest::default_instance_ = NULL;

ArenaEndFightRequest* ArenaEndFightRequest::New() const {
  return new ArenaEndFightRequest;
}

void ArenaEndFightRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaEndFightRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(quick_, iswin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaEndFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaEndFightRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool quick = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quick_)));
          set_has_quick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isWin;
        break;
      }

      // optional bool isWin = 2;
      case 2: {
        if (tag == 16) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaEndFightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaEndFightRequest)
  return false;
#undef DO_
}

void ArenaEndFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaEndFightRequest)
  // required bool quick = 1;
  if (has_quick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->quick(), output);
  }

  // optional bool isWin = 2;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iswin(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaEndFightRequest)
}

int ArenaEndFightRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool quick = 1;
    if (has_quick()) {
      total_size += 1 + 1;
    }

    // optional bool isWin = 2;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaEndFightRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaEndFightRequest*>(&from));
}

void ArenaEndFightRequest::MergeFrom(const ArenaEndFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quick()) {
      set_quick(from.quick());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaEndFightRequest::CopyFrom(const ArenaEndFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaEndFightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaEndFightRequest::Swap(ArenaEndFightRequest* other) {
  if (other != this) {
    std::swap(quick_, other->quick_);
    std::swap(iswin_, other->iswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaEndFightRequest::GetTypeName() const {
  return "main.ArenaEndFightRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaEndFightResponse::kIsWinFieldNumber;
const int ArenaEndFightResponse::kBeforeRankFieldNumber;
const int ArenaEndFightResponse::kAfterRankFieldNumber;
const int ArenaEndFightResponse::kCoinsFieldNumber;
const int ArenaEndFightResponse::kCountFieldNumber;
const int ArenaEndFightResponse::kMaxCountFieldNumber;
#endif  // !_MSC_VER

ArenaEndFightResponse::ArenaEndFightResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaEndFightResponse)
}

void ArenaEndFightResponse::InitAsDefaultInstance() {
}

ArenaEndFightResponse::ArenaEndFightResponse(const ArenaEndFightResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaEndFightResponse)
}

void ArenaEndFightResponse::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  beforerank_ = 0;
  afterrank_ = 0;
  coins_ = 0;
  count_ = 0;
  maxcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaEndFightResponse::~ArenaEndFightResponse() {
  // @@protoc_insertion_point(destructor:main.ArenaEndFightResponse)
  SharedDtor();
}

void ArenaEndFightResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaEndFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaEndFightResponse& ArenaEndFightResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaEndFightResponse* ArenaEndFightResponse::default_instance_ = NULL;

ArenaEndFightResponse* ArenaEndFightResponse::New() const {
  return new ArenaEndFightResponse;
}

void ArenaEndFightResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaEndFightResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(iswin_, maxcount_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaEndFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaEndFightResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_beforeRank;
        break;
      }

      // required int32 beforeRank = 2;
      case 2: {
        if (tag == 16) {
         parse_beforeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beforerank_)));
          set_has_beforerank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_afterRank;
        break;
      }

      // required int32 afterRank = 3;
      case 3: {
        if (tag == 24) {
         parse_afterRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterrank_)));
          set_has_afterrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coins;
        break;
      }

      // required int32 coins = 4;
      case 4: {
        if (tag == 32) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxCount;
        break;
      }

      // required int32 maxCount = 6;
      case 6: {
        if (tag == 48) {
         parse_maxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaEndFightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaEndFightResponse)
  return false;
#undef DO_
}

void ArenaEndFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaEndFightResponse)
  // required bool isWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  // required int32 beforeRank = 2;
  if (has_beforerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beforerank(), output);
  }

  // required int32 afterRank = 3;
  if (has_afterrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->afterrank(), output);
  }

  // required int32 coins = 4;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coins(), output);
  }

  // required int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // required int32 maxCount = 6;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxcount(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaEndFightResponse)
}

int ArenaEndFightResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // required int32 beforeRank = 2;
    if (has_beforerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beforerank());
    }

    // required int32 afterRank = 3;
    if (has_afterrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterrank());
    }

    // required int32 coins = 4;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

    // required int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 maxCount = 6;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaEndFightResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaEndFightResponse*>(&from));
}

void ArenaEndFightResponse::MergeFrom(const ArenaEndFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_beforerank()) {
      set_beforerank(from.beforerank());
    }
    if (from.has_afterrank()) {
      set_afterrank(from.afterrank());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaEndFightResponse::CopyFrom(const ArenaEndFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaEndFightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ArenaEndFightResponse::Swap(ArenaEndFightResponse* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(beforerank_, other->beforerank_);
    std::swap(afterrank_, other->afterrank_);
    std::swap(coins_, other->coins_);
    std::swap(count_, other->count_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaEndFightResponse::GetTypeName() const {
  return "main.ArenaEndFightResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaGetRewardRequest::ArenaGetRewardRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaGetRewardRequest)
}

void ArenaGetRewardRequest::InitAsDefaultInstance() {
}

ArenaGetRewardRequest::ArenaGetRewardRequest(const ArenaGetRewardRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaGetRewardRequest)
}

void ArenaGetRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaGetRewardRequest::~ArenaGetRewardRequest() {
  // @@protoc_insertion_point(destructor:main.ArenaGetRewardRequest)
  SharedDtor();
}

void ArenaGetRewardRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaGetRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaGetRewardRequest& ArenaGetRewardRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaGetRewardRequest* ArenaGetRewardRequest::default_instance_ = NULL;

ArenaGetRewardRequest* ArenaGetRewardRequest::New() const {
  return new ArenaGetRewardRequest;
}

void ArenaGetRewardRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaGetRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaGetRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaGetRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaGetRewardRequest)
  return false;
#undef DO_
}

void ArenaGetRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaGetRewardRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaGetRewardRequest)
}

int ArenaGetRewardRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaGetRewardRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaGetRewardRequest*>(&from));
}

void ArenaGetRewardRequest::MergeFrom(const ArenaGetRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaGetRewardRequest::CopyFrom(const ArenaGetRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaGetRewardRequest::IsInitialized() const {

  return true;
}

void ArenaGetRewardRequest::Swap(ArenaGetRewardRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaGetRewardRequest::GetTypeName() const {
  return "main.ArenaGetRewardRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaGetRewardResponse::kStateFieldNumber;
const int ArenaGetRewardResponse::kZhengfudianFieldNumber;
#endif  // !_MSC_VER

ArenaGetRewardResponse::ArenaGetRewardResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaGetRewardResponse)
}

void ArenaGetRewardResponse::InitAsDefaultInstance() {
}

ArenaGetRewardResponse::ArenaGetRewardResponse(const ArenaGetRewardResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaGetRewardResponse)
}

void ArenaGetRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  zhengfudian_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaGetRewardResponse::~ArenaGetRewardResponse() {
  // @@protoc_insertion_point(destructor:main.ArenaGetRewardResponse)
  SharedDtor();
}

void ArenaGetRewardResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaGetRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaGetRewardResponse& ArenaGetRewardResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaGetRewardResponse* ArenaGetRewardResponse::default_instance_ = NULL;

ArenaGetRewardResponse* ArenaGetRewardResponse::New() const {
  return new ArenaGetRewardResponse;
}

void ArenaGetRewardResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaGetRewardResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, zhengfudian_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaGetRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaGetRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zhengfudian;
        break;
      }

      // required int32 zhengfudian = 2;
      case 2: {
        if (tag == 16) {
         parse_zhengfudian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhengfudian_)));
          set_has_zhengfudian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaGetRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaGetRewardResponse)
  return false;
#undef DO_
}

void ArenaGetRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaGetRewardResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // required int32 zhengfudian = 2;
  if (has_zhengfudian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zhengfudian(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaGetRewardResponse)
}

int ArenaGetRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 zhengfudian = 2;
    if (has_zhengfudian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhengfudian());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaGetRewardResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaGetRewardResponse*>(&from));
}

void ArenaGetRewardResponse::MergeFrom(const ArenaGetRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_zhengfudian()) {
      set_zhengfudian(from.zhengfudian());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaGetRewardResponse::CopyFrom(const ArenaGetRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaGetRewardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ArenaGetRewardResponse::Swap(ArenaGetRewardResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(zhengfudian_, other->zhengfudian_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaGetRewardResponse::GetTypeName() const {
  return "main.ArenaGetRewardResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaBuyFightCountRequest::ArenaBuyFightCountRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaBuyFightCountRequest)
}

void ArenaBuyFightCountRequest::InitAsDefaultInstance() {
}

ArenaBuyFightCountRequest::ArenaBuyFightCountRequest(const ArenaBuyFightCountRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaBuyFightCountRequest)
}

void ArenaBuyFightCountRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaBuyFightCountRequest::~ArenaBuyFightCountRequest() {
  // @@protoc_insertion_point(destructor:main.ArenaBuyFightCountRequest)
  SharedDtor();
}

void ArenaBuyFightCountRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaBuyFightCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaBuyFightCountRequest& ArenaBuyFightCountRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaBuyFightCountRequest* ArenaBuyFightCountRequest::default_instance_ = NULL;

ArenaBuyFightCountRequest* ArenaBuyFightCountRequest::New() const {
  return new ArenaBuyFightCountRequest;
}

void ArenaBuyFightCountRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaBuyFightCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaBuyFightCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaBuyFightCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaBuyFightCountRequest)
  return false;
#undef DO_
}

void ArenaBuyFightCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaBuyFightCountRequest)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaBuyFightCountRequest)
}

int ArenaBuyFightCountRequest::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaBuyFightCountRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaBuyFightCountRequest*>(&from));
}

void ArenaBuyFightCountRequest::MergeFrom(const ArenaBuyFightCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaBuyFightCountRequest::CopyFrom(const ArenaBuyFightCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaBuyFightCountRequest::IsInitialized() const {

  return true;
}

void ArenaBuyFightCountRequest::Swap(ArenaBuyFightCountRequest* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaBuyFightCountRequest::GetTypeName() const {
  return "main.ArenaBuyFightCountRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaBuyFightCountResponse::kStateFieldNumber;
const int ArenaBuyFightCountResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

ArenaBuyFightCountResponse::ArenaBuyFightCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaBuyFightCountResponse)
}

void ArenaBuyFightCountResponse::InitAsDefaultInstance() {
}

ArenaBuyFightCountResponse::ArenaBuyFightCountResponse(const ArenaBuyFightCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaBuyFightCountResponse)
}

void ArenaBuyFightCountResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaBuyFightCountResponse::~ArenaBuyFightCountResponse() {
  // @@protoc_insertion_point(destructor:main.ArenaBuyFightCountResponse)
  SharedDtor();
}

void ArenaBuyFightCountResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaBuyFightCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaBuyFightCountResponse& ArenaBuyFightCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaBuyFightCountResponse* ArenaBuyFightCountResponse::default_instance_ = NULL;

ArenaBuyFightCountResponse* ArenaBuyFightCountResponse::New() const {
  return new ArenaBuyFightCountResponse;
}

void ArenaBuyFightCountResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaBuyFightCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaBuyFightCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaBuyFightCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaBuyFightCountResponse)
  return false;
#undef DO_
}

void ArenaBuyFightCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaBuyFightCountResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaBuyFightCountResponse)
}

int ArenaBuyFightCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaBuyFightCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaBuyFightCountResponse*>(&from));
}

void ArenaBuyFightCountResponse::MergeFrom(const ArenaBuyFightCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaBuyFightCountResponse::CopyFrom(const ArenaBuyFightCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaBuyFightCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaBuyFightCountResponse::Swap(ArenaBuyFightCountResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaBuyFightCountResponse::GetTypeName() const {
  return "main.ArenaBuyFightCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaFightReport::kRoleIdFieldNumber;
const int ArenaFightReport::kNickNameFieldNumber;
const int ArenaFightReport::kNationIdFieldNumber;
const int ArenaFightReport::kOfficeItemIdFieldNumber;
const int ArenaFightReport::kLevelFieldNumber;
const int ArenaFightReport::kBeforeRankFieldNumber;
const int ArenaFightReport::kAfterRankFieldNumber;
const int ArenaFightReport::kIsWinFieldNumber;
const int ArenaFightReport::kIsAttactFieldNumber;
const int ArenaFightReport::kTimeFieldNumber;
#endif  // !_MSC_VER

ArenaFightReport::ArenaFightReport()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaFightReport)
}

void ArenaFightReport::InitAsDefaultInstance() {
}

ArenaFightReport::ArenaFightReport(const ArenaFightReport& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaFightReport)
}

void ArenaFightReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nationid_ = 0;
  officeitemid_ = 0;
  level_ = 0;
  beforerank_ = 0;
  afterrank_ = 0;
  iswin_ = false;
  isattact_ = false;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaFightReport::~ArenaFightReport() {
  // @@protoc_insertion_point(destructor:main.ArenaFightReport)
  SharedDtor();
}

void ArenaFightReport::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaFightReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaFightReport& ArenaFightReport::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaFightReport* ArenaFightReport::default_instance_ = NULL;

ArenaFightReport* ArenaFightReport::New() const {
  return new ArenaFightReport;
}

void ArenaFightReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaFightReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, afterrank_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    iswin_ = false;
  }
  if (_has_bits_[8 / 32] & 768) {
    isattact_ = false;
    time_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaFightReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaFightReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // required string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nationId;
        break;
      }

      // required int32 nationId = 3;
      case 3: {
        if (tag == 24) {
         parse_nationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nationid_)));
          set_has_nationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_officeItemId;
        break;
      }

      // required int32 officeItemId = 4;
      case 4: {
        if (tag == 32) {
         parse_officeItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officeitemid_)));
          set_has_officeitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_beforeRank;
        break;
      }

      // required int32 beforeRank = 6;
      case 6: {
        if (tag == 48) {
         parse_beforeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beforerank_)));
          set_has_beforerank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_afterRank;
        break;
      }

      // required int32 afterRank = 7;
      case 7: {
        if (tag == 56) {
         parse_afterRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterrank_)));
          set_has_afterrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isWin;
        break;
      }

      // required bool isWin = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isAttact;
        break;
      }

      // required bool isAttact = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_isAttact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattact_)));
          set_has_isattact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_time;
        break;
      }

      // required int64 time = 10;
      case 10: {
        if (tag == 80) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaFightReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaFightReport)
  return false;
#undef DO_
}

void ArenaFightReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaFightReport)
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required int32 nationId = 3;
  if (has_nationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nationid(), output);
  }

  // required int32 officeItemId = 4;
  if (has_officeitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->officeitemid(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 beforeRank = 6;
  if (has_beforerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->beforerank(), output);
  }

  // required int32 afterRank = 7;
  if (has_afterrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->afterrank(), output);
  }

  // required bool isWin = 8 [default = false];
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iswin(), output);
  }

  // required bool isAttact = 9 [default = false];
  if (has_isattact()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isattact(), output);
  }

  // required int64 time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaFightReport)
}

int ArenaFightReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 nationId = 3;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nationid());
    }

    // required int32 officeItemId = 4;
    if (has_officeitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officeitemid());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 beforeRank = 6;
    if (has_beforerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beforerank());
    }

    // required int32 afterRank = 7;
    if (has_afterrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterrank());
    }

    // required bool isWin = 8 [default = false];
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool isAttact = 9 [default = false];
    if (has_isattact()) {
      total_size += 1 + 1;
    }

    // required int64 time = 10;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaFightReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaFightReport*>(&from));
}

void ArenaFightReport::MergeFrom(const ArenaFightReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_nationid()) {
      set_nationid(from.nationid());
    }
    if (from.has_officeitemid()) {
      set_officeitemid(from.officeitemid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_beforerank()) {
      set_beforerank(from.beforerank());
    }
    if (from.has_afterrank()) {
      set_afterrank(from.afterrank());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isattact()) {
      set_isattact(from.isattact());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaFightReport::CopyFrom(const ArenaFightReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaFightReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void ArenaFightReport::Swap(ArenaFightReport* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(nickname_, other->nickname_);
    std::swap(nationid_, other->nationid_);
    std::swap(officeitemid_, other->officeitemid_);
    std::swap(level_, other->level_);
    std::swap(beforerank_, other->beforerank_);
    std::swap(afterrank_, other->afterrank_);
    std::swap(iswin_, other->iswin_);
    std::swap(isattact_, other->isattact_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaFightReport::GetTypeName() const {
  return "main.ArenaFightReport";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaBaseInfo::kZhengfudianFieldNumber;
const int ArenaBaseInfo::kCountFieldNumber;
const int ArenaBaseInfo::kMaxCountFieldNumber;
const int ArenaBaseInfo::kInfoFieldNumber;
const int ArenaBaseInfo::kSurplusTimeFieldNumber;
const int ArenaBaseInfo::kCanRewardCountFieldNumber;
const int ArenaBaseInfo::kCdTimeFieldNumber;
#endif  // !_MSC_VER

ArenaBaseInfo::ArenaBaseInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaBaseInfo)
}

void ArenaBaseInfo::InitAsDefaultInstance() {
}

ArenaBaseInfo::ArenaBaseInfo(const ArenaBaseInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaBaseInfo)
}

void ArenaBaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zhengfudian_ = 0;
  count_ = 0;
  maxcount_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  surplustime_ = GOOGLE_LONGLONG(0);
  canrewardcount_ = GOOGLE_LONGLONG(0);
  cdtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaBaseInfo::~ArenaBaseInfo() {
  // @@protoc_insertion_point(destructor:main.ArenaBaseInfo)
  SharedDtor();
}

void ArenaBaseInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaBaseInfo& ArenaBaseInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaBaseInfo* ArenaBaseInfo::default_instance_ = NULL;

ArenaBaseInfo* ArenaBaseInfo::New() const {
  return new ArenaBaseInfo;
}

void ArenaBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zhengfudian_, count_);
    ZR_(surplustime_, canrewardcount_);
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zhengfudian = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhengfudian_)));
          set_has_zhengfudian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxCount;
        break;
      }

      // required int32 maxCount = 3;
      case 3: {
        if (tag == 24) {
         parse_maxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // required string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_surplusTime;
        break;
      }

      // required int64 surplusTime = 5;
      case 5: {
        if (tag == 40) {
         parse_surplusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &surplustime_)));
          set_has_surplustime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_canRewardCount;
        break;
      }

      // required int64 canRewardCount = 6;
      case 6: {
        if (tag == 48) {
         parse_canRewardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &canrewardcount_)));
          set_has_canrewardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cdTime;
        break;
      }

      // required int32 cdTime = 7;
      case 7: {
        if (tag == 56) {
         parse_cdTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaBaseInfo)
  return false;
#undef DO_
}

void ArenaBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaBaseInfo)
  // required int32 zhengfudian = 1;
  if (has_zhengfudian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zhengfudian(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 maxCount = 3;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxcount(), output);
  }

  // required string info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // required int64 surplusTime = 5;
  if (has_surplustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->surplustime(), output);
  }

  // required int64 canRewardCount = 6;
  if (has_canrewardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->canrewardcount(), output);
  }

  // required int32 cdTime = 7;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cdtime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaBaseInfo)
}

int ArenaBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 zhengfudian = 1;
    if (has_zhengfudian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhengfudian());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 maxCount = 3;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

    // required string info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // required int64 surplusTime = 5;
    if (has_surplustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->surplustime());
    }

    // required int64 canRewardCount = 6;
    if (has_canrewardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->canrewardcount());
    }

    // required int32 cdTime = 7;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdtime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaBaseInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaBaseInfo*>(&from));
}

void ArenaBaseInfo::MergeFrom(const ArenaBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zhengfudian()) {
      set_zhengfudian(from.zhengfudian());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_surplustime()) {
      set_surplustime(from.surplustime());
    }
    if (from.has_canrewardcount()) {
      set_canrewardcount(from.canrewardcount());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaBaseInfo::CopyFrom(const ArenaBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ArenaBaseInfo::Swap(ArenaBaseInfo* other) {
  if (other != this) {
    std::swap(zhengfudian_, other->zhengfudian_);
    std::swap(count_, other->count_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(info_, other->info_);
    std::swap(surplustime_, other->surplustime_);
    std::swap(canrewardcount_, other->canrewardcount_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaBaseInfo::GetTypeName() const {
  return "main.ArenaBaseInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRoleInfo::kRoleIdFieldNumber;
const int ArenaRoleInfo::kNickNameFieldNumber;
const int ArenaRoleInfo::kNationIdFieldNumber;
const int ArenaRoleInfo::kOfficeItemIdFieldNumber;
const int ArenaRoleInfo::kLevelFieldNumber;
const int ArenaRoleInfo::kRankFieldNumber;
const int ArenaRoleInfo::kCombatValueFieldNumber;
const int ArenaRoleInfo::kZhengfudianFieldNumber;
#endif  // !_MSC_VER

ArenaRoleInfo::ArenaRoleInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:main.ArenaRoleInfo)
}

void ArenaRoleInfo::InitAsDefaultInstance() {
}

ArenaRoleInfo::ArenaRoleInfo(const ArenaRoleInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:main.ArenaRoleInfo)
}

void ArenaRoleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nationid_ = 0;
  officeitemid_ = 0;
  level_ = 0;
  rank_ = 0;
  combatvalue_ = 0;
  zhengfudian_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRoleInfo::~ArenaRoleInfo() {
  // @@protoc_insertion_point(destructor:main.ArenaRoleInfo)
  SharedDtor();
}

void ArenaRoleInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaRoleInfo& ArenaRoleInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaModule_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaModule_2eproto();
#endif
  return *default_instance_;
}

ArenaRoleInfo* ArenaRoleInfo::default_instance_ = NULL;

ArenaRoleInfo* ArenaRoleInfo::New() const {
  return new ArenaRoleInfo;
}

void ArenaRoleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaRoleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(roleid_, zhengfudian_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ArenaRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:main.ArenaRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // required string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nationId;
        break;
      }

      // required int32 nationId = 3;
      case 3: {
        if (tag == 24) {
         parse_nationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nationid_)));
          set_has_nationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_officeItemId;
        break;
      }

      // required int32 officeItemId = 4;
      case 4: {
        if (tag == 32) {
         parse_officeItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officeitemid_)));
          set_has_officeitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // required int32 rank = 6;
      case 6: {
        if (tag == 48) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_combatValue;
        break;
      }

      // required int32 combatValue = 7;
      case 7: {
        if (tag == 56) {
         parse_combatValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatvalue_)));
          set_has_combatvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_zhengfudian;
        break;
      }

      // required int32 zhengfudian = 8;
      case 8: {
        if (tag == 64) {
         parse_zhengfudian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhengfudian_)));
          set_has_zhengfudian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:main.ArenaRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:main.ArenaRoleInfo)
  return false;
#undef DO_
}

void ArenaRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:main.ArenaRoleInfo)
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required int32 nationId = 3;
  if (has_nationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nationid(), output);
  }

  // required int32 officeItemId = 4;
  if (has_officeitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->officeitemid(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank(), output);
  }

  // required int32 combatValue = 7;
  if (has_combatvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->combatvalue(), output);
  }

  // required int32 zhengfudian = 8;
  if (has_zhengfudian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->zhengfudian(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:main.ArenaRoleInfo)
}

int ArenaRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 nationId = 3;
    if (has_nationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nationid());
    }

    // required int32 officeItemId = 4;
    if (has_officeitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officeitemid());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 combatValue = 7;
    if (has_combatvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatvalue());
    }

    // required int32 zhengfudian = 8;
    if (has_zhengfudian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhengfudian());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRoleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaRoleInfo*>(&from));
}

void ArenaRoleInfo::MergeFrom(const ArenaRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_nationid()) {
      set_nationid(from.nationid());
    }
    if (from.has_officeitemid()) {
      set_officeitemid(from.officeitemid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_combatvalue()) {
      set_combatvalue(from.combatvalue());
    }
    if (from.has_zhengfudian()) {
      set_zhengfudian(from.zhengfudian());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ArenaRoleInfo::CopyFrom(const ArenaRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ArenaRoleInfo::Swap(ArenaRoleInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(nickname_, other->nickname_);
    std::swap(nationid_, other->nationid_);
    std::swap(officeitemid_, other->officeitemid_);
    std::swap(level_, other->level_);
    std::swap(rank_, other->rank_);
    std::swap(combatvalue_, other->combatvalue_);
    std::swap(zhengfudian_, other->zhengfudian_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaRoleInfo::GetTypeName() const {
  return "main.ArenaRoleInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)
